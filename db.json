{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"9b4beaffc6e876cc9bc9443471003650213e6a60","modified":1603262361436},{"_id":"source/_data/friends.json","hash":"8b454e8017b9fe5f257c8c75c5a39666198bf99d","modified":1603262361437},{"_id":"source/_posts/haar_wavelet_optimization.md","hash":"99683baaa7093c206a3a945b3d7edc35808bc1ea","modified":1605927529566},{"_id":"source/_posts/haar_wavelet.md","hash":"da95fc03cb73a3f05a6955c4223c074d29866555","modified":1605927500610},{"_id":"source/_posts/hello-world.md","hash":"9ec7f57234f91ec1e9a7a044eb2db41184707df1","modified":1605927533041},{"_id":"source/about/index.md","hash":"5c0877fc438a3be6aec079546f245a140c59e3df","modified":1603262361438},{"_id":"source/categories/index.md","hash":"a82064f42e7d9429cf1c2b718cfe4354adb24ffc","modified":1603262361439},{"_id":"source/contact/index.md","hash":"1e41a09c02c43a8a27b1828e767b119aa3c2b668","modified":1603262361439},{"_id":"source/friends/index.md","hash":"3ddf8b788c81987563344a1ac4a03263286e1395","modified":1603262361440},{"_id":"source/tags/index.md","hash":"33209013ac3e6bb71566d294b5a0503e91b8b04f","modified":1603262361440},{"_id":"source/_posts/Algorithm/Binary Search/Binary Search.md","hash":"bb7875ab4d903088000b16ec16014fd506659fd8","modified":1612612253883},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1602914090000},{"_id":"themes/hexo-theme-matery/README.md","hash":"56299cf1fe60a11fef61b3948fe148f995df747e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1602914090000},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"0fdf818476a444663cc8ffa2f194199d9fd93508","modified":1602914090000},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"efb00dc75574e8ae9de02d98ae2c9172c3b0f002","modified":1604499934176},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1602914090000},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1602914090000},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"72fb5af3fc2f8955e2eb10926bbe4532a04ccd1b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"f5d6459bed0f4ecb214f2dbff5b2207a80c44f66","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"c7453d5b064d42529e8c9fdef52d0901d51acb9b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"28617bf2a35a4269eba6df466acd174e416d2d1e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"4b5476478ba12183b7c97a33d5545fc53be362a8","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"a8c9abd8cf806235cadb087a5acca3f9182b76ea","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"d05926e79aa6dfc235193b9d8c6aa03118b0eade","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"81eca110e533693a5369c0cc9106bf0f0432ee37","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"b53f4b6b7b2d992c904a9bf98b504fba247b220e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"d559d402b4d4a0931821fe6e22a8831fc43a953d","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"b27e97ec8ae77d040d328f7dcfc092405386faa5","modified":1603262361443},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"a52ac7807df520e59d0cacf1b38a97ccf8ff6bdf","modified":1603262361444},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1603269901310},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1603269901312},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1603800277587},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1603269901308},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1602914090000},{"_id":"public/search.xml","hash":"49047bc8f50ee22b46cc780a345b879146560117","modified":1618726953426},{"_id":"public/404.html","hash":"8854716e72dcbd96cffa57836a38d2ae7bda077e","modified":1618726953426},{"_id":"public/about/index.html","hash":"16d444c256607ca84f00360e6d5150abc771675d","modified":1618726953426},{"_id":"public/categories/index.html","hash":"ea007a06c3f3bc6c7e9511448a8f1209045be4bb","modified":1618726953426},{"_id":"public/contact/index.html","hash":"d03d5c85dab332198eb95615605bd4abbb7e8df1","modified":1618726953426},{"_id":"public/friends/index.html","hash":"2bcbccf959e4fb904f7b042117a51e7f6358ab51","modified":1618726953426},{"_id":"public/tags/index.html","hash":"183d6f25e821c86660aeaa0ab2fa8506d7fea17f","modified":1618726953426},{"_id":"public/2020/11/03/haar-wavelet-optimization/index.html","hash":"138995dd4a649696d838bb4352f81c503e4a328d","modified":1605927086340},{"_id":"public/2020/10/27/haar-wavelet/index.html","hash":"811fc11cc903c4f19fa68f977e4c1e6e9797fdda","modified":1605926713885},{"_id":"public/2020/10/21/algorithm/binary-search/binary-search/index.html","hash":"ae7b2f900c965f3e90e3f21f4c496f4637d46fff","modified":1605926713885},{"_id":"public/2020/10/21/hello-world/index.html","hash":"6b8b3725f1171c25106cf75e9f0d2c326fdd7aa3","modified":1618726953426},{"_id":"public/archives/index.html","hash":"4c529bbe2347d30ae3cb0d97f0aea67a5f6a3068","modified":1618726953426},{"_id":"public/archives/2020/index.html","hash":"270e6db3c9e9c7b3654453a51245aa01bd00d483","modified":1618726953426},{"_id":"public/archives/2020/10/index.html","hash":"bd675ac001129f3769d95ad0caf32f7e07cbb014","modified":1618726953426},{"_id":"public/archives/2020/11/index.html","hash":"51ca7e4d437bd3f0aff02deb32b4ecfb0e3d86b0","modified":1618726953426},{"_id":"public/categories/小波变换/index.html","hash":"fdedc3b860fde12bbc20298018600ab68956d0d3","modified":1618726953426},{"_id":"public/categories/小波变换/Fanrencli/index.html","hash":"76fd78a58191ed94243ac5d0f86177533da2a16b","modified":1605925475244},{"_id":"public/categories/Algorithm/index.html","hash":"36b7a26f9d2a803896783123005dfe4369e9a81a","modified":1618726953426},{"_id":"public/categories/Algorithm/Fanrencli/index.html","hash":"4de28809580a1bfc589acd5adcd89a8e8dc7d977","modified":1605925475244},{"_id":"public/index.html","hash":"5c37128da29657e113796b175c4bd9ffd66856fc","modified":1618726953426},{"_id":"public/tags/Haar-Wavelet/index.html","hash":"bceb3f02fb7498e8691bf0fcac187da3c749d99d","modified":1618726953426},{"_id":"public/tags/Python/index.html","hash":"0aac4f987a641a2568d09e08ddce11811892f4af","modified":1618726953426},{"_id":"public/tags/python/index.html","hash":"81bed86d4b56e23e3693b73dbe1c51077fc45d49","modified":1605925623546},{"_id":"public/tags/C/index.html","hash":"e15a9a982cbb9f94372c97f1351f148d7c9d9f1a","modified":1618726953426},{"_id":"public/tags/Binary-Search/index.html","hash":"2188ee17ed312811923840c844f7bf537dee75d6","modified":1618726953426},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1605925475244},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1605925475244},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1605925475244},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1605925475244},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1605925475244},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1605925475244},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1605925475244},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1605925475244},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1605925475244},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1605925475244},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1605925475244},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1605925475244},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1605925475244},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1605925475244},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1605925475244},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1605925475244},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1605925475244},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1605925475244},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1605925475244},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1605925475244},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1605925475244},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1605925475244},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1605925475244},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1605925475244},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1605925475244},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1605925475244},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1605925475244},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1605925475244},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1605925475244},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1605925475244},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1605925475244},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1605925475244},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1605925475244},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1605925475244},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1605925475244},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1605925475244},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1605925475244},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1605925475244},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1605925475244},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1605925475244},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1605925475244},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1605925475244},{"_id":"public/medias/reward/alipay.jpg","hash":"b27e97ec8ae77d040d328f7dcfc092405386faa5","modified":1605925475244},{"_id":"public/medias/reward/wechat.png","hash":"a52ac7807df520e59d0cacf1b38a97ccf8ff6bdf","modified":1605925475244},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1605925475244},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1605925475244},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1605925475244},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1605925475244},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1605925475244},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1605925475244},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1605925475244},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1605925475244},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1605925475244},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1605925475244},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1605925475244},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1605925475244},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1605925475244},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1605925475244},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1605925475244},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1605925475244},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1605925475244},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1605925475244},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1605925475244},{"_id":"public/js/search.js","hash":"d559d402b4d4a0931821fe6e22a8831fc43a953d","modified":1605925475244},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1605925475244},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1605925475244},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1605925475244},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1605925475244},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1605925475244},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1605925475244},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1605925475244},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1605925475244},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1605925475244},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1605925475244},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1605925475244},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1605925475244},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1605925475244},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1605925475244},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1605925475244},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1605925475244},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1605925475244},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1605925475244},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1605925475244},{"_id":"public/medias/banner/4.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1605925475244},{"_id":"public/medias/banner/5.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1605925475244},{"_id":"public/medias/banner/6.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1605925475244},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1605925475244},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1605925475244},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1605925475244},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1605925475244},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1605925475244},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1605925475244},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1605925475244},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1605925475244},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1605925475244},{"_id":"public/css/matery.css","hash":"b53f4b6b7b2d992c904a9bf98b504fba247b220e","modified":1605925475244},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1605925475244},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1605925475244},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1605925475244},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1605925475244},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1605925475244},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1605925475244},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1605925475244},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1605925475244},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1605925475244},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1605925475244},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1605925475244},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1605925475244},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1605925475244},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1605925475244},{"_id":"public/medias/banner/3.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1605925475244},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1605925475244},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1605925475244},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1605925475244},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1605925475244},{"_id":"public/tags/Fanrencli/index.html","hash":"f9323d6bb0d066fc41d198e6664a8196beb477f5","modified":1618726953426},{"_id":"source/_posts/Algorithm/129.sum-root-to-leaf-numbers.md","hash":"7e4c12f6271dc0531a54ef4e78242e45d6436cb0","modified":1605926707636},{"_id":"public/2020/11/21/algorithm/129.sum-root-to-leaf-numbers/index.html","hash":"8799ac99906540abb92e0fdf6565679d91ddc3c5","modified":1605926713885},{"_id":"source/_posts/Algorithm/Binary Search/129.sum-root-to-leaf-numbers.md","hash":"cc0fa331939229bece2ebc0efb9b1ab6aa4da516","modified":1607237990298},{"_id":"public/2020/11/21/algorithm/binary-search/129.sum-root-to-leaf-numbers/index.html","hash":"88a7646da3596c89a1c6c37f9d96c10ccc6546c8","modified":1618726953426},{"_id":"public/2020/11/21/algorithm/binary-search/binary-search/index.html","hash":"ef93d1d61f2f91191310ba675122c4d9a0811e90","modified":1618726953426},{"_id":"public/2020/10/23/haar-wavelet-optimization/index.html","hash":"5adfcd8d46729f1f9330f9d46bd9f8221cc31f1f","modified":1618726953426},{"_id":"public/2020/10/23/haar-wavelet/index.html","hash":"2927d41420ea41f56d4dc856ad6d23a5114aa6c5","modified":1618726953426},{"_id":"source/_posts/OpenNI2-OpenCV.md","hash":"c6f10f6cbacdbbf2cb467e3a2f4e8109cd479e54","modified":1611730725353},{"_id":"public/2020/12/06/openni2-opencv/index.html","hash":"37879f195acdfb71def3366fe4dca948412db9df","modified":1618726953426},{"_id":"public/archives/2020/12/index.html","hash":"59a5803deb644be91c1176711253677bed659095","modified":1618726953426},{"_id":"public/categories/环境配置/index.html","hash":"ddb07f535631d2b9da8004937fef7cef0555c3f8","modified":1618726953426},{"_id":"public/tags/Orbbec-OpenNI/index.html","hash":"a172ffdd2c58390bba4e76527d859ca7317fe201","modified":1618726953426},{"_id":"public/tags/OpenCV/index.html","hash":"7eb1370a16729f94e6dcc45f4aa406c5324a5b18","modified":1618726953426},{"_id":"source/_posts/8086/8086.md","hash":"7d0522338cb5c585a85b23550367ecb22cf08b2d","modified":1611736741289},{"_id":"public/2021/01/27/8086/8086/index.html","hash":"f7c1cca2a74006e0e1a4d8011095a459717e92a5","modified":1618726953426},{"_id":"public/archives/2021/index.html","hash":"f102c2cc70294e2ffd0c1f3414216926a2bdbfd0","modified":1618726953426},{"_id":"public/archives/2021/01/index.html","hash":"10c0aa429a834e96dd4dcd756358c8d3cff27ddc","modified":1618726953426},{"_id":"public/tags/Assembly-Language/index.html","hash":"1422ddc8b833d9e96a0c9a61e85cf09f01a53d85","modified":1611730651588},{"_id":"public/categories/Assembly-Language/index.html","hash":"348d161d1da38b702a6a9aacc2514a18f9bbab58","modified":1618726953426},{"_id":"public/tags/8086/index.html","hash":"a02e96b7648a66e33385e8a1ed0abb21bd551365","modified":1618726953426},{"_id":"source/_posts/feature_extractor/resnet.md","hash":"fc9ea5c936e92bc1ccaa32645e63e2f62f5dbea6","modified":1618725860612},{"_id":"source/_posts/jsis3d/jsis3d.md","hash":"d9823d9bcd87a0a6435672ec7f95c5399e10bd32","modified":1618725713272},{"_id":"source/_posts/lifeknow/lifeknow.md","hash":"4e1b683c5bea266223dda8a570019335bbd2ed9f","modified":1611731822795},{"_id":"public/2021/02/06/jsis3d/jsis3d/index.html","hash":"bab6738f31213bf33d14341d3b492686ec92346b","modified":1618726953426},{"_id":"public/2020/12/24/lifeknow/lifeknow/index.html","hash":"188d68d00a13c43716f3bd516da3618097fdc061","modified":1618726953426},{"_id":"public/categories/Deep-Learning/index.html","hash":"1d1f744fb3f7a916119318c09290e80ece544ef1","modified":1618726953426},{"_id":"public/categories/Life-Know/index.html","hash":"490d6927c1f4b4b9f9e3c2382f4c3fcb00c59912","modified":1618726953426},{"_id":"public/tags/Jsis3d/index.html","hash":"de11152282a128a5325f858eaf58c4c28032809f","modified":1618726953426},{"_id":"public/archives/2021/02/index.html","hash":"56ec77898ba158bde1f036776a9ce4b44c81c05b","modified":1618726953426},{"_id":"public/2021/04/18/feature-extractor/resnet/index.html","hash":"34fd66e4c17c29e5833f3b3210fe3ee2521cc182","modified":1618726953426},{"_id":"public/archives/2021/04/index.html","hash":"c5013d5634e446352bd3c62e827b27b2ac13609f","modified":1618726953426},{"_id":"public/tags/ResNet101/index.html","hash":"bef1063a9a399520d989287e367e61d58db3107f","modified":1618726953426},{"_id":"source/_posts/feature_extractor/VGG.md","hash":"393ce6f89d6968f908db8517b63b09dbb8b3f92b","modified":1618726934562},{"_id":"public/2021/04/18/feature-extractor/vgg/index.html","hash":"8f513bb8b08fb4972c36ac93dfae044220f07c4b","modified":1618726953426},{"_id":"public/tags/VGG16/index.html","hash":"c7f11e818393180dd16dbf99ad15fb0f1417801c","modified":1618726953426}],"Category":[{"name":"小波变换","_id":"ckhr2kce000044guoctlycazy"},{"name":"Fanrencli","parent":"ckhr2kce000044guoctlycazy","_id":"ckhr2kce7000d4guoenhq4jlc"},{"name":"Algorithm","_id":"ckhr2kcec000q4guoflmidn5y"},{"name":"Fanrencli","parent":"ckhr2kcec000q4guoflmidn5y","_id":"ckhr2kced000t4guo3re70x9w"},{"name":"环境配置","_id":"ckicrxqcz0001vguo0k7c4969"},{"name":"Assembly Language","_id":"ckkf2w5fh0000couodabsf9y5"},{"name":"Deep Learning","_id":"cknmrfu4t000130uohxfa3zyq"},{"name":"Life Know","_id":"cknmrfu4y000430uo41byhm45"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"404","date":"2018-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---","updated":"2020-10-21T06:39:21.436Z","path":"404.html","comments":1,"_id":"ckhr2kcdr00004guo0pwi8w5l","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-10-21T04:36:49.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-10-21 12:36:49\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2020-10-21T06:39:21.438Z","path":"about/index.html","comments":1,"_id":"ckhr2kcdx00024guo4i18htvj","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2020-10-21T04:33:49.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-10-21 12:33:49\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2020-10-21T06:39:21.439Z","path":"categories/index.html","comments":1,"_id":"ckhr2kce200064guo9eu69jri","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"contact","date":"2020-10-21T04:37:08.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-10-21 12:37:08\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2020-10-21T06:39:21.439Z","path":"contact/index.html","comments":1,"_id":"ckhr2kce400084guo51jabyb5","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2020-10-21T04:37:27.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-10-21 12:37:27\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2020-10-21T06:39:21.440Z","path":"friends/index.html","comments":1,"_id":"ckhr2kce500094guo0dbzeds3","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2020-10-21T04:35:14.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-10-21 12:35:14\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-10-21T06:39:21.440Z","path":"tags/index.html","comments":1,"_id":"ckhr2kce7000c4guogsd3ct5c","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"Haar Wavelet（2）","date":"2020-10-23T04:33:49.000Z","top":true,"mathjax":true,"markup":"mmark","author":"Fanrencli","_content":">haar小波变换的图像应用实例（优化）\n\n## 优化目标\n- 针对一维变换的循环处理方式，将使用矩阵运算进行代替\n- 针对二维的分行、列的处理方法，使用矩阵运算代替\n- 边界处理\n\n### 一维处理\n观察[上篇文章](https://fanrencli.cn/2020/10/27/haar-wavelet/)的代码,其中的一维变换代码`haar_dwt`，使用简单的循环处理方法，如下:\n```python \n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)\n```\n显然此种循环处理方法的性能不足，针对这个缺点，本文采用矩阵运算进行代替。首先分析循环的处理过程，转为矩阵方式，如下:\n$$Matrix_{lowfrequency}=\n{1\\over \\sqrt{2}}\n\\begin{pmatrix}\n1&1&0&\\cdots&\\cdots&0\\\\\\\\\n0&0&1&1&\\cdots&0\\\\\\\\\n\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\\\\\\\\n0&\\cdots&\\cdots&0&1&1\\\\\\\\\n\\end{pmatrix}（n*{n\\over 2}）\n$$\n$$Matrix_{highfrequency}=\n{1\\over \\sqrt{2}}\n\\begin{pmatrix}\n1&-1&0&\\cdots&\\cdots&0\\\\\\\\\n0&0&1&-1&\\cdots&0\\\\\\\\\n\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\\\\\\\\n0&\\cdots&\\cdots&0&1&-1\\\\\\\\\n\\end{pmatrix}（n*{n\\over 2}）\n$$\n$$\nLowfrequency=Matrix_{lowfrequency}\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nHighfrequency=Matrix_{highfrequency}\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{roworcol}=\n\\begin{pmatrix}\nLowfrequency\\\\\\\\\nHighfrequency\\\\\\\\\n\\end{pmatrix}\n$$\n由此分析，针对代码进行优化，将矩阵构造处理抽取出来作为一个函数`Create_haar_matrix`，这样便于以后根据图像分辨率进行构建矩阵，并且将$Matrix_{lowfrequency}$与$Matrix_{highfrequency}$合成为一个矩阵T,有以下的运算过程:\n$$\nT=\n\\begin{pmatrix}\nMatrix_{lowfrequency}\\\\\\\\\nMatrix_{highfrequency}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{roworcol}=T\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n代码如下:\n```python\n#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(length):\n    half_length=length//2\n    haar_wavelet_matrix=np.zeros((length,length),dtype=float)\n    for i in range(half_length):\n        haar_wavelet_matrix[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(haar_wavelet_matrix,row_or_col)\n    return Low_High_frequency\n\n```\n### 二维处理\n观察上篇文章的代码,其中的二维变换代码`haar_dwt2D`，使用简单的循环处理方法，如下:\n```python\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n此处代码，分行列分别进行运算，由一维变换过程:\n$$\nimg_{roworcol}=T\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n对此进行拓展得到：\n$$\nimg=T\\cdot\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1n}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nn}\\\\\\\\\n\\end{pmatrix}\n$$\n进而代码如下：\n```python\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n紧接着对代码的这个部分进行思考：\n```python\n    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T\n```\n此部分的代码逻辑过程可描述为：\n$$\nimg_{pic}=\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1n}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nn}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{row}=T \\cdot img_{pic}\n$$\n$$\nimg_{col}=T \\cdot (img_{row})^T\n$$\n$$\nimg_{pic}=(img_{col})^T\n$$\n即：\n$$\nimg_{pic}= (T \\cdot (T \\cdot img_{pic})^T)^T=T\\cdot img_{pic} \\cdot T^T\n$$\n由此将代码进一步转化：\n```python\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix,img),haar_wavelet_matrix.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n### 边界处理\n以上的处理基本解决了代码性能方面的不足，接着对代码的适用性进行考虑，此代码要求图片的分辨率必须为$2^x*2^x$，所以需要针对不是2的次方的图片进行扩展，思路：边界填充。\n> 边缘填充:\n> - 复制法：复制最边缘的像素\n> - 反射法：对称轴\n> - 外包装法：\n> - 常量法：用常量值填充四周\n\n本文选用其中的复制法，作为示例，在`python`中`OpenCV`提供了相关的方法`cv2.copyMakeBorder(src,top, bottom, left, right ,borderType,value)`。\n\n- src : 需要填充的图像\n- top : 图像上的填充边界长度\n- bottom : 图像下面的填充边界长度\n- left : 图像左边的填充边界长度\n- right : 图像右边的填充边界长度\n- borderType : 边界填充类型\n- value : 填充边界的颜色，常用于常量法。\n\n本文针对图像的分辨率，对于宽和高不是2的倍数，则对应边界添加一行复制行，本文代码用于每压缩一次则填充边界一次（即每次只填充一行，将行或列增加至2的倍数），并不是将边界一次扩展到2的次方倍，所以`haar_dwt2D`代码如下：\n```python\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n\n```\n由于图片的行列不在是2的次方倍数，且行列数不尽相同，根据上文提及的矩阵运算的过程，此时的运算过程:\n$$\nimg_{pic}=\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1m}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nm}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{row}=T_1 \\cdot img_{pic}\n$$\n$$\nimg_{col}=T_2 \\cdot (img_{row})^T\n$$\n$$\nimg_{pic}=(img_{col})^T\n$$\n即：\n$$\nimg_{pic}= (T_2 \\cdot (T_1 \\cdot img_{pic})^T)^T=T_1\\cdot img_{pic} \\cdot T_2^T\n$$\n针对`Create_haar_matrix`和`haar_dwt`的代码要进行调整:\n```python\ndef Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency\n```\n## 最终代码结果\n```python\nimport numpy as np\nimport cv2\nimport math\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == '__main__':\n    img= cv2.imread(\"pic1.png\",0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)\n```\n注意考虑到代码的适用性，本文的代码仅可以压缩一次。若需要连续压缩，需要将需要压缩的图片数据单独取出，重新输入，考虑到代码的适用性，以后再做更新。即以下的形式不正确：\n```python\nif __name__ == '__main__':\n    img= cv2.imread(\"pic.png\",0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)\n    #!!!!!!!本文代码在此处不能照抄之前的运行代码，本文已经删除以下代码。\n    for i in range(0,img.shape[0]//2+1,img.shape[0]//2):\n        for j in range(0,img.shape[1]//2+1,img.shape[1]//2):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)  \n```\n## 最后的思考\n>  本文采用haar wavelet对图像进行压缩，运算过程中将图像以行列作为区别，将二维图像转为一维矩阵运算，本质上应该还是属于一维的运算方法，但此方法感觉不应止于此。根据haar wavelet的计算原理，可否使用二维计算方法，即使用卷积计算。\n>\n> 计算思路如下:\n> \n> 压缩后的每一个图像像素点仅与压缩前的2x2矩阵中的信息相关，所以针对这一特性，我们只需要给出4个不同的卷积核，分别对应于$LL,LH,HL,HH,$这四个图像。本文针对Haar wavelet,给出以下四个卷积矩阵：\n> $$LL= {1\\over 2}\n\\begin{pmatrix}\n1&1\\\\\\\\\n1&1\\\\\\\\\n\\end{pmatrix}\n>$$\n>$$HH= {1\\over 2}\n\\begin{pmatrix}\n1&-1\\\\\\\\\n-1&1\\\\\\\\\n\\end{pmatrix}\n>$$\n> $$HL= {1\\over 2}\n\\begin{pmatrix}\n1&-1\\\\\\\\\n1&-1\\\\\\\\\n\\end{pmatrix}\n>$$\n> $$HL= {1\\over 2}\n\\begin{pmatrix}\n1&1\\\\\\\\\n-1&-1\\\\\\\\\n\\end{pmatrix}\n>$$\n>其中HL和LH的顺序可能不对，尚未验证。通过给出的四个卷积核，通过对图像进行卷积运算得出四个矩阵，即使haar wavelet的压缩结果。","source":"_posts/haar_wavelet_optimization.md","raw":"---\ntitle: Haar Wavelet（2）\ndate: 2020-10-23 12:33:49\ntop: true\nmathjax: true\nmarkup: mmark\ncategories:\n  - 小波变换\ntags:\n  - Haar Wavelet\n  - Python\n  - Fanrencli\nauthor: Fanrencli\n---\n>haar小波变换的图像应用实例（优化）\n\n## 优化目标\n- 针对一维变换的循环处理方式，将使用矩阵运算进行代替\n- 针对二维的分行、列的处理方法，使用矩阵运算代替\n- 边界处理\n\n### 一维处理\n观察[上篇文章](https://fanrencli.cn/2020/10/27/haar-wavelet/)的代码,其中的一维变换代码`haar_dwt`，使用简单的循环处理方法，如下:\n```python \n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)\n```\n显然此种循环处理方法的性能不足，针对这个缺点，本文采用矩阵运算进行代替。首先分析循环的处理过程，转为矩阵方式，如下:\n$$Matrix_{lowfrequency}=\n{1\\over \\sqrt{2}}\n\\begin{pmatrix}\n1&1&0&\\cdots&\\cdots&0\\\\\\\\\n0&0&1&1&\\cdots&0\\\\\\\\\n\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\\\\\\\\n0&\\cdots&\\cdots&0&1&1\\\\\\\\\n\\end{pmatrix}（n*{n\\over 2}）\n$$\n$$Matrix_{highfrequency}=\n{1\\over \\sqrt{2}}\n\\begin{pmatrix}\n1&-1&0&\\cdots&\\cdots&0\\\\\\\\\n0&0&1&-1&\\cdots&0\\\\\\\\\n\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\\\\\\\\n0&\\cdots&\\cdots&0&1&-1\\\\\\\\\n\\end{pmatrix}（n*{n\\over 2}）\n$$\n$$\nLowfrequency=Matrix_{lowfrequency}\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nHighfrequency=Matrix_{highfrequency}\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{roworcol}=\n\\begin{pmatrix}\nLowfrequency\\\\\\\\\nHighfrequency\\\\\\\\\n\\end{pmatrix}\n$$\n由此分析，针对代码进行优化，将矩阵构造处理抽取出来作为一个函数`Create_haar_matrix`，这样便于以后根据图像分辨率进行构建矩阵，并且将$Matrix_{lowfrequency}$与$Matrix_{highfrequency}$合成为一个矩阵T,有以下的运算过程:\n$$\nT=\n\\begin{pmatrix}\nMatrix_{lowfrequency}\\\\\\\\\nMatrix_{highfrequency}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{roworcol}=T\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n代码如下:\n```python\n#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(length):\n    half_length=length//2\n    haar_wavelet_matrix=np.zeros((length,length),dtype=float)\n    for i in range(half_length):\n        haar_wavelet_matrix[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(haar_wavelet_matrix,row_or_col)\n    return Low_High_frequency\n\n```\n### 二维处理\n观察上篇文章的代码,其中的二维变换代码`haar_dwt2D`，使用简单的循环处理方法，如下:\n```python\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n此处代码，分行列分别进行运算，由一维变换过程:\n$$\nimg_{roworcol}=T\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n对此进行拓展得到：\n$$\nimg=T\\cdot\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1n}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nn}\\\\\\\\\n\\end{pmatrix}\n$$\n进而代码如下：\n```python\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n紧接着对代码的这个部分进行思考：\n```python\n    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T\n```\n此部分的代码逻辑过程可描述为：\n$$\nimg_{pic}=\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1n}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nn}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{row}=T \\cdot img_{pic}\n$$\n$$\nimg_{col}=T \\cdot (img_{row})^T\n$$\n$$\nimg_{pic}=(img_{col})^T\n$$\n即：\n$$\nimg_{pic}= (T \\cdot (T \\cdot img_{pic})^T)^T=T\\cdot img_{pic} \\cdot T^T\n$$\n由此将代码进一步转化：\n```python\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix,img),haar_wavelet_matrix.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n### 边界处理\n以上的处理基本解决了代码性能方面的不足，接着对代码的适用性进行考虑，此代码要求图片的分辨率必须为$2^x*2^x$，所以需要针对不是2的次方的图片进行扩展，思路：边界填充。\n> 边缘填充:\n> - 复制法：复制最边缘的像素\n> - 反射法：对称轴\n> - 外包装法：\n> - 常量法：用常量值填充四周\n\n本文选用其中的复制法，作为示例，在`python`中`OpenCV`提供了相关的方法`cv2.copyMakeBorder(src,top, bottom, left, right ,borderType,value)`。\n\n- src : 需要填充的图像\n- top : 图像上的填充边界长度\n- bottom : 图像下面的填充边界长度\n- left : 图像左边的填充边界长度\n- right : 图像右边的填充边界长度\n- borderType : 边界填充类型\n- value : 填充边界的颜色，常用于常量法。\n\n本文针对图像的分辨率，对于宽和高不是2的倍数，则对应边界添加一行复制行，本文代码用于每压缩一次则填充边界一次（即每次只填充一行，将行或列增加至2的倍数），并不是将边界一次扩展到2的次方倍，所以`haar_dwt2D`代码如下：\n```python\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n\n```\n由于图片的行列不在是2的次方倍数，且行列数不尽相同，根据上文提及的矩阵运算的过程，此时的运算过程:\n$$\nimg_{pic}=\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1m}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nm}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{row}=T_1 \\cdot img_{pic}\n$$\n$$\nimg_{col}=T_2 \\cdot (img_{row})^T\n$$\n$$\nimg_{pic}=(img_{col})^T\n$$\n即：\n$$\nimg_{pic}= (T_2 \\cdot (T_1 \\cdot img_{pic})^T)^T=T_1\\cdot img_{pic} \\cdot T_2^T\n$$\n针对`Create_haar_matrix`和`haar_dwt`的代码要进行调整:\n```python\ndef Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency\n```\n## 最终代码结果\n```python\nimport numpy as np\nimport cv2\nimport math\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == '__main__':\n    img= cv2.imread(\"pic1.png\",0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)\n```\n注意考虑到代码的适用性，本文的代码仅可以压缩一次。若需要连续压缩，需要将需要压缩的图片数据单独取出，重新输入，考虑到代码的适用性，以后再做更新。即以下的形式不正确：\n```python\nif __name__ == '__main__':\n    img= cv2.imread(\"pic.png\",0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)\n    #!!!!!!!本文代码在此处不能照抄之前的运行代码，本文已经删除以下代码。\n    for i in range(0,img.shape[0]//2+1,img.shape[0]//2):\n        for j in range(0,img.shape[1]//2+1,img.shape[1]//2):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)  \n```\n## 最后的思考\n>  本文采用haar wavelet对图像进行压缩，运算过程中将图像以行列作为区别，将二维图像转为一维矩阵运算，本质上应该还是属于一维的运算方法，但此方法感觉不应止于此。根据haar wavelet的计算原理，可否使用二维计算方法，即使用卷积计算。\n>\n> 计算思路如下:\n> \n> 压缩后的每一个图像像素点仅与压缩前的2x2矩阵中的信息相关，所以针对这一特性，我们只需要给出4个不同的卷积核，分别对应于$LL,LH,HL,HH,$这四个图像。本文针对Haar wavelet,给出以下四个卷积矩阵：\n> $$LL= {1\\over 2}\n\\begin{pmatrix}\n1&1\\\\\\\\\n1&1\\\\\\\\\n\\end{pmatrix}\n>$$\n>$$HH= {1\\over 2}\n\\begin{pmatrix}\n1&-1\\\\\\\\\n-1&1\\\\\\\\\n\\end{pmatrix}\n>$$\n> $$HL= {1\\over 2}\n\\begin{pmatrix}\n1&-1\\\\\\\\\n1&-1\\\\\\\\\n\\end{pmatrix}\n>$$\n> $$HL= {1\\over 2}\n\\begin{pmatrix}\n1&1\\\\\\\\\n-1&-1\\\\\\\\\n\\end{pmatrix}\n>$$\n>其中HL和LH的顺序可能不对，尚未验证。通过给出的四个卷积核，通过对图像进行卷积运算得出四个矩阵，即使haar wavelet的压缩结果。","slug":"haar_wavelet_optimization","published":1,"updated":"2020-11-21T02:58:49.566Z","_id":"ckhr2kcdu00014guocbqxbfqc","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>haar小波变换的图像应用实例（优化）</p>\n</blockquote>\n<h2 id=\"优化目标\"><a href=\"#优化目标\" class=\"headerlink\" title=\"优化目标\"></a>优化目标</h2><ul>\n<li>针对一维变换的循环处理方式，将使用矩阵运算进行代替</li>\n<li>针对二维的分行、列的处理方法，使用矩阵运算代替</li>\n<li>边界处理</li>\n</ul>\n<h3 id=\"一维处理\"><a href=\"#一维处理\" class=\"headerlink\" title=\"一维处理\"></a>一维处理</h3><p>观察<a href=\"https://fanrencli.cn/2020/10/27/haar-wavelet/\">上篇文章</a>的代码,其中的一维变换代码<code>haar_dwt</code>，使用简单的循环处理方法，如下:</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#inputdata: row or column of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array handle with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\" spellcheck=\"true\">#图片需要为2的次方形状</span>\n    length<span class=\"token operator\">=</span>len<span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    Low_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#小波变换的主体部分</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Low_frequency<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        High_frequency<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Low_frequency<span class=\"token punctuation\">,</span>High_frequency<span class=\"token punctuation\">)</span></code></pre>\n<p>显然此种循环处理方法的性能不足，针对这个缺点，本文采用矩阵运算进行代替。首先分析循环的处理过程，转为矩阵方式，如下:<br>$$Matrix_{lowfrequency}=<br>{1\\over \\sqrt{2}}<br>\\begin{pmatrix}<br>1&amp;1&amp;0&amp;\\cdots&amp;\\cdots&amp;0\\\\<br>0&amp;0&amp;1&amp;1&amp;\\cdots&amp;0\\\\<br>\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\\\<br>0&amp;\\cdots&amp;\\cdots&amp;0&amp;1&amp;1\\\\<br>\\end{pmatrix}（n*{n\\over 2}）<br>$$<br>$$Matrix_{highfrequency}=<br>{1\\over \\sqrt{2}}<br>\\begin{pmatrix}<br>1&amp;-1&amp;0&amp;\\cdots&amp;\\cdots&amp;0\\\\<br>0&amp;0&amp;1&amp;-1&amp;\\cdots&amp;0\\\\<br>\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\\\<br>0&amp;\\cdots&amp;\\cdots&amp;0&amp;1&amp;-1\\\\<br>\\end{pmatrix}（n*{n\\over 2}）<br>$$<br>$$<br>Lowfrequency=Matrix_{lowfrequency}<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>Highfrequency=Matrix_{highfrequency}<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{roworcol}=<br>\\begin{pmatrix}<br>Lowfrequency\\\\<br>Highfrequency\\\\<br>\\end{pmatrix}<br>$$<br>由此分析，针对代码进行优化，将矩阵构造处理抽取出来作为一个函数<code>Create_haar_matrix</code>，这样便于以后根据图像分辨率进行构建矩阵，并且将$Matrix_{lowfrequency}$与$Matrix_{highfrequency}$合成为一个矩阵T,有以下的运算过程:<br>$$<br>T=<br>\\begin{pmatrix}<br>Matrix_{lowfrequency}\\\\<br>Matrix_{highfrequency}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{roworcol}=T<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>代码如下:</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#根据输入数组长度创建小波变换矩阵</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Create_haar_matrix</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    half_length<span class=\"token operator\">=</span>length<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    haar_wavelet_matrix<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>half_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        haar_wavelet_matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix<span class=\"token punctuation\">[</span>half_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix<span class=\"token punctuation\">[</span>half_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> haar_wavelet_matrix\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: row or column of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array handle with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    Low_High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>haar_wavelet_matrix<span class=\"token punctuation\">,</span>row_or_col<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Low_High_frequency\n</code></pre>\n<h3 id=\"二维处理\"><a href=\"#二维处理\" class=\"headerlink\" title=\"二维处理\"></a>二维处理</h3><p>观察上篇文章的代码,其中的二维变换代码<code>haar_dwt2D</code>，使用简单的循环处理方法，如下:</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#inputdata: array of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array of image handel with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>row_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>col_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#归一化处理</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img</code></pre>\n<p>此处代码，分行列分别进行运算，由一维变换过程:<br>$$<br>img_{roworcol}=T<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>对此进行拓展得到：<br>$$<br>img=T\\cdot<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1n}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nn}\\\\<br>\\end{pmatrix}<br>$$<br>进而代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#inputdata: array of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array of image handel with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\">#创建小波变换矩阵</span>\n    haar_wavelet_matrix<span class=\"token operator\">=</span>Create_haar_matrix<span class=\"token punctuation\">(</span>col_num<span class=\"token punctuation\">)</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>T\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img</code></pre>\n<p>紧接着对代码的这个部分进行思考：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>T</code></pre>\n<p>此部分的代码逻辑过程可描述为：<br>$$<br>img_{pic}=<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1n}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nn}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{row}=T \\cdot img_{pic}<br>$$<br>$$<br>img_{col}=T \\cdot (img_{row})^T<br>$$<br>$$<br>img_{pic}=(img_{col})^T<br>$$<br>即：<br>$$<br>img_{pic}= (T \\cdot (T \\cdot img_{pic})^T)^T=T\\cdot img_{pic} \\cdot T^T<br>$$<br>由此将代码进一步转化：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#inputdata: row or column of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array handle with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    Low_High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>haar_wavelet_matrix<span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Low_High_frequency\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: array of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array of image handel with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\">#创建小波变换矩阵</span>\n    haar_wavelet_matrix<span class=\"token operator\">=</span>Create_haar_matrix<span class=\"token punctuation\">(</span>col_num<span class=\"token punctuation\">)</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span>\n\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img</code></pre>\n<h3 id=\"边界处理\"><a href=\"#边界处理\" class=\"headerlink\" title=\"边界处理\"></a>边界处理</h3><p>以上的处理基本解决了代码性能方面的不足，接着对代码的适用性进行考虑，此代码要求图片的分辨率必须为$2^x*2^x$，所以需要针对不是2的次方的图片进行扩展，思路：边界填充。</p>\n<blockquote>\n<p>边缘填充:</p>\n<ul>\n<li>复制法：复制最边缘的像素</li>\n<li>反射法：对称轴</li>\n<li>外包装法：</li>\n<li>常量法：用常量值填充四周</li>\n</ul>\n</blockquote>\n<p>本文选用其中的复制法，作为示例，在<code>python</code>中<code>OpenCV</code>提供了相关的方法<code>cv2.copyMakeBorder(src,top, bottom, left, right ,borderType,value)</code>。</p>\n<ul>\n<li>src : 需要填充的图像</li>\n<li>top : 图像上的填充边界长度</li>\n<li>bottom : 图像下面的填充边界长度</li>\n<li>left : 图像左边的填充边界长度</li>\n<li>right : 图像右边的填充边界长度</li>\n<li>borderType : 边界填充类型</li>\n<li>value : 填充边界的颜色，常用于常量法。</li>\n</ul>\n<p>本文针对图像的分辨率，对于宽和高不是2的倍数，则对应边界添加一行复制行，本文代码用于每压缩一次则填充边界一次（即每次只填充一行，将行或列增加至2的倍数），并不是将边界一次扩展到2的次方倍，所以<code>haar_dwt2D</code>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\">#创建小波变换矩阵</span>\n    haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token operator\">=</span>Create_haar_matrix<span class=\"token punctuation\">(</span>row_num<span class=\"token punctuation\">,</span>col_num<span class=\"token punctuation\">)</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token punctuation\">)</span>\n\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img\n</code></pre>\n<p>由于图片的行列不在是2的次方倍数，且行列数不尽相同，根据上文提及的矩阵运算的过程，此时的运算过程:<br>$$<br>img_{pic}=<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1m}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nm}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{row}=T_1 \\cdot img_{pic}<br>$$<br>$$<br>img_{col}=T_2 \\cdot (img_{row})^T<br>$$<br>$$<br>img_{pic}=(img_{col})^T<br>$$<br>即：<br>$$<br>img_{pic}= (T_2 \\cdot (T_1 \\cdot img_{pic})^T)^T=T_1\\cdot img_{pic} \\cdot T_2^T<br>$$<br>针对<code>Create_haar_matrix</code>和<code>haar_dwt</code>的代码要进行调整:</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">Create_haar_matrix</span><span class=\"token punctuation\">(</span>row_length<span class=\"token punctuation\">,</span>col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    half_row_length<span class=\"token operator\">=</span>row_length<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_col_length<span class=\"token operator\">=</span>col_length<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    haar_wavelet_matrix_row<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row_length<span class=\"token punctuation\">,</span>row_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    haar_wavelet_matrix_col<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>col_length<span class=\"token punctuation\">,</span>col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>half_row_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>half_row_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>half_row_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>half_col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>half_col_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>half_col_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> haar_wavelet_matrix_col<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    Low_High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>haar_wavelet_matrix_col<span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Low_High_frequency</code></pre>\n<h2 id=\"最终代码结果\"><a href=\"#最终代码结果\" class=\"headerlink\" title=\"最终代码结果\"></a>最终代码结果</h2><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> math\n<span class=\"token comment\" spellcheck=\"true\"># numpy数组归一化</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Normalize</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _range <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>img <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> _range\n<span class=\"token comment\" spellcheck=\"true\">#根据输入数组长度创建小波变换矩阵</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Create_haar_matrix</span><span class=\"token punctuation\">(</span>row_length<span class=\"token punctuation\">,</span>col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    half_row_length<span class=\"token operator\">=</span>row_length<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_col_length<span class=\"token operator\">=</span>col_length<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    haar_wavelet_matrix_row<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row_length<span class=\"token punctuation\">,</span>row_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    haar_wavelet_matrix_col<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>col_length<span class=\"token punctuation\">,</span>col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>half_row_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>half_row_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>half_row_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>half_col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>half_col_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>half_col_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> haar_wavelet_matrix_col<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: row or column of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array handle with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    Low_High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>haar_wavelet_matrix_col<span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Low_High_frequency\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: array of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array of image handel with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\">#创建小波变换矩阵</span>\n    haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token operator\">=</span>Create_haar_matrix<span class=\"token punctuation\">(</span>row_num<span class=\"token punctuation\">,</span>col_num<span class=\"token punctuation\">)</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token punctuation\">)</span>\n\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    img<span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"pic1.png\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>haar_dwt2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre>\n<p>注意考虑到代码的适用性，本文的代码仅可以压缩一次。若需要连续压缩，需要将需要压缩的图片数据单独取出，重新输入，考虑到代码的适用性，以后再做更新。即以下的形式不正确：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    img<span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"pic.png\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>haar_dwt2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#!!!!!!!本文代码在此处不能照抄之前的运行代码，本文已经删除以下代码。</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">:</span>j<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">:</span>j<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  </code></pre>\n<h2 id=\"最后的思考\"><a href=\"#最后的思考\" class=\"headerlink\" title=\"最后的思考\"></a>最后的思考</h2><blockquote>\n<p> 本文采用haar wavelet对图像进行压缩，运算过程中将图像以行列作为区别，将二维图像转为一维矩阵运算，本质上应该还是属于一维的运算方法，但此方法感觉不应止于此。根据haar wavelet的计算原理，可否使用二维计算方法，即使用卷积计算。</p>\n<p>计算思路如下:</p>\n<p>压缩后的每一个图像像素点仅与压缩前的2x2矩阵中的信息相关，所以针对这一特性，我们只需要给出4个不同的卷积核，分别对应于$LL,LH,HL,HH,$这四个图像。本文针对Haar wavelet,给出以下四个卷积矩阵：<br>$$LL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;1\\\\<br>1&amp;1\\\\<br>\\end{pmatrix}<br>$$<br>$$HH= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;-1\\\\<br>-1&amp;1\\\\<br>\\end{pmatrix}<br>$$<br>$$HL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;-1\\\\<br>1&amp;-1\\\\<br>\\end{pmatrix}<br>$$<br>$$HL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;1\\\\<br>-1&amp;-1\\\\<br>\\end{pmatrix}<br>$$<br>其中HL和LH的顺序可能不对，尚未验证。通过给出的四个卷积核，通过对图像进行卷积运算得出四个矩阵，即使haar wavelet的压缩结果。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>haar小波变换的图像应用实例（优化）</p>\n</blockquote>\n<h2 id=\"优化目标\"><a href=\"#优化目标\" class=\"headerlink\" title=\"优化目标\"></a>优化目标</h2><ul>\n<li>针对一维变换的循环处理方式，将使用矩阵运算进行代替</li>\n<li>针对二维的分行、列的处理方法，使用矩阵运算代替</li>\n<li>边界处理</li>\n</ul>\n<h3 id=\"一维处理\"><a href=\"#一维处理\" class=\"headerlink\" title=\"一维处理\"></a>一维处理</h3><p>观察<a href=\"https://fanrencli.cn/2020/10/27/haar-wavelet/\">上篇文章</a>的代码,其中的一维变换代码<code>haar_dwt</code>，使用简单的循环处理方法，如下:</p>\n<pre><code class=\"python\">#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)</code></pre>\n<p>显然此种循环处理方法的性能不足，针对这个缺点，本文采用矩阵运算进行代替。首先分析循环的处理过程，转为矩阵方式，如下:<br>$$Matrix_{lowfrequency}=<br>{1\\over \\sqrt{2}}<br>\\begin{pmatrix}<br>1&amp;1&amp;0&amp;\\cdots&amp;\\cdots&amp;0\\\\<br>0&amp;0&amp;1&amp;1&amp;\\cdots&amp;0\\\\<br>\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\\\<br>0&amp;\\cdots&amp;\\cdots&amp;0&amp;1&amp;1\\\\<br>\\end{pmatrix}（n*{n\\over 2}）<br>$$<br>$$Matrix_{highfrequency}=<br>{1\\over \\sqrt{2}}<br>\\begin{pmatrix}<br>1&amp;-1&amp;0&amp;\\cdots&amp;\\cdots&amp;0\\\\<br>0&amp;0&amp;1&amp;-1&amp;\\cdots&amp;0\\\\<br>\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\\\<br>0&amp;\\cdots&amp;\\cdots&amp;0&amp;1&amp;-1\\\\<br>\\end{pmatrix}（n*{n\\over 2}）<br>$$<br>$$<br>Lowfrequency=Matrix_{lowfrequency}<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>Highfrequency=Matrix_{highfrequency}<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{roworcol}=<br>\\begin{pmatrix}<br>Lowfrequency\\\\<br>Highfrequency\\\\<br>\\end{pmatrix}<br>$$<br>由此分析，针对代码进行优化，将矩阵构造处理抽取出来作为一个函数<code>Create_haar_matrix</code>，这样便于以后根据图像分辨率进行构建矩阵，并且将$Matrix_{lowfrequency}$与$Matrix_{highfrequency}$合成为一个矩阵T,有以下的运算过程:<br>$$<br>T=<br>\\begin{pmatrix}<br>Matrix_{lowfrequency}\\\\<br>Matrix_{highfrequency}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{roworcol}=T<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>代码如下:</p>\n<pre><code class=\"python\">#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(length):\n    half_length=length//2\n    haar_wavelet_matrix=np.zeros((length,length),dtype=float)\n    for i in range(half_length):\n        haar_wavelet_matrix[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(haar_wavelet_matrix,row_or_col)\n    return Low_High_frequency\n</code></pre>\n<h3 id=\"二维处理\"><a href=\"#二维处理\" class=\"headerlink\" title=\"二维处理\"></a>二维处理</h3><p>观察上篇文章的代码,其中的二维变换代码<code>haar_dwt2D</code>，使用简单的循环处理方法，如下:</p>\n<pre><code class=\"python\">#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img</code></pre>\n<p>此处代码，分行列分别进行运算，由一维变换过程:<br>$$<br>img_{roworcol}=T<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>对此进行拓展得到：<br>$$<br>img=T\\cdot<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1n}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nn}\\\\<br>\\end{pmatrix}<br>$$<br>进而代码如下：</p>\n<pre><code class=\"python\">#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img</code></pre>\n<p>紧接着对代码的这个部分进行思考：</p>\n<pre><code class=\"python\">    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T</code></pre>\n<p>此部分的代码逻辑过程可描述为：<br>$$<br>img_{pic}=<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1n}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nn}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{row}=T \\cdot img_{pic}<br>$$<br>$$<br>img_{col}=T \\cdot (img_{row})^T<br>$$<br>$$<br>img_{pic}=(img_{col})^T<br>$$<br>即：<br>$$<br>img_{pic}= (T \\cdot (T \\cdot img_{pic})^T)^T=T\\cdot img_{pic} \\cdot T^T<br>$$<br>由此将代码进一步转化：</p>\n<pre><code class=\"python\">#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix,img),haar_wavelet_matrix.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img</code></pre>\n<h3 id=\"边界处理\"><a href=\"#边界处理\" class=\"headerlink\" title=\"边界处理\"></a>边界处理</h3><p>以上的处理基本解决了代码性能方面的不足，接着对代码的适用性进行考虑，此代码要求图片的分辨率必须为$2^x*2^x$，所以需要针对不是2的次方的图片进行扩展，思路：边界填充。</p>\n<blockquote>\n<p>边缘填充:</p>\n<ul>\n<li>复制法：复制最边缘的像素</li>\n<li>反射法：对称轴</li>\n<li>外包装法：</li>\n<li>常量法：用常量值填充四周</li>\n</ul>\n</blockquote>\n<p>本文选用其中的复制法，作为示例，在<code>python</code>中<code>OpenCV</code>提供了相关的方法<code>cv2.copyMakeBorder(src,top, bottom, left, right ,borderType,value)</code>。</p>\n<ul>\n<li>src : 需要填充的图像</li>\n<li>top : 图像上的填充边界长度</li>\n<li>bottom : 图像下面的填充边界长度</li>\n<li>left : 图像左边的填充边界长度</li>\n<li>right : 图像右边的填充边界长度</li>\n<li>borderType : 边界填充类型</li>\n<li>value : 填充边界的颜色，常用于常量法。</li>\n</ul>\n<p>本文针对图像的分辨率，对于宽和高不是2的倍数，则对应边界添加一行复制行，本文代码用于每压缩一次则填充边界一次（即每次只填充一行，将行或列增加至2的倍数），并不是将边界一次扩展到2的次方倍，所以<code>haar_dwt2D</code>代码如下：</p>\n<pre><code class=\"python\">def haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n</code></pre>\n<p>由于图片的行列不在是2的次方倍数，且行列数不尽相同，根据上文提及的矩阵运算的过程，此时的运算过程:<br>$$<br>img_{pic}=<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1m}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nm}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{row}=T_1 \\cdot img_{pic}<br>$$<br>$$<br>img_{col}=T_2 \\cdot (img_{row})^T<br>$$<br>$$<br>img_{pic}=(img_{col})^T<br>$$<br>即：<br>$$<br>img_{pic}= (T_2 \\cdot (T_1 \\cdot img_{pic})^T)^T=T_1\\cdot img_{pic} \\cdot T_2^T<br>$$<br>针对<code>Create_haar_matrix</code>和<code>haar_dwt</code>的代码要进行调整:</p>\n<pre><code class=\"python\">def Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency</code></pre>\n<h2 id=\"最终代码结果\"><a href=\"#最终代码结果\" class=\"headerlink\" title=\"最终代码结果\"></a>最终代码结果</h2><pre><code class=\"python\">import numpy as np\nimport cv2\nimport math\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == &#39;__main__&#39;:\n    img= cv2.imread(&quot;pic1.png&quot;,0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow(&#39;asd&#39;,img)\n    cv2.waitKey(0)</code></pre>\n<p>注意考虑到代码的适用性，本文的代码仅可以压缩一次。若需要连续压缩，需要将需要压缩的图片数据单独取出，重新输入，考虑到代码的适用性，以后再做更新。即以下的形式不正确：</p>\n<pre><code class=\"python\">if __name__ == &#39;__main__&#39;:\n    img= cv2.imread(&quot;pic.png&quot;,0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow(&#39;asd&#39;,img)\n    cv2.waitKey(0)\n    #!!!!!!!本文代码在此处不能照抄之前的运行代码，本文已经删除以下代码。\n    for i in range(0,img.shape[0]//2+1,img.shape[0]//2):\n        for j in range(0,img.shape[1]//2+1,img.shape[1]//2):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow(&#39;asd&#39;,img)\n    cv2.waitKey(0)  </code></pre>\n<h2 id=\"最后的思考\"><a href=\"#最后的思考\" class=\"headerlink\" title=\"最后的思考\"></a>最后的思考</h2><blockquote>\n<p> 本文采用haar wavelet对图像进行压缩，运算过程中将图像以行列作为区别，将二维图像转为一维矩阵运算，本质上应该还是属于一维的运算方法，但此方法感觉不应止于此。根据haar wavelet的计算原理，可否使用二维计算方法，即使用卷积计算。</p>\n<p>计算思路如下:</p>\n<p>压缩后的每一个图像像素点仅与压缩前的2x2矩阵中的信息相关，所以针对这一特性，我们只需要给出4个不同的卷积核，分别对应于$LL,LH,HL,HH,$这四个图像。本文针对Haar wavelet,给出以下四个卷积矩阵：<br>$$LL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;1\\\\<br>1&amp;1\\\\<br>\\end{pmatrix}<br>$$<br>$$HH= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;-1\\\\<br>-1&amp;1\\\\<br>\\end{pmatrix}<br>$$<br>$$HL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;-1\\\\<br>1&amp;-1\\\\<br>\\end{pmatrix}<br>$$<br>$$HL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;1\\\\<br>-1&amp;-1\\\\<br>\\end{pmatrix}<br>$$<br>其中HL和LH的顺序可能不对，尚未验证。通过给出的四个卷积核，通过对图像进行卷积运算得出四个矩阵，即使haar wavelet的压缩结果。</p>\n</blockquote>\n"},{"title":"Haar Wavelet（1）","date":"2020-10-23T04:33:49.000Z","top":true,"author":"Fanrencli","_content":">haar小波变换的图像应用实例\n\n## Haar Wavelet 图片示例\n![Picture resolutions(512*512)](http://39.105.26.229:4567/pic.png)\n```python\nimport numpy as np\nimport cv2\nimport math\nimport requests\n\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #为了强化图片的显示效果，对数据进行归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == '__main__':\n    #读取网络图片（2选1）\n    file_pic=requests.get('http://39.105.26.229:4567/pic.png')\n    img= cv2.imdecode(np.fromstring(file_pic.content, np.uint8), 0).astype(np.float64)\n    #读取本地图片（2选1）\n    # img= cv2.imread(\"pic.png\",0).astype(np.float64)\n    cv2.imshow('asd',haar_dwt2D(img))\n    cv2.waitKey(0)\n    for i in range(0,img.shape[0]//2-1,img.shape[0]//2-1):\n        for j in range(0,img.shape[1]//2-1,img.shape[1]//2-1):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)  \n```","source":"_posts/haar_wavelet.md","raw":"---\ntitle: Haar Wavelet（1）\ndate: 2020-10-23 12:33:49\ntop: true\ncategories:\n  - 小波变换\ntags:\n  - Haar Wavelet\n  - Python\n  - Fanrencli\nauthor: Fanrencli\n---\n>haar小波变换的图像应用实例\n\n## Haar Wavelet 图片示例\n![Picture resolutions(512*512)](http://39.105.26.229:4567/pic.png)\n```python\nimport numpy as np\nimport cv2\nimport math\nimport requests\n\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #为了强化图片的显示效果，对数据进行归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == '__main__':\n    #读取网络图片（2选1）\n    file_pic=requests.get('http://39.105.26.229:4567/pic.png')\n    img= cv2.imdecode(np.fromstring(file_pic.content, np.uint8), 0).astype(np.float64)\n    #读取本地图片（2选1）\n    # img= cv2.imread(\"pic.png\",0).astype(np.float64)\n    cv2.imshow('asd',haar_dwt2D(img))\n    cv2.waitKey(0)\n    for i in range(0,img.shape[0]//2-1,img.shape[0]//2-1):\n        for j in range(0,img.shape[1]//2-1,img.shape[1]//2-1):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)  \n```","slug":"haar_wavelet","published":1,"updated":"2020-11-21T02:58:20.610Z","_id":"ckhr2kcdy00034guo0i671hfe","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>haar小波变换的图像应用实例</p>\n</blockquote>\n<h2 id=\"Haar-Wavelet-图片示例\"><a href=\"#Haar-Wavelet-图片示例\" class=\"headerlink\" title=\"Haar Wavelet 图片示例\"></a>Haar Wavelet 图片示例</h2><p><img src=\"http://39.105.26.229:4567/pic.png\" alt=\"Picture resolutions(512*512)\"></p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> math\n<span class=\"token keyword\">import</span> requests\n\n<span class=\"token comment\" spellcheck=\"true\"># numpy数组归一化</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Normalize</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _range <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>img <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> _range\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: row or column of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array handle with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\" spellcheck=\"true\">#图片需要为2的次方形状</span>\n    length<span class=\"token operator\">=</span>len<span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    Low_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#小波变换的主体部分</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Low_frequency<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        High_frequency<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Low_frequency<span class=\"token punctuation\">,</span>High_frequency<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: array of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array of image handel with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>row_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>col_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#为了强化图片的显示效果，对数据进行归一化处理</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\">#读取网络图片（2选1）</span>\n    file_pic<span class=\"token operator\">=</span>requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://39.105.26.229:4567/pic.png'</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imdecode<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>file_pic<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#读取本地图片（2选1）</span>\n    <span class=\"token comment\" spellcheck=\"true\"># img= cv2.imread(\"pic.png\",0).astype(np.float64)</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">,</span>haar_dwt2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">:</span>j<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">:</span>j<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  </code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>haar小波变换的图像应用实例</p>\n</blockquote>\n<h2 id=\"Haar-Wavelet-图片示例\"><a href=\"#Haar-Wavelet-图片示例\" class=\"headerlink\" title=\"Haar Wavelet 图片示例\"></a>Haar Wavelet 图片示例</h2><p><img src=\"http://39.105.26.229:4567/pic.png\" alt=\"Picture resolutions(512*512)\"></p>\n<pre><code class=\"python\">import numpy as np\nimport cv2\nimport math\nimport requests\n\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #为了强化图片的显示效果，对数据进行归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == &#39;__main__&#39;:\n    #读取网络图片（2选1）\n    file_pic=requests.get(&#39;http://39.105.26.229:4567/pic.png&#39;)\n    img= cv2.imdecode(np.fromstring(file_pic.content, np.uint8), 0).astype(np.float64)\n    #读取本地图片（2选1）\n    # img= cv2.imread(&quot;pic.png&quot;,0).astype(np.float64)\n    cv2.imshow(&#39;asd&#39;,haar_dwt2D(img))\n    cv2.waitKey(0)\n    for i in range(0,img.shape[0]//2-1,img.shape[0]//2-1):\n        for j in range(0,img.shape[1]//2-1,img.shape[1]//2-1):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow(&#39;asd&#39;,img)\n    cv2.waitKey(0)  </code></pre>\n"},{"title":"Hello World","date":"2020-10-21T04:33:49.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2020-10-21 12:33:49\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2020-11-21T02:58:53.041Z","_id":"ckhr2kce300074guo6mi4ez1y","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"算法","date":"2020-11-21T04:33:49.000Z","author":"Fanrencli","_content":"> 二叉树专题（`Binary Search`）\n> 二叉树作为算法经典题型，应用范围广，需要及其重视。\n\n## 前序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void pre_order(TreeNode* root){\n        if (root==nullptr) return;\n        cout << root->val << endl;\n        pre_order(root->left);\n        pre_order(root->right);\n    }\n};\n```\n## 中序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void middle_order(TreeNode* root){\n        if (root==nullptr) return;\n        middle_order(root->left);\n        cout << root->val << endl;\n        middle_order(root->right);\n    }\n};\n```\n## 后序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void post_order(TreeNode* root){\n        if (root==nullptr) return;\n        post_order(root->left);\n        post_order(root->right);\n        cout << root->val << endl;\n    }\n};\n```","source":"_posts/Algorithm/Binary Search/Binary Search.md","raw":"---\ntitle: 算法\ndate: 2020-11-21 12:33:49\ncategories:\n  - Algorithm\ntags:\n  - C++\n  - Binary Search\n  - Fanrencli\nauthor: Fanrencli\n---\n> 二叉树专题（`Binary Search`）\n> 二叉树作为算法经典题型，应用范围广，需要及其重视。\n\n## 前序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void pre_order(TreeNode* root){\n        if (root==nullptr) return;\n        cout << root->val << endl;\n        pre_order(root->left);\n        pre_order(root->right);\n    }\n};\n```\n## 中序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void middle_order(TreeNode* root){\n        if (root==nullptr) return;\n        middle_order(root->left);\n        cout << root->val << endl;\n        middle_order(root->right);\n    }\n};\n```\n## 后序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void post_order(TreeNode* root){\n        if (root==nullptr) return;\n        post_order(root->left);\n        post_order(root->right);\n        cout << root->val << endl;\n    }\n};\n```","slug":"Algorithm/Binary Search/Binary Search","published":1,"updated":"2021-02-06T11:50:53.883Z","_id":"ckhr2kceb000p4guo4uevggqz","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>二叉树专题（<code>Binary Search</code>）<br>二叉树作为算法经典题型，应用范围广，需要及其重视。</p>\n</blockquote>\n<h2 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h2><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">pre_order</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-</span><span class=\"token operator\">></span>val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">pre_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">pre_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h2><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">middle_order</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">middle_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-</span><span class=\"token operator\">></span>val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">middle_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h2><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">post_order</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">post_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">post_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-</span><span class=\"token operator\">></span>val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>二叉树专题（<code>Binary Search</code>）<br>二叉树作为算法经典题型，应用范围广，需要及其重视。</p>\n</blockquote>\n<h2 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h2><pre><code class=\"cpp\">class Solution &#123;\npublic:\n    void Search(TreeNode* root) &#123;\n        fun(root);\n    &#125;\n    void pre_order(TreeNode* root)&#123;\n        if (root==nullptr) return;\n        cout &lt;&lt; root-&gt;val &lt;&lt; endl;\n        pre_order(root-&gt;left);\n        pre_order(root-&gt;right);\n    &#125;\n&#125;;</code></pre>\n<h2 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h2><pre><code class=\"cpp\">class Solution &#123;\npublic:\n    void Search(TreeNode* root) &#123;\n        fun(root);\n    &#125;\n    void middle_order(TreeNode* root)&#123;\n        if (root==nullptr) return;\n        middle_order(root-&gt;left);\n        cout &lt;&lt; root-&gt;val &lt;&lt; endl;\n        middle_order(root-&gt;right);\n    &#125;\n&#125;;</code></pre>\n<h2 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h2><pre><code class=\"cpp\">class Solution &#123;\npublic:\n    void Search(TreeNode* root) &#123;\n        fun(root);\n    &#125;\n    void post_order(TreeNode* root)&#123;\n        if (root==nullptr) return;\n        post_order(root-&gt;left);\n        post_order(root-&gt;right);\n        cout &lt;&lt; root-&gt;val &lt;&lt; endl;\n    &#125;\n&#125;;</code></pre>\n"},{"title":"LeetCode_129","date":"2020-11-21T04:33:49.000Z","author":"Fanrencli","_content":"## 算法描述\nGiven a binary tree containing digits from `0-9` only, each root-to-leaf path could represent a number.\n\nAn example is the root-to-leaf path `1->2->3` which represents the number `123`.\n\nFind the total sum of all root-to-leaf numbers.\n\nNote: A leaf is a node with no children.\n\n## 示例\n\n### Example1:\n```\nInput: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n```\n### Example2\n```\nInput: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n```\n## 个人代码\n```cpp\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int chain = 0;\n        fun(root,chain,sum);\n        return sum;\n    }\n    int fun(TreeNode* root,int chain,int &sum){\n        if (root==nullptr) return 1;\n        chain=chain*10+root->val;\n        if(fun(root->left,chain,sum)==1 &fun(root->right,chain,sum)==1){\n            sum=sum+chain;\n        }\n        return 2;\n    }\n};\n```\n## 结果\n- Accept\n- 110/110 cases passed (0 ms)\n- Your runtime beats 100 % of cpp submissions\n- Your memory usage beats 54.85 % of cpp submissions (12.7 MB)","source":"_posts/Algorithm/Binary Search/129.sum-root-to-leaf-numbers.md","raw":"---\ntitle: LeetCode_129\ndate: 2020-11-21 12:33:49\ncategories:\n  - Algorithm\ntags:\n  - C++\n  - Binary Search\n  - Fanrencli\nauthor: Fanrencli\n---\n## 算法描述\nGiven a binary tree containing digits from `0-9` only, each root-to-leaf path could represent a number.\n\nAn example is the root-to-leaf path `1->2->3` which represents the number `123`.\n\nFind the total sum of all root-to-leaf numbers.\n\nNote: A leaf is a node with no children.\n\n## 示例\n\n### Example1:\n```\nInput: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n```\n### Example2\n```\nInput: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n```\n## 个人代码\n```cpp\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int chain = 0;\n        fun(root,chain,sum);\n        return sum;\n    }\n    int fun(TreeNode* root,int chain,int &sum){\n        if (root==nullptr) return 1;\n        chain=chain*10+root->val;\n        if(fun(root->left,chain,sum)==1 &fun(root->right,chain,sum)==1){\n            sum=sum+chain;\n        }\n        return 2;\n    }\n};\n```\n## 结果\n- Accept\n- 110/110 cases passed (0 ms)\n- Your runtime beats 100 % of cpp submissions\n- Your memory usage beats 54.85 % of cpp submissions (12.7 MB)","slug":"Algorithm/Binary Search/129.sum-root-to-leaf-numbers","published":1,"updated":"2020-12-06T06:59:50.298Z","_id":"ckhr3bkzw0000o8uo0g7f61uw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p>\n<p>An example is the root-to-leaf path <code>1-&gt;2-&gt;3</code> which represents the number <code>123</code>.</p>\n<p>Find the total sum of all root-to-leaf numbers.</p>\n<p>Note: A leaf is a node with no children.</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"Example1\"><a href=\"#Example1\" class=\"headerlink\" title=\"Example1:\"></a>Example1:</h3><pre><code>Input: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1-&gt;2 represents the number 12.\nThe root-to-leaf path 1-&gt;3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.</code></pre>\n<h3 id=\"Example2\"><a href=\"#Example2\" class=\"headerlink\" title=\"Example2\"></a>Example2</h3><pre><code>Input: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4-&gt;9-&gt;5 represents the number 495.\nThe root-to-leaf path 4-&gt;9-&gt;1 represents the number 491.\nThe root-to-leaf path 4-&gt;0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.</code></pre>\n<h2 id=\"个人代码\"><a href=\"#个人代码\" class=\"headerlink\" title=\"个人代码\"></a>个人代码</h2><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">sumNumbers</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> chain <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>chain<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> chain<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        chain<span class=\"token operator\">=</span>chain<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">,</span>chain<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">,</span>chain<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            sum<span class=\"token operator\">=</span>sum<span class=\"token operator\">+</span>chain<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><ul>\n<li>Accept</li>\n<li>110/110 cases passed (0 ms)</li>\n<li>Your runtime beats 100 % of cpp submissions</li>\n<li>Your memory usage beats 54.85 % of cpp submissions (12.7 MB)</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p>\n<p>An example is the root-to-leaf path <code>1-&gt;2-&gt;3</code> which represents the number <code>123</code>.</p>\n<p>Find the total sum of all root-to-leaf numbers.</p>\n<p>Note: A leaf is a node with no children.</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"Example1\"><a href=\"#Example1\" class=\"headerlink\" title=\"Example1:\"></a>Example1:</h3><pre><code>Input: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1-&gt;2 represents the number 12.\nThe root-to-leaf path 1-&gt;3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.</code></pre>\n<h3 id=\"Example2\"><a href=\"#Example2\" class=\"headerlink\" title=\"Example2\"></a>Example2</h3><pre><code>Input: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4-&gt;9-&gt;5 represents the number 495.\nThe root-to-leaf path 4-&gt;9-&gt;1 represents the number 491.\nThe root-to-leaf path 4-&gt;0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.</code></pre>\n<h2 id=\"个人代码\"><a href=\"#个人代码\" class=\"headerlink\" title=\"个人代码\"></a>个人代码</h2><pre><code class=\"cpp\">/**\n * Definition for a binary tree node.\n * struct TreeNode &#123;\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;\n * &#125;;\n */\nclass Solution &#123;\npublic:\n    int sumNumbers(TreeNode* root) &#123;\n        int sum = 0;\n        int chain = 0;\n        fun(root,chain,sum);\n        return sum;\n    &#125;\n    int fun(TreeNode* root,int chain,int &amp;sum)&#123;\n        if (root==nullptr) return 1;\n        chain=chain*10+root-&gt;val;\n        if(fun(root-&gt;left,chain,sum)==1 &amp;fun(root-&gt;right,chain,sum)==1)&#123;\n            sum=sum+chain;\n        &#125;\n        return 2;\n    &#125;\n&#125;;</code></pre>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><ul>\n<li>Accept</li>\n<li>110/110 cases passed (0 ms)</li>\n<li>Your runtime beats 100 % of cpp submissions</li>\n<li>Your memory usage beats 54.85 % of cpp submissions (12.7 MB)</li>\n</ul>\n"},{"title":"OpenNI2_OpenCV","date":"2020-12-06T01:24:37.000Z","mathjax":true,"markup":"mmark","author":"Fanrencli","_content":"\n## 奥比中光OpenNISDK安装（Linux）\n奥比中光针对ZaroP1开发板和深度摄像机提供了相关的[OpenNI2的SDK](https://abzg-oss.oss-cn-shenzhen.aliyuncs.com/files/OpenNI-Linux-Arm64-2.3.0.65.rar),针对Windows/Linux/Android不同平台提供了相关的[安装文档](https://developer.orbbec.com.cn/technical_library.html?id=30).根据官方文档将OpenNI2配置完成，注意官方文档中说Linux平台内置驱动不需要额外安装，但是需要仔细阅读`README`文件：\n```\nOpenNI\n------\n\nWebsite: http://structure.io/openni\n\nBuilding Prerequisites(前置依赖)\n======================\n\nLinux\n-----\n- GCC 4.x\n    From: http://gcc.gnu.org/releases.html\n    Or via apt:\n    sudo apt-get install g++\n- Python 2.6+/3.x\n    From: http://www.python.org/download/\n    Or via apt:\n    sudo apt-get install python\n- LibUSB 1.0.x\n    From: http://sourceforge.net/projects/libusb/files/libusb-1.0/\n    Or via apt:\n    sudo apt-get install libusb-1.0-0-dev\n- LibUDEV\n    sudo apt-get install libudev-dev\n- JDK 6.0\n    From: http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u32-downloads-1594644.html\n    Or via apt:\n    sudo apt-get install openjdk-6-jdk\n- FreeGLUT3\n    From: http://freeglut.sourceforge.net/index.php#download\n    Or via apt:\n    sudo apt-get install freeglut3-dev\n- Doxygen\n    From: http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc\n    Or via apt:\n    sudo apt-get install doxygen\n- GraphViz\n    From: http://www.graphviz.org/Download_linux_ubuntu.php\n    Or via apt:\n    sudo apt-get install graphviz\n```\n将以上的依赖安装完成之后，运行其中示例代码还需要安装对应的USB驱动，驱动安装方法如下(此方法将同目录下的USB驱动文件拷贝到系统目录中，并自动生成环境文件指明OpenNI的路径)：\n\n进入安装包OpenNI目录中\n```sh\n orbbec@localhost:OpenNI$ ./install.sh\n```\n最后，在安装文件中找到`NiViewer`运行文件，若文件不能运行，查看`chmod`权限。\n```sh\nsudo ./NiViewer\n```\n![结果图片](https://api.orbbec.com.cn/uploads/kindeditor/20200718113033.jpg)\n经过以上的配置过程，OpenNI的环境就配置完成了。\n\n## OpenCV在Arm平台上编译\n在运用开发板设备获取数据的时候，通常运用`OpenNI2`获取数据流，通过`OpenCV`对数据流进行转换，生成RGB图片和深度图片。\n\n### 下载源文件\n源文件[官方地址](https://opencv.org/releases/)，本文用的是`OpenCV3.4.3`版本。OpenCV编译的方法自行百度，编译完成后对orbbec中OpenNI2SDK和opencv进行配置。\n\n## OpenCV+OpenNI2配置\n根据官方给出的示例代码，进行编写。由于官方的代码是在`Makefile`文件中进行编写，所以opencv也需要在其中编写。根据`Makefile`文件编写规则进行编写。\n```Makefile\n#Includes\nCFLAGS = ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS = ${shell pkg-config opencv --libs}\n\n```\n其中`pkg-config`需要在系统中配置`opencv.pc`文件，文件内容，在安装的文件中可以找到，若没有则可能默认没有生成（opencv4之后的版本默认不生成），需要在编译的时候设置。\n\n`opencv`环境配置没有问题后，在orbbec提供的OpenNI2的文件中示例代码中进行整合开发。文件位置在：\n```sh\n/OpenNI/Samples/\n```\n选择其中`SimpleViewer`文件夹中的示例代码进行编写。在`CommonCppMakefile`文件夹中找到`CFLAGS`和`LDFLAGS`变量位置，在其后加上：\n```Makefile\n#Includes\nCFLAGS += ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS += ${shell pkg-config opencv --libs}\n\n```\n此外还需要在`Makefile`文件中加入OpenNI头文件的路径和Redist的路径，这就是在配置OpenNI时运行`install.sh`文件生成的环境文件中的内容，也在同级目录下。\n\n其后编译即可通过。接下来就可以使用opencv对数据进行获取保存了。","source":"_posts/OpenNI2-OpenCV.md","raw":"---\ntitle: OpenNI2_OpenCV\ndate: 2020-12-06 09:24:37\nmathjax: true\nmarkup: mmark\ncategories:\n  - 环境配置\ntags:\n  - Orbbec_OpenNI\n  - OpenCV\n  - Fanrencli\nauthor: Fanrencli\n---\n\n## 奥比中光OpenNISDK安装（Linux）\n奥比中光针对ZaroP1开发板和深度摄像机提供了相关的[OpenNI2的SDK](https://abzg-oss.oss-cn-shenzhen.aliyuncs.com/files/OpenNI-Linux-Arm64-2.3.0.65.rar),针对Windows/Linux/Android不同平台提供了相关的[安装文档](https://developer.orbbec.com.cn/technical_library.html?id=30).根据官方文档将OpenNI2配置完成，注意官方文档中说Linux平台内置驱动不需要额外安装，但是需要仔细阅读`README`文件：\n```\nOpenNI\n------\n\nWebsite: http://structure.io/openni\n\nBuilding Prerequisites(前置依赖)\n======================\n\nLinux\n-----\n- GCC 4.x\n    From: http://gcc.gnu.org/releases.html\n    Or via apt:\n    sudo apt-get install g++\n- Python 2.6+/3.x\n    From: http://www.python.org/download/\n    Or via apt:\n    sudo apt-get install python\n- LibUSB 1.0.x\n    From: http://sourceforge.net/projects/libusb/files/libusb-1.0/\n    Or via apt:\n    sudo apt-get install libusb-1.0-0-dev\n- LibUDEV\n    sudo apt-get install libudev-dev\n- JDK 6.0\n    From: http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u32-downloads-1594644.html\n    Or via apt:\n    sudo apt-get install openjdk-6-jdk\n- FreeGLUT3\n    From: http://freeglut.sourceforge.net/index.php#download\n    Or via apt:\n    sudo apt-get install freeglut3-dev\n- Doxygen\n    From: http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc\n    Or via apt:\n    sudo apt-get install doxygen\n- GraphViz\n    From: http://www.graphviz.org/Download_linux_ubuntu.php\n    Or via apt:\n    sudo apt-get install graphviz\n```\n将以上的依赖安装完成之后，运行其中示例代码还需要安装对应的USB驱动，驱动安装方法如下(此方法将同目录下的USB驱动文件拷贝到系统目录中，并自动生成环境文件指明OpenNI的路径)：\n\n进入安装包OpenNI目录中\n```sh\n orbbec@localhost:OpenNI$ ./install.sh\n```\n最后，在安装文件中找到`NiViewer`运行文件，若文件不能运行，查看`chmod`权限。\n```sh\nsudo ./NiViewer\n```\n![结果图片](https://api.orbbec.com.cn/uploads/kindeditor/20200718113033.jpg)\n经过以上的配置过程，OpenNI的环境就配置完成了。\n\n## OpenCV在Arm平台上编译\n在运用开发板设备获取数据的时候，通常运用`OpenNI2`获取数据流，通过`OpenCV`对数据流进行转换，生成RGB图片和深度图片。\n\n### 下载源文件\n源文件[官方地址](https://opencv.org/releases/)，本文用的是`OpenCV3.4.3`版本。OpenCV编译的方法自行百度，编译完成后对orbbec中OpenNI2SDK和opencv进行配置。\n\n## OpenCV+OpenNI2配置\n根据官方给出的示例代码，进行编写。由于官方的代码是在`Makefile`文件中进行编写，所以opencv也需要在其中编写。根据`Makefile`文件编写规则进行编写。\n```Makefile\n#Includes\nCFLAGS = ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS = ${shell pkg-config opencv --libs}\n\n```\n其中`pkg-config`需要在系统中配置`opencv.pc`文件，文件内容，在安装的文件中可以找到，若没有则可能默认没有生成（opencv4之后的版本默认不生成），需要在编译的时候设置。\n\n`opencv`环境配置没有问题后，在orbbec提供的OpenNI2的文件中示例代码中进行整合开发。文件位置在：\n```sh\n/OpenNI/Samples/\n```\n选择其中`SimpleViewer`文件夹中的示例代码进行编写。在`CommonCppMakefile`文件夹中找到`CFLAGS`和`LDFLAGS`变量位置，在其后加上：\n```Makefile\n#Includes\nCFLAGS += ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS += ${shell pkg-config opencv --libs}\n\n```\n此外还需要在`Makefile`文件中加入OpenNI头文件的路径和Redist的路径，这就是在配置OpenNI时运行`install.sh`文件生成的环境文件中的内容，也在同级目录下。\n\n其后编译即可通过。接下来就可以使用opencv对数据进行获取保存了。","slug":"OpenNI2-OpenCV","published":1,"updated":"2021-01-27T06:58:45.353Z","_id":"ckicrxqct0000vguo3dwod5us","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"奥比中光OpenNISDK安装（Linux）\"><a href=\"#奥比中光OpenNISDK安装（Linux）\" class=\"headerlink\" title=\"奥比中光OpenNISDK安装（Linux）\"></a>奥比中光OpenNISDK安装（Linux）</h2><p>奥比中光针对ZaroP1开发板和深度摄像机提供了相关的<a href=\"https://abzg-oss.oss-cn-shenzhen.aliyuncs.com/files/OpenNI-Linux-Arm64-2.3.0.65.rar\">OpenNI2的SDK</a>,针对Windows/Linux/Android不同平台提供了相关的<a href=\"https://developer.orbbec.com.cn/technical_library.html?id=30\">安装文档</a>.根据官方文档将OpenNI2配置完成，注意官方文档中说Linux平台内置驱动不需要额外安装，但是需要仔细阅读<code>README</code>文件：</p>\n<pre><code>OpenNI\n------\n\nWebsite: http://structure.io/openni\n\nBuilding Prerequisites(前置依赖)\n======================\n\nLinux\n-----\n- GCC 4.x\n    From: http://gcc.gnu.org/releases.html\n    Or via apt:\n    sudo apt-get install g++\n- Python 2.6+/3.x\n    From: http://www.python.org/download/\n    Or via apt:\n    sudo apt-get install python\n- LibUSB 1.0.x\n    From: http://sourceforge.net/projects/libusb/files/libusb-1.0/\n    Or via apt:\n    sudo apt-get install libusb-1.0-0-dev\n- LibUDEV\n    sudo apt-get install libudev-dev\n- JDK 6.0\n    From: http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u32-downloads-1594644.html\n    Or via apt:\n    sudo apt-get install openjdk-6-jdk\n- FreeGLUT3\n    From: http://freeglut.sourceforge.net/index.php#download\n    Or via apt:\n    sudo apt-get install freeglut3-dev\n- Doxygen\n    From: http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc\n    Or via apt:\n    sudo apt-get install doxygen\n- GraphViz\n    From: http://www.graphviz.org/Download_linux_ubuntu.php\n    Or via apt:\n    sudo apt-get install graphviz</code></pre>\n<p>将以上的依赖安装完成之后，运行其中示例代码还需要安装对应的USB驱动，驱动安装方法如下(此方法将同目录下的USB驱动文件拷贝到系统目录中，并自动生成环境文件指明OpenNI的路径)：</p>\n<p>进入安装包OpenNI目录中</p>\n<pre class=\" language-sh\"><code class=\"language-sh\"> orbbec@localhost:OpenNI$ ./install.sh</code></pre>\n<p>最后，在安装文件中找到<code>NiViewer</code>运行文件，若文件不能运行，查看<code>chmod</code>权限。</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">sudo ./NiViewer</code></pre>\n<p><img src=\"https://api.orbbec.com.cn/uploads/kindeditor/20200718113033.jpg\" alt=\"结果图片\"><br>经过以上的配置过程，OpenNI的环境就配置完成了。</p>\n<h2 id=\"OpenCV在Arm平台上编译\"><a href=\"#OpenCV在Arm平台上编译\" class=\"headerlink\" title=\"OpenCV在Arm平台上编译\"></a>OpenCV在Arm平台上编译</h2><p>在运用开发板设备获取数据的时候，通常运用<code>OpenNI2</code>获取数据流，通过<code>OpenCV</code>对数据流进行转换，生成RGB图片和深度图片。</p>\n<h3 id=\"下载源文件\"><a href=\"#下载源文件\" class=\"headerlink\" title=\"下载源文件\"></a>下载源文件</h3><p>源文件<a href=\"https://opencv.org/releases/\">官方地址</a>，本文用的是<code>OpenCV3.4.3</code>版本。OpenCV编译的方法自行百度，编译完成后对orbbec中OpenNI2SDK和opencv进行配置。</p>\n<h2 id=\"OpenCV-OpenNI2配置\"><a href=\"#OpenCV-OpenNI2配置\" class=\"headerlink\" title=\"OpenCV+OpenNI2配置\"></a>OpenCV+OpenNI2配置</h2><p>根据官方给出的示例代码，进行编写。由于官方的代码是在<code>Makefile</code>文件中进行编写，所以opencv也需要在其中编写。根据<code>Makefile</code>文件编写规则进行编写。</p>\n<pre class=\" language-Makefile\"><code class=\"language-Makefile\">#Includes\nCFLAGS = ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS = ${shell pkg-config opencv --libs}\n</code></pre>\n<p>其中<code>pkg-config</code>需要在系统中配置<code>opencv.pc</code>文件，文件内容，在安装的文件中可以找到，若没有则可能默认没有生成（opencv4之后的版本默认不生成），需要在编译的时候设置。</p>\n<p><code>opencv</code>环境配置没有问题后，在orbbec提供的OpenNI2的文件中示例代码中进行整合开发。文件位置在：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">/OpenNI/Samples/</code></pre>\n<p>选择其中<code>SimpleViewer</code>文件夹中的示例代码进行编写。在<code>CommonCppMakefile</code>文件夹中找到<code>CFLAGS</code>和<code>LDFLAGS</code>变量位置，在其后加上：</p>\n<pre class=\" language-Makefile\"><code class=\"language-Makefile\">#Includes\nCFLAGS += ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS += ${shell pkg-config opencv --libs}\n</code></pre>\n<p>此外还需要在<code>Makefile</code>文件中加入OpenNI头文件的路径和Redist的路径，这就是在配置OpenNI时运行<code>install.sh</code>文件生成的环境文件中的内容，也在同级目录下。</p>\n<p>其后编译即可通过。接下来就可以使用opencv对数据进行获取保存了。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"奥比中光OpenNISDK安装（Linux）\"><a href=\"#奥比中光OpenNISDK安装（Linux）\" class=\"headerlink\" title=\"奥比中光OpenNISDK安装（Linux）\"></a>奥比中光OpenNISDK安装（Linux）</h2><p>奥比中光针对ZaroP1开发板和深度摄像机提供了相关的<a href=\"https://abzg-oss.oss-cn-shenzhen.aliyuncs.com/files/OpenNI-Linux-Arm64-2.3.0.65.rar\">OpenNI2的SDK</a>,针对Windows/Linux/Android不同平台提供了相关的<a href=\"https://developer.orbbec.com.cn/technical_library.html?id=30\">安装文档</a>.根据官方文档将OpenNI2配置完成，注意官方文档中说Linux平台内置驱动不需要额外安装，但是需要仔细阅读<code>README</code>文件：</p>\n<pre><code>OpenNI\n------\n\nWebsite: http://structure.io/openni\n\nBuilding Prerequisites(前置依赖)\n======================\n\nLinux\n-----\n- GCC 4.x\n    From: http://gcc.gnu.org/releases.html\n    Or via apt:\n    sudo apt-get install g++\n- Python 2.6+/3.x\n    From: http://www.python.org/download/\n    Or via apt:\n    sudo apt-get install python\n- LibUSB 1.0.x\n    From: http://sourceforge.net/projects/libusb/files/libusb-1.0/\n    Or via apt:\n    sudo apt-get install libusb-1.0-0-dev\n- LibUDEV\n    sudo apt-get install libudev-dev\n- JDK 6.0\n    From: http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u32-downloads-1594644.html\n    Or via apt:\n    sudo apt-get install openjdk-6-jdk\n- FreeGLUT3\n    From: http://freeglut.sourceforge.net/index.php#download\n    Or via apt:\n    sudo apt-get install freeglut3-dev\n- Doxygen\n    From: http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc\n    Or via apt:\n    sudo apt-get install doxygen\n- GraphViz\n    From: http://www.graphviz.org/Download_linux_ubuntu.php\n    Or via apt:\n    sudo apt-get install graphviz</code></pre>\n<p>将以上的依赖安装完成之后，运行其中示例代码还需要安装对应的USB驱动，驱动安装方法如下(此方法将同目录下的USB驱动文件拷贝到系统目录中，并自动生成环境文件指明OpenNI的路径)：</p>\n<p>进入安装包OpenNI目录中</p>\n<pre><code class=\"sh\"> orbbec@localhost:OpenNI$ ./install.sh</code></pre>\n<p>最后，在安装文件中找到<code>NiViewer</code>运行文件，若文件不能运行，查看<code>chmod</code>权限。</p>\n<pre><code class=\"sh\">sudo ./NiViewer</code></pre>\n<p><img src=\"https://api.orbbec.com.cn/uploads/kindeditor/20200718113033.jpg\" alt=\"结果图片\"><br>经过以上的配置过程，OpenNI的环境就配置完成了。</p>\n<h2 id=\"OpenCV在Arm平台上编译\"><a href=\"#OpenCV在Arm平台上编译\" class=\"headerlink\" title=\"OpenCV在Arm平台上编译\"></a>OpenCV在Arm平台上编译</h2><p>在运用开发板设备获取数据的时候，通常运用<code>OpenNI2</code>获取数据流，通过<code>OpenCV</code>对数据流进行转换，生成RGB图片和深度图片。</p>\n<h3 id=\"下载源文件\"><a href=\"#下载源文件\" class=\"headerlink\" title=\"下载源文件\"></a>下载源文件</h3><p>源文件<a href=\"https://opencv.org/releases/\">官方地址</a>，本文用的是<code>OpenCV3.4.3</code>版本。OpenCV编译的方法自行百度，编译完成后对orbbec中OpenNI2SDK和opencv进行配置。</p>\n<h2 id=\"OpenCV-OpenNI2配置\"><a href=\"#OpenCV-OpenNI2配置\" class=\"headerlink\" title=\"OpenCV+OpenNI2配置\"></a>OpenCV+OpenNI2配置</h2><p>根据官方给出的示例代码，进行编写。由于官方的代码是在<code>Makefile</code>文件中进行编写，所以opencv也需要在其中编写。根据<code>Makefile</code>文件编写规则进行编写。</p>\n<pre><code class=\"Makefile\">#Includes\nCFLAGS = $&#123;shell pkg-config opencv --cflags&#125;\n\n#lib\nLDFLAGS = $&#123;shell pkg-config opencv --libs&#125;\n</code></pre>\n<p>其中<code>pkg-config</code>需要在系统中配置<code>opencv.pc</code>文件，文件内容，在安装的文件中可以找到，若没有则可能默认没有生成（opencv4之后的版本默认不生成），需要在编译的时候设置。</p>\n<p><code>opencv</code>环境配置没有问题后，在orbbec提供的OpenNI2的文件中示例代码中进行整合开发。文件位置在：</p>\n<pre><code class=\"sh\">/OpenNI/Samples/</code></pre>\n<p>选择其中<code>SimpleViewer</code>文件夹中的示例代码进行编写。在<code>CommonCppMakefile</code>文件夹中找到<code>CFLAGS</code>和<code>LDFLAGS</code>变量位置，在其后加上：</p>\n<pre><code class=\"Makefile\">#Includes\nCFLAGS += $&#123;shell pkg-config opencv --cflags&#125;\n\n#lib\nLDFLAGS += $&#123;shell pkg-config opencv --libs&#125;\n</code></pre>\n<p>此外还需要在<code>Makefile</code>文件中加入OpenNI头文件的路径和Redist的路径，这就是在配置OpenNI时运行<code>install.sh</code>文件生成的环境文件中的内容，也在同级目录下。</p>\n<p>其后编译即可通过。接下来就可以使用opencv对数据进行获取保存了。</p>\n"},{"title":"8086","date":"2021-01-27T05:51:20.000Z","top":true,"cover":true,"author":"Fanrencli","_content":"## 寄存器简介\n\n| 寄存器名称 | 功能 |操作 |\n|---|---|---|\n| ax | 累加寄存器 | 经常使用，可以作为存储器看待 |\n| bx | 基础寄存器 | 经常使用，访问内存时`[]`中只可以使用`bx`/`bp`/`si`/`di`和数字索引，默认使用的段寄存器为`ds` |\n| cx | 循环寄存器 | 在使用`loop`做循环处理时，根据`cx`的值判断还有几次循环 |\n| dx | 备用寄存器 | 在做除法时，对32位被除数存储时，高位放在dx中 |\n| sp | 栈顶指针 | 在出栈、入栈时结合ss，对ss:sp处的内存进行操作 |\n| bp | 指针寄存器 | 在未指明段寄存器的情况下，使用`[bp]`默认段寄存器为`ss` |\n| si | 变址寄存器 | 在未指明段寄存器的情况下，使用`[si]`默认段寄存器为`ds` |\n| di | 变址寄存器 | 在未指明段寄存器的情况下，使用`[di]`默认段寄存器为`ds` |\n| ds | 段地址寄存器 | 通常指向初始化程序的内存代码段地址，在ds地址之后是psp程序前缀，大小为10H——16个字节，之后是程序运行的第一条指令地址，ds通常用于操作内存的段地址寄存器 |\n| es | 段地址寄存器 | 可以用于存放段地址，可以作为备用段地址 |\n| ss | 指针基址寄存器 | 可以用于存放指针段地址，通常与sp共同使用|\n| cs | 指令地址寄存器 | 可以用于存放下一个运行指令的地址，cs:ip |\n| ip | 指令偏移寄存器 | cs:ip |\n\n## 实验案例1\n已有数据：\n```\ndb '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\n以上是21年的字符串\n\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\n以上是21年公司的收入\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\n以上是21年公司雇佣的人数\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n\n```\n通过编程将data中的数据写入到table中，并计算21年的人均收入(取整)\n汇编实现:\n```asm\nassume cs:codesg\nstack segment\ndb '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\nstack ends\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n\ncodesg segment\n  start:\n    mov ax,stack\n    mov ss,ax\n    mov sp,0H\n    mov ax,table\n    mov ds,ax\n    mov cx,21\n    mov bx,0\n  s:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s\n\n  mov cx,21\n  mov bx,5\n  s0:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s0\n\n  mov cx,21\n  mov bx,10\n  s1:\n    pop ax\n    mov ds:[bx],ax\n    add bx,16\n  loop s1\n\n  mov cx,21\n  mov bx,0\n  s2:\n    mov ax,ds:[bx+5]\n    mov dx,ds:[bx+7]\n    div word ptr ds:[bx+10]\n    mov ds:[bx+13],ax\n    add bx,16\n  loop s2\n\n  mov ax,4c00h\n  int 21h\ncodesg ends\nend start\n```\n## 实验案例2\n在DOS窗口中显示字符，其中`B8000H`~`BFFFFH`共`32KB`的空间，这是一个缓冲区，向此缓冲区写入数据，写入的内容将立即出现在显示器上。其中奇数位地址为显示的字符内容，偶数位地址为显示的颜色（RGB，前景色，背景色）\n代码实现：其中在向寄存器中写入`B800H`时，由于十六进制不可以以字母开头，所有在`B800H`前加上一个`0`\n```asm\nassume cs:code\ndata segment\ndb 'conversation'\ndata ends\ncode segment\nstart:\n    mov ax,0b800h\n    mov ds,ax\n    mov bx,0\n    mov byte ptr [bx],41h\n    mov byte ptr [bx].1h,02h\n    mov byte ptr [bx].2h,42h\n    mov byte ptr [bx].3h,02h\n    mov byte ptr [bx].4h,43h\n    mov byte ptr [bx].5h,02h\n    mov byte ptr [bx].6h,44h\n    mov byte ptr [bx].7h,02h\n    mov ax,4c00h\n    int 21h\ncode ends\nend start\n```","source":"_posts/8086/8086.md","raw":"---\ntitle: 8086\ndate: 2021-01-27 13:51:20\ntop: true\ncover: true\ncategories:\n  - Assembly Language\ntags:\n  - 8086\n  - Fanrencli\nauthor: Fanrencli\n---\n## 寄存器简介\n\n| 寄存器名称 | 功能 |操作 |\n|---|---|---|\n| ax | 累加寄存器 | 经常使用，可以作为存储器看待 |\n| bx | 基础寄存器 | 经常使用，访问内存时`[]`中只可以使用`bx`/`bp`/`si`/`di`和数字索引，默认使用的段寄存器为`ds` |\n| cx | 循环寄存器 | 在使用`loop`做循环处理时，根据`cx`的值判断还有几次循环 |\n| dx | 备用寄存器 | 在做除法时，对32位被除数存储时，高位放在dx中 |\n| sp | 栈顶指针 | 在出栈、入栈时结合ss，对ss:sp处的内存进行操作 |\n| bp | 指针寄存器 | 在未指明段寄存器的情况下，使用`[bp]`默认段寄存器为`ss` |\n| si | 变址寄存器 | 在未指明段寄存器的情况下，使用`[si]`默认段寄存器为`ds` |\n| di | 变址寄存器 | 在未指明段寄存器的情况下，使用`[di]`默认段寄存器为`ds` |\n| ds | 段地址寄存器 | 通常指向初始化程序的内存代码段地址，在ds地址之后是psp程序前缀，大小为10H——16个字节，之后是程序运行的第一条指令地址，ds通常用于操作内存的段地址寄存器 |\n| es | 段地址寄存器 | 可以用于存放段地址，可以作为备用段地址 |\n| ss | 指针基址寄存器 | 可以用于存放指针段地址，通常与sp共同使用|\n| cs | 指令地址寄存器 | 可以用于存放下一个运行指令的地址，cs:ip |\n| ip | 指令偏移寄存器 | cs:ip |\n\n## 实验案例1\n已有数据：\n```\ndb '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\n以上是21年的字符串\n\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\n以上是21年公司的收入\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\n以上是21年公司雇佣的人数\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n\n```\n通过编程将data中的数据写入到table中，并计算21年的人均收入(取整)\n汇编实现:\n```asm\nassume cs:codesg\nstack segment\ndb '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\nstack ends\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n\ncodesg segment\n  start:\n    mov ax,stack\n    mov ss,ax\n    mov sp,0H\n    mov ax,table\n    mov ds,ax\n    mov cx,21\n    mov bx,0\n  s:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s\n\n  mov cx,21\n  mov bx,5\n  s0:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s0\n\n  mov cx,21\n  mov bx,10\n  s1:\n    pop ax\n    mov ds:[bx],ax\n    add bx,16\n  loop s1\n\n  mov cx,21\n  mov bx,0\n  s2:\n    mov ax,ds:[bx+5]\n    mov dx,ds:[bx+7]\n    div word ptr ds:[bx+10]\n    mov ds:[bx+13],ax\n    add bx,16\n  loop s2\n\n  mov ax,4c00h\n  int 21h\ncodesg ends\nend start\n```\n## 实验案例2\n在DOS窗口中显示字符，其中`B8000H`~`BFFFFH`共`32KB`的空间，这是一个缓冲区，向此缓冲区写入数据，写入的内容将立即出现在显示器上。其中奇数位地址为显示的字符内容，偶数位地址为显示的颜色（RGB，前景色，背景色）\n代码实现：其中在向寄存器中写入`B800H`时，由于十六进制不可以以字母开头，所有在`B800H`前加上一个`0`\n```asm\nassume cs:code\ndata segment\ndb 'conversation'\ndata ends\ncode segment\nstart:\n    mov ax,0b800h\n    mov ds,ax\n    mov bx,0\n    mov byte ptr [bx],41h\n    mov byte ptr [bx].1h,02h\n    mov byte ptr [bx].2h,42h\n    mov byte ptr [bx].3h,02h\n    mov byte ptr [bx].4h,43h\n    mov byte ptr [bx].5h,02h\n    mov byte ptr [bx].6h,44h\n    mov byte ptr [bx].7h,02h\n    mov ax,4c00h\n    int 21h\ncode ends\nend start\n```","slug":"8086/8086","published":1,"updated":"2021-01-27T08:39:01.289Z","_id":"ckkf2tf280000x0uo4i61cefc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"寄存器简介\"><a href=\"#寄存器简介\" class=\"headerlink\" title=\"寄存器简介\"></a>寄存器简介</h2><table>\n<thead>\n<tr>\n<th>寄存器名称</th>\n<th>功能</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ax</td>\n<td>累加寄存器</td>\n<td>经常使用，可以作为存储器看待</td>\n</tr>\n<tr>\n<td>bx</td>\n<td>基础寄存器</td>\n<td>经常使用，访问内存时<code>[]</code>中只可以使用<code>bx</code>/<code>bp</code>/<code>si</code>/<code>di</code>和数字索引，默认使用的段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>cx</td>\n<td>循环寄存器</td>\n<td>在使用<code>loop</code>做循环处理时，根据<code>cx</code>的值判断还有几次循环</td>\n</tr>\n<tr>\n<td>dx</td>\n<td>备用寄存器</td>\n<td>在做除法时，对32位被除数存储时，高位放在dx中</td>\n</tr>\n<tr>\n<td>sp</td>\n<td>栈顶指针</td>\n<td>在出栈、入栈时结合ss，对ss:sp处的内存进行操作</td>\n</tr>\n<tr>\n<td>bp</td>\n<td>指针寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[bp]</code>默认段寄存器为<code>ss</code></td>\n</tr>\n<tr>\n<td>si</td>\n<td>变址寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[si]</code>默认段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>di</td>\n<td>变址寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[di]</code>默认段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>ds</td>\n<td>段地址寄存器</td>\n<td>通常指向初始化程序的内存代码段地址，在ds地址之后是psp程序前缀，大小为10H——16个字节，之后是程序运行的第一条指令地址，ds通常用于操作内存的段地址寄存器</td>\n</tr>\n<tr>\n<td>es</td>\n<td>段地址寄存器</td>\n<td>可以用于存放段地址，可以作为备用段地址</td>\n</tr>\n<tr>\n<td>ss</td>\n<td>指针基址寄存器</td>\n<td>可以用于存放指针段地址，通常与sp共同使用</td>\n</tr>\n<tr>\n<td>cs</td>\n<td>指令地址寄存器</td>\n<td>可以用于存放下一个运行指令的地址，cs:ip</td>\n</tr>\n<tr>\n<td>ip</td>\n<td>指令偏移寄存器</td>\n<td>cs:ip</td>\n</tr>\n</tbody></table>\n<h2 id=\"实验案例1\"><a href=\"#实验案例1\" class=\"headerlink\" title=\"实验案例1\"></a>实验案例1</h2><p>已有数据：</p>\n<pre><code>db '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\n以上是21年的字符串\n\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\n以上是21年公司的收入\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\n以上是21年公司雇佣的人数\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n</code></pre>\n<p>通过编程将data中的数据写入到table中，并计算21年的人均收入(取整)<br>汇编实现:</p>\n<pre class=\" language-asm\"><code class=\"language-asm\">assume cs:codesg\nstack segment\ndb '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\nstack ends\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n\ncodesg segment\n  start:\n    mov ax,stack\n    mov ss,ax\n    mov sp,0H\n    mov ax,table\n    mov ds,ax\n    mov cx,21\n    mov bx,0\n  s:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s\n\n  mov cx,21\n  mov bx,5\n  s0:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s0\n\n  mov cx,21\n  mov bx,10\n  s1:\n    pop ax\n    mov ds:[bx],ax\n    add bx,16\n  loop s1\n\n  mov cx,21\n  mov bx,0\n  s2:\n    mov ax,ds:[bx+5]\n    mov dx,ds:[bx+7]\n    div word ptr ds:[bx+10]\n    mov ds:[bx+13],ax\n    add bx,16\n  loop s2\n\n  mov ax,4c00h\n  int 21h\ncodesg ends\nend start</code></pre>\n<h2 id=\"实验案例2\"><a href=\"#实验案例2\" class=\"headerlink\" title=\"实验案例2\"></a>实验案例2</h2><p>在DOS窗口中显示字符，其中<code>B8000H</code>~<code>BFFFFH</code>共<code>32KB</code>的空间，这是一个缓冲区，向此缓冲区写入数据，写入的内容将立即出现在显示器上。其中奇数位地址为显示的字符内容，偶数位地址为显示的颜色（RGB，前景色，背景色）<br>代码实现：其中在向寄存器中写入<code>B800H</code>时，由于十六进制不可以以字母开头，所有在<code>B800H</code>前加上一个<code>0</code></p>\n<pre class=\" language-asm\"><code class=\"language-asm\">assume cs:code\ndata segment\ndb 'conversation'\ndata ends\ncode segment\nstart:\n    mov ax,0b800h\n    mov ds,ax\n    mov bx,0\n    mov byte ptr [bx],41h\n    mov byte ptr [bx].1h,02h\n    mov byte ptr [bx].2h,42h\n    mov byte ptr [bx].3h,02h\n    mov byte ptr [bx].4h,43h\n    mov byte ptr [bx].5h,02h\n    mov byte ptr [bx].6h,44h\n    mov byte ptr [bx].7h,02h\n    mov ax,4c00h\n    int 21h\ncode ends\nend start</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"寄存器简介\"><a href=\"#寄存器简介\" class=\"headerlink\" title=\"寄存器简介\"></a>寄存器简介</h2><table>\n<thead>\n<tr>\n<th>寄存器名称</th>\n<th>功能</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ax</td>\n<td>累加寄存器</td>\n<td>经常使用，可以作为存储器看待</td>\n</tr>\n<tr>\n<td>bx</td>\n<td>基础寄存器</td>\n<td>经常使用，访问内存时<code>[]</code>中只可以使用<code>bx</code>/<code>bp</code>/<code>si</code>/<code>di</code>和数字索引，默认使用的段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>cx</td>\n<td>循环寄存器</td>\n<td>在使用<code>loop</code>做循环处理时，根据<code>cx</code>的值判断还有几次循环</td>\n</tr>\n<tr>\n<td>dx</td>\n<td>备用寄存器</td>\n<td>在做除法时，对32位被除数存储时，高位放在dx中</td>\n</tr>\n<tr>\n<td>sp</td>\n<td>栈顶指针</td>\n<td>在出栈、入栈时结合ss，对ss:sp处的内存进行操作</td>\n</tr>\n<tr>\n<td>bp</td>\n<td>指针寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[bp]</code>默认段寄存器为<code>ss</code></td>\n</tr>\n<tr>\n<td>si</td>\n<td>变址寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[si]</code>默认段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>di</td>\n<td>变址寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[di]</code>默认段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>ds</td>\n<td>段地址寄存器</td>\n<td>通常指向初始化程序的内存代码段地址，在ds地址之后是psp程序前缀，大小为10H——16个字节，之后是程序运行的第一条指令地址，ds通常用于操作内存的段地址寄存器</td>\n</tr>\n<tr>\n<td>es</td>\n<td>段地址寄存器</td>\n<td>可以用于存放段地址，可以作为备用段地址</td>\n</tr>\n<tr>\n<td>ss</td>\n<td>指针基址寄存器</td>\n<td>可以用于存放指针段地址，通常与sp共同使用</td>\n</tr>\n<tr>\n<td>cs</td>\n<td>指令地址寄存器</td>\n<td>可以用于存放下一个运行指令的地址，cs:ip</td>\n</tr>\n<tr>\n<td>ip</td>\n<td>指令偏移寄存器</td>\n<td>cs:ip</td>\n</tr>\n</tbody></table>\n<h2 id=\"实验案例1\"><a href=\"#实验案例1\" class=\"headerlink\" title=\"实验案例1\"></a>实验案例1</h2><p>已有数据：</p>\n<pre><code>db &#39;1975&#39;,&#39;1976&#39;,&#39;1977&#39;,&#39;1978&#39;,&#39;1979&#39;,&#39;1980&#39;,&#39;1981&#39;,&#39;1982&#39;,&#39;1983&#39;,&#39;1984&#39;,&#39;1985&#39;,&#39;1986&#39;,&#39;1987&#39;\ndb &#39;1988&#39;,&#39;1989&#39;,&#39;1990&#39;,&#39;1991&#39;,&#39;1992&#39;,&#39;1993&#39;,&#39;1994&#39;,&#39;1995&#39;\n以上是21年的字符串\n\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\n以上是21年公司的收入\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\n以上是21年公司雇佣的人数\n\ntable segment\ndb 21 dup(&#39;year summ ne ?? &#39;)\ntable ends\n</code></pre>\n<p>通过编程将data中的数据写入到table中，并计算21年的人均收入(取整)<br>汇编实现:</p>\n<pre><code class=\"asm\">assume cs:codesg\nstack segment\ndb &#39;1975&#39;,&#39;1976&#39;,&#39;1977&#39;,&#39;1978&#39;,&#39;1979&#39;,&#39;1980&#39;,&#39;1981&#39;,&#39;1982&#39;,&#39;1983&#39;,&#39;1984&#39;,&#39;1985&#39;,&#39;1986&#39;,&#39;1987&#39;\ndb &#39;1988&#39;,&#39;1989&#39;,&#39;1990&#39;,&#39;1991&#39;,&#39;1992&#39;,&#39;1993&#39;,&#39;1994&#39;,&#39;1995&#39;\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\nstack ends\n\ntable segment\ndb 21 dup(&#39;year summ ne ?? &#39;)\ntable ends\n\ncodesg segment\n  start:\n    mov ax,stack\n    mov ss,ax\n    mov sp,0H\n    mov ax,table\n    mov ds,ax\n    mov cx,21\n    mov bx,0\n  s:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s\n\n  mov cx,21\n  mov bx,5\n  s0:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s0\n\n  mov cx,21\n  mov bx,10\n  s1:\n    pop ax\n    mov ds:[bx],ax\n    add bx,16\n  loop s1\n\n  mov cx,21\n  mov bx,0\n  s2:\n    mov ax,ds:[bx+5]\n    mov dx,ds:[bx+7]\n    div word ptr ds:[bx+10]\n    mov ds:[bx+13],ax\n    add bx,16\n  loop s2\n\n  mov ax,4c00h\n  int 21h\ncodesg ends\nend start</code></pre>\n<h2 id=\"实验案例2\"><a href=\"#实验案例2\" class=\"headerlink\" title=\"实验案例2\"></a>实验案例2</h2><p>在DOS窗口中显示字符，其中<code>B8000H</code>~<code>BFFFFH</code>共<code>32KB</code>的空间，这是一个缓冲区，向此缓冲区写入数据，写入的内容将立即出现在显示器上。其中奇数位地址为显示的字符内容，偶数位地址为显示的颜色（RGB，前景色，背景色）<br>代码实现：其中在向寄存器中写入<code>B800H</code>时，由于十六进制不可以以字母开头，所有在<code>B800H</code>前加上一个<code>0</code></p>\n<pre><code class=\"asm\">assume cs:code\ndata segment\ndb &#39;conversation&#39;\ndata ends\ncode segment\nstart:\n    mov ax,0b800h\n    mov ds,ax\n    mov bx,0\n    mov byte ptr [bx],41h\n    mov byte ptr [bx].1h,02h\n    mov byte ptr [bx].2h,42h\n    mov byte ptr [bx].3h,02h\n    mov byte ptr [bx].4h,43h\n    mov byte ptr [bx].5h,02h\n    mov byte ptr [bx].6h,44h\n    mov byte ptr [bx].7h,02h\n    mov ax,4c00h\n    int 21h\ncode ends\nend start</code></pre>\n"},{"title":"jsis3d","date":"2021-02-06T11:50:17.000Z","top":true,"author":"Fanrencli","_content":"## JSIS3D 论文学习记录\n\n论文地址：\n\n- https://gitee.com/FanrenCLI/jsis3d\n- https://github.com/pqhieu/jsis3d\n  \n## 环境准备\n- CUDA 10\n- Python 3.5+\n- Pytorch 0.4.0+\n\n### Installation\n首先需要编译`MV-CRF`,在下载的文件根目录中运行一下命令：\n```sh\n    cd external/densecrf\n    mkdir build\n    cd build\n    cmake -D CMAKE_BUILD_TYPE=Release ..\n    make\n    cd ../../.. # You should be at the root folder here\n    make\n```\n\n\n### Dataset\n1. 如果想自己准备数据集：\n- 数据集准备，JSIS3D论文使用的是开源的[S3DIS](http://buildingparser.stanford.edu/dataset.html)数据集，所以需要下载`S3DIS`数据集,这个数据集下载之后大约4个G，解压之后16G。\n- 在`data/s3dis`文件夹下创建`raw`和`processed`两个空文件夹用于存放原始数据和处理的过程数据\n- 创建完`raw`和`processed`两个空文件夹之后，将我们下载的`S3DIS`数据集解压之后放入`raw`文件夹下\n- 进入根目录下的`script`文件夹中，里面包含四个`py`文件，先运行`collect_annotations.py`文件，之后再运行`prepare_h5.py`\n- 运行`prepare_h5.py`文件时，首先需要修改文件中`91`行的代码，将其中`num_points`改成`4096`,这是根据`pointnet`作者代码设置的参数进行设置的\n- 运行完`prepare_h5.py`文件之后，接着运行`estimate_mean_size.py`和`estimate_median_freq.py`文件，数据集这样就制作完毕了。\n2. 如果想使用作者提供的数据集：\n- 作者提供了已经处理好的`S3DIS`数据集，[文件地址](https://drive.google.com/open?id=1s1cFfb8cInM-SNHQoTGxN9BIyNpNQK6x)\n- 下载了作者的数据集之后，将解压后的数据集放入`data/s3dis/h5`即可\n\n\n### Training & Evaluation\n\n准备数据集之后，开始训练数据：\n```sh\n    python train.py --config configs/s3dis.json --logdir logs/s3dis\n```\n数据训练完成之后，模型相关的数据将会放在`logs/s3dis`文件夹下。\n\n运行训练完的模型进行预测：\n```sh\n    python pred.py --logdir logs/s3dis --mvcrf\n```\n\n预测代码运行之后，会在`logs/s3dis`文件夹下生成`pred.npz`文件，之后想要对预测的结果进行可视化以及评价精度，运行以下代码：\n```sh\n    python eval.py --logdir logs/s3dis --visualize\n```\n运行完以上代码之后，将会在`logs/s3dis`文件夹中，生成ply文件，运用相关程序打开ply文件可以，发现里面有各个点运行的class和label信息。本文结合`open3d`和`plyfile`两个python库，对ply文件进行了处理与可视化，代码如下：\n```python\n    import open3d as o3d\n    import numpy as np\n    from plyfile import PlyData, PlyElement\n    plydata = PlyData.read(\n        r'F:\\python_work\\open3d_work\\Area_5_conferenceRoom_1.ply')\n    pc = plydata['vertex'].data\n    pcd_array = []\n    for i in range(pc.size):\n        pcd_array.append(list(pc[i]))\n    pcd_array = np.array(pcd_array)\n    colors=pcd_array[:, 3:6]\n    class_label = pcd_array[:, 6]\n    t=class_label.tolist()\n    s=set(t)\n    class_label_pro = list(s)\n    colors_list=[[152, 0, 0],[255, 0, 0],[255, 153, 0],[255, 255, 0],[0, 255, 0],[0, 255, 255],[74, 134, 232],[0, 0, 255],[255, 0, 255],[230, 184, 175],[252, 229, 205],[208, 224, 227],[221, 126, 107]]\n    for i in range(class_label.size):\n        colors[i]=colors_list[class_label_pro.index(class_label[i])]\n    pointcloud = o3d.geometry.PointCloud()\n    pointcloud.points = o3d.utility.Vector3dVector(pcd_array[:, 0:3])\n    pointcloud.colors = o3d.utility.Vector3dVector(colors/255)\n    o3d.io.write_point_cloud(\"copy_of_fragment.pcd\", pointcloud)\n    o3d.visualization.draw_geometries([pointcloud])\n    print('ok')\n```\n针对以上代码可以在理解的基础上进行修改。结果图展示：\n\n![结果图](http://39.105.26.229:4567/1.png)\n![数据图](http://39.105.26.229:4567/2.png)\n\n> **注意**:论文中针对S3DIS数据集，以区域1,2,3,4,6作为训练集，区域5作为测试集 \n\n","source":"_posts/jsis3d/jsis3d.md","raw":"---\ntitle: jsis3d\ndate: 2021-02-06 19:50:17\ntop: true\ncategories:\n  - Deep Learning\ntags:\n  - Jsis3d\n  - Fanrencli\nauthor: Fanrencli\n---\n## JSIS3D 论文学习记录\n\n论文地址：\n\n- https://gitee.com/FanrenCLI/jsis3d\n- https://github.com/pqhieu/jsis3d\n  \n## 环境准备\n- CUDA 10\n- Python 3.5+\n- Pytorch 0.4.0+\n\n### Installation\n首先需要编译`MV-CRF`,在下载的文件根目录中运行一下命令：\n```sh\n    cd external/densecrf\n    mkdir build\n    cd build\n    cmake -D CMAKE_BUILD_TYPE=Release ..\n    make\n    cd ../../.. # You should be at the root folder here\n    make\n```\n\n\n### Dataset\n1. 如果想自己准备数据集：\n- 数据集准备，JSIS3D论文使用的是开源的[S3DIS](http://buildingparser.stanford.edu/dataset.html)数据集，所以需要下载`S3DIS`数据集,这个数据集下载之后大约4个G，解压之后16G。\n- 在`data/s3dis`文件夹下创建`raw`和`processed`两个空文件夹用于存放原始数据和处理的过程数据\n- 创建完`raw`和`processed`两个空文件夹之后，将我们下载的`S3DIS`数据集解压之后放入`raw`文件夹下\n- 进入根目录下的`script`文件夹中，里面包含四个`py`文件，先运行`collect_annotations.py`文件，之后再运行`prepare_h5.py`\n- 运行`prepare_h5.py`文件时，首先需要修改文件中`91`行的代码，将其中`num_points`改成`4096`,这是根据`pointnet`作者代码设置的参数进行设置的\n- 运行完`prepare_h5.py`文件之后，接着运行`estimate_mean_size.py`和`estimate_median_freq.py`文件，数据集这样就制作完毕了。\n2. 如果想使用作者提供的数据集：\n- 作者提供了已经处理好的`S3DIS`数据集，[文件地址](https://drive.google.com/open?id=1s1cFfb8cInM-SNHQoTGxN9BIyNpNQK6x)\n- 下载了作者的数据集之后，将解压后的数据集放入`data/s3dis/h5`即可\n\n\n### Training & Evaluation\n\n准备数据集之后，开始训练数据：\n```sh\n    python train.py --config configs/s3dis.json --logdir logs/s3dis\n```\n数据训练完成之后，模型相关的数据将会放在`logs/s3dis`文件夹下。\n\n运行训练完的模型进行预测：\n```sh\n    python pred.py --logdir logs/s3dis --mvcrf\n```\n\n预测代码运行之后，会在`logs/s3dis`文件夹下生成`pred.npz`文件，之后想要对预测的结果进行可视化以及评价精度，运行以下代码：\n```sh\n    python eval.py --logdir logs/s3dis --visualize\n```\n运行完以上代码之后，将会在`logs/s3dis`文件夹中，生成ply文件，运用相关程序打开ply文件可以，发现里面有各个点运行的class和label信息。本文结合`open3d`和`plyfile`两个python库，对ply文件进行了处理与可视化，代码如下：\n```python\n    import open3d as o3d\n    import numpy as np\n    from plyfile import PlyData, PlyElement\n    plydata = PlyData.read(\n        r'F:\\python_work\\open3d_work\\Area_5_conferenceRoom_1.ply')\n    pc = plydata['vertex'].data\n    pcd_array = []\n    for i in range(pc.size):\n        pcd_array.append(list(pc[i]))\n    pcd_array = np.array(pcd_array)\n    colors=pcd_array[:, 3:6]\n    class_label = pcd_array[:, 6]\n    t=class_label.tolist()\n    s=set(t)\n    class_label_pro = list(s)\n    colors_list=[[152, 0, 0],[255, 0, 0],[255, 153, 0],[255, 255, 0],[0, 255, 0],[0, 255, 255],[74, 134, 232],[0, 0, 255],[255, 0, 255],[230, 184, 175],[252, 229, 205],[208, 224, 227],[221, 126, 107]]\n    for i in range(class_label.size):\n        colors[i]=colors_list[class_label_pro.index(class_label[i])]\n    pointcloud = o3d.geometry.PointCloud()\n    pointcloud.points = o3d.utility.Vector3dVector(pcd_array[:, 0:3])\n    pointcloud.colors = o3d.utility.Vector3dVector(colors/255)\n    o3d.io.write_point_cloud(\"copy_of_fragment.pcd\", pointcloud)\n    o3d.visualization.draw_geometries([pointcloud])\n    print('ok')\n```\n针对以上代码可以在理解的基础上进行修改。结果图展示：\n\n![结果图](http://39.105.26.229:4567/1.png)\n![数据图](http://39.105.26.229:4567/2.png)\n\n> **注意**:论文中针对S3DIS数据集，以区域1,2,3,4,6作为训练集，区域5作为测试集 \n\n","slug":"jsis3d/jsis3d","published":1,"updated":"2021-04-18T06:01:53.272Z","_id":"cknmrfu4p000030uo6m1l2idg","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"JSIS3D-论文学习记录\"><a href=\"#JSIS3D-论文学习记录\" class=\"headerlink\" title=\"JSIS3D 论文学习记录\"></a>JSIS3D 论文学习记录</h2><p>论文地址：</p>\n<ul>\n<li><a href=\"https://gitee.com/FanrenCLI/jsis3d\">https://gitee.com/FanrenCLI/jsis3d</a></li>\n<li><a href=\"https://github.com/pqhieu/jsis3d\">https://github.com/pqhieu/jsis3d</a></li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li>CUDA 10</li>\n<li>Python 3.5+</li>\n<li>Pytorch 0.4.0+</li>\n</ul>\n<h3 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h3><p>首先需要编译<code>MV-CRF</code>,在下载的文件根目录中运行一下命令：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">    cd external/densecrf\n    mkdir build\n    cd build\n    cmake -D CMAKE_BUILD_TYPE=Release ..\n    make\n    cd ../../.. # You should be at the root folder here\n    make</code></pre>\n<h3 id=\"Dataset\"><a href=\"#Dataset\" class=\"headerlink\" title=\"Dataset\"></a>Dataset</h3><ol>\n<li>如果想自己准备数据集：</li>\n</ol>\n<ul>\n<li>数据集准备，JSIS3D论文使用的是开源的<a href=\"http://buildingparser.stanford.edu/dataset.html\">S3DIS</a>数据集，所以需要下载<code>S3DIS</code>数据集,这个数据集下载之后大约4个G，解压之后16G。</li>\n<li>在<code>data/s3dis</code>文件夹下创建<code>raw</code>和<code>processed</code>两个空文件夹用于存放原始数据和处理的过程数据</li>\n<li>创建完<code>raw</code>和<code>processed</code>两个空文件夹之后，将我们下载的<code>S3DIS</code>数据集解压之后放入<code>raw</code>文件夹下</li>\n<li>进入根目录下的<code>script</code>文件夹中，里面包含四个<code>py</code>文件，先运行<code>collect_annotations.py</code>文件，之后再运行<code>prepare_h5.py</code></li>\n<li>运行<code>prepare_h5.py</code>文件时，首先需要修改文件中<code>91</code>行的代码，将其中<code>num_points</code>改成<code>4096</code>,这是根据<code>pointnet</code>作者代码设置的参数进行设置的</li>\n<li>运行完<code>prepare_h5.py</code>文件之后，接着运行<code>estimate_mean_size.py</code>和<code>estimate_median_freq.py</code>文件，数据集这样就制作完毕了。</li>\n</ul>\n<ol start=\"2\">\n<li>如果想使用作者提供的数据集：</li>\n</ol>\n<ul>\n<li>作者提供了已经处理好的<code>S3DIS</code>数据集，<a href=\"https://drive.google.com/open?id=1s1cFfb8cInM-SNHQoTGxN9BIyNpNQK6x\">文件地址</a></li>\n<li>下载了作者的数据集之后，将解压后的数据集放入<code>data/s3dis/h5</code>即可</li>\n</ul>\n<h3 id=\"Training-amp-Evaluation\"><a href=\"#Training-amp-Evaluation\" class=\"headerlink\" title=\"Training &amp; Evaluation\"></a>Training &amp; Evaluation</h3><p>准备数据集之后，开始训练数据：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">    python train.py --config configs/s3dis.json --logdir logs/s3dis</code></pre>\n<p>数据训练完成之后，模型相关的数据将会放在<code>logs/s3dis</code>文件夹下。</p>\n<p>运行训练完的模型进行预测：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">    python pred.py --logdir logs/s3dis --mvcrf</code></pre>\n<p>预测代码运行之后，会在<code>logs/s3dis</code>文件夹下生成<code>pred.npz</code>文件，之后想要对预测的结果进行可视化以及评价精度，运行以下代码：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">    python eval.py --logdir logs/s3dis --visualize</code></pre>\n<p>运行完以上代码之后，将会在<code>logs/s3dis</code>文件夹中，生成ply文件，运用相关程序打开ply文件可以，发现里面有各个点运行的class和label信息。本文结合<code>open3d</code>和<code>plyfile</code>两个python库，对ply文件进行了处理与可视化，代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">import</span> open3d <span class=\"token keyword\">as</span> o3d\n    <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n    <span class=\"token keyword\">from</span> plyfile <span class=\"token keyword\">import</span> PlyData<span class=\"token punctuation\">,</span> PlyElement\n    plydata <span class=\"token operator\">=</span> PlyData<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>\n        r<span class=\"token string\">'F:\\python_work\\open3d_work\\Area_5_conferenceRoom_1.ply'</span><span class=\"token punctuation\">)</span>\n    pc <span class=\"token operator\">=</span> plydata<span class=\"token punctuation\">[</span><span class=\"token string\">'vertex'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data\n    pcd_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        pcd_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    pcd_array <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>pcd_array<span class=\"token punctuation\">)</span>\n    colors<span class=\"token operator\">=</span>pcd_array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n    class_label <span class=\"token operator\">=</span> pcd_array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n    t<span class=\"token operator\">=</span>class_label<span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    s<span class=\"token operator\">=</span>set<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n    class_label_pro <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    colors_list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">152</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">153</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">74</span><span class=\"token punctuation\">,</span> <span class=\"token number\">134</span><span class=\"token punctuation\">,</span> <span class=\"token number\">232</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">230</span><span class=\"token punctuation\">,</span> <span class=\"token number\">184</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">252</span><span class=\"token punctuation\">,</span> <span class=\"token number\">229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">205</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">208</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">227</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">221</span><span class=\"token punctuation\">,</span> <span class=\"token number\">126</span><span class=\"token punctuation\">,</span> <span class=\"token number\">107</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>class_label<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        colors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>colors_list<span class=\"token punctuation\">[</span>class_label_pro<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>class_label<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    pointcloud <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>PointCloud<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pointcloud<span class=\"token punctuation\">.</span>points <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>utility<span class=\"token punctuation\">.</span>Vector3dVector<span class=\"token punctuation\">(</span>pcd_array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    pointcloud<span class=\"token punctuation\">.</span>colors <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>utility<span class=\"token punctuation\">.</span>Vector3dVector<span class=\"token punctuation\">(</span>colors<span class=\"token operator\">/</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n    o3d<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>write_point_cloud<span class=\"token punctuation\">(</span><span class=\"token string\">\"copy_of_fragment.pcd\"</span><span class=\"token punctuation\">,</span> pointcloud<span class=\"token punctuation\">)</span>\n    o3d<span class=\"token punctuation\">.</span>visualization<span class=\"token punctuation\">.</span>draw_geometries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pointcloud<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>针对以上代码可以在理解的基础上进行修改。结果图展示：</p>\n<p><img src=\"http://39.105.26.229:4567/1.png\" alt=\"结果图\"><br><img src=\"http://39.105.26.229:4567/2.png\" alt=\"数据图\"></p>\n<blockquote>\n<p><strong>注意</strong>:论文中针对S3DIS数据集，以区域1,2,3,4,6作为训练集，区域5作为测试集 </p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"JSIS3D-论文学习记录\"><a href=\"#JSIS3D-论文学习记录\" class=\"headerlink\" title=\"JSIS3D 论文学习记录\"></a>JSIS3D 论文学习记录</h2><p>论文地址：</p>\n<ul>\n<li><a href=\"https://gitee.com/FanrenCLI/jsis3d\">https://gitee.com/FanrenCLI/jsis3d</a></li>\n<li><a href=\"https://github.com/pqhieu/jsis3d\">https://github.com/pqhieu/jsis3d</a></li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li>CUDA 10</li>\n<li>Python 3.5+</li>\n<li>Pytorch 0.4.0+</li>\n</ul>\n<h3 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h3><p>首先需要编译<code>MV-CRF</code>,在下载的文件根目录中运行一下命令：</p>\n<pre><code class=\"sh\">    cd external/densecrf\n    mkdir build\n    cd build\n    cmake -D CMAKE_BUILD_TYPE=Release ..\n    make\n    cd ../../.. # You should be at the root folder here\n    make</code></pre>\n<h3 id=\"Dataset\"><a href=\"#Dataset\" class=\"headerlink\" title=\"Dataset\"></a>Dataset</h3><ol>\n<li>如果想自己准备数据集：</li>\n</ol>\n<ul>\n<li>数据集准备，JSIS3D论文使用的是开源的<a href=\"http://buildingparser.stanford.edu/dataset.html\">S3DIS</a>数据集，所以需要下载<code>S3DIS</code>数据集,这个数据集下载之后大约4个G，解压之后16G。</li>\n<li>在<code>data/s3dis</code>文件夹下创建<code>raw</code>和<code>processed</code>两个空文件夹用于存放原始数据和处理的过程数据</li>\n<li>创建完<code>raw</code>和<code>processed</code>两个空文件夹之后，将我们下载的<code>S3DIS</code>数据集解压之后放入<code>raw</code>文件夹下</li>\n<li>进入根目录下的<code>script</code>文件夹中，里面包含四个<code>py</code>文件，先运行<code>collect_annotations.py</code>文件，之后再运行<code>prepare_h5.py</code></li>\n<li>运行<code>prepare_h5.py</code>文件时，首先需要修改文件中<code>91</code>行的代码，将其中<code>num_points</code>改成<code>4096</code>,这是根据<code>pointnet</code>作者代码设置的参数进行设置的</li>\n<li>运行完<code>prepare_h5.py</code>文件之后，接着运行<code>estimate_mean_size.py</code>和<code>estimate_median_freq.py</code>文件，数据集这样就制作完毕了。</li>\n</ul>\n<ol start=\"2\">\n<li>如果想使用作者提供的数据集：</li>\n</ol>\n<ul>\n<li>作者提供了已经处理好的<code>S3DIS</code>数据集，<a href=\"https://drive.google.com/open?id=1s1cFfb8cInM-SNHQoTGxN9BIyNpNQK6x\">文件地址</a></li>\n<li>下载了作者的数据集之后，将解压后的数据集放入<code>data/s3dis/h5</code>即可</li>\n</ul>\n<h3 id=\"Training-amp-Evaluation\"><a href=\"#Training-amp-Evaluation\" class=\"headerlink\" title=\"Training &amp; Evaluation\"></a>Training &amp; Evaluation</h3><p>准备数据集之后，开始训练数据：</p>\n<pre><code class=\"sh\">    python train.py --config configs/s3dis.json --logdir logs/s3dis</code></pre>\n<p>数据训练完成之后，模型相关的数据将会放在<code>logs/s3dis</code>文件夹下。</p>\n<p>运行训练完的模型进行预测：</p>\n<pre><code class=\"sh\">    python pred.py --logdir logs/s3dis --mvcrf</code></pre>\n<p>预测代码运行之后，会在<code>logs/s3dis</code>文件夹下生成<code>pred.npz</code>文件，之后想要对预测的结果进行可视化以及评价精度，运行以下代码：</p>\n<pre><code class=\"sh\">    python eval.py --logdir logs/s3dis --visualize</code></pre>\n<p>运行完以上代码之后，将会在<code>logs/s3dis</code>文件夹中，生成ply文件，运用相关程序打开ply文件可以，发现里面有各个点运行的class和label信息。本文结合<code>open3d</code>和<code>plyfile</code>两个python库，对ply文件进行了处理与可视化，代码如下：</p>\n<pre><code class=\"python\">    import open3d as o3d\n    import numpy as np\n    from plyfile import PlyData, PlyElement\n    plydata = PlyData.read(\n        r&#39;F:\\python_work\\open3d_work\\Area_5_conferenceRoom_1.ply&#39;)\n    pc = plydata[&#39;vertex&#39;].data\n    pcd_array = []\n    for i in range(pc.size):\n        pcd_array.append(list(pc[i]))\n    pcd_array = np.array(pcd_array)\n    colors=pcd_array[:, 3:6]\n    class_label = pcd_array[:, 6]\n    t=class_label.tolist()\n    s=set(t)\n    class_label_pro = list(s)\n    colors_list=[[152, 0, 0],[255, 0, 0],[255, 153, 0],[255, 255, 0],[0, 255, 0],[0, 255, 255],[74, 134, 232],[0, 0, 255],[255, 0, 255],[230, 184, 175],[252, 229, 205],[208, 224, 227],[221, 126, 107]]\n    for i in range(class_label.size):\n        colors[i]=colors_list[class_label_pro.index(class_label[i])]\n    pointcloud = o3d.geometry.PointCloud()\n    pointcloud.points = o3d.utility.Vector3dVector(pcd_array[:, 0:3])\n    pointcloud.colors = o3d.utility.Vector3dVector(colors/255)\n    o3d.io.write_point_cloud(&quot;copy_of_fragment.pcd&quot;, pointcloud)\n    o3d.visualization.draw_geometries([pointcloud])\n    print(&#39;ok&#39;)</code></pre>\n<p>针对以上代码可以在理解的基础上进行修改。结果图展示：</p>\n<p><img src=\"http://39.105.26.229:4567/1.png\" alt=\"结果图\"><br><img src=\"http://39.105.26.229:4567/2.png\" alt=\"数据图\"></p>\n<blockquote>\n<p><strong>注意</strong>:论文中针对S3DIS数据集，以区域1,2,3,4,6作为训练集，区域5作为测试集 </p>\n</blockquote>\n"},{"title":"lifeknow","date":"2020-12-24T03:11:56.000Z","_content":"### Life, you know what?\n<p style=\"text-indent:2em\">\n2020年12月31日\n\n</p> \n<p style=\"text-indent:2em\">\n一年飞快的逝去，去年往事历历在目。稍微回想了一下过去的一年，似乎发生了很多事，但是仔细回想起来却也没有什么值得去保存。去年的今年，似乎刚刚考完研，内心对于这次考研的经历没有太多的波澜。整体看来，考试整个过程似乎没有太出乎意料。虽然过程有点意外，但是总算是有惊无险。本想在去年总结一下考研的经历，但最后还是没有进行，也可能是考虑到还没有上岸吧。\n</p> \n<p style=\"text-indent:2em\">\n现在似乎是一个绝佳的时刻，总结考研准备过程，到考试，最后到面试，以及上岸后到学校报道的一些见闻。考研的过程没有很迷茫的时刻，时时刻刻都谨记着自己的初心和目标。从2019年三月份开始，就开始陆陆续续地准备数学的学习，因为一开始的目标比较难，所以也下了很大的决心要把数学搞好。为了学好数学二，从一开始循序渐进，先学习本科的高数课本开始，将整本书从头到尾全部看一遍，并将课后习题一题一题地过。这是第一遍针对高数部分的学习，当看完整本高数之后，开始看同济大学的高数课本，课后习题也是一题一题地过。期间开始刷英语真题，一句一句地看，力求仔细认真。一直到暑假，基本将高数课本结束，英语正常进度推进。当然在这期间并没有全部时间都在复习，因为还有课程以及课外自己的计划，比如当时向写一篇核心论文，尝试做一个自己想法的app，在学习深度学习相关的知识。暑假之前，论文写完，并发给了老师。至于app部分，解决了app的核心问题——深度学习识别验证码。这个经历还是让我感觉很不错的，因为从数据的获取，处理，构建简单的网络，最后得出模型。这个过程中问题曾出不穷，在解决问题的过程中对人工智能有了一点思考和想法，对深度学习的构建流程基本了解。解决了验证码识别的问题，之后将模型集成到app中之后就完成了app的登陆功能，也是最艰难的功能-_-!。能将这个问题解决还是让我感觉很兴奋的，因为这是为第一次从零开始，接触深度学习，代码全部是自己一个一个敲出来的。嘿嘿黑。。。。做完这个登陆功能之后就是后段代码的编写以及前端小程序的编写。在做这个让我比较重视的项目中，我也在不断的思考，不论是代码书写的规范，程序的适用性，是否可以优化，解决并发问题等等，对我来说，提高确实很大，很少有时间就这么纯粹的按照自己的想法，做一件对于自己来说很好，对别人来说也很有贡献的事情（这个app做完是免费开放给本校学生使用的，这是我的想法哈哈哈哈）。在暑假开始之前基本app完成了一半，后续只是代码编写和调试的劳动密集型工作。基本上感觉距离成功不远了，不过最后却没有完成，这也是让我非常遗憾的事情。因为做的是一个学校网站的信息爬取app，没想到学校换系统了。emmmmmm，始料未及，我感觉学校不讲武德，啥时候换不好，偏偏就在我要做好的时候换，偷袭我这个20多岁的小青年。不过回头一想，可能不完美才是真正的完美，有遗憾才是青春，那就这样结束吧。\n</p>\n<p style=\"text-indent:2em\">\n暑假开始之前，我就了解这个暑假将是考研过程中蜕变的关键期，一定要把握好暑假，把握住了暑假，基本成功一般。暑假开始，买了地学考研中心的复习资料，开始疯狂的背诵，日复一日，直到考研前一天。GIS的专业课，似乎背诵是最好的解决方式。而数学则是买了李永乐的红书，要保证滚瓜烂熟，一遍不行就两遍，真题认真作。关于线性代数部分也如同高数一般，先刷书再做课后习题。然后再看李永乐的红书部分的线性代数。政治的话，暑假就是附带着刷1000题。英语背诵单词和写作，持续进行。就这样暑假再高温和疯狂背诵之中结束。没有太多的回忆，不过温度确实很高，哈哈哈哈，整个考研教室开着空调完全感受不到冷气，我滴乖乖，活活热死。还好没有住校，因为学校宿舍没有空调，在外面租房子，说到租房子，是在贝壳找房上租的。房子很不错，和舍友一起，四个人，但是最后只有三个人住进来emmmmm。不过值得一提的是，初入社会没有经验，没想到租房找中介，中介的收费会这么贵，emmmmmm，好像要房租的一半还是一个月的房租，忘记了，不过我们租了两个月，但是需要付三个月的钱，最后也是中介人比较好，看在学生的份上，打了折扣。租房的地方叫天空之城，距离学校还是挺远的，所以就借了学第的电瓶车作为来回的工具。其中一个舍友，就在租房里面复习，没有去学校，但是我还是建议每天都去学校的。这样要求自己比较好点。就这样，暑假似乎也过得很快，没有过多的停留，时间飞逝地来到开学，虽说是开学，但是对于我们来说没有任何变化，还是不停地刷题，可能也就是复习计划进入到下一阶段，暑假结束，基本考研的准备已经接近80%。接下来就是题海战术了，以及一成不变的疯狂背诵。到11月政治肖四肖八背诵无需多说。在漫长的背诵刷题过程中，人的精神是很难保持高度集中的，总是需要一些娱乐。接近后期考研准备基本完成的时候，就是不断的巩固之前的背诵，不能忘记，很是无聊。于是emmmmm，嘿嘿我就开始看LOL的全球总决赛，记得当时是S9,我还是很喜欢接触游戏，虽然每个游戏在我这只能保持很短的新鲜感，但是看游戏还是我的爱好的。于是在考研过程中，时常会在无聊，心态不好的时候回到宿舍看直播，不过很可惜，作为IG的粉丝，IG在s9没有夺冠，这可能也是应了那句话，“人的巅峰是一时的，而失败才是常态”。面对失败，如何处理是一个人最重要的品质，这决定着你的最后成就。除了游戏，在这个过程中，最让人放松的是，在室内三五成群的背书，最后变成茶话会，哈哈哈哈，还是很喜欢和一群考研人谈天说地，而且不知不觉就过去了很长时间而不自知。\n</p> \n\n<p style=\"text-indent:2em\">\n就这样复习的时间就这样飞逝，转眼便已经考完，走在去食堂的路上，还偶遇胡哥和女生在一起交谈甚欢。嘿嘿黑，果然人在社会还是需要另一半啊，哈哈哈哈。。。考研结束之后，迎接的就是即将毕业的事宜，首先是实习，然后是毕业论文。放假之前老师安排我们去新兴华安实习，然后给一个月时间面试准备，最后写毕业论文。本以为就可以这样结束大学生涯，没想到还是老天爷玩的花，突如其来的疫情，打乱了所有的计划，只能蜗居家中写论文。也许社会的无常与人生是相通的，没有人能知道下一刻会发生什么，所以人生才有动力去拼搏。在家中的时间是无聊的，也只能和老王打游戏。当然，还有一件心心念念的事，考研成绩就要出了。哈哈哈哈，出成绩的那一天，似乎格外难熬。没想到武汉作为疫情的重灾区也正是我的目标大学-武汉大学所在地。别人成绩都出了，而我还在等待。难熬，这可能是让我记忆犹新的原因。不过再托，成绩也有公布的时候，我记得当时是晚上，虽有对成绩早有估计，但是心中还是不能放心。打开成绩的一刹那，我捂住了眼睛，如果旭旭宝宝增幅装备一般，但是我的感受绝对比他更强烈。生死就是一瞬，根据量子力学的思想，只要我不看，我的成绩就有一万种可能。啪地一下，我睁开了眼睛，很快啊，上来就是一个左钩拳emmmmm串戏了不好意思。我的成绩居然是#%%，emmmmm心里有点失望，因为我估计应该360+至少，如果没有那么应该就是专业课的问题了，因为专业课不好估计。也正是这样，专业课今年有点难，普遍没有几个超过100的人，我也不例外，但是心里还抱着一丝侥幸，希望武汉大学能扩招，哈哈哈哈。不过基本上是要调剂了，这可能就是——失败是人生的常态吧。不过还好，知道成绩之后就是每天谢谢毕业论文，打打游戏，等待开学了，虽然还遥遥无期。\n</p> \n\n<p style=\"text-indent:2em\">\n等待开学也是难熬的，因为在家里啥事没有，让人疯狂。最后等来了4月18号开学的消息，接下来就是返校了。\n返校之后，是一段空白期，因为需要调剂，所以需要等待第一批结束后才开始，而调剂开始的时间，让我记忆犹新，因为是5月20号，这个特殊的日子，让恋人开心，也让单身的考研狗开心，因为即将尘埃落定。相较于往年，今年是网络面试，没有太多变化的面试准备，机缘巧合下遇到了一个比较合乎我的想法的老师，调剂了985，我是幸运的，也许这就是命运吧，我终将走向北京，遇见新的朋友，新的同学，新的老师，新的挑战，以及新的目标。不断的前进，向上，这就是多数人都想要的。这样，我的考研的一年，准确的讲，是一年多，从三月到接近下一年的六月，就这样结束了。现在看来，考研对我来说没有什么困难之处，每一步都在按计划进行，没有过多的改变，就是不断的前行。似乎过于简单，以至于我现在还没有感觉到考研的困难所在。对于现在的我们，考研抑或工作是一种选择，并非一种压力，以后读博抑或工作也是如此。只要我们愿意，那么就可以，关键取决于你是否愿意，以及能否为自己的想法作出所有的努力。\n至于接下来的研究生生活，似乎不太值得关注，等过年的时候，总结这个学期吧。新年再见！！！\n\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/lifeknow/lifeknow.md","raw":"---\ntitle: lifeknow\ndate: 2020-12-24 11:11:56\ncategories:\n    - Life Know\n---\n### Life, you know what?\n<p style=\"text-indent:2em\">\n2020年12月31日\n\n</p> \n<p style=\"text-indent:2em\">\n一年飞快的逝去，去年往事历历在目。稍微回想了一下过去的一年，似乎发生了很多事，但是仔细回想起来却也没有什么值得去保存。去年的今年，似乎刚刚考完研，内心对于这次考研的经历没有太多的波澜。整体看来，考试整个过程似乎没有太出乎意料。虽然过程有点意外，但是总算是有惊无险。本想在去年总结一下考研的经历，但最后还是没有进行，也可能是考虑到还没有上岸吧。\n</p> \n<p style=\"text-indent:2em\">\n现在似乎是一个绝佳的时刻，总结考研准备过程，到考试，最后到面试，以及上岸后到学校报道的一些见闻。考研的过程没有很迷茫的时刻，时时刻刻都谨记着自己的初心和目标。从2019年三月份开始，就开始陆陆续续地准备数学的学习，因为一开始的目标比较难，所以也下了很大的决心要把数学搞好。为了学好数学二，从一开始循序渐进，先学习本科的高数课本开始，将整本书从头到尾全部看一遍，并将课后习题一题一题地过。这是第一遍针对高数部分的学习，当看完整本高数之后，开始看同济大学的高数课本，课后习题也是一题一题地过。期间开始刷英语真题，一句一句地看，力求仔细认真。一直到暑假，基本将高数课本结束，英语正常进度推进。当然在这期间并没有全部时间都在复习，因为还有课程以及课外自己的计划，比如当时向写一篇核心论文，尝试做一个自己想法的app，在学习深度学习相关的知识。暑假之前，论文写完，并发给了老师。至于app部分，解决了app的核心问题——深度学习识别验证码。这个经历还是让我感觉很不错的，因为从数据的获取，处理，构建简单的网络，最后得出模型。这个过程中问题曾出不穷，在解决问题的过程中对人工智能有了一点思考和想法，对深度学习的构建流程基本了解。解决了验证码识别的问题，之后将模型集成到app中之后就完成了app的登陆功能，也是最艰难的功能-_-!。能将这个问题解决还是让我感觉很兴奋的，因为这是为第一次从零开始，接触深度学习，代码全部是自己一个一个敲出来的。嘿嘿黑。。。。做完这个登陆功能之后就是后段代码的编写以及前端小程序的编写。在做这个让我比较重视的项目中，我也在不断的思考，不论是代码书写的规范，程序的适用性，是否可以优化，解决并发问题等等，对我来说，提高确实很大，很少有时间就这么纯粹的按照自己的想法，做一件对于自己来说很好，对别人来说也很有贡献的事情（这个app做完是免费开放给本校学生使用的，这是我的想法哈哈哈哈）。在暑假开始之前基本app完成了一半，后续只是代码编写和调试的劳动密集型工作。基本上感觉距离成功不远了，不过最后却没有完成，这也是让我非常遗憾的事情。因为做的是一个学校网站的信息爬取app，没想到学校换系统了。emmmmmm，始料未及，我感觉学校不讲武德，啥时候换不好，偏偏就在我要做好的时候换，偷袭我这个20多岁的小青年。不过回头一想，可能不完美才是真正的完美，有遗憾才是青春，那就这样结束吧。\n</p>\n<p style=\"text-indent:2em\">\n暑假开始之前，我就了解这个暑假将是考研过程中蜕变的关键期，一定要把握好暑假，把握住了暑假，基本成功一般。暑假开始，买了地学考研中心的复习资料，开始疯狂的背诵，日复一日，直到考研前一天。GIS的专业课，似乎背诵是最好的解决方式。而数学则是买了李永乐的红书，要保证滚瓜烂熟，一遍不行就两遍，真题认真作。关于线性代数部分也如同高数一般，先刷书再做课后习题。然后再看李永乐的红书部分的线性代数。政治的话，暑假就是附带着刷1000题。英语背诵单词和写作，持续进行。就这样暑假再高温和疯狂背诵之中结束。没有太多的回忆，不过温度确实很高，哈哈哈哈，整个考研教室开着空调完全感受不到冷气，我滴乖乖，活活热死。还好没有住校，因为学校宿舍没有空调，在外面租房子，说到租房子，是在贝壳找房上租的。房子很不错，和舍友一起，四个人，但是最后只有三个人住进来emmmmm。不过值得一提的是，初入社会没有经验，没想到租房找中介，中介的收费会这么贵，emmmmmm，好像要房租的一半还是一个月的房租，忘记了，不过我们租了两个月，但是需要付三个月的钱，最后也是中介人比较好，看在学生的份上，打了折扣。租房的地方叫天空之城，距离学校还是挺远的，所以就借了学第的电瓶车作为来回的工具。其中一个舍友，就在租房里面复习，没有去学校，但是我还是建议每天都去学校的。这样要求自己比较好点。就这样，暑假似乎也过得很快，没有过多的停留，时间飞逝地来到开学，虽说是开学，但是对于我们来说没有任何变化，还是不停地刷题，可能也就是复习计划进入到下一阶段，暑假结束，基本考研的准备已经接近80%。接下来就是题海战术了，以及一成不变的疯狂背诵。到11月政治肖四肖八背诵无需多说。在漫长的背诵刷题过程中，人的精神是很难保持高度集中的，总是需要一些娱乐。接近后期考研准备基本完成的时候，就是不断的巩固之前的背诵，不能忘记，很是无聊。于是emmmmm，嘿嘿我就开始看LOL的全球总决赛，记得当时是S9,我还是很喜欢接触游戏，虽然每个游戏在我这只能保持很短的新鲜感，但是看游戏还是我的爱好的。于是在考研过程中，时常会在无聊，心态不好的时候回到宿舍看直播，不过很可惜，作为IG的粉丝，IG在s9没有夺冠，这可能也是应了那句话，“人的巅峰是一时的，而失败才是常态”。面对失败，如何处理是一个人最重要的品质，这决定着你的最后成就。除了游戏，在这个过程中，最让人放松的是，在室内三五成群的背书，最后变成茶话会，哈哈哈哈，还是很喜欢和一群考研人谈天说地，而且不知不觉就过去了很长时间而不自知。\n</p> \n\n<p style=\"text-indent:2em\">\n就这样复习的时间就这样飞逝，转眼便已经考完，走在去食堂的路上，还偶遇胡哥和女生在一起交谈甚欢。嘿嘿黑，果然人在社会还是需要另一半啊，哈哈哈哈。。。考研结束之后，迎接的就是即将毕业的事宜，首先是实习，然后是毕业论文。放假之前老师安排我们去新兴华安实习，然后给一个月时间面试准备，最后写毕业论文。本以为就可以这样结束大学生涯，没想到还是老天爷玩的花，突如其来的疫情，打乱了所有的计划，只能蜗居家中写论文。也许社会的无常与人生是相通的，没有人能知道下一刻会发生什么，所以人生才有动力去拼搏。在家中的时间是无聊的，也只能和老王打游戏。当然，还有一件心心念念的事，考研成绩就要出了。哈哈哈哈，出成绩的那一天，似乎格外难熬。没想到武汉作为疫情的重灾区也正是我的目标大学-武汉大学所在地。别人成绩都出了，而我还在等待。难熬，这可能是让我记忆犹新的原因。不过再托，成绩也有公布的时候，我记得当时是晚上，虽有对成绩早有估计，但是心中还是不能放心。打开成绩的一刹那，我捂住了眼睛，如果旭旭宝宝增幅装备一般，但是我的感受绝对比他更强烈。生死就是一瞬，根据量子力学的思想，只要我不看，我的成绩就有一万种可能。啪地一下，我睁开了眼睛，很快啊，上来就是一个左钩拳emmmmm串戏了不好意思。我的成绩居然是#%%，emmmmm心里有点失望，因为我估计应该360+至少，如果没有那么应该就是专业课的问题了，因为专业课不好估计。也正是这样，专业课今年有点难，普遍没有几个超过100的人，我也不例外，但是心里还抱着一丝侥幸，希望武汉大学能扩招，哈哈哈哈。不过基本上是要调剂了，这可能就是——失败是人生的常态吧。不过还好，知道成绩之后就是每天谢谢毕业论文，打打游戏，等待开学了，虽然还遥遥无期。\n</p> \n\n<p style=\"text-indent:2em\">\n等待开学也是难熬的，因为在家里啥事没有，让人疯狂。最后等来了4月18号开学的消息，接下来就是返校了。\n返校之后，是一段空白期，因为需要调剂，所以需要等待第一批结束后才开始，而调剂开始的时间，让我记忆犹新，因为是5月20号，这个特殊的日子，让恋人开心，也让单身的考研狗开心，因为即将尘埃落定。相较于往年，今年是网络面试，没有太多变化的面试准备，机缘巧合下遇到了一个比较合乎我的想法的老师，调剂了985，我是幸运的，也许这就是命运吧，我终将走向北京，遇见新的朋友，新的同学，新的老师，新的挑战，以及新的目标。不断的前进，向上，这就是多数人都想要的。这样，我的考研的一年，准确的讲，是一年多，从三月到接近下一年的六月，就这样结束了。现在看来，考研对我来说没有什么困难之处，每一步都在按计划进行，没有过多的改变，就是不断的前行。似乎过于简单，以至于我现在还没有感觉到考研的困难所在。对于现在的我们，考研抑或工作是一种选择，并非一种压力，以后读博抑或工作也是如此。只要我们愿意，那么就可以，关键取决于你是否愿意，以及能否为自己的想法作出所有的努力。\n至于接下来的研究生生活，似乎不太值得关注，等过年的时候，总结这个学期吧。新年再见！！！\n\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"lifeknow/lifeknow","published":1,"updated":"2021-01-27T07:17:02.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknmrfu4x000330uo1d0s6556","content":"<h3 id=\"Life-you-know-what\"><a href=\"#Life-you-know-what\" class=\"headerlink\" title=\"Life, you know what?\"></a>Life, you know what?</h3><p style=\"text-indent:2em\">\n2020年12月31日\n\n</p> \n<p style=\"text-indent:2em\">\n一年飞快的逝去，去年往事历历在目。稍微回想了一下过去的一年，似乎发生了很多事，但是仔细回想起来却也没有什么值得去保存。去年的今年，似乎刚刚考完研，内心对于这次考研的经历没有太多的波澜。整体看来，考试整个过程似乎没有太出乎意料。虽然过程有点意外，但是总算是有惊无险。本想在去年总结一下考研的经历，但最后还是没有进行，也可能是考虑到还没有上岸吧。\n</p> \n<p style=\"text-indent:2em\">\n现在似乎是一个绝佳的时刻，总结考研准备过程，到考试，最后到面试，以及上岸后到学校报道的一些见闻。考研的过程没有很迷茫的时刻，时时刻刻都谨记着自己的初心和目标。从2019年三月份开始，就开始陆陆续续地准备数学的学习，因为一开始的目标比较难，所以也下了很大的决心要把数学搞好。为了学好数学二，从一开始循序渐进，先学习本科的高数课本开始，将整本书从头到尾全部看一遍，并将课后习题一题一题地过。这是第一遍针对高数部分的学习，当看完整本高数之后，开始看同济大学的高数课本，课后习题也是一题一题地过。期间开始刷英语真题，一句一句地看，力求仔细认真。一直到暑假，基本将高数课本结束，英语正常进度推进。当然在这期间并没有全部时间都在复习，因为还有课程以及课外自己的计划，比如当时向写一篇核心论文，尝试做一个自己想法的app，在学习深度学习相关的知识。暑假之前，论文写完，并发给了老师。至于app部分，解决了app的核心问题——深度学习识别验证码。这个经历还是让我感觉很不错的，因为从数据的获取，处理，构建简单的网络，最后得出模型。这个过程中问题曾出不穷，在解决问题的过程中对人工智能有了一点思考和想法，对深度学习的构建流程基本了解。解决了验证码识别的问题，之后将模型集成到app中之后就完成了app的登陆功能，也是最艰难的功能-_-!。能将这个问题解决还是让我感觉很兴奋的，因为这是为第一次从零开始，接触深度学习，代码全部是自己一个一个敲出来的。嘿嘿黑。。。。做完这个登陆功能之后就是后段代码的编写以及前端小程序的编写。在做这个让我比较重视的项目中，我也在不断的思考，不论是代码书写的规范，程序的适用性，是否可以优化，解决并发问题等等，对我来说，提高确实很大，很少有时间就这么纯粹的按照自己的想法，做一件对于自己来说很好，对别人来说也很有贡献的事情（这个app做完是免费开放给本校学生使用的，这是我的想法哈哈哈哈）。在暑假开始之前基本app完成了一半，后续只是代码编写和调试的劳动密集型工作。基本上感觉距离成功不远了，不过最后却没有完成，这也是让我非常遗憾的事情。因为做的是一个学校网站的信息爬取app，没想到学校换系统了。emmmmmm，始料未及，我感觉学校不讲武德，啥时候换不好，偏偏就在我要做好的时候换，偷袭我这个20多岁的小青年。不过回头一想，可能不完美才是真正的完美，有遗憾才是青春，那就这样结束吧。\n</p>\n<p style=\"text-indent:2em\">\n暑假开始之前，我就了解这个暑假将是考研过程中蜕变的关键期，一定要把握好暑假，把握住了暑假，基本成功一般。暑假开始，买了地学考研中心的复习资料，开始疯狂的背诵，日复一日，直到考研前一天。GIS的专业课，似乎背诵是最好的解决方式。而数学则是买了李永乐的红书，要保证滚瓜烂熟，一遍不行就两遍，真题认真作。关于线性代数部分也如同高数一般，先刷书再做课后习题。然后再看李永乐的红书部分的线性代数。政治的话，暑假就是附带着刷1000题。英语背诵单词和写作，持续进行。就这样暑假再高温和疯狂背诵之中结束。没有太多的回忆，不过温度确实很高，哈哈哈哈，整个考研教室开着空调完全感受不到冷气，我滴乖乖，活活热死。还好没有住校，因为学校宿舍没有空调，在外面租房子，说到租房子，是在贝壳找房上租的。房子很不错，和舍友一起，四个人，但是最后只有三个人住进来emmmmm。不过值得一提的是，初入社会没有经验，没想到租房找中介，中介的收费会这么贵，emmmmmm，好像要房租的一半还是一个月的房租，忘记了，不过我们租了两个月，但是需要付三个月的钱，最后也是中介人比较好，看在学生的份上，打了折扣。租房的地方叫天空之城，距离学校还是挺远的，所以就借了学第的电瓶车作为来回的工具。其中一个舍友，就在租房里面复习，没有去学校，但是我还是建议每天都去学校的。这样要求自己比较好点。就这样，暑假似乎也过得很快，没有过多的停留，时间飞逝地来到开学，虽说是开学，但是对于我们来说没有任何变化，还是不停地刷题，可能也就是复习计划进入到下一阶段，暑假结束，基本考研的准备已经接近80%。接下来就是题海战术了，以及一成不变的疯狂背诵。到11月政治肖四肖八背诵无需多说。在漫长的背诵刷题过程中，人的精神是很难保持高度集中的，总是需要一些娱乐。接近后期考研准备基本完成的时候，就是不断的巩固之前的背诵，不能忘记，很是无聊。于是emmmmm，嘿嘿我就开始看LOL的全球总决赛，记得当时是S9,我还是很喜欢接触游戏，虽然每个游戏在我这只能保持很短的新鲜感，但是看游戏还是我的爱好的。于是在考研过程中，时常会在无聊，心态不好的时候回到宿舍看直播，不过很可惜，作为IG的粉丝，IG在s9没有夺冠，这可能也是应了那句话，“人的巅峰是一时的，而失败才是常态”。面对失败，如何处理是一个人最重要的品质，这决定着你的最后成就。除了游戏，在这个过程中，最让人放松的是，在室内三五成群的背书，最后变成茶话会，哈哈哈哈，还是很喜欢和一群考研人谈天说地，而且不知不觉就过去了很长时间而不自知。\n</p> \n\n<p style=\"text-indent:2em\">\n就这样复习的时间就这样飞逝，转眼便已经考完，走在去食堂的路上，还偶遇胡哥和女生在一起交谈甚欢。嘿嘿黑，果然人在社会还是需要另一半啊，哈哈哈哈。。。考研结束之后，迎接的就是即将毕业的事宜，首先是实习，然后是毕业论文。放假之前老师安排我们去新兴华安实习，然后给一个月时间面试准备，最后写毕业论文。本以为就可以这样结束大学生涯，没想到还是老天爷玩的花，突如其来的疫情，打乱了所有的计划，只能蜗居家中写论文。也许社会的无常与人生是相通的，没有人能知道下一刻会发生什么，所以人生才有动力去拼搏。在家中的时间是无聊的，也只能和老王打游戏。当然，还有一件心心念念的事，考研成绩就要出了。哈哈哈哈，出成绩的那一天，似乎格外难熬。没想到武汉作为疫情的重灾区也正是我的目标大学-武汉大学所在地。别人成绩都出了，而我还在等待。难熬，这可能是让我记忆犹新的原因。不过再托，成绩也有公布的时候，我记得当时是晚上，虽有对成绩早有估计，但是心中还是不能放心。打开成绩的一刹那，我捂住了眼睛，如果旭旭宝宝增幅装备一般，但是我的感受绝对比他更强烈。生死就是一瞬，根据量子力学的思想，只要我不看，我的成绩就有一万种可能。啪地一下，我睁开了眼睛，很快啊，上来就是一个左钩拳emmmmm串戏了不好意思。我的成绩居然是#%%，emmmmm心里有点失望，因为我估计应该360+至少，如果没有那么应该就是专业课的问题了，因为专业课不好估计。也正是这样，专业课今年有点难，普遍没有几个超过100的人，我也不例外，但是心里还抱着一丝侥幸，希望武汉大学能扩招，哈哈哈哈。不过基本上是要调剂了，这可能就是——失败是人生的常态吧。不过还好，知道成绩之后就是每天谢谢毕业论文，打打游戏，等待开学了，虽然还遥遥无期。\n</p> \n\n<p style=\"text-indent:2em\">\n等待开学也是难熬的，因为在家里啥事没有，让人疯狂。最后等来了4月18号开学的消息，接下来就是返校了。\n返校之后，是一段空白期，因为需要调剂，所以需要等待第一批结束后才开始，而调剂开始的时间，让我记忆犹新，因为是5月20号，这个特殊的日子，让恋人开心，也让单身的考研狗开心，因为即将尘埃落定。相较于往年，今年是网络面试，没有太多变化的面试准备，机缘巧合下遇到了一个比较合乎我的想法的老师，调剂了985，我是幸运的，也许这就是命运吧，我终将走向北京，遇见新的朋友，新的同学，新的老师，新的挑战，以及新的目标。不断的前进，向上，这就是多数人都想要的。这样，我的考研的一年，准确的讲，是一年多，从三月到接近下一年的六月，就这样结束了。现在看来，考研对我来说没有什么困难之处，每一步都在按计划进行，没有过多的改变，就是不断的前行。似乎过于简单，以至于我现在还没有感觉到考研的困难所在。对于现在的我们，考研抑或工作是一种选择，并非一种压力，以后读博抑或工作也是如此。只要我们愿意，那么就可以，关键取决于你是否愿意，以及能否为自己的想法作出所有的努力。\n至于接下来的研究生生活，似乎不太值得关注，等过年的时候，总结这个学期吧。新年再见！！！\n\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"Life-you-know-what\"><a href=\"#Life-you-know-what\" class=\"headerlink\" title=\"Life, you know what?\"></a>Life, you know what?</h3><p style=\"text-indent:2em\">\n2020年12月31日\n\n</p> \n<p style=\"text-indent:2em\">\n一年飞快的逝去，去年往事历历在目。稍微回想了一下过去的一年，似乎发生了很多事，但是仔细回想起来却也没有什么值得去保存。去年的今年，似乎刚刚考完研，内心对于这次考研的经历没有太多的波澜。整体看来，考试整个过程似乎没有太出乎意料。虽然过程有点意外，但是总算是有惊无险。本想在去年总结一下考研的经历，但最后还是没有进行，也可能是考虑到还没有上岸吧。\n</p> \n<p style=\"text-indent:2em\">\n现在似乎是一个绝佳的时刻，总结考研准备过程，到考试，最后到面试，以及上岸后到学校报道的一些见闻。考研的过程没有很迷茫的时刻，时时刻刻都谨记着自己的初心和目标。从2019年三月份开始，就开始陆陆续续地准备数学的学习，因为一开始的目标比较难，所以也下了很大的决心要把数学搞好。为了学好数学二，从一开始循序渐进，先学习本科的高数课本开始，将整本书从头到尾全部看一遍，并将课后习题一题一题地过。这是第一遍针对高数部分的学习，当看完整本高数之后，开始看同济大学的高数课本，课后习题也是一题一题地过。期间开始刷英语真题，一句一句地看，力求仔细认真。一直到暑假，基本将高数课本结束，英语正常进度推进。当然在这期间并没有全部时间都在复习，因为还有课程以及课外自己的计划，比如当时向写一篇核心论文，尝试做一个自己想法的app，在学习深度学习相关的知识。暑假之前，论文写完，并发给了老师。至于app部分，解决了app的核心问题——深度学习识别验证码。这个经历还是让我感觉很不错的，因为从数据的获取，处理，构建简单的网络，最后得出模型。这个过程中问题曾出不穷，在解决问题的过程中对人工智能有了一点思考和想法，对深度学习的构建流程基本了解。解决了验证码识别的问题，之后将模型集成到app中之后就完成了app的登陆功能，也是最艰难的功能-_-!。能将这个问题解决还是让我感觉很兴奋的，因为这是为第一次从零开始，接触深度学习，代码全部是自己一个一个敲出来的。嘿嘿黑。。。。做完这个登陆功能之后就是后段代码的编写以及前端小程序的编写。在做这个让我比较重视的项目中，我也在不断的思考，不论是代码书写的规范，程序的适用性，是否可以优化，解决并发问题等等，对我来说，提高确实很大，很少有时间就这么纯粹的按照自己的想法，做一件对于自己来说很好，对别人来说也很有贡献的事情（这个app做完是免费开放给本校学生使用的，这是我的想法哈哈哈哈）。在暑假开始之前基本app完成了一半，后续只是代码编写和调试的劳动密集型工作。基本上感觉距离成功不远了，不过最后却没有完成，这也是让我非常遗憾的事情。因为做的是一个学校网站的信息爬取app，没想到学校换系统了。emmmmmm，始料未及，我感觉学校不讲武德，啥时候换不好，偏偏就在我要做好的时候换，偷袭我这个20多岁的小青年。不过回头一想，可能不完美才是真正的完美，有遗憾才是青春，那就这样结束吧。\n</p>\n<p style=\"text-indent:2em\">\n暑假开始之前，我就了解这个暑假将是考研过程中蜕变的关键期，一定要把握好暑假，把握住了暑假，基本成功一般。暑假开始，买了地学考研中心的复习资料，开始疯狂的背诵，日复一日，直到考研前一天。GIS的专业课，似乎背诵是最好的解决方式。而数学则是买了李永乐的红书，要保证滚瓜烂熟，一遍不行就两遍，真题认真作。关于线性代数部分也如同高数一般，先刷书再做课后习题。然后再看李永乐的红书部分的线性代数。政治的话，暑假就是附带着刷1000题。英语背诵单词和写作，持续进行。就这样暑假再高温和疯狂背诵之中结束。没有太多的回忆，不过温度确实很高，哈哈哈哈，整个考研教室开着空调完全感受不到冷气，我滴乖乖，活活热死。还好没有住校，因为学校宿舍没有空调，在外面租房子，说到租房子，是在贝壳找房上租的。房子很不错，和舍友一起，四个人，但是最后只有三个人住进来emmmmm。不过值得一提的是，初入社会没有经验，没想到租房找中介，中介的收费会这么贵，emmmmmm，好像要房租的一半还是一个月的房租，忘记了，不过我们租了两个月，但是需要付三个月的钱，最后也是中介人比较好，看在学生的份上，打了折扣。租房的地方叫天空之城，距离学校还是挺远的，所以就借了学第的电瓶车作为来回的工具。其中一个舍友，就在租房里面复习，没有去学校，但是我还是建议每天都去学校的。这样要求自己比较好点。就这样，暑假似乎也过得很快，没有过多的停留，时间飞逝地来到开学，虽说是开学，但是对于我们来说没有任何变化，还是不停地刷题，可能也就是复习计划进入到下一阶段，暑假结束，基本考研的准备已经接近80%。接下来就是题海战术了，以及一成不变的疯狂背诵。到11月政治肖四肖八背诵无需多说。在漫长的背诵刷题过程中，人的精神是很难保持高度集中的，总是需要一些娱乐。接近后期考研准备基本完成的时候，就是不断的巩固之前的背诵，不能忘记，很是无聊。于是emmmmm，嘿嘿我就开始看LOL的全球总决赛，记得当时是S9,我还是很喜欢接触游戏，虽然每个游戏在我这只能保持很短的新鲜感，但是看游戏还是我的爱好的。于是在考研过程中，时常会在无聊，心态不好的时候回到宿舍看直播，不过很可惜，作为IG的粉丝，IG在s9没有夺冠，这可能也是应了那句话，“人的巅峰是一时的，而失败才是常态”。面对失败，如何处理是一个人最重要的品质，这决定着你的最后成就。除了游戏，在这个过程中，最让人放松的是，在室内三五成群的背书，最后变成茶话会，哈哈哈哈，还是很喜欢和一群考研人谈天说地，而且不知不觉就过去了很长时间而不自知。\n</p> \n\n<p style=\"text-indent:2em\">\n就这样复习的时间就这样飞逝，转眼便已经考完，走在去食堂的路上，还偶遇胡哥和女生在一起交谈甚欢。嘿嘿黑，果然人在社会还是需要另一半啊，哈哈哈哈。。。考研结束之后，迎接的就是即将毕业的事宜，首先是实习，然后是毕业论文。放假之前老师安排我们去新兴华安实习，然后给一个月时间面试准备，最后写毕业论文。本以为就可以这样结束大学生涯，没想到还是老天爷玩的花，突如其来的疫情，打乱了所有的计划，只能蜗居家中写论文。也许社会的无常与人生是相通的，没有人能知道下一刻会发生什么，所以人生才有动力去拼搏。在家中的时间是无聊的，也只能和老王打游戏。当然，还有一件心心念念的事，考研成绩就要出了。哈哈哈哈，出成绩的那一天，似乎格外难熬。没想到武汉作为疫情的重灾区也正是我的目标大学-武汉大学所在地。别人成绩都出了，而我还在等待。难熬，这可能是让我记忆犹新的原因。不过再托，成绩也有公布的时候，我记得当时是晚上，虽有对成绩早有估计，但是心中还是不能放心。打开成绩的一刹那，我捂住了眼睛，如果旭旭宝宝增幅装备一般，但是我的感受绝对比他更强烈。生死就是一瞬，根据量子力学的思想，只要我不看，我的成绩就有一万种可能。啪地一下，我睁开了眼睛，很快啊，上来就是一个左钩拳emmmmm串戏了不好意思。我的成绩居然是#%%，emmmmm心里有点失望，因为我估计应该360+至少，如果没有那么应该就是专业课的问题了，因为专业课不好估计。也正是这样，专业课今年有点难，普遍没有几个超过100的人，我也不例外，但是心里还抱着一丝侥幸，希望武汉大学能扩招，哈哈哈哈。不过基本上是要调剂了，这可能就是——失败是人生的常态吧。不过还好，知道成绩之后就是每天谢谢毕业论文，打打游戏，等待开学了，虽然还遥遥无期。\n</p> \n\n<p style=\"text-indent:2em\">\n等待开学也是难熬的，因为在家里啥事没有，让人疯狂。最后等来了4月18号开学的消息，接下来就是返校了。\n返校之后，是一段空白期，因为需要调剂，所以需要等待第一批结束后才开始，而调剂开始的时间，让我记忆犹新，因为是5月20号，这个特殊的日子，让恋人开心，也让单身的考研狗开心，因为即将尘埃落定。相较于往年，今年是网络面试，没有太多变化的面试准备，机缘巧合下遇到了一个比较合乎我的想法的老师，调剂了985，我是幸运的，也许这就是命运吧，我终将走向北京，遇见新的朋友，新的同学，新的老师，新的挑战，以及新的目标。不断的前进，向上，这就是多数人都想要的。这样，我的考研的一年，准确的讲，是一年多，从三月到接近下一年的六月，就这样结束了。现在看来，考研对我来说没有什么困难之处，每一步都在按计划进行，没有过多的改变，就是不断的前行。似乎过于简单，以至于我现在还没有感觉到考研的困难所在。对于现在的我们，考研抑或工作是一种选择，并非一种压力，以后读博抑或工作也是如此。只要我们愿意，那么就可以，关键取决于你是否愿意，以及能否为自己的想法作出所有的努力。\n至于接下来的研究生生活，似乎不太值得关注，等过年的时候，总结这个学期吧。新年再见！！！\n\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"ResNet","date":"2021-04-18T05:19:58.000Z","top":true,"cover":true,"author":"Fanrencli","_content":"## 深度学习神经网络特征提取（一）\n\n### 网络结构\n\n要构建`ResNet`特征提取网络，我们只需要了解两个方面：\n\n- ResNet网络层数：Resnet50,ResNet101,ResNet152\n- ResNet网络基础组成：Conv_Block,Identity_Block\n\n在本文中，根据实际的项目要求，构建了RseNet101网络。\n![ResNet网络结构](http://39.105.26.229:4567/20180114205444652.png)\n![ResNet基础Backbone](http://39.105.26.229:4567/20180114184946861.png)\n\n### 构建Conv_Block模块\n针对`Conv_Block`模块，我们首先要了解这个模块的具体结构，`Conv_Block`从输入开始分两支分别进行特征提取，以一次卷积、一次归一化、一次`ReLu`激活函数的形式连接三次，并在第一次的卷积层步长为2进行降维，另一分支只进行一次步长为2的卷积、一次归一化，然后将两个分支进行连接，再一次激活函数层完成一次`Conv_Block`，结构如下图：\n![Conv_Block](http://39.105.26.229:4567/20191113094201415.png)\n```python\n    def Conv_block(input_feature,kernel_size,filters,strides = (2,2)):\n        filter1,filter2,filter3 = filters\n        #first line conv\n        x = layers.Conv2D(filter1,(1,1),strides = strides, use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size),padding = 'same', use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        #parallel conv\n        shortcut = layers.Conv2D(filter3,(1,1), strides = strides, use_bias=True)(input_feature)\n        shortcut = layers.BatchNormalization()(shortcut)\n\n        # add the parallel conv\n\n        x = layers.Add()([x,shortcut])\n        x = layers.Activation('relu')(x)\n        return x\n```\n\n### 构建Identity_Block模块\n\n`Identity_Block`模块不同于`Conv_Block`模块，`Identity_Block`模块只对特征进行提取，即只进行深度的堆叠不行进降维，所以在结构上与`Conv_Block`相似——同样是双分支结构，在另一分支上不进行操作，只是将输入与另一分支的结果进行叠加，具体结构如下：\n\n![Identity_Block](http://39.105.26.229:4567/20191113094135752.png)\n\n代码如下：\n```python\n    def identity_block(input_feature,kernel_size,filters):\n        filter1,filter2,filter3 = filters\n\n        x = layers.Conv2D(filter1,(1,1), use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size), padding = 'same', use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        x = layers.Add()([x,input_feature])\n        x = layers.Activation('relu')(x)\n        return x\n```\n\n### 构建ResNet101网络\n\n构建ResNet101网络的具体形式如上图所示。\n- 由于第一层7x7卷积，所以在卷积前加入`ZeroPadding2D`，然后如同图中所示，归一化接一层激活和池化\n- 第二层一次`Conv_block`、两次`identity_block`\n- 第三层一次`Conv_block`、三次`identity_block`\n- 第四层一次`Conv_block`、22次`identity_block`\n- 第五层一次`Conv_block`、两次`identity_block`\n\n在第五层之后本文接上一层全局池化以及两层全连接进行分类，但是ResNset网络在第五层基本就结束了，后续根据个人的需求进行修改即可，本文只是做了一个图片的分类的实例，接上后续的全连接分类。\n代码如下：\n```python\n    def get_resnet_model(input_shape,classes):\n        input_image = Input(shape = input_shape)\n        x = layers.ZeroPadding2D((3,3))(input_image)\n        x = layers.Conv2D(64,(7,7),strides=(2,2),  use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n        c1 = x = layers.MaxPooling2D((3,3),strides=(2, 2), padding='same')(x)\n\n        x = Conv_block(x, 3, [64,64,256], strides=(1,1))\n        x = identity_block(x,3,[64,64,256])\n        c2 = x = identity_block(x,3,[64,64,256])\n        x = Conv_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        c3 = x =identity_block(x,3,[128,128,512])\n        x = Conv_block(x,3,[256,256,1024])\n        for i in range(22):\n            x = identity_block(x,3,[256,256,1024])\n        c4 = x\n        x = Conv_block(x,3,[512,512,2048])\n        x = identity_block(x,3,[512,512,2048])\n        c5 = x = identity_block(x,3,[512,512,2048])\n        x = layers.GlobalAveragePooling2D()(x)\n        x = layers.Dropout(0.5)(x)\n        x = layers.Dense(1024,activation = 'relu')(x)\n        x = layers.Dropout(0.5)(x)\n        output = layers.Dense(classes,activation = 'softmax')(x)\n        model = models.Model(input_image,output)\n        return model\n```\n","source":"_posts/feature_extractor/resnet.md","raw":"---\ntitle: ResNet\ndate: 2021-04-18 13:19:58\ntop: true\ncover: true\ncategories:\n    - Deep Learning\ntags:\n    - ResNet101\n    - Fanrencli\nauthor: Fanrencli\n---\n## 深度学习神经网络特征提取（一）\n\n### 网络结构\n\n要构建`ResNet`特征提取网络，我们只需要了解两个方面：\n\n- ResNet网络层数：Resnet50,ResNet101,ResNet152\n- ResNet网络基础组成：Conv_Block,Identity_Block\n\n在本文中，根据实际的项目要求，构建了RseNet101网络。\n![ResNet网络结构](http://39.105.26.229:4567/20180114205444652.png)\n![ResNet基础Backbone](http://39.105.26.229:4567/20180114184946861.png)\n\n### 构建Conv_Block模块\n针对`Conv_Block`模块，我们首先要了解这个模块的具体结构，`Conv_Block`从输入开始分两支分别进行特征提取，以一次卷积、一次归一化、一次`ReLu`激活函数的形式连接三次，并在第一次的卷积层步长为2进行降维，另一分支只进行一次步长为2的卷积、一次归一化，然后将两个分支进行连接，再一次激活函数层完成一次`Conv_Block`，结构如下图：\n![Conv_Block](http://39.105.26.229:4567/20191113094201415.png)\n```python\n    def Conv_block(input_feature,kernel_size,filters,strides = (2,2)):\n        filter1,filter2,filter3 = filters\n        #first line conv\n        x = layers.Conv2D(filter1,(1,1),strides = strides, use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size),padding = 'same', use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        #parallel conv\n        shortcut = layers.Conv2D(filter3,(1,1), strides = strides, use_bias=True)(input_feature)\n        shortcut = layers.BatchNormalization()(shortcut)\n\n        # add the parallel conv\n\n        x = layers.Add()([x,shortcut])\n        x = layers.Activation('relu')(x)\n        return x\n```\n\n### 构建Identity_Block模块\n\n`Identity_Block`模块不同于`Conv_Block`模块，`Identity_Block`模块只对特征进行提取，即只进行深度的堆叠不行进降维，所以在结构上与`Conv_Block`相似——同样是双分支结构，在另一分支上不进行操作，只是将输入与另一分支的结果进行叠加，具体结构如下：\n\n![Identity_Block](http://39.105.26.229:4567/20191113094135752.png)\n\n代码如下：\n```python\n    def identity_block(input_feature,kernel_size,filters):\n        filter1,filter2,filter3 = filters\n\n        x = layers.Conv2D(filter1,(1,1), use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size), padding = 'same', use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        x = layers.Add()([x,input_feature])\n        x = layers.Activation('relu')(x)\n        return x\n```\n\n### 构建ResNet101网络\n\n构建ResNet101网络的具体形式如上图所示。\n- 由于第一层7x7卷积，所以在卷积前加入`ZeroPadding2D`，然后如同图中所示，归一化接一层激活和池化\n- 第二层一次`Conv_block`、两次`identity_block`\n- 第三层一次`Conv_block`、三次`identity_block`\n- 第四层一次`Conv_block`、22次`identity_block`\n- 第五层一次`Conv_block`、两次`identity_block`\n\n在第五层之后本文接上一层全局池化以及两层全连接进行分类，但是ResNset网络在第五层基本就结束了，后续根据个人的需求进行修改即可，本文只是做了一个图片的分类的实例，接上后续的全连接分类。\n代码如下：\n```python\n    def get_resnet_model(input_shape,classes):\n        input_image = Input(shape = input_shape)\n        x = layers.ZeroPadding2D((3,3))(input_image)\n        x = layers.Conv2D(64,(7,7),strides=(2,2),  use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n        c1 = x = layers.MaxPooling2D((3,3),strides=(2, 2), padding='same')(x)\n\n        x = Conv_block(x, 3, [64,64,256], strides=(1,1))\n        x = identity_block(x,3,[64,64,256])\n        c2 = x = identity_block(x,3,[64,64,256])\n        x = Conv_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        c3 = x =identity_block(x,3,[128,128,512])\n        x = Conv_block(x,3,[256,256,1024])\n        for i in range(22):\n            x = identity_block(x,3,[256,256,1024])\n        c4 = x\n        x = Conv_block(x,3,[512,512,2048])\n        x = identity_block(x,3,[512,512,2048])\n        c5 = x = identity_block(x,3,[512,512,2048])\n        x = layers.GlobalAveragePooling2D()(x)\n        x = layers.Dropout(0.5)(x)\n        x = layers.Dense(1024,activation = 'relu')(x)\n        x = layers.Dropout(0.5)(x)\n        output = layers.Dense(classes,activation = 'softmax')(x)\n        model = models.Model(input_image,output)\n        return model\n```\n","slug":"feature_extractor/resnet","published":1,"updated":"2021-04-18T06:04:20.612Z","_id":"cknmrh5ye0000v4uo97w11k7u","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习神经网络特征提取（一）\"><a href=\"#深度学习神经网络特征提取（一）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（一）\"></a>深度学习神经网络特征提取（一）</h2><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p>要构建<code>ResNet</code>特征提取网络，我们只需要了解两个方面：</p>\n<ul>\n<li>ResNet网络层数：Resnet50,ResNet101,ResNet152</li>\n<li>ResNet网络基础组成：Conv_Block,Identity_Block</li>\n</ul>\n<p>在本文中，根据实际的项目要求，构建了RseNet101网络。<br><img src=\"http://39.105.26.229:4567/20180114205444652.png\" alt=\"ResNet网络结构\"><br><img src=\"http://39.105.26.229:4567/20180114184946861.png\" alt=\"ResNet基础Backbone\"></p>\n<h3 id=\"构建Conv-Block模块\"><a href=\"#构建Conv-Block模块\" class=\"headerlink\" title=\"构建Conv_Block模块\"></a>构建Conv_Block模块</h3><p>针对<code>Conv_Block</code>模块，我们首先要了解这个模块的具体结构，<code>Conv_Block</code>从输入开始分两支分别进行特征提取，以一次卷积、一次归一化、一次<code>ReLu</code>激活函数的形式连接三次，并在第一次的卷积层步长为2进行降维，另一分支只进行一次步长为2的卷积、一次归一化，然后将两个分支进行连接，再一次激活函数层完成一次<code>Conv_Block</code>，结构如下图：<br><img src=\"http://39.105.26.229:4567/20191113094201415.png\" alt=\"Conv_Block\"></p>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">Conv_block</span><span class=\"token punctuation\">(</span>input_feature<span class=\"token punctuation\">,</span>kernel_size<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        filter1<span class=\"token punctuation\">,</span>filter2<span class=\"token punctuation\">,</span>filter3 <span class=\"token operator\">=</span> filters\n        <span class=\"token comment\" spellcheck=\"true\">#first line conv</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span> strides<span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_feature<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>kernel_size<span class=\"token punctuation\">,</span>kernel_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">#parallel conv</span>\n        shortcut <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides <span class=\"token operator\">=</span> strides<span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_feature<span class=\"token punctuation\">)</span>\n        shortcut <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>shortcut<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># add the parallel conv</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span>shortcut<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<h3 id=\"构建Identity-Block模块\"><a href=\"#构建Identity-Block模块\" class=\"headerlink\" title=\"构建Identity_Block模块\"></a>构建Identity_Block模块</h3><p><code>Identity_Block</code>模块不同于<code>Conv_Block</code>模块，<code>Identity_Block</code>模块只对特征进行提取，即只进行深度的堆叠不行进降维，所以在结构上与<code>Conv_Block</code>相似——同样是双分支结构，在另一分支上不进行操作，只是将输入与另一分支的结果进行叠加，具体结构如下：</p>\n<p><img src=\"http://39.105.26.229:4567/20191113094135752.png\" alt=\"Identity_Block\"></p>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">identity_block</span><span class=\"token punctuation\">(</span>input_feature<span class=\"token punctuation\">,</span>kernel_size<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        filter1<span class=\"token punctuation\">,</span>filter2<span class=\"token punctuation\">,</span>filter3 <span class=\"token operator\">=</span> filters\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_feature<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>kernel_size<span class=\"token punctuation\">,</span>kernel_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span>input_feature<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<h3 id=\"构建ResNet101网络\"><a href=\"#构建ResNet101网络\" class=\"headerlink\" title=\"构建ResNet101网络\"></a>构建ResNet101网络</h3><p>构建ResNet101网络的具体形式如上图所示。</p>\n<ul>\n<li>由于第一层7x7卷积，所以在卷积前加入<code>ZeroPadding2D</code>，然后如同图中所示，归一化接一层激活和池化</li>\n<li>第二层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n<li>第三层一次<code>Conv_block</code>、三次<code>identity_block</code></li>\n<li>第四层一次<code>Conv_block</code>、22次<code>identity_block</code></li>\n<li>第五层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n</ul>\n<p>在第五层之后本文接上一层全局池化以及两层全连接进行分类，但是ResNset网络在第五层基本就结束了，后续根据个人的需求进行修改即可，本文只是做了一个图片的分类的实例，接上后续的全连接分类。<br>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">get_resnet_model</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">,</span>classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        input_image <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape <span class=\"token operator\">=</span> input_shape<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_image<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        c1 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> Conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        c2 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> Conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        c3 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span>identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> Conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        c4 <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> Conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        c5 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>GlobalAveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        output <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span>activation <span class=\"token operator\">=</span> <span class=\"token string\">'softmax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        model <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">(</span>input_image<span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> model</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习神经网络特征提取（一）\"><a href=\"#深度学习神经网络特征提取（一）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（一）\"></a>深度学习神经网络特征提取（一）</h2><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p>要构建<code>ResNet</code>特征提取网络，我们只需要了解两个方面：</p>\n<ul>\n<li>ResNet网络层数：Resnet50,ResNet101,ResNet152</li>\n<li>ResNet网络基础组成：Conv_Block,Identity_Block</li>\n</ul>\n<p>在本文中，根据实际的项目要求，构建了RseNet101网络。<br><img src=\"http://39.105.26.229:4567/20180114205444652.png\" alt=\"ResNet网络结构\"><br><img src=\"http://39.105.26.229:4567/20180114184946861.png\" alt=\"ResNet基础Backbone\"></p>\n<h3 id=\"构建Conv-Block模块\"><a href=\"#构建Conv-Block模块\" class=\"headerlink\" title=\"构建Conv_Block模块\"></a>构建Conv_Block模块</h3><p>针对<code>Conv_Block</code>模块，我们首先要了解这个模块的具体结构，<code>Conv_Block</code>从输入开始分两支分别进行特征提取，以一次卷积、一次归一化、一次<code>ReLu</code>激活函数的形式连接三次，并在第一次的卷积层步长为2进行降维，另一分支只进行一次步长为2的卷积、一次归一化，然后将两个分支进行连接，再一次激活函数层完成一次<code>Conv_Block</code>，结构如下图：<br><img src=\"http://39.105.26.229:4567/20191113094201415.png\" alt=\"Conv_Block\"></p>\n<pre><code class=\"python\">    def Conv_block(input_feature,kernel_size,filters,strides = (2,2)):\n        filter1,filter2,filter3 = filters\n        #first line conv\n        x = layers.Conv2D(filter1,(1,1),strides = strides, use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation(&#39;relu&#39;)(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size),padding = &#39;same&#39;, use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation(&#39;relu&#39;)(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        #parallel conv\n        shortcut = layers.Conv2D(filter3,(1,1), strides = strides, use_bias=True)(input_feature)\n        shortcut = layers.BatchNormalization()(shortcut)\n\n        # add the parallel conv\n\n        x = layers.Add()([x,shortcut])\n        x = layers.Activation(&#39;relu&#39;)(x)\n        return x</code></pre>\n<h3 id=\"构建Identity-Block模块\"><a href=\"#构建Identity-Block模块\" class=\"headerlink\" title=\"构建Identity_Block模块\"></a>构建Identity_Block模块</h3><p><code>Identity_Block</code>模块不同于<code>Conv_Block</code>模块，<code>Identity_Block</code>模块只对特征进行提取，即只进行深度的堆叠不行进降维，所以在结构上与<code>Conv_Block</code>相似——同样是双分支结构，在另一分支上不进行操作，只是将输入与另一分支的结果进行叠加，具体结构如下：</p>\n<p><img src=\"http://39.105.26.229:4567/20191113094135752.png\" alt=\"Identity_Block\"></p>\n<p>代码如下：</p>\n<pre><code class=\"python\">    def identity_block(input_feature,kernel_size,filters):\n        filter1,filter2,filter3 = filters\n\n        x = layers.Conv2D(filter1,(1,1), use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation(&#39;relu&#39;)(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size), padding = &#39;same&#39;, use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation(&#39;relu&#39;)(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        x = layers.Add()([x,input_feature])\n        x = layers.Activation(&#39;relu&#39;)(x)\n        return x</code></pre>\n<h3 id=\"构建ResNet101网络\"><a href=\"#构建ResNet101网络\" class=\"headerlink\" title=\"构建ResNet101网络\"></a>构建ResNet101网络</h3><p>构建ResNet101网络的具体形式如上图所示。</p>\n<ul>\n<li>由于第一层7x7卷积，所以在卷积前加入<code>ZeroPadding2D</code>，然后如同图中所示，归一化接一层激活和池化</li>\n<li>第二层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n<li>第三层一次<code>Conv_block</code>、三次<code>identity_block</code></li>\n<li>第四层一次<code>Conv_block</code>、22次<code>identity_block</code></li>\n<li>第五层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n</ul>\n<p>在第五层之后本文接上一层全局池化以及两层全连接进行分类，但是ResNset网络在第五层基本就结束了，后续根据个人的需求进行修改即可，本文只是做了一个图片的分类的实例，接上后续的全连接分类。<br>代码如下：</p>\n<pre><code class=\"python\">    def get_resnet_model(input_shape,classes):\n        input_image = Input(shape = input_shape)\n        x = layers.ZeroPadding2D((3,3))(input_image)\n        x = layers.Conv2D(64,(7,7),strides=(2,2),  use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation(&#39;relu&#39;)(x)\n        c1 = x = layers.MaxPooling2D((3,3),strides=(2, 2), padding=&#39;same&#39;)(x)\n\n        x = Conv_block(x, 3, [64,64,256], strides=(1,1))\n        x = identity_block(x,3,[64,64,256])\n        c2 = x = identity_block(x,3,[64,64,256])\n        x = Conv_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        c3 = x =identity_block(x,3,[128,128,512])\n        x = Conv_block(x,3,[256,256,1024])\n        for i in range(22):\n            x = identity_block(x,3,[256,256,1024])\n        c4 = x\n        x = Conv_block(x,3,[512,512,2048])\n        x = identity_block(x,3,[512,512,2048])\n        c5 = x = identity_block(x,3,[512,512,2048])\n        x = layers.GlobalAveragePooling2D()(x)\n        x = layers.Dropout(0.5)(x)\n        x = layers.Dense(1024,activation = &#39;relu&#39;)(x)\n        x = layers.Dropout(0.5)(x)\n        output = layers.Dense(classes,activation = &#39;softmax&#39;)(x)\n        model = models.Model(input_image,output)\n        return model</code></pre>\n"},{"title":"VGG","date":"2021-04-18T06:06:34.000Z","top":true,"cover":true,"author":"Fanrencli","_content":"## 深度学习神经网络特征提取（二）\n\n### 网络结构\n\n要构建`VGG16`特征提取网络，我们只需要了解：\n\n- VGG16网络层数：VGG16,VGG19\n\n在本文中，根据实际的项目要求，构建了VGG16网络，相对于ResNet网络较为简单，整个网络只是一个线性的结构，没有分支，所以在VGG的学习中只需要掌握基础的深度学习原理就可以构建出来VGG网络。\n![VGG网络结构](http://39.105.26.229:4567/v2-ea924e733676e0da534f677a97c98653_720w.jpg)\n![VGG16网络结构](http://39.105.26.229:4567/2019101614532169.png)\n\n### 构建VGG16网络结构\n\nVGG16的网络有三种不同的层构成，分别是卷积、池化和全连接，具体的运行方式：\n- 输入一张尺寸为（224，224，3）的图片\n- 两次(3,3)卷积，层数64，输出为(224,224,64)，(2，2)最大池化，输出(112,112,64)。\n- 两次(3,3)卷积，层数128，输出为(112,112,128)，(2，2)最大池化，输出(56,56,64)。\n- 三次(3,3)卷积，层数256，输出为(56,56,64)，(2，2)最大池化，输出(28,28,64)。\n- 三次(3,3)卷积，层数512，输出为(28,28,64)，(2，2)最大池化，输出(14,14,64)。\n- 三次(3,3)卷积，层数512，输出为(14,14,64)，(2，2)最大池化，输出(7,7,64)。\n- 对结果进行平铺，接上两层4096的全连接层\n- 最后全连接进行分类\n\n代码如下：\n```python\n    def get_VGG16_model(input_shape,classes):\n        image_input = Input(shape = input_shape)\n\n        x = layers.Conv2D(64,(3,3),padding = 'same', activation = 'relu')(image_input)\n        x = layers.Conv2D(64,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(128,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(128,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Flatten()(x)\n        x = layers.Dense(4096,activation = 'relu')(x)\n        x = layers.Dense(4096,activation = 'relu')(x)\n        x = layers.Dense(classes, activation = 'softmax')(x) \n        model = models.Model(image_input,x)\n        return model\n```\n\n最后，根据VGG16的网络结构，大家可以自行尝试构建VGG19的网络结构。","source":"_posts/feature_extractor/VGG.md","raw":"---\ntitle: VGG\ndate: 2021-04-18 14:06:34\ntop: true\ncover: true\ncategories:\n- Deep Learning\ntags:\n- VGG16\n- Fanrencli\nauthor: Fanrencli\n---\n## 深度学习神经网络特征提取（二）\n\n### 网络结构\n\n要构建`VGG16`特征提取网络，我们只需要了解：\n\n- VGG16网络层数：VGG16,VGG19\n\n在本文中，根据实际的项目要求，构建了VGG16网络，相对于ResNet网络较为简单，整个网络只是一个线性的结构，没有分支，所以在VGG的学习中只需要掌握基础的深度学习原理就可以构建出来VGG网络。\n![VGG网络结构](http://39.105.26.229:4567/v2-ea924e733676e0da534f677a97c98653_720w.jpg)\n![VGG16网络结构](http://39.105.26.229:4567/2019101614532169.png)\n\n### 构建VGG16网络结构\n\nVGG16的网络有三种不同的层构成，分别是卷积、池化和全连接，具体的运行方式：\n- 输入一张尺寸为（224，224，3）的图片\n- 两次(3,3)卷积，层数64，输出为(224,224,64)，(2，2)最大池化，输出(112,112,64)。\n- 两次(3,3)卷积，层数128，输出为(112,112,128)，(2，2)最大池化，输出(56,56,64)。\n- 三次(3,3)卷积，层数256，输出为(56,56,64)，(2，2)最大池化，输出(28,28,64)。\n- 三次(3,3)卷积，层数512，输出为(28,28,64)，(2，2)最大池化，输出(14,14,64)。\n- 三次(3,3)卷积，层数512，输出为(14,14,64)，(2，2)最大池化，输出(7,7,64)。\n- 对结果进行平铺，接上两层4096的全连接层\n- 最后全连接进行分类\n\n代码如下：\n```python\n    def get_VGG16_model(input_shape,classes):\n        image_input = Input(shape = input_shape)\n\n        x = layers.Conv2D(64,(3,3),padding = 'same', activation = 'relu')(image_input)\n        x = layers.Conv2D(64,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(128,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(128,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Flatten()(x)\n        x = layers.Dense(4096,activation = 'relu')(x)\n        x = layers.Dense(4096,activation = 'relu')(x)\n        x = layers.Dense(classes, activation = 'softmax')(x) \n        model = models.Model(image_input,x)\n        return model\n```\n\n最后，根据VGG16的网络结构，大家可以自行尝试构建VGG19的网络结构。","slug":"feature_extractor/VGG","published":1,"updated":"2021-04-18T06:22:14.562Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknms8g6d000060uo8adu5pch","content":"<h2 id=\"深度学习神经网络特征提取（二）\"><a href=\"#深度学习神经网络特征提取（二）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（二）\"></a>深度学习神经网络特征提取（二）</h2><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p>要构建<code>VGG16</code>特征提取网络，我们只需要了解：</p>\n<ul>\n<li>VGG16网络层数：VGG16,VGG19</li>\n</ul>\n<p>在本文中，根据实际的项目要求，构建了VGG16网络，相对于ResNet网络较为简单，整个网络只是一个线性的结构，没有分支，所以在VGG的学习中只需要掌握基础的深度学习原理就可以构建出来VGG网络。<br><img src=\"http://39.105.26.229:4567/v2-ea924e733676e0da534f677a97c98653_720w.jpg\" alt=\"VGG网络结构\"><br><img src=\"http://39.105.26.229:4567/2019101614532169.png\" alt=\"VGG16网络结构\"></p>\n<h3 id=\"构建VGG16网络结构\"><a href=\"#构建VGG16网络结构\" class=\"headerlink\" title=\"构建VGG16网络结构\"></a>构建VGG16网络结构</h3><p>VGG16的网络有三种不同的层构成，分别是卷积、池化和全连接，具体的运行方式：</p>\n<ul>\n<li>输入一张尺寸为（224，224，3）的图片</li>\n<li>两次(3,3)卷积，层数64，输出为(224,224,64)，(2，2)最大池化，输出(112,112,64)。</li>\n<li>两次(3,3)卷积，层数128，输出为(112,112,128)，(2，2)最大池化，输出(56,56,64)。</li>\n<li>三次(3,3)卷积，层数256，输出为(56,56,64)，(2，2)最大池化，输出(28,28,64)。</li>\n<li>三次(3,3)卷积，层数512，输出为(28,28,64)，(2，2)最大池化，输出(14,14,64)。</li>\n<li>三次(3,3)卷积，层数512，输出为(14,14,64)，(2，2)最大池化，输出(7,7,64)。</li>\n<li>对结果进行平铺，接上两层4096的全连接层</li>\n<li>最后全连接进行分类</li>\n</ul>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">get_VGG16_model</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">,</span>classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        image_input <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape <span class=\"token operator\">=</span> input_shape<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>image_input<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'softmax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> \n        model <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">(</span>image_input<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> model</code></pre>\n<p>最后，根据VGG16的网络结构，大家可以自行尝试构建VGG19的网络结构。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习神经网络特征提取（二）\"><a href=\"#深度学习神经网络特征提取（二）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（二）\"></a>深度学习神经网络特征提取（二）</h2><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p>要构建<code>VGG16</code>特征提取网络，我们只需要了解：</p>\n<ul>\n<li>VGG16网络层数：VGG16,VGG19</li>\n</ul>\n<p>在本文中，根据实际的项目要求，构建了VGG16网络，相对于ResNet网络较为简单，整个网络只是一个线性的结构，没有分支，所以在VGG的学习中只需要掌握基础的深度学习原理就可以构建出来VGG网络。<br><img src=\"http://39.105.26.229:4567/v2-ea924e733676e0da534f677a97c98653_720w.jpg\" alt=\"VGG网络结构\"><br><img src=\"http://39.105.26.229:4567/2019101614532169.png\" alt=\"VGG16网络结构\"></p>\n<h3 id=\"构建VGG16网络结构\"><a href=\"#构建VGG16网络结构\" class=\"headerlink\" title=\"构建VGG16网络结构\"></a>构建VGG16网络结构</h3><p>VGG16的网络有三种不同的层构成，分别是卷积、池化和全连接，具体的运行方式：</p>\n<ul>\n<li>输入一张尺寸为（224，224，3）的图片</li>\n<li>两次(3,3)卷积，层数64，输出为(224,224,64)，(2，2)最大池化，输出(112,112,64)。</li>\n<li>两次(3,3)卷积，层数128，输出为(112,112,128)，(2，2)最大池化，输出(56,56,64)。</li>\n<li>三次(3,3)卷积，层数256，输出为(56,56,64)，(2，2)最大池化，输出(28,28,64)。</li>\n<li>三次(3,3)卷积，层数512，输出为(28,28,64)，(2，2)最大池化，输出(14,14,64)。</li>\n<li>三次(3,3)卷积，层数512，输出为(14,14,64)，(2，2)最大池化，输出(7,7,64)。</li>\n<li>对结果进行平铺，接上两层4096的全连接层</li>\n<li>最后全连接进行分类</li>\n</ul>\n<p>代码如下：</p>\n<pre><code class=\"python\">    def get_VGG16_model(input_shape,classes):\n        image_input = Input(shape = input_shape)\n\n        x = layers.Conv2D(64,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(image_input)\n        x = layers.Conv2D(64,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(128,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(128,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(256,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(256,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(256,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Flatten()(x)\n        x = layers.Dense(4096,activation = &#39;relu&#39;)(x)\n        x = layers.Dense(4096,activation = &#39;relu&#39;)(x)\n        x = layers.Dense(classes, activation = &#39;softmax&#39;)(x) \n        model = models.Model(image_input,x)\n        return model</code></pre>\n<p>最后，根据VGG16的网络结构，大家可以自行尝试构建VGG19的网络结构。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckhr2kcdu00014guocbqxbfqc","category_id":"ckhr2kce000044guoctlycazy","_id":"ckhr2kce9000j4guofyi2ht8q"},{"post_id":"ckhr2kcdy00034guo0i671hfe","category_id":"ckhr2kce000044guoctlycazy","_id":"ckhr2kcea000m4guo1z9s61gv"},{"post_id":"ckhr2kceb000p4guo4uevggqz","category_id":"ckhr2kcec000q4guoflmidn5y","_id":"ckhr2kcee000w4guobyadg7kq"},{"post_id":"ckhr3bkzw0000o8uo0g7f61uw","category_id":"ckhr2kcec000q4guoflmidn5y","_id":"ckhr3bl030003o8uo2drxg887"},{"post_id":"ckicrxqct0000vguo3dwod5us","category_id":"ckicrxqcz0001vguo0k7c4969","_id":"ckicrxqd10004vguoanai7lw7"},{"post_id":"ckkf2tf280000x0uo4i61cefc","category_id":"ckkf2w5fh0000couodabsf9y5","_id":"ckkf2w5fj0003couo7vvg690c"},{"post_id":"cknmrfu4p000030uo6m1l2idg","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknmrfu4z000730uoga9z2sux"},{"post_id":"cknmrfu4x000330uo1d0s6556","category_id":"cknmrfu4y000430uo41byhm45","_id":"cknmrfu4z000830uoeqs61xru"},{"post_id":"cknmrh5ye0000v4uo97w11k7u","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknmrh5yo0002v4uodkqq29lk"},{"post_id":"cknms8g6d000060uo8adu5pch","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknms8g6m000260uo4ztd5ws9"}],"PostTag":[{"post_id":"ckhr2kcdu00014guocbqxbfqc","tag_id":"ckhr2kce200054guoh9nfgkf6","_id":"ckhr2kce8000f4guoekvhfo8e"},{"post_id":"ckhr2kcdu00014guocbqxbfqc","tag_id":"ckhr2kce5000b4guodlhycl9u","_id":"ckhr2kce8000g4guo78xac7jf"},{"post_id":"ckhr2kcdy00034guo0i671hfe","tag_id":"ckhr2kce200054guoh9nfgkf6","_id":"ckhr2kcea000l4guogv8e2hd5"},{"post_id":"ckhr2kceb000p4guo4uevggqz","tag_id":"ckhr2kced000r4guo69vff6wz","_id":"ckhr2kcee000u4guo80mb3hcm"},{"post_id":"ckhr2kceb000p4guo4uevggqz","tag_id":"ckhr2kced000s4guoc9tp6dku","_id":"ckhr2kcee000v4guo9sdjhstn"},{"post_id":"ckhr2kceb000p4guo4uevggqz","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"ckhr2muv900012cuohkexdr4s"},{"post_id":"ckhr2kcdy00034guo0i671hfe","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"ckhr2n21f00022cuodh67ge1m"},{"post_id":"ckhr2kcdu00014guocbqxbfqc","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"ckhr2nc6w00032cuoa9cm74a1"},{"post_id":"ckhr2kcdy00034guo0i671hfe","tag_id":"ckhr2kce5000b4guodlhycl9u","_id":"ckhr3aw630000lcuoaowm16s6"},{"post_id":"ckhr3bkzw0000o8uo0g7f61uw","tag_id":"ckhr2kced000r4guo69vff6wz","_id":"ckhr3bl030001o8uo0blhc9mw"},{"post_id":"ckhr3bkzw0000o8uo0g7f61uw","tag_id":"ckhr2kced000s4guoc9tp6dku","_id":"ckhr3bl030002o8uocrb142pa"},{"post_id":"ckhr3bkzw0000o8uo0g7f61uw","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"ckhr3bl030004o8uo86g74bn0"},{"post_id":"ckicrxqct0000vguo3dwod5us","tag_id":"ckicrxqd00002vguo5x0phyqu","_id":"ckicrxqd20005vguo0jt68t3w"},{"post_id":"ckicrxqct0000vguo3dwod5us","tag_id":"ckicrxqd10003vguoeh2c3gnp","_id":"ckicrxqd20006vguo8mn7ca1q"},{"post_id":"ckicrxqct0000vguo3dwod5us","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"ckicrxqd20007vguo4urkbao1"},{"post_id":"ckkf2tf280000x0uo4i61cefc","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"ckkf2tf2d0004x0uodvpgh9e8"},{"post_id":"ckkf2tf280000x0uo4i61cefc","tag_id":"ckkf2w5fi0001couog4elfbso","_id":"ckkf2w5fj0002couo7lgealvm"},{"post_id":"cknmrfu4p000030uo6m1l2idg","tag_id":"cknmrfu4w000230uo7l0gbd0i","_id":"cknmrfu4z000530uo0tewh6lm"},{"post_id":"cknmrfu4p000030uo6m1l2idg","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknmrfu4z000630uo3fbk2btd"},{"post_id":"cknmrh5ye0000v4uo97w11k7u","tag_id":"cknmrh5yk0001v4uob6jn6b9i","_id":"cknmrh5yo0003v4uocbwp9joj"},{"post_id":"cknmrh5ye0000v4uo97w11k7u","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknmrh5yo0004v4uo156nbc5i"},{"post_id":"cknms8g6d000060uo8adu5pch","tag_id":"cknms8g6j000160uoc4d8ehme","_id":"cknms8g6m000360uo51qz23yl"},{"post_id":"cknms8g6d000060uo8adu5pch","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknms8g6n000460uogu035lcr"}],"Tag":[{"name":"Haar Wavelet","_id":"ckhr2kce200054guoh9nfgkf6"},{"name":"Python","_id":"ckhr2kce5000b4guodlhycl9u"},{"name":"python","_id":"ckhr2kce9000i4guo9aswepfj"},{"name":"C++","_id":"ckhr2kced000r4guo69vff6wz"},{"name":"Binary Search","_id":"ckhr2kced000s4guoc9tp6dku"},{"name":"Fanrencli","_id":"ckhr2muv700002cuoeyk5dr8j"},{"name":"Orbbec_OpenNI","_id":"ckicrxqd00002vguo5x0phyqu"},{"name":"OpenCV","_id":"ckicrxqd10003vguoeh2c3gnp"},{"name":"Assembly Language","_id":"ckkf2tf2b0001x0uo06g45yzz"},{"name":"8086","_id":"ckkf2w5fi0001couog4elfbso"},{"name":"Jsis3d","_id":"cknmrfu4w000230uo7l0gbd0i"},{"name":"ResNet101","_id":"cknmrh5yk0001v4uob6jn6b9i"},{"name":"VGG16","_id":"cknms8g6j000160uoc4d8ehme"}]}}