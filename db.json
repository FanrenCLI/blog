{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"9b4beaffc6e876cc9bc9443471003650213e6a60","modified":1603262361436},{"_id":"source/_data/friends.json","hash":"8b454e8017b9fe5f257c8c75c5a39666198bf99d","modified":1603262361437},{"_id":"source/_posts/haar_wavelet_optimization.md","hash":"5c7e50e410762daa1c9d5e1e7b0a85f99f54f454","modified":1618921540983},{"_id":"source/_posts/haar_wavelet.md","hash":"893c63ddf38de111002e551d3ab8cd01e3289c7f","modified":1618921547523},{"_id":"source/_posts/hello-world.md","hash":"9ec7f57234f91ec1e9a7a044eb2db41184707df1","modified":1605927533041},{"_id":"source/about/index.md","hash":"5c0877fc438a3be6aec079546f245a140c59e3df","modified":1603262361438},{"_id":"source/categories/index.md","hash":"a82064f42e7d9429cf1c2b718cfe4354adb24ffc","modified":1603262361439},{"_id":"source/contact/index.md","hash":"1e41a09c02c43a8a27b1828e767b119aa3c2b668","modified":1603262361439},{"_id":"source/friends/index.md","hash":"3ddf8b788c81987563344a1ac4a03263286e1395","modified":1603262361440},{"_id":"source/tags/index.md","hash":"33209013ac3e6bb71566d294b5a0503e91b8b04f","modified":1603262361440},{"_id":"source/_posts/Algorithm/Binary Search/Binary Search.md","hash":"bb7875ab4d903088000b16ec16014fd506659fd8","modified":1612612253883},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1618751271694},{"_id":"themes/hexo-theme-matery/README.md","hash":"bbc201f264ea3fca4ec3738728d4236626cd698a","modified":1618751271695},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1618751271695},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"938e40cfb109501bf487c808e5670db3011431b9","modified":1618751271696},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"efb00dc75574e8ae9de02d98ae2c9172c3b0f002","modified":1604499934176},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"9baf9370d0d7494e8575934e4bd0fa6d24484052","modified":1618751271698},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"13ce732a54ce08b0ca01f14fd09cbe8fc418de21","modified":1618751271698},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"162136ceca6c95928c90a1adef8fabc2161d5c0e","modified":1618751271699},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1618751271719},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"88e23163aae5dff7a2e7050f55c3754f0e76ae68","modified":1618751271719},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1618751271719},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1618751271720},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"72fb5af3fc2f8955e2eb10926bbe4532a04ccd1b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"e9716a948172e6ad46c18cc7e78770cdc46f1857","modified":1618751271721},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"e6e6ab8624081e0f5e2d459427ca5069d7435c19","modified":1618751271721},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"27302b61fd4277507c41c28de5cc176e8deb8fb1","modified":1618751271722},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3783bb4d7807e3a3701d67499a878c69a0a872d6","modified":1618751271722},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1618751271722},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1618751271723},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1618751271699},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"6b4341fbba291c53de91babb2a0d69940a8d6547","modified":1618751271700},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1618751271700},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1618751271701},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"58a7a07f8ab81ecc19a78d897955ca1ad73defb3","modified":1618751271701},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1618751271702},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1618751271702},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"78228c5e91fc2e6fed6949d971bf78a1f5081812","modified":1618751271703},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1618751271703},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1618751271704},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1618751271704},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1618751271704},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"baf823506b71f257a42b44adaa52d42344b9cb65","modified":1618751271705},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1618751271705},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"624d9cb78a5507895ab50d20f3f0c497a5025d08","modified":1618751271705},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1618751271706},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"e1264587db510ae1885405aed433592291ae74c4","modified":1618751271706},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"8ce2974b19765e1f05d935a4f18abf7c84a980da","modified":1618751271706},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1618751271707},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"5a2179a9a3de6f56b0aaa154a11919b8f34fcbf9","modified":1618751271707},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1618751271708},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"96d0769e4ee87162da8d28e0e5abe3dd7e142aa6","modified":1618751271708},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"8ad8a7ec3f6438af496c51fd6bef1684e158a9ef","modified":1618751271708},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1618751271709},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1618751271710},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1618751271710},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1618751271711},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"5a0a056d642f89dc45d22cbcf0b210e69e58cf57","modified":1618751271711},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1618751271711},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1618751271712},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"ef335be75e3f26580583af8699b8497f350ae200","modified":1618751271712},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1618751271713},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1618751271713},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1618751271714},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8fc0e6172abbed7084b06e3ed637ad37e2752c48","modified":1618751271714},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1618751271715},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1618751271716},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1618751271715},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1618751271716},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1618751271717},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1618751271717},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1618751271717},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1618751271718},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"6eaab5fccff9ad69d1d877a0f0585e2fcb89ba52","modified":1618751271718},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1618751271723},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1618751271724},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"f8bcbcb4c2a3aebb3a2e7bf282ec99b4589cd5db","modified":1618751271724},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"b3c32b573a4a9ef3dfeffbd544a9c3f451e67a54","modified":1618751271725},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"ddfef10e80a09b8efb48c52ede773e71d5890c78","modified":1618751271726},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"d725d161733c0044c2c4b17389bfdd897a14c09e","modified":1618751271726},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1618751271727},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1618751271728},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1618751271728},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1618751271729},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1618751271730},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1618751271760},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1618751271761},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1618751271763},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1618751271764},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1618751271764},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1618751271765},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1618751271766},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1618751271767},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1618751271775},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1618751271777},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1618751271779},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1618751271780},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1618751271780},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1618751271788},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"005185ce5c8250503a75c370a9eb8f044f016c78","modified":1618751271792},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9783581bec83e6bd6cd279f0af23a2862f46a587","modified":1618751271799},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1618751271783},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1618751271787},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1618751271795},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1618751271798},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1618751271799},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1618751271768},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1618751271778},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1618751271781},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1618751271801},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"b27e97ec8ae77d040d328f7dcfc092405386faa5","modified":1603262361443},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"a52ac7807df520e59d0cacf1b38a97ccf8ff6bdf","modified":1603262361444},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1618751271731},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1618751271776},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1618751271792},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1618751271802},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1603269901310},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1603269901312},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1603800277587},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1603269901308},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1618751271773},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1602914090000},{"_id":"public/search.xml","hash":"215d7d2bef093a41135b0ca8ee85013814f6052b","modified":1619171581609},{"_id":"public/404.html","hash":"53a31205d403bdea0e10d7a9b3e64abd4ffa1ee8","modified":1619171581609},{"_id":"public/about/index.html","hash":"dcc72c4a7d57ae0334038e0a8b9b7ac461191d71","modified":1619171581609},{"_id":"public/categories/index.html","hash":"b49952e18e087f85a5c958ef0a7070182b05ba00","modified":1619171581609},{"_id":"public/contact/index.html","hash":"e231336d910aab6f6fe672dee603d888ad8c1517","modified":1619171581609},{"_id":"public/friends/index.html","hash":"2671763f165d9f49eb83d44bdbd8110cebb5787e","modified":1619171581609},{"_id":"public/tags/index.html","hash":"df056c8f3e388b52d19e1e1dc4a64d5629007028","modified":1619171581609},{"_id":"public/2020/11/03/haar-wavelet-optimization/index.html","hash":"138995dd4a649696d838bb4352f81c503e4a328d","modified":1605927086340},{"_id":"public/2020/10/27/haar-wavelet/index.html","hash":"811fc11cc903c4f19fa68f977e4c1e6e9797fdda","modified":1605926713885},{"_id":"public/2020/10/21/algorithm/binary-search/binary-search/index.html","hash":"ae7b2f900c965f3e90e3f21f4c496f4637d46fff","modified":1605926713885},{"_id":"public/2020/10/21/hello-world/index.html","hash":"34ecc9e04a0683f53adee6ff360adb3130b831ac","modified":1618992375816},{"_id":"public/archives/index.html","hash":"9552f0a35512d96ed1731b497ea35e00338ce753","modified":1619171581609},{"_id":"public/archives/2020/index.html","hash":"3b51915d4515bb14b0da963608fa1cdc99d20fd5","modified":1619171581609},{"_id":"public/archives/2020/10/index.html","hash":"c11a58acab465b56fb68c50bccccd21fcf280b77","modified":1619171581609},{"_id":"public/archives/2020/11/index.html","hash":"0bc9d6d7d3e8c295d75ea07a1cfe4ebae980034f","modified":1619171581609},{"_id":"public/categories/小波变换/index.html","hash":"73e4beefd4183b64d0f4cacff50444b67120daa6","modified":1619171581609},{"_id":"public/categories/小波变换/Fanrencli/index.html","hash":"76fd78a58191ed94243ac5d0f86177533da2a16b","modified":1605925475244},{"_id":"public/categories/Algorithm/index.html","hash":"d8c1c55781d9ee16df36525d45a31697eb95409c","modified":1619171581609},{"_id":"public/categories/Algorithm/Fanrencli/index.html","hash":"4de28809580a1bfc589acd5adcd89a8e8dc7d977","modified":1605925475244},{"_id":"public/index.html","hash":"e3851ac2b55f1a11111a7475132cd0b1dca063a0","modified":1619171581609},{"_id":"public/tags/Haar-Wavelet/index.html","hash":"c9c646b23b94562847aef140e1a734a932973eca","modified":1619171581609},{"_id":"public/tags/Python/index.html","hash":"3de0981625e6140af6af134c0fc0e29c61013b85","modified":1619171581609},{"_id":"public/tags/python/index.html","hash":"81bed86d4b56e23e3693b73dbe1c51077fc45d49","modified":1605925623546},{"_id":"public/tags/C/index.html","hash":"b3d0d107534b99d6f7bd77a8a59f5df3895e2b3c","modified":1619171581609},{"_id":"public/tags/Binary-Search/index.html","hash":"aaa41ea3138c9599af160216b274745089facb01","modified":1619171581609},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1618751375755},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1618751375755},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1618751375755},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1618751375755},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1618751375755},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1618751375755},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1618751375755},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1618751375755},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1618751375755},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1618751375755},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1618751375755},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1618751375755},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1618751375755},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1618751375755},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1618751375755},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1618751375755},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1618751375755},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1618751375755},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1618751375755},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1618751375755},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1618751375755},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1618751375755},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1618751375755},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1618751375755},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1618751375755},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1618751375755},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1618751375755},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1618751375755},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1618751375755},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1618751375755},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1618751375755},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1618751375755},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1618751375755},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1618751375755},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1618751375755},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1618751375755},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1618751375755},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1618751375755},{"_id":"public/medias/reward/alipay.jpg","hash":"b27e97ec8ae77d040d328f7dcfc092405386faa5","modified":1618751375755},{"_id":"public/medias/reward/wechat.png","hash":"a52ac7807df520e59d0cacf1b38a97ccf8ff6bdf","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1618751375755},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1618751375755},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1618751375755},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1618751375755},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1618751375755},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1618751375755},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1618751375755},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1618751375755},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1618751375755},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1618751375755},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1618751375755},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1618751375755},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1618751375755},{"_id":"public/js/search.js","hash":"d559d402b4d4a0931821fe6e22a8831fc43a953d","modified":1618751375755},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1618751375755},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1618751375755},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1618751375755},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1618751375755},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1618751375755},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1618751375755},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1618751375755},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1618751375755},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1618751375755},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1618751375755},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1618751375755},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1618751375755},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1618751375755},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1618751375755},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1618751375755},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1618751375755},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1618751375755},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1618751375755},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1618751375755},{"_id":"public/medias/banner/4.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1618751375755},{"_id":"public/medias/banner/5.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1618751375755},{"_id":"public/medias/banner/6.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1618751375755},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1618751375755},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1618751375755},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1618751375755},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1618751375755},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1618751375755},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1618751375755},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1618751375755},{"_id":"public/css/matery.css","hash":"b53f4b6b7b2d992c904a9bf98b504fba247b220e","modified":1618751375755},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1618751375755},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1618751375755},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1618751375755},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1618751375755},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1618751375755},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1618751375755},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1618751375755},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1618751375755},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1618751375755},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1618751375755},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1618751375755},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1618751375755},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1618751375755},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1618751375755},{"_id":"public/medias/banner/3.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1618751375755},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1618751375755},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1618751375755},{"_id":"public/tags/Fanrencli/index.html","hash":"e279c167754cf3d7a945b99c8d7225a4980ad711","modified":1619171581609},{"_id":"source/_posts/Algorithm/129.sum-root-to-leaf-numbers.md","hash":"7e4c12f6271dc0531a54ef4e78242e45d6436cb0","modified":1605926707636},{"_id":"public/2020/11/21/algorithm/129.sum-root-to-leaf-numbers/index.html","hash":"8799ac99906540abb92e0fdf6565679d91ddc3c5","modified":1605926713885},{"_id":"source/_posts/Algorithm/Binary Search/129.sum-root-to-leaf-numbers.md","hash":"cc0fa331939229bece2ebc0efb9b1ab6aa4da516","modified":1607237990298},{"_id":"public/2020/11/21/algorithm/binary-search/129.sum-root-to-leaf-numbers/index.html","hash":"175e6c69f9df21750bdab5f4c3cf06c5e31ffc07","modified":1619171581609},{"_id":"public/2020/11/21/algorithm/binary-search/binary-search/index.html","hash":"12a21f2de1ea717509f4999bfb14deaeff71f11f","modified":1619171581609},{"_id":"public/2020/10/23/haar-wavelet-optimization/index.html","hash":"fa4f70213fff2bc5d8cd5e009d1ab43f2b3aba43","modified":1618992375816},{"_id":"public/2020/10/23/haar-wavelet/index.html","hash":"7303a7107fe252ec5d549498fe7c8b8016ae9cdf","modified":1618992375816},{"_id":"source/_posts/OpenNI2-OpenCV.md","hash":"c6f10f6cbacdbbf2cb467e3a2f4e8109cd479e54","modified":1611730725353},{"_id":"public/2020/12/06/openni2-opencv/index.html","hash":"ef150b0f6a08beff62fdb9e3988e0860d16c5177","modified":1618992375816},{"_id":"public/archives/2020/12/index.html","hash":"b049ba13f05e30887f2969e9c71dca42c0b181fd","modified":1619171581609},{"_id":"public/categories/环境配置/index.html","hash":"9042fe81e96aa8e02b302d96a32ad9e2c11ec664","modified":1619171581609},{"_id":"public/tags/Orbbec-OpenNI/index.html","hash":"e5f36c33473251c4857e385054d429ba3790f4f3","modified":1619171581609},{"_id":"public/tags/OpenCV/index.html","hash":"a152ff82b80ede72296bc146294745a900ccdcf6","modified":1619171581609},{"_id":"source/_posts/8086/8086.md","hash":"a4ce09ffd2fb74585e237244b84b3d527a507f24","modified":1619146192403},{"_id":"public/2021/01/27/8086/8086/index.html","hash":"a10339c010a364362e2e32027044c31361efa008","modified":1619171581609},{"_id":"public/archives/2021/index.html","hash":"6b17827007c3d222d2d767cf701579b0d86aafc9","modified":1619171581609},{"_id":"public/archives/2021/01/index.html","hash":"f43c52ce0f642a98defff93d255dd1fdb13da97b","modified":1619171581609},{"_id":"public/tags/Assembly-Language/index.html","hash":"1422ddc8b833d9e96a0c9a61e85cf09f01a53d85","modified":1611730651588},{"_id":"public/categories/Assembly-Language/index.html","hash":"f8b3551e0d0a1d08df8f27a01339a0db1b7dd905","modified":1619171581609},{"_id":"public/tags/8086/index.html","hash":"db14ad5a37e14d9c0ee4073f5e2b478abfa977c6","modified":1619171581609},{"_id":"source/_posts/feature_extractor/resnet.md","hash":"467f9b9ac6be88af8e7b2e14075e419908bf573b","modified":1618751271687},{"_id":"source/_posts/jsis3d/jsis3d.md","hash":"38c2394f7e129ac838b61d9bd2365b5c33c609d0","modified":1618921508783},{"_id":"source/_posts/lifeknow/lifeknow.md","hash":"4e1b683c5bea266223dda8a570019335bbd2ed9f","modified":1611731822795},{"_id":"public/2021/02/06/jsis3d/jsis3d/index.html","hash":"6e2516ee63a51a165e6157a90fcf84cd6f9170f2","modified":1619171581609},{"_id":"public/2020/12/24/lifeknow/lifeknow/index.html","hash":"425b7d27441a4970b6b416fc5a9bd61fa7c709e5","modified":1619171581609},{"_id":"public/categories/Deep-Learning/index.html","hash":"a6a3e1b42c72d295af51d3152974422e596d1191","modified":1619171581609},{"_id":"public/categories/Life-Know/index.html","hash":"38d65f189f3f14afe5bf6305168062aeb8d6f23a","modified":1619171581609},{"_id":"public/tags/Jsis3d/index.html","hash":"b03fce05ff561e97c297ea583c2f871787587765","modified":1619171581609},{"_id":"public/archives/2021/02/index.html","hash":"ef897e36e0ca37d465c599cd167c7e466ae1f3a5","modified":1619171581609},{"_id":"public/2021/04/18/feature-extractor/resnet/index.html","hash":"b4d5fae4eb554b75c05dc5b94223e411bfdc8a61","modified":1619171581609},{"_id":"public/archives/2021/04/index.html","hash":"d3883c143a79e1b3d18e86695fe168ab3d98d2e0","modified":1619171581609},{"_id":"public/tags/ResNet101/index.html","hash":"e4c39bc524941f08f303271e90b36bef8f729395","modified":1619171581609},{"_id":"source/_posts/feature_extractor/VGG.md","hash":"897939ef29abf09136348994da32e2fa6e2eebfe","modified":1618751271687},{"_id":"public/2021/04/18/feature-extractor/vgg/index.html","hash":"03284ac4f4396bb4634913137f12c8cb61cf1069","modified":1619171581609},{"_id":"public/tags/VGG16/index.html","hash":"9b4f85da887ccc462962afa75f69d201696e618b","modified":1619171581609},{"_id":"source/_posts/object_detector/SSD.md","hash":"de2d1eac5c6c7408c219390ff4a26f183b3d5115","modified":1618801587404},{"_id":"public/2021/04/19/object-detector/ssd/index.html","hash":"ec74c04c9bcb482dc84c86087b1b6b7f2a0ad561","modified":1619171581609},{"_id":"public/tags/object-detection/index.html","hash":"573bf5aefd3b5d6b6122ceb307117164307926b7","modified":1619171581609},{"_id":"public/tags/SSD/index.html","hash":"2aaaf743d73d1641383f5b58f9a3d8979bf22341","modified":1619171581609},{"_id":"source/_posts/feature_extractor/mobilenet.md","hash":"70dad21408ffc1c2426d2c53a1ebf4517306a6ab","modified":1618932616653},{"_id":"public/2021/04/20/feature-extractor/mobilenet/index.html","hash":"30367715eff5ef68433ebda255b93039ef56120d","modified":1619171581609},{"_id":"public/archives/page/2/index.html","hash":"d1ca6740cac6b6b0e44bf3ff823b6993ab02a0e5","modified":1619171581609},{"_id":"public/page/2/index.html","hash":"75f1824a50fd0eedca44fcdc90f6058c9f2c532e","modified":1619171581609},{"_id":"public/tags/MobileNetv1/index.html","hash":"ffc614edb136260637653a8eb10f5767517af20c","modified":1619171581609},{"_id":"public/tags/MobileNetv3/index.html","hash":"563d4d1a14ff4aaa37e0049f437938cc1b8268f7","modified":1619171581609},{"_id":"public/tags/MobileNetv2/index.html","hash":"4e51de097404a9d5281451afb1cc021cf014f9b2","modified":1619171581609},{"_id":"source/_posts/feature_extractor/Inception.md","hash":"84488ac76fd2a9eeef2ece0f2b8ab56242cffa07","modified":1618992342269},{"_id":"public/2021/04/20/feature-extractor/inception/index.html","hash":"aeb7506e044c8150071c8c477ad29838e7a931b3","modified":1619171581609},{"_id":"public/tags/Inceptionv3/index.html","hash":"e5c74450ede8161b480e9b2c410fe73a94d8fe29","modified":1619171581609},{"_id":"public/tags/Xception/index.html","hash":"821ab2c51bc1d8e6b64913e76d269d18fd649fec","modified":1619171581609},{"_id":"source/_posts/other/OpenNI2-OpenCV.md","hash":"c6f10f6cbacdbbf2cb467e3a2f4e8109cd479e54","modified":1619073972426},{"_id":"source/_posts/other/haar_wavelet.md","hash":"893c63ddf38de111002e551d3ab8cd01e3289c7f","modified":1619073972356},{"_id":"source/_posts/other/haar_wavelet_optimization.md","hash":"5c7e50e410762daa1c9d5e1e7b0a85f99f54f454","modified":1619073972281},{"_id":"source/_posts/other/hello-world.md","hash":"9ec7f57234f91ec1e9a7a044eb2db41184707df1","modified":1619073972393},{"_id":"source/_posts/semantic_segmentation/segnet.md","hash":"2c6461d081891a66578a5f6ffd0ee3351907224a","modified":1619166399654},{"_id":"public/2021/04/22/semantic-segmentation/segnet/index.html","hash":"f73957a32fb144d8be561560a2a19fc3cc6f4706","modified":1619171581609},{"_id":"public/2020/12/06/other/openni2-opencv/index.html","hash":"f3b0cccedccbfd9a594424e5f217d4da24c54fef","modified":1619171581609},{"_id":"public/2020/10/23/other/haar-wavelet/index.html","hash":"f4b5c95e8a7d5e6ded9ee620a9482be3d8dc942e","modified":1619171581609},{"_id":"public/2020/10/23/other/haar-wavelet-optimization/index.html","hash":"e5f3456fe3c58d576b8978682ea9860a8a815437","modified":1619171581609},{"_id":"public/2020/10/21/other/hello-world/index.html","hash":"8554055fb91d1e00441845c778ca53d154b98293","modified":1619171581609},{"_id":"public/tags/Fanrencli/page/2/index.html","hash":"f3a33d7422c34fa3472d09612c64241f927a1fb0","modified":1619171581609},{"_id":"public/tags/semantic-segmentation/index.html","hash":"1aa4885c1a6afe5f03414c481dc706084de196b4","modified":1619171581609},{"_id":"public/tags/SegNet/index.html","hash":"2252a8dc51d0ee5e0c50e1313ed3870811e61f22","modified":1619171581609},{"_id":"source/_posts/semantic_segmentation/unet.md","hash":"c03f2ff3b77993a766011526a2605326e58fa4b7","modified":1619171521460},{"_id":"public/2021/04/23/semantic-segmentation/unet/index.html","hash":"6e3517a3a7ce39b51c0760a2bf6f6239ba7ae180","modified":1619171581609},{"_id":"public/tags/U-net/index.html","hash":"5dc118dbc7a5c4f9bdf22bad4b209ae5c1e64dec","modified":1619171581609}],"Category":[{"name":"小波变换","_id":"ckhr2kce000044guoctlycazy"},{"name":"Fanrencli","parent":"ckhr2kce000044guoctlycazy","_id":"ckhr2kce7000d4guoenhq4jlc"},{"name":"Algorithm","_id":"ckhr2kcec000q4guoflmidn5y"},{"name":"Fanrencli","parent":"ckhr2kcec000q4guoflmidn5y","_id":"ckhr2kced000t4guo3re70x9w"},{"name":"环境配置","_id":"ckicrxqcz0001vguo0k7c4969"},{"name":"Assembly Language","_id":"ckkf2w5fh0000couodabsf9y5"},{"name":"Deep Learning","_id":"cknmrfu4t000130uohxfa3zyq"},{"name":"Life Know","_id":"cknmrfu4y000430uo41byhm45"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"404","date":"2018-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---","updated":"2020-10-21T06:39:21.436Z","path":"404.html","comments":1,"_id":"ckhr2kcdr00004guo0pwi8w5l","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-10-21T04:36:49.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-10-21 12:36:49\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2020-10-21T06:39:21.438Z","path":"about/index.html","comments":1,"_id":"ckhr2kcdx00024guo4i18htvj","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2020-10-21T04:33:49.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-10-21 12:33:49\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2020-10-21T06:39:21.439Z","path":"categories/index.html","comments":1,"_id":"ckhr2kce200064guo9eu69jri","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"contact","date":"2020-10-21T04:37:08.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-10-21 12:37:08\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2020-10-21T06:39:21.439Z","path":"contact/index.html","comments":1,"_id":"ckhr2kce400084guo51jabyb5","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2020-10-21T04:37:27.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-10-21 12:37:27\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2020-10-21T06:39:21.440Z","path":"friends/index.html","comments":1,"_id":"ckhr2kce500094guo0dbzeds3","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2020-10-21T04:35:14.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-10-21 12:35:14\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-10-21T06:39:21.440Z","path":"tags/index.html","comments":1,"_id":"ckhr2kce7000c4guogsd3ct5c","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"算法","date":"2020-11-21T04:33:49.000Z","author":"Fanrencli","_content":"> 二叉树专题（`Binary Search`）\n> 二叉树作为算法经典题型，应用范围广，需要及其重视。\n\n## 前序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void pre_order(TreeNode* root){\n        if (root==nullptr) return;\n        cout << root->val << endl;\n        pre_order(root->left);\n        pre_order(root->right);\n    }\n};\n```\n## 中序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void middle_order(TreeNode* root){\n        if (root==nullptr) return;\n        middle_order(root->left);\n        cout << root->val << endl;\n        middle_order(root->right);\n    }\n};\n```\n## 后序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void post_order(TreeNode* root){\n        if (root==nullptr) return;\n        post_order(root->left);\n        post_order(root->right);\n        cout << root->val << endl;\n    }\n};\n```","source":"_posts/Algorithm/Binary Search/Binary Search.md","raw":"---\ntitle: 算法\ndate: 2020-11-21 12:33:49\ncategories:\n  - Algorithm\ntags:\n  - C++\n  - Binary Search\n  - Fanrencli\nauthor: Fanrencli\n---\n> 二叉树专题（`Binary Search`）\n> 二叉树作为算法经典题型，应用范围广，需要及其重视。\n\n## 前序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void pre_order(TreeNode* root){\n        if (root==nullptr) return;\n        cout << root->val << endl;\n        pre_order(root->left);\n        pre_order(root->right);\n    }\n};\n```\n## 中序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void middle_order(TreeNode* root){\n        if (root==nullptr) return;\n        middle_order(root->left);\n        cout << root->val << endl;\n        middle_order(root->right);\n    }\n};\n```\n## 后序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void post_order(TreeNode* root){\n        if (root==nullptr) return;\n        post_order(root->left);\n        post_order(root->right);\n        cout << root->val << endl;\n    }\n};\n```","slug":"Algorithm/Binary Search/Binary Search","published":1,"updated":"2021-02-06T11:50:53.883Z","_id":"ckhr2kceb000p4guo4uevggqz","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>二叉树专题（<code>Binary Search</code>）<br>二叉树作为算法经典题型，应用范围广，需要及其重视。</p>\n</blockquote>\n<h2 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h2><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">pre_order</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-</span><span class=\"token operator\">></span>val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">pre_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">pre_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h2><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">middle_order</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">middle_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-</span><span class=\"token operator\">></span>val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">middle_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h2><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">post_order</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">post_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">post_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-</span><span class=\"token operator\">></span>val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>二叉树专题（<code>Binary Search</code>）<br>二叉树作为算法经典题型，应用范围广，需要及其重视。</p>\n</blockquote>\n<h2 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h2><pre><code class=\"cpp\">class Solution &#123;\npublic:\n    void Search(TreeNode* root) &#123;\n        fun(root);\n    &#125;\n    void pre_order(TreeNode* root)&#123;\n        if (root==nullptr) return;\n        cout &lt;&lt; root-&gt;val &lt;&lt; endl;\n        pre_order(root-&gt;left);\n        pre_order(root-&gt;right);\n    &#125;\n&#125;;</code></pre>\n<h2 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h2><pre><code class=\"cpp\">class Solution &#123;\npublic:\n    void Search(TreeNode* root) &#123;\n        fun(root);\n    &#125;\n    void middle_order(TreeNode* root)&#123;\n        if (root==nullptr) return;\n        middle_order(root-&gt;left);\n        cout &lt;&lt; root-&gt;val &lt;&lt; endl;\n        middle_order(root-&gt;right);\n    &#125;\n&#125;;</code></pre>\n<h2 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h2><pre><code class=\"cpp\">class Solution &#123;\npublic:\n    void Search(TreeNode* root) &#123;\n        fun(root);\n    &#125;\n    void post_order(TreeNode* root)&#123;\n        if (root==nullptr) return;\n        post_order(root-&gt;left);\n        post_order(root-&gt;right);\n        cout &lt;&lt; root-&gt;val &lt;&lt; endl;\n    &#125;\n&#125;;</code></pre>\n"},{"title":"LeetCode_129","date":"2020-11-21T04:33:49.000Z","author":"Fanrencli","_content":"## 算法描述\nGiven a binary tree containing digits from `0-9` only, each root-to-leaf path could represent a number.\n\nAn example is the root-to-leaf path `1->2->3` which represents the number `123`.\n\nFind the total sum of all root-to-leaf numbers.\n\nNote: A leaf is a node with no children.\n\n## 示例\n\n### Example1:\n```\nInput: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n```\n### Example2\n```\nInput: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n```\n## 个人代码\n```cpp\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int chain = 0;\n        fun(root,chain,sum);\n        return sum;\n    }\n    int fun(TreeNode* root,int chain,int &sum){\n        if (root==nullptr) return 1;\n        chain=chain*10+root->val;\n        if(fun(root->left,chain,sum)==1 &fun(root->right,chain,sum)==1){\n            sum=sum+chain;\n        }\n        return 2;\n    }\n};\n```\n## 结果\n- Accept\n- 110/110 cases passed (0 ms)\n- Your runtime beats 100 % of cpp submissions\n- Your memory usage beats 54.85 % of cpp submissions (12.7 MB)","source":"_posts/Algorithm/Binary Search/129.sum-root-to-leaf-numbers.md","raw":"---\ntitle: LeetCode_129\ndate: 2020-11-21 12:33:49\ncategories:\n  - Algorithm\ntags:\n  - C++\n  - Binary Search\n  - Fanrencli\nauthor: Fanrencli\n---\n## 算法描述\nGiven a binary tree containing digits from `0-9` only, each root-to-leaf path could represent a number.\n\nAn example is the root-to-leaf path `1->2->3` which represents the number `123`.\n\nFind the total sum of all root-to-leaf numbers.\n\nNote: A leaf is a node with no children.\n\n## 示例\n\n### Example1:\n```\nInput: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n```\n### Example2\n```\nInput: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n```\n## 个人代码\n```cpp\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int chain = 0;\n        fun(root,chain,sum);\n        return sum;\n    }\n    int fun(TreeNode* root,int chain,int &sum){\n        if (root==nullptr) return 1;\n        chain=chain*10+root->val;\n        if(fun(root->left,chain,sum)==1 &fun(root->right,chain,sum)==1){\n            sum=sum+chain;\n        }\n        return 2;\n    }\n};\n```\n## 结果\n- Accept\n- 110/110 cases passed (0 ms)\n- Your runtime beats 100 % of cpp submissions\n- Your memory usage beats 54.85 % of cpp submissions (12.7 MB)","slug":"Algorithm/Binary Search/129.sum-root-to-leaf-numbers","published":1,"updated":"2020-12-06T06:59:50.298Z","_id":"ckhr3bkzw0000o8uo0g7f61uw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p>\n<p>An example is the root-to-leaf path <code>1-&gt;2-&gt;3</code> which represents the number <code>123</code>.</p>\n<p>Find the total sum of all root-to-leaf numbers.</p>\n<p>Note: A leaf is a node with no children.</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"Example1\"><a href=\"#Example1\" class=\"headerlink\" title=\"Example1:\"></a>Example1:</h3><pre><code>Input: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1-&gt;2 represents the number 12.\nThe root-to-leaf path 1-&gt;3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.</code></pre>\n<h3 id=\"Example2\"><a href=\"#Example2\" class=\"headerlink\" title=\"Example2\"></a>Example2</h3><pre><code>Input: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4-&gt;9-&gt;5 represents the number 495.\nThe root-to-leaf path 4-&gt;9-&gt;1 represents the number 491.\nThe root-to-leaf path 4-&gt;0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.</code></pre>\n<h2 id=\"个人代码\"><a href=\"#个人代码\" class=\"headerlink\" title=\"个人代码\"></a>个人代码</h2><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">sumNumbers</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> chain <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>chain<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> chain<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        chain<span class=\"token operator\">=</span>chain<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">,</span>chain<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">,</span>chain<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            sum<span class=\"token operator\">=</span>sum<span class=\"token operator\">+</span>chain<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><ul>\n<li>Accept</li>\n<li>110/110 cases passed (0 ms)</li>\n<li>Your runtime beats 100 % of cpp submissions</li>\n<li>Your memory usage beats 54.85 % of cpp submissions (12.7 MB)</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p>\n<p>An example is the root-to-leaf path <code>1-&gt;2-&gt;3</code> which represents the number <code>123</code>.</p>\n<p>Find the total sum of all root-to-leaf numbers.</p>\n<p>Note: A leaf is a node with no children.</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"Example1\"><a href=\"#Example1\" class=\"headerlink\" title=\"Example1:\"></a>Example1:</h3><pre><code>Input: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1-&gt;2 represents the number 12.\nThe root-to-leaf path 1-&gt;3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.</code></pre>\n<h3 id=\"Example2\"><a href=\"#Example2\" class=\"headerlink\" title=\"Example2\"></a>Example2</h3><pre><code>Input: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4-&gt;9-&gt;5 represents the number 495.\nThe root-to-leaf path 4-&gt;9-&gt;1 represents the number 491.\nThe root-to-leaf path 4-&gt;0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.</code></pre>\n<h2 id=\"个人代码\"><a href=\"#个人代码\" class=\"headerlink\" title=\"个人代码\"></a>个人代码</h2><pre><code class=\"cpp\">/**\n * Definition for a binary tree node.\n * struct TreeNode &#123;\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;\n * &#125;;\n */\nclass Solution &#123;\npublic:\n    int sumNumbers(TreeNode* root) &#123;\n        int sum = 0;\n        int chain = 0;\n        fun(root,chain,sum);\n        return sum;\n    &#125;\n    int fun(TreeNode* root,int chain,int &amp;sum)&#123;\n        if (root==nullptr) return 1;\n        chain=chain*10+root-&gt;val;\n        if(fun(root-&gt;left,chain,sum)==1 &amp;fun(root-&gt;right,chain,sum)==1)&#123;\n            sum=sum+chain;\n        &#125;\n        return 2;\n    &#125;\n&#125;;</code></pre>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><ul>\n<li>Accept</li>\n<li>110/110 cases passed (0 ms)</li>\n<li>Your runtime beats 100 % of cpp submissions</li>\n<li>Your memory usage beats 54.85 % of cpp submissions (12.7 MB)</li>\n</ul>\n"},{"title":"8086","date":"2021-01-27T05:51:20.000Z","author":"Fanrencli","_content":"## 寄存器简介\n\n| 寄存器名称 | 功能 |操作 |\n|---|---|---|\n| ax | 累加寄存器 | 经常使用，可以作为存储器看待 |\n| bx | 基础寄存器 | 经常使用，访问内存时`[]`中只可以使用`bx`/`bp`/`si`/`di`和数字索引，默认使用的段寄存器为`ds` |\n| cx | 循环寄存器 | 在使用`loop`做循环处理时，根据`cx`的值判断还有几次循环 |\n| dx | 备用寄存器 | 在做除法时，对32位被除数存储时，高位放在dx中 |\n| sp | 栈顶指针 | 在出栈、入栈时结合ss，对ss:sp处的内存进行操作 |\n| bp | 指针寄存器 | 在未指明段寄存器的情况下，使用`[bp]`默认段寄存器为`ss` |\n| si | 变址寄存器 | 在未指明段寄存器的情况下，使用`[si]`默认段寄存器为`ds` |\n| di | 变址寄存器 | 在未指明段寄存器的情况下，使用`[di]`默认段寄存器为`ds` |\n| ds | 段地址寄存器 | 通常指向初始化程序的内存代码段地址，在ds地址之后是psp程序前缀，大小为10H——16个字节，之后是程序运行的第一条指令地址，ds通常用于操作内存的段地址寄存器 |\n| es | 段地址寄存器 | 可以用于存放段地址，可以作为备用段地址 |\n| ss | 指针基址寄存器 | 可以用于存放指针段地址，通常与sp共同使用|\n| cs | 指令地址寄存器 | 可以用于存放下一个运行指令的地址，cs:ip |\n| ip | 指令偏移寄存器 | cs:ip |\n\n## 实验案例1\n已有数据：\n```\ndb '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\n以上是21年的字符串\n\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\n以上是21年公司的收入\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\n以上是21年公司雇佣的人数\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n\n```\n通过编程将data中的数据写入到table中，并计算21年的人均收入(取整)\n汇编实现:\n```asm\nassume cs:codesg\nstack segment\ndb '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\nstack ends\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n\ncodesg segment\n  start:\n    mov ax,stack\n    mov ss,ax\n    mov sp,0H\n    mov ax,table\n    mov ds,ax\n    mov cx,21\n    mov bx,0\n  s:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s\n\n  mov cx,21\n  mov bx,5\n  s0:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s0\n\n  mov cx,21\n  mov bx,10\n  s1:\n    pop ax\n    mov ds:[bx],ax\n    add bx,16\n  loop s1\n\n  mov cx,21\n  mov bx,0\n  s2:\n    mov ax,ds:[bx+5]\n    mov dx,ds:[bx+7]\n    div word ptr ds:[bx+10]\n    mov ds:[bx+13],ax\n    add bx,16\n  loop s2\n\n  mov ax,4c00h\n  int 21h\ncodesg ends\nend start\n```\n## 实验案例2\n在DOS窗口中显示字符，其中`B8000H`~`BFFFFH`共`32KB`的空间，这是一个缓冲区，向此缓冲区写入数据，写入的内容将立即出现在显示器上。其中奇数位地址为显示的字符内容，偶数位地址为显示的颜色（RGB，前景色，背景色）\n代码实现：其中在向寄存器中写入`B800H`时，由于十六进制不可以以字母开头，所有在`B800H`前加上一个`0`\n```asm\nassume cs:code\ndata segment\ndb 'conversation'\ndata ends\ncode segment\nstart:\n    mov ax,0b800h\n    mov ds,ax\n    mov bx,0\n    mov byte ptr [bx],41h\n    mov byte ptr [bx].1h,02h\n    mov byte ptr [bx].2h,42h\n    mov byte ptr [bx].3h,02h\n    mov byte ptr [bx].4h,43h\n    mov byte ptr [bx].5h,02h\n    mov byte ptr [bx].6h,44h\n    mov byte ptr [bx].7h,02h\n    mov ax,4c00h\n    int 21h\ncode ends\nend start\n```","source":"_posts/8086/8086.md","raw":"---\ntitle: 8086\ndate: 2021-01-27 13:51:20\ncategories:\n  - Assembly Language\ntags:\n  - 8086\n  - Fanrencli\nauthor: Fanrencli\n---\n## 寄存器简介\n\n| 寄存器名称 | 功能 |操作 |\n|---|---|---|\n| ax | 累加寄存器 | 经常使用，可以作为存储器看待 |\n| bx | 基础寄存器 | 经常使用，访问内存时`[]`中只可以使用`bx`/`bp`/`si`/`di`和数字索引，默认使用的段寄存器为`ds` |\n| cx | 循环寄存器 | 在使用`loop`做循环处理时，根据`cx`的值判断还有几次循环 |\n| dx | 备用寄存器 | 在做除法时，对32位被除数存储时，高位放在dx中 |\n| sp | 栈顶指针 | 在出栈、入栈时结合ss，对ss:sp处的内存进行操作 |\n| bp | 指针寄存器 | 在未指明段寄存器的情况下，使用`[bp]`默认段寄存器为`ss` |\n| si | 变址寄存器 | 在未指明段寄存器的情况下，使用`[si]`默认段寄存器为`ds` |\n| di | 变址寄存器 | 在未指明段寄存器的情况下，使用`[di]`默认段寄存器为`ds` |\n| ds | 段地址寄存器 | 通常指向初始化程序的内存代码段地址，在ds地址之后是psp程序前缀，大小为10H——16个字节，之后是程序运行的第一条指令地址，ds通常用于操作内存的段地址寄存器 |\n| es | 段地址寄存器 | 可以用于存放段地址，可以作为备用段地址 |\n| ss | 指针基址寄存器 | 可以用于存放指针段地址，通常与sp共同使用|\n| cs | 指令地址寄存器 | 可以用于存放下一个运行指令的地址，cs:ip |\n| ip | 指令偏移寄存器 | cs:ip |\n\n## 实验案例1\n已有数据：\n```\ndb '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\n以上是21年的字符串\n\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\n以上是21年公司的收入\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\n以上是21年公司雇佣的人数\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n\n```\n通过编程将data中的数据写入到table中，并计算21年的人均收入(取整)\n汇编实现:\n```asm\nassume cs:codesg\nstack segment\ndb '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\nstack ends\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n\ncodesg segment\n  start:\n    mov ax,stack\n    mov ss,ax\n    mov sp,0H\n    mov ax,table\n    mov ds,ax\n    mov cx,21\n    mov bx,0\n  s:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s\n\n  mov cx,21\n  mov bx,5\n  s0:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s0\n\n  mov cx,21\n  mov bx,10\n  s1:\n    pop ax\n    mov ds:[bx],ax\n    add bx,16\n  loop s1\n\n  mov cx,21\n  mov bx,0\n  s2:\n    mov ax,ds:[bx+5]\n    mov dx,ds:[bx+7]\n    div word ptr ds:[bx+10]\n    mov ds:[bx+13],ax\n    add bx,16\n  loop s2\n\n  mov ax,4c00h\n  int 21h\ncodesg ends\nend start\n```\n## 实验案例2\n在DOS窗口中显示字符，其中`B8000H`~`BFFFFH`共`32KB`的空间，这是一个缓冲区，向此缓冲区写入数据，写入的内容将立即出现在显示器上。其中奇数位地址为显示的字符内容，偶数位地址为显示的颜色（RGB，前景色，背景色）\n代码实现：其中在向寄存器中写入`B800H`时，由于十六进制不可以以字母开头，所有在`B800H`前加上一个`0`\n```asm\nassume cs:code\ndata segment\ndb 'conversation'\ndata ends\ncode segment\nstart:\n    mov ax,0b800h\n    mov ds,ax\n    mov bx,0\n    mov byte ptr [bx],41h\n    mov byte ptr [bx].1h,02h\n    mov byte ptr [bx].2h,42h\n    mov byte ptr [bx].3h,02h\n    mov byte ptr [bx].4h,43h\n    mov byte ptr [bx].5h,02h\n    mov byte ptr [bx].6h,44h\n    mov byte ptr [bx].7h,02h\n    mov ax,4c00h\n    int 21h\ncode ends\nend start\n```","slug":"8086/8086","published":1,"updated":"2021-04-23T02:49:52.403Z","_id":"ckkf2tf280000x0uo4i61cefc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"寄存器简介\"><a href=\"#寄存器简介\" class=\"headerlink\" title=\"寄存器简介\"></a>寄存器简介</h2><table>\n<thead>\n<tr>\n<th>寄存器名称</th>\n<th>功能</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ax</td>\n<td>累加寄存器</td>\n<td>经常使用，可以作为存储器看待</td>\n</tr>\n<tr>\n<td>bx</td>\n<td>基础寄存器</td>\n<td>经常使用，访问内存时<code>[]</code>中只可以使用<code>bx</code>/<code>bp</code>/<code>si</code>/<code>di</code>和数字索引，默认使用的段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>cx</td>\n<td>循环寄存器</td>\n<td>在使用<code>loop</code>做循环处理时，根据<code>cx</code>的值判断还有几次循环</td>\n</tr>\n<tr>\n<td>dx</td>\n<td>备用寄存器</td>\n<td>在做除法时，对32位被除数存储时，高位放在dx中</td>\n</tr>\n<tr>\n<td>sp</td>\n<td>栈顶指针</td>\n<td>在出栈、入栈时结合ss，对ss:sp处的内存进行操作</td>\n</tr>\n<tr>\n<td>bp</td>\n<td>指针寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[bp]</code>默认段寄存器为<code>ss</code></td>\n</tr>\n<tr>\n<td>si</td>\n<td>变址寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[si]</code>默认段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>di</td>\n<td>变址寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[di]</code>默认段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>ds</td>\n<td>段地址寄存器</td>\n<td>通常指向初始化程序的内存代码段地址，在ds地址之后是psp程序前缀，大小为10H——16个字节，之后是程序运行的第一条指令地址，ds通常用于操作内存的段地址寄存器</td>\n</tr>\n<tr>\n<td>es</td>\n<td>段地址寄存器</td>\n<td>可以用于存放段地址，可以作为备用段地址</td>\n</tr>\n<tr>\n<td>ss</td>\n<td>指针基址寄存器</td>\n<td>可以用于存放指针段地址，通常与sp共同使用</td>\n</tr>\n<tr>\n<td>cs</td>\n<td>指令地址寄存器</td>\n<td>可以用于存放下一个运行指令的地址，cs:ip</td>\n</tr>\n<tr>\n<td>ip</td>\n<td>指令偏移寄存器</td>\n<td>cs:ip</td>\n</tr>\n</tbody></table>\n<h2 id=\"实验案例1\"><a href=\"#实验案例1\" class=\"headerlink\" title=\"实验案例1\"></a>实验案例1</h2><p>已有数据：</p>\n<pre><code>db '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\n以上是21年的字符串\n\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\n以上是21年公司的收入\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\n以上是21年公司雇佣的人数\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n</code></pre>\n<p>通过编程将data中的数据写入到table中，并计算21年的人均收入(取整)<br>汇编实现:</p>\n<pre class=\" language-asm\"><code class=\"language-asm\">assume cs:codesg\nstack segment\ndb '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\nstack ends\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n\ncodesg segment\n  start:\n    mov ax,stack\n    mov ss,ax\n    mov sp,0H\n    mov ax,table\n    mov ds,ax\n    mov cx,21\n    mov bx,0\n  s:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s\n\n  mov cx,21\n  mov bx,5\n  s0:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s0\n\n  mov cx,21\n  mov bx,10\n  s1:\n    pop ax\n    mov ds:[bx],ax\n    add bx,16\n  loop s1\n\n  mov cx,21\n  mov bx,0\n  s2:\n    mov ax,ds:[bx+5]\n    mov dx,ds:[bx+7]\n    div word ptr ds:[bx+10]\n    mov ds:[bx+13],ax\n    add bx,16\n  loop s2\n\n  mov ax,4c00h\n  int 21h\ncodesg ends\nend start</code></pre>\n<h2 id=\"实验案例2\"><a href=\"#实验案例2\" class=\"headerlink\" title=\"实验案例2\"></a>实验案例2</h2><p>在DOS窗口中显示字符，其中<code>B8000H</code>~<code>BFFFFH</code>共<code>32KB</code>的空间，这是一个缓冲区，向此缓冲区写入数据，写入的内容将立即出现在显示器上。其中奇数位地址为显示的字符内容，偶数位地址为显示的颜色（RGB，前景色，背景色）<br>代码实现：其中在向寄存器中写入<code>B800H</code>时，由于十六进制不可以以字母开头，所有在<code>B800H</code>前加上一个<code>0</code></p>\n<pre class=\" language-asm\"><code class=\"language-asm\">assume cs:code\ndata segment\ndb 'conversation'\ndata ends\ncode segment\nstart:\n    mov ax,0b800h\n    mov ds,ax\n    mov bx,0\n    mov byte ptr [bx],41h\n    mov byte ptr [bx].1h,02h\n    mov byte ptr [bx].2h,42h\n    mov byte ptr [bx].3h,02h\n    mov byte ptr [bx].4h,43h\n    mov byte ptr [bx].5h,02h\n    mov byte ptr [bx].6h,44h\n    mov byte ptr [bx].7h,02h\n    mov ax,4c00h\n    int 21h\ncode ends\nend start</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"寄存器简介\"><a href=\"#寄存器简介\" class=\"headerlink\" title=\"寄存器简介\"></a>寄存器简介</h2><table>\n<thead>\n<tr>\n<th>寄存器名称</th>\n<th>功能</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ax</td>\n<td>累加寄存器</td>\n<td>经常使用，可以作为存储器看待</td>\n</tr>\n<tr>\n<td>bx</td>\n<td>基础寄存器</td>\n<td>经常使用，访问内存时<code>[]</code>中只可以使用<code>bx</code>/<code>bp</code>/<code>si</code>/<code>di</code>和数字索引，默认使用的段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>cx</td>\n<td>循环寄存器</td>\n<td>在使用<code>loop</code>做循环处理时，根据<code>cx</code>的值判断还有几次循环</td>\n</tr>\n<tr>\n<td>dx</td>\n<td>备用寄存器</td>\n<td>在做除法时，对32位被除数存储时，高位放在dx中</td>\n</tr>\n<tr>\n<td>sp</td>\n<td>栈顶指针</td>\n<td>在出栈、入栈时结合ss，对ss:sp处的内存进行操作</td>\n</tr>\n<tr>\n<td>bp</td>\n<td>指针寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[bp]</code>默认段寄存器为<code>ss</code></td>\n</tr>\n<tr>\n<td>si</td>\n<td>变址寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[si]</code>默认段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>di</td>\n<td>变址寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[di]</code>默认段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>ds</td>\n<td>段地址寄存器</td>\n<td>通常指向初始化程序的内存代码段地址，在ds地址之后是psp程序前缀，大小为10H——16个字节，之后是程序运行的第一条指令地址，ds通常用于操作内存的段地址寄存器</td>\n</tr>\n<tr>\n<td>es</td>\n<td>段地址寄存器</td>\n<td>可以用于存放段地址，可以作为备用段地址</td>\n</tr>\n<tr>\n<td>ss</td>\n<td>指针基址寄存器</td>\n<td>可以用于存放指针段地址，通常与sp共同使用</td>\n</tr>\n<tr>\n<td>cs</td>\n<td>指令地址寄存器</td>\n<td>可以用于存放下一个运行指令的地址，cs:ip</td>\n</tr>\n<tr>\n<td>ip</td>\n<td>指令偏移寄存器</td>\n<td>cs:ip</td>\n</tr>\n</tbody></table>\n<h2 id=\"实验案例1\"><a href=\"#实验案例1\" class=\"headerlink\" title=\"实验案例1\"></a>实验案例1</h2><p>已有数据：</p>\n<pre><code>db &#39;1975&#39;,&#39;1976&#39;,&#39;1977&#39;,&#39;1978&#39;,&#39;1979&#39;,&#39;1980&#39;,&#39;1981&#39;,&#39;1982&#39;,&#39;1983&#39;,&#39;1984&#39;,&#39;1985&#39;,&#39;1986&#39;,&#39;1987&#39;\ndb &#39;1988&#39;,&#39;1989&#39;,&#39;1990&#39;,&#39;1991&#39;,&#39;1992&#39;,&#39;1993&#39;,&#39;1994&#39;,&#39;1995&#39;\n以上是21年的字符串\n\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\n以上是21年公司的收入\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\n以上是21年公司雇佣的人数\n\ntable segment\ndb 21 dup(&#39;year summ ne ?? &#39;)\ntable ends\n</code></pre>\n<p>通过编程将data中的数据写入到table中，并计算21年的人均收入(取整)<br>汇编实现:</p>\n<pre><code class=\"asm\">assume cs:codesg\nstack segment\ndb &#39;1975&#39;,&#39;1976&#39;,&#39;1977&#39;,&#39;1978&#39;,&#39;1979&#39;,&#39;1980&#39;,&#39;1981&#39;,&#39;1982&#39;,&#39;1983&#39;,&#39;1984&#39;,&#39;1985&#39;,&#39;1986&#39;,&#39;1987&#39;\ndb &#39;1988&#39;,&#39;1989&#39;,&#39;1990&#39;,&#39;1991&#39;,&#39;1992&#39;,&#39;1993&#39;,&#39;1994&#39;,&#39;1995&#39;\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\nstack ends\n\ntable segment\ndb 21 dup(&#39;year summ ne ?? &#39;)\ntable ends\n\ncodesg segment\n  start:\n    mov ax,stack\n    mov ss,ax\n    mov sp,0H\n    mov ax,table\n    mov ds,ax\n    mov cx,21\n    mov bx,0\n  s:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s\n\n  mov cx,21\n  mov bx,5\n  s0:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s0\n\n  mov cx,21\n  mov bx,10\n  s1:\n    pop ax\n    mov ds:[bx],ax\n    add bx,16\n  loop s1\n\n  mov cx,21\n  mov bx,0\n  s2:\n    mov ax,ds:[bx+5]\n    mov dx,ds:[bx+7]\n    div word ptr ds:[bx+10]\n    mov ds:[bx+13],ax\n    add bx,16\n  loop s2\n\n  mov ax,4c00h\n  int 21h\ncodesg ends\nend start</code></pre>\n<h2 id=\"实验案例2\"><a href=\"#实验案例2\" class=\"headerlink\" title=\"实验案例2\"></a>实验案例2</h2><p>在DOS窗口中显示字符，其中<code>B8000H</code>~<code>BFFFFH</code>共<code>32KB</code>的空间，这是一个缓冲区，向此缓冲区写入数据，写入的内容将立即出现在显示器上。其中奇数位地址为显示的字符内容，偶数位地址为显示的颜色（RGB，前景色，背景色）<br>代码实现：其中在向寄存器中写入<code>B800H</code>时，由于十六进制不可以以字母开头，所有在<code>B800H</code>前加上一个<code>0</code></p>\n<pre><code class=\"asm\">assume cs:code\ndata segment\ndb &#39;conversation&#39;\ndata ends\ncode segment\nstart:\n    mov ax,0b800h\n    mov ds,ax\n    mov bx,0\n    mov byte ptr [bx],41h\n    mov byte ptr [bx].1h,02h\n    mov byte ptr [bx].2h,42h\n    mov byte ptr [bx].3h,02h\n    mov byte ptr [bx].4h,43h\n    mov byte ptr [bx].5h,02h\n    mov byte ptr [bx].6h,44h\n    mov byte ptr [bx].7h,02h\n    mov ax,4c00h\n    int 21h\ncode ends\nend start</code></pre>\n"},{"title":"jsis3d","date":"2021-02-06T11:50:17.000Z","author":"Fanrencli","_content":"## JSIS3D 论文学习记录\n\n论文地址：\n\n- https://gitee.com/FanrenCLI/jsis3d\n- https://github.com/pqhieu/jsis3d\n  \n## 环境准备\n- CUDA 10\n- Python 3.5+\n- Pytorch 0.4.0+\n\n### Installation\n首先需要编译`MV-CRF`,在下载的文件根目录中运行一下命令：\n```sh\n    cd external/densecrf\n    mkdir build\n    cd build\n    cmake -D CMAKE_BUILD_TYPE=Release ..\n    make\n    cd ../../.. # You should be at the root folder here\n    make\n```\n\n\n### Dataset\n1. 如果想自己准备数据集：\n- 数据集准备，JSIS3D论文使用的是开源的[S3DIS](http://buildingparser.stanford.edu/dataset.html)数据集，所以需要下载`S3DIS`数据集,这个数据集下载之后大约4个G，解压之后16G。\n- 在`data/s3dis`文件夹下创建`raw`和`processed`两个空文件夹用于存放原始数据和处理的过程数据\n- 创建完`raw`和`processed`两个空文件夹之后，将我们下载的`S3DIS`数据集解压之后放入`raw`文件夹下\n- 进入根目录下的`script`文件夹中，里面包含四个`py`文件，先运行`collect_annotations.py`文件，之后再运行`prepare_h5.py`\n- 运行`prepare_h5.py`文件时，首先需要修改文件中`91`行的代码，将其中`num_points`改成`4096`,这是根据`pointnet`作者代码设置的参数进行设置的\n- 运行完`prepare_h5.py`文件之后，接着运行`estimate_mean_size.py`和`estimate_median_freq.py`文件，数据集这样就制作完毕了。\n2. 如果想使用作者提供的数据集：\n- 作者提供了已经处理好的`S3DIS`数据集，[文件地址](https://drive.google.com/open?id=1s1cFfb8cInM-SNHQoTGxN9BIyNpNQK6x)\n- 下载了作者的数据集之后，将解压后的数据集放入`data/s3dis/h5`即可\n\n\n### Training & Evaluation\n\n准备数据集之后，开始训练数据：\n```sh\n    python train.py --config configs/s3dis.json --logdir logs/s3dis\n```\n数据训练完成之后，模型相关的数据将会放在`logs/s3dis`文件夹下。\n\n运行训练完的模型进行预测：\n```sh\n    python pred.py --logdir logs/s3dis --mvcrf\n```\n\n预测代码运行之后，会在`logs/s3dis`文件夹下生成`pred.npz`文件，之后想要对预测的结果进行可视化以及评价精度，运行以下代码：\n```sh\n    python eval.py --logdir logs/s3dis --visualize\n```\n运行完以上代码之后，将会在`logs/s3dis`文件夹中，生成ply文件，运用相关程序打开ply文件可以，发现里面有各个点运行的class和label信息。本文结合`open3d`和`plyfile`两个python库，对ply文件进行了处理与可视化，代码如下：\n```python\n    import open3d as o3d\n    import numpy as np\n    from plyfile import PlyData, PlyElement\n    plydata = PlyData.read(\n        r'F:\\python_work\\open3d_work\\Area_5_conferenceRoom_1.ply')\n    pc = plydata['vertex'].data\n    pcd_array = []\n    for i in range(pc.size):\n        pcd_array.append(list(pc[i]))\n    pcd_array = np.array(pcd_array)\n    colors=pcd_array[:, 3:6]\n    class_label = pcd_array[:, 6]\n    t=class_label.tolist()\n    s=set(t)\n    class_label_pro = list(s)\n    colors_list=[[152, 0, 0],[255, 0, 0],[255, 153, 0],[255, 255, 0],[0, 255, 0],[0, 255, 255],[74, 134, 232],[0, 0, 255],[255, 0, 255],[230, 184, 175],[252, 229, 205],[208, 224, 227],[221, 126, 107]]\n    for i in range(class_label.size):\n        colors[i]=colors_list[class_label_pro.index(class_label[i])]\n    pointcloud = o3d.geometry.PointCloud()\n    pointcloud.points = o3d.utility.Vector3dVector(pcd_array[:, 0:3])\n    pointcloud.colors = o3d.utility.Vector3dVector(colors/255)\n    o3d.io.write_point_cloud(\"copy_of_fragment.pcd\", pointcloud)\n    o3d.visualization.draw_geometries([pointcloud])\n    print('ok')\n```\n针对以上代码可以在理解的基础上进行修改。结果图展示：\n\n![结果图](http://39.105.26.229:4567/1.png)\n![数据图](http://39.105.26.229:4567/2.png)\n\n> **注意**:论文中针对S3DIS数据集，以区域1,2,3,4,6作为训练集，区域5作为测试集 \n\n","source":"_posts/jsis3d/jsis3d.md","raw":"---\ntitle: jsis3d\ndate: 2021-02-06 19:50:17\ncategories:\n  - Deep Learning\ntags:\n  - Jsis3d\n  - Fanrencli\nauthor: Fanrencli\n---\n## JSIS3D 论文学习记录\n\n论文地址：\n\n- https://gitee.com/FanrenCLI/jsis3d\n- https://github.com/pqhieu/jsis3d\n  \n## 环境准备\n- CUDA 10\n- Python 3.5+\n- Pytorch 0.4.0+\n\n### Installation\n首先需要编译`MV-CRF`,在下载的文件根目录中运行一下命令：\n```sh\n    cd external/densecrf\n    mkdir build\n    cd build\n    cmake -D CMAKE_BUILD_TYPE=Release ..\n    make\n    cd ../../.. # You should be at the root folder here\n    make\n```\n\n\n### Dataset\n1. 如果想自己准备数据集：\n- 数据集准备，JSIS3D论文使用的是开源的[S3DIS](http://buildingparser.stanford.edu/dataset.html)数据集，所以需要下载`S3DIS`数据集,这个数据集下载之后大约4个G，解压之后16G。\n- 在`data/s3dis`文件夹下创建`raw`和`processed`两个空文件夹用于存放原始数据和处理的过程数据\n- 创建完`raw`和`processed`两个空文件夹之后，将我们下载的`S3DIS`数据集解压之后放入`raw`文件夹下\n- 进入根目录下的`script`文件夹中，里面包含四个`py`文件，先运行`collect_annotations.py`文件，之后再运行`prepare_h5.py`\n- 运行`prepare_h5.py`文件时，首先需要修改文件中`91`行的代码，将其中`num_points`改成`4096`,这是根据`pointnet`作者代码设置的参数进行设置的\n- 运行完`prepare_h5.py`文件之后，接着运行`estimate_mean_size.py`和`estimate_median_freq.py`文件，数据集这样就制作完毕了。\n2. 如果想使用作者提供的数据集：\n- 作者提供了已经处理好的`S3DIS`数据集，[文件地址](https://drive.google.com/open?id=1s1cFfb8cInM-SNHQoTGxN9BIyNpNQK6x)\n- 下载了作者的数据集之后，将解压后的数据集放入`data/s3dis/h5`即可\n\n\n### Training & Evaluation\n\n准备数据集之后，开始训练数据：\n```sh\n    python train.py --config configs/s3dis.json --logdir logs/s3dis\n```\n数据训练完成之后，模型相关的数据将会放在`logs/s3dis`文件夹下。\n\n运行训练完的模型进行预测：\n```sh\n    python pred.py --logdir logs/s3dis --mvcrf\n```\n\n预测代码运行之后，会在`logs/s3dis`文件夹下生成`pred.npz`文件，之后想要对预测的结果进行可视化以及评价精度，运行以下代码：\n```sh\n    python eval.py --logdir logs/s3dis --visualize\n```\n运行完以上代码之后，将会在`logs/s3dis`文件夹中，生成ply文件，运用相关程序打开ply文件可以，发现里面有各个点运行的class和label信息。本文结合`open3d`和`plyfile`两个python库，对ply文件进行了处理与可视化，代码如下：\n```python\n    import open3d as o3d\n    import numpy as np\n    from plyfile import PlyData, PlyElement\n    plydata = PlyData.read(\n        r'F:\\python_work\\open3d_work\\Area_5_conferenceRoom_1.ply')\n    pc = plydata['vertex'].data\n    pcd_array = []\n    for i in range(pc.size):\n        pcd_array.append(list(pc[i]))\n    pcd_array = np.array(pcd_array)\n    colors=pcd_array[:, 3:6]\n    class_label = pcd_array[:, 6]\n    t=class_label.tolist()\n    s=set(t)\n    class_label_pro = list(s)\n    colors_list=[[152, 0, 0],[255, 0, 0],[255, 153, 0],[255, 255, 0],[0, 255, 0],[0, 255, 255],[74, 134, 232],[0, 0, 255],[255, 0, 255],[230, 184, 175],[252, 229, 205],[208, 224, 227],[221, 126, 107]]\n    for i in range(class_label.size):\n        colors[i]=colors_list[class_label_pro.index(class_label[i])]\n    pointcloud = o3d.geometry.PointCloud()\n    pointcloud.points = o3d.utility.Vector3dVector(pcd_array[:, 0:3])\n    pointcloud.colors = o3d.utility.Vector3dVector(colors/255)\n    o3d.io.write_point_cloud(\"copy_of_fragment.pcd\", pointcloud)\n    o3d.visualization.draw_geometries([pointcloud])\n    print('ok')\n```\n针对以上代码可以在理解的基础上进行修改。结果图展示：\n\n![结果图](http://39.105.26.229:4567/1.png)\n![数据图](http://39.105.26.229:4567/2.png)\n\n> **注意**:论文中针对S3DIS数据集，以区域1,2,3,4,6作为训练集，区域5作为测试集 \n\n","slug":"jsis3d/jsis3d","published":1,"updated":"2021-04-20T12:25:08.783Z","_id":"cknmrfu4p000030uo6m1l2idg","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"JSIS3D-论文学习记录\"><a href=\"#JSIS3D-论文学习记录\" class=\"headerlink\" title=\"JSIS3D 论文学习记录\"></a>JSIS3D 论文学习记录</h2><p>论文地址：</p>\n<ul>\n<li><a href=\"https://gitee.com/FanrenCLI/jsis3d\">https://gitee.com/FanrenCLI/jsis3d</a></li>\n<li><a href=\"https://github.com/pqhieu/jsis3d\">https://github.com/pqhieu/jsis3d</a></li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li>CUDA 10</li>\n<li>Python 3.5+</li>\n<li>Pytorch 0.4.0+</li>\n</ul>\n<h3 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h3><p>首先需要编译<code>MV-CRF</code>,在下载的文件根目录中运行一下命令：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">    cd external/densecrf\n    mkdir build\n    cd build\n    cmake -D CMAKE_BUILD_TYPE=Release ..\n    make\n    cd ../../.. # You should be at the root folder here\n    make</code></pre>\n<h3 id=\"Dataset\"><a href=\"#Dataset\" class=\"headerlink\" title=\"Dataset\"></a>Dataset</h3><ol>\n<li>如果想自己准备数据集：</li>\n</ol>\n<ul>\n<li>数据集准备，JSIS3D论文使用的是开源的<a href=\"http://buildingparser.stanford.edu/dataset.html\">S3DIS</a>数据集，所以需要下载<code>S3DIS</code>数据集,这个数据集下载之后大约4个G，解压之后16G。</li>\n<li>在<code>data/s3dis</code>文件夹下创建<code>raw</code>和<code>processed</code>两个空文件夹用于存放原始数据和处理的过程数据</li>\n<li>创建完<code>raw</code>和<code>processed</code>两个空文件夹之后，将我们下载的<code>S3DIS</code>数据集解压之后放入<code>raw</code>文件夹下</li>\n<li>进入根目录下的<code>script</code>文件夹中，里面包含四个<code>py</code>文件，先运行<code>collect_annotations.py</code>文件，之后再运行<code>prepare_h5.py</code></li>\n<li>运行<code>prepare_h5.py</code>文件时，首先需要修改文件中<code>91</code>行的代码，将其中<code>num_points</code>改成<code>4096</code>,这是根据<code>pointnet</code>作者代码设置的参数进行设置的</li>\n<li>运行完<code>prepare_h5.py</code>文件之后，接着运行<code>estimate_mean_size.py</code>和<code>estimate_median_freq.py</code>文件，数据集这样就制作完毕了。</li>\n</ul>\n<ol start=\"2\">\n<li>如果想使用作者提供的数据集：</li>\n</ol>\n<ul>\n<li>作者提供了已经处理好的<code>S3DIS</code>数据集，<a href=\"https://drive.google.com/open?id=1s1cFfb8cInM-SNHQoTGxN9BIyNpNQK6x\">文件地址</a></li>\n<li>下载了作者的数据集之后，将解压后的数据集放入<code>data/s3dis/h5</code>即可</li>\n</ul>\n<h3 id=\"Training-amp-Evaluation\"><a href=\"#Training-amp-Evaluation\" class=\"headerlink\" title=\"Training &amp; Evaluation\"></a>Training &amp; Evaluation</h3><p>准备数据集之后，开始训练数据：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">    python train.py --config configs/s3dis.json --logdir logs/s3dis</code></pre>\n<p>数据训练完成之后，模型相关的数据将会放在<code>logs/s3dis</code>文件夹下。</p>\n<p>运行训练完的模型进行预测：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">    python pred.py --logdir logs/s3dis --mvcrf</code></pre>\n<p>预测代码运行之后，会在<code>logs/s3dis</code>文件夹下生成<code>pred.npz</code>文件，之后想要对预测的结果进行可视化以及评价精度，运行以下代码：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">    python eval.py --logdir logs/s3dis --visualize</code></pre>\n<p>运行完以上代码之后，将会在<code>logs/s3dis</code>文件夹中，生成ply文件，运用相关程序打开ply文件可以，发现里面有各个点运行的class和label信息。本文结合<code>open3d</code>和<code>plyfile</code>两个python库，对ply文件进行了处理与可视化，代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">import</span> open3d <span class=\"token keyword\">as</span> o3d\n    <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n    <span class=\"token keyword\">from</span> plyfile <span class=\"token keyword\">import</span> PlyData<span class=\"token punctuation\">,</span> PlyElement\n    plydata <span class=\"token operator\">=</span> PlyData<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>\n        r<span class=\"token string\">'F:\\python_work\\open3d_work\\Area_5_conferenceRoom_1.ply'</span><span class=\"token punctuation\">)</span>\n    pc <span class=\"token operator\">=</span> plydata<span class=\"token punctuation\">[</span><span class=\"token string\">'vertex'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data\n    pcd_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        pcd_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    pcd_array <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>pcd_array<span class=\"token punctuation\">)</span>\n    colors<span class=\"token operator\">=</span>pcd_array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n    class_label <span class=\"token operator\">=</span> pcd_array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n    t<span class=\"token operator\">=</span>class_label<span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    s<span class=\"token operator\">=</span>set<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n    class_label_pro <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    colors_list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">152</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">153</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">74</span><span class=\"token punctuation\">,</span> <span class=\"token number\">134</span><span class=\"token punctuation\">,</span> <span class=\"token number\">232</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">230</span><span class=\"token punctuation\">,</span> <span class=\"token number\">184</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">252</span><span class=\"token punctuation\">,</span> <span class=\"token number\">229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">205</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">208</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">227</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">221</span><span class=\"token punctuation\">,</span> <span class=\"token number\">126</span><span class=\"token punctuation\">,</span> <span class=\"token number\">107</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>class_label<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        colors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>colors_list<span class=\"token punctuation\">[</span>class_label_pro<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>class_label<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    pointcloud <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>PointCloud<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pointcloud<span class=\"token punctuation\">.</span>points <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>utility<span class=\"token punctuation\">.</span>Vector3dVector<span class=\"token punctuation\">(</span>pcd_array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    pointcloud<span class=\"token punctuation\">.</span>colors <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>utility<span class=\"token punctuation\">.</span>Vector3dVector<span class=\"token punctuation\">(</span>colors<span class=\"token operator\">/</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n    o3d<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>write_point_cloud<span class=\"token punctuation\">(</span><span class=\"token string\">\"copy_of_fragment.pcd\"</span><span class=\"token punctuation\">,</span> pointcloud<span class=\"token punctuation\">)</span>\n    o3d<span class=\"token punctuation\">.</span>visualization<span class=\"token punctuation\">.</span>draw_geometries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pointcloud<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>针对以上代码可以在理解的基础上进行修改。结果图展示：</p>\n<p><img src=\"http://39.105.26.229:4567/1.png\" alt=\"结果图\"><br><img src=\"http://39.105.26.229:4567/2.png\" alt=\"数据图\"></p>\n<blockquote>\n<p><strong>注意</strong>:论文中针对S3DIS数据集，以区域1,2,3,4,6作为训练集，区域5作为测试集 </p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"JSIS3D-论文学习记录\"><a href=\"#JSIS3D-论文学习记录\" class=\"headerlink\" title=\"JSIS3D 论文学习记录\"></a>JSIS3D 论文学习记录</h2><p>论文地址：</p>\n<ul>\n<li><a href=\"https://gitee.com/FanrenCLI/jsis3d\">https://gitee.com/FanrenCLI/jsis3d</a></li>\n<li><a href=\"https://github.com/pqhieu/jsis3d\">https://github.com/pqhieu/jsis3d</a></li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li>CUDA 10</li>\n<li>Python 3.5+</li>\n<li>Pytorch 0.4.0+</li>\n</ul>\n<h3 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h3><p>首先需要编译<code>MV-CRF</code>,在下载的文件根目录中运行一下命令：</p>\n<pre><code class=\"sh\">    cd external/densecrf\n    mkdir build\n    cd build\n    cmake -D CMAKE_BUILD_TYPE=Release ..\n    make\n    cd ../../.. # You should be at the root folder here\n    make</code></pre>\n<h3 id=\"Dataset\"><a href=\"#Dataset\" class=\"headerlink\" title=\"Dataset\"></a>Dataset</h3><ol>\n<li>如果想自己准备数据集：</li>\n</ol>\n<ul>\n<li>数据集准备，JSIS3D论文使用的是开源的<a href=\"http://buildingparser.stanford.edu/dataset.html\">S3DIS</a>数据集，所以需要下载<code>S3DIS</code>数据集,这个数据集下载之后大约4个G，解压之后16G。</li>\n<li>在<code>data/s3dis</code>文件夹下创建<code>raw</code>和<code>processed</code>两个空文件夹用于存放原始数据和处理的过程数据</li>\n<li>创建完<code>raw</code>和<code>processed</code>两个空文件夹之后，将我们下载的<code>S3DIS</code>数据集解压之后放入<code>raw</code>文件夹下</li>\n<li>进入根目录下的<code>script</code>文件夹中，里面包含四个<code>py</code>文件，先运行<code>collect_annotations.py</code>文件，之后再运行<code>prepare_h5.py</code></li>\n<li>运行<code>prepare_h5.py</code>文件时，首先需要修改文件中<code>91</code>行的代码，将其中<code>num_points</code>改成<code>4096</code>,这是根据<code>pointnet</code>作者代码设置的参数进行设置的</li>\n<li>运行完<code>prepare_h5.py</code>文件之后，接着运行<code>estimate_mean_size.py</code>和<code>estimate_median_freq.py</code>文件，数据集这样就制作完毕了。</li>\n</ul>\n<ol start=\"2\">\n<li>如果想使用作者提供的数据集：</li>\n</ol>\n<ul>\n<li>作者提供了已经处理好的<code>S3DIS</code>数据集，<a href=\"https://drive.google.com/open?id=1s1cFfb8cInM-SNHQoTGxN9BIyNpNQK6x\">文件地址</a></li>\n<li>下载了作者的数据集之后，将解压后的数据集放入<code>data/s3dis/h5</code>即可</li>\n</ul>\n<h3 id=\"Training-amp-Evaluation\"><a href=\"#Training-amp-Evaluation\" class=\"headerlink\" title=\"Training &amp; Evaluation\"></a>Training &amp; Evaluation</h3><p>准备数据集之后，开始训练数据：</p>\n<pre><code class=\"sh\">    python train.py --config configs/s3dis.json --logdir logs/s3dis</code></pre>\n<p>数据训练完成之后，模型相关的数据将会放在<code>logs/s3dis</code>文件夹下。</p>\n<p>运行训练完的模型进行预测：</p>\n<pre><code class=\"sh\">    python pred.py --logdir logs/s3dis --mvcrf</code></pre>\n<p>预测代码运行之后，会在<code>logs/s3dis</code>文件夹下生成<code>pred.npz</code>文件，之后想要对预测的结果进行可视化以及评价精度，运行以下代码：</p>\n<pre><code class=\"sh\">    python eval.py --logdir logs/s3dis --visualize</code></pre>\n<p>运行完以上代码之后，将会在<code>logs/s3dis</code>文件夹中，生成ply文件，运用相关程序打开ply文件可以，发现里面有各个点运行的class和label信息。本文结合<code>open3d</code>和<code>plyfile</code>两个python库，对ply文件进行了处理与可视化，代码如下：</p>\n<pre><code class=\"python\">    import open3d as o3d\n    import numpy as np\n    from plyfile import PlyData, PlyElement\n    plydata = PlyData.read(\n        r&#39;F:\\python_work\\open3d_work\\Area_5_conferenceRoom_1.ply&#39;)\n    pc = plydata[&#39;vertex&#39;].data\n    pcd_array = []\n    for i in range(pc.size):\n        pcd_array.append(list(pc[i]))\n    pcd_array = np.array(pcd_array)\n    colors=pcd_array[:, 3:6]\n    class_label = pcd_array[:, 6]\n    t=class_label.tolist()\n    s=set(t)\n    class_label_pro = list(s)\n    colors_list=[[152, 0, 0],[255, 0, 0],[255, 153, 0],[255, 255, 0],[0, 255, 0],[0, 255, 255],[74, 134, 232],[0, 0, 255],[255, 0, 255],[230, 184, 175],[252, 229, 205],[208, 224, 227],[221, 126, 107]]\n    for i in range(class_label.size):\n        colors[i]=colors_list[class_label_pro.index(class_label[i])]\n    pointcloud = o3d.geometry.PointCloud()\n    pointcloud.points = o3d.utility.Vector3dVector(pcd_array[:, 0:3])\n    pointcloud.colors = o3d.utility.Vector3dVector(colors/255)\n    o3d.io.write_point_cloud(&quot;copy_of_fragment.pcd&quot;, pointcloud)\n    o3d.visualization.draw_geometries([pointcloud])\n    print(&#39;ok&#39;)</code></pre>\n<p>针对以上代码可以在理解的基础上进行修改。结果图展示：</p>\n<p><img src=\"http://39.105.26.229:4567/1.png\" alt=\"结果图\"><br><img src=\"http://39.105.26.229:4567/2.png\" alt=\"数据图\"></p>\n<blockquote>\n<p><strong>注意</strong>:论文中针对S3DIS数据集，以区域1,2,3,4,6作为训练集，区域5作为测试集 </p>\n</blockquote>\n"},{"title":"lifeknow","date":"2020-12-24T03:11:56.000Z","_content":"### Life, you know what?\n<p style=\"text-indent:2em\">\n2020年12月31日\n\n</p> \n<p style=\"text-indent:2em\">\n一年飞快的逝去，去年往事历历在目。稍微回想了一下过去的一年，似乎发生了很多事，但是仔细回想起来却也没有什么值得去保存。去年的今年，似乎刚刚考完研，内心对于这次考研的经历没有太多的波澜。整体看来，考试整个过程似乎没有太出乎意料。虽然过程有点意外，但是总算是有惊无险。本想在去年总结一下考研的经历，但最后还是没有进行，也可能是考虑到还没有上岸吧。\n</p> \n<p style=\"text-indent:2em\">\n现在似乎是一个绝佳的时刻，总结考研准备过程，到考试，最后到面试，以及上岸后到学校报道的一些见闻。考研的过程没有很迷茫的时刻，时时刻刻都谨记着自己的初心和目标。从2019年三月份开始，就开始陆陆续续地准备数学的学习，因为一开始的目标比较难，所以也下了很大的决心要把数学搞好。为了学好数学二，从一开始循序渐进，先学习本科的高数课本开始，将整本书从头到尾全部看一遍，并将课后习题一题一题地过。这是第一遍针对高数部分的学习，当看完整本高数之后，开始看同济大学的高数课本，课后习题也是一题一题地过。期间开始刷英语真题，一句一句地看，力求仔细认真。一直到暑假，基本将高数课本结束，英语正常进度推进。当然在这期间并没有全部时间都在复习，因为还有课程以及课外自己的计划，比如当时向写一篇核心论文，尝试做一个自己想法的app，在学习深度学习相关的知识。暑假之前，论文写完，并发给了老师。至于app部分，解决了app的核心问题——深度学习识别验证码。这个经历还是让我感觉很不错的，因为从数据的获取，处理，构建简单的网络，最后得出模型。这个过程中问题曾出不穷，在解决问题的过程中对人工智能有了一点思考和想法，对深度学习的构建流程基本了解。解决了验证码识别的问题，之后将模型集成到app中之后就完成了app的登陆功能，也是最艰难的功能-_-!。能将这个问题解决还是让我感觉很兴奋的，因为这是为第一次从零开始，接触深度学习，代码全部是自己一个一个敲出来的。嘿嘿黑。。。。做完这个登陆功能之后就是后段代码的编写以及前端小程序的编写。在做这个让我比较重视的项目中，我也在不断的思考，不论是代码书写的规范，程序的适用性，是否可以优化，解决并发问题等等，对我来说，提高确实很大，很少有时间就这么纯粹的按照自己的想法，做一件对于自己来说很好，对别人来说也很有贡献的事情（这个app做完是免费开放给本校学生使用的，这是我的想法哈哈哈哈）。在暑假开始之前基本app完成了一半，后续只是代码编写和调试的劳动密集型工作。基本上感觉距离成功不远了，不过最后却没有完成，这也是让我非常遗憾的事情。因为做的是一个学校网站的信息爬取app，没想到学校换系统了。emmmmmm，始料未及，我感觉学校不讲武德，啥时候换不好，偏偏就在我要做好的时候换，偷袭我这个20多岁的小青年。不过回头一想，可能不完美才是真正的完美，有遗憾才是青春，那就这样结束吧。\n</p>\n<p style=\"text-indent:2em\">\n暑假开始之前，我就了解这个暑假将是考研过程中蜕变的关键期，一定要把握好暑假，把握住了暑假，基本成功一般。暑假开始，买了地学考研中心的复习资料，开始疯狂的背诵，日复一日，直到考研前一天。GIS的专业课，似乎背诵是最好的解决方式。而数学则是买了李永乐的红书，要保证滚瓜烂熟，一遍不行就两遍，真题认真作。关于线性代数部分也如同高数一般，先刷书再做课后习题。然后再看李永乐的红书部分的线性代数。政治的话，暑假就是附带着刷1000题。英语背诵单词和写作，持续进行。就这样暑假再高温和疯狂背诵之中结束。没有太多的回忆，不过温度确实很高，哈哈哈哈，整个考研教室开着空调完全感受不到冷气，我滴乖乖，活活热死。还好没有住校，因为学校宿舍没有空调，在外面租房子，说到租房子，是在贝壳找房上租的。房子很不错，和舍友一起，四个人，但是最后只有三个人住进来emmmmm。不过值得一提的是，初入社会没有经验，没想到租房找中介，中介的收费会这么贵，emmmmmm，好像要房租的一半还是一个月的房租，忘记了，不过我们租了两个月，但是需要付三个月的钱，最后也是中介人比较好，看在学生的份上，打了折扣。租房的地方叫天空之城，距离学校还是挺远的，所以就借了学第的电瓶车作为来回的工具。其中一个舍友，就在租房里面复习，没有去学校，但是我还是建议每天都去学校的。这样要求自己比较好点。就这样，暑假似乎也过得很快，没有过多的停留，时间飞逝地来到开学，虽说是开学，但是对于我们来说没有任何变化，还是不停地刷题，可能也就是复习计划进入到下一阶段，暑假结束，基本考研的准备已经接近80%。接下来就是题海战术了，以及一成不变的疯狂背诵。到11月政治肖四肖八背诵无需多说。在漫长的背诵刷题过程中，人的精神是很难保持高度集中的，总是需要一些娱乐。接近后期考研准备基本完成的时候，就是不断的巩固之前的背诵，不能忘记，很是无聊。于是emmmmm，嘿嘿我就开始看LOL的全球总决赛，记得当时是S9,我还是很喜欢接触游戏，虽然每个游戏在我这只能保持很短的新鲜感，但是看游戏还是我的爱好的。于是在考研过程中，时常会在无聊，心态不好的时候回到宿舍看直播，不过很可惜，作为IG的粉丝，IG在s9没有夺冠，这可能也是应了那句话，“人的巅峰是一时的，而失败才是常态”。面对失败，如何处理是一个人最重要的品质，这决定着你的最后成就。除了游戏，在这个过程中，最让人放松的是，在室内三五成群的背书，最后变成茶话会，哈哈哈哈，还是很喜欢和一群考研人谈天说地，而且不知不觉就过去了很长时间而不自知。\n</p> \n\n<p style=\"text-indent:2em\">\n就这样复习的时间就这样飞逝，转眼便已经考完，走在去食堂的路上，还偶遇胡哥和女生在一起交谈甚欢。嘿嘿黑，果然人在社会还是需要另一半啊，哈哈哈哈。。。考研结束之后，迎接的就是即将毕业的事宜，首先是实习，然后是毕业论文。放假之前老师安排我们去新兴华安实习，然后给一个月时间面试准备，最后写毕业论文。本以为就可以这样结束大学生涯，没想到还是老天爷玩的花，突如其来的疫情，打乱了所有的计划，只能蜗居家中写论文。也许社会的无常与人生是相通的，没有人能知道下一刻会发生什么，所以人生才有动力去拼搏。在家中的时间是无聊的，也只能和老王打游戏。当然，还有一件心心念念的事，考研成绩就要出了。哈哈哈哈，出成绩的那一天，似乎格外难熬。没想到武汉作为疫情的重灾区也正是我的目标大学-武汉大学所在地。别人成绩都出了，而我还在等待。难熬，这可能是让我记忆犹新的原因。不过再托，成绩也有公布的时候，我记得当时是晚上，虽有对成绩早有估计，但是心中还是不能放心。打开成绩的一刹那，我捂住了眼睛，如果旭旭宝宝增幅装备一般，但是我的感受绝对比他更强烈。生死就是一瞬，根据量子力学的思想，只要我不看，我的成绩就有一万种可能。啪地一下，我睁开了眼睛，很快啊，上来就是一个左钩拳emmmmm串戏了不好意思。我的成绩居然是#%%，emmmmm心里有点失望，因为我估计应该360+至少，如果没有那么应该就是专业课的问题了，因为专业课不好估计。也正是这样，专业课今年有点难，普遍没有几个超过100的人，我也不例外，但是心里还抱着一丝侥幸，希望武汉大学能扩招，哈哈哈哈。不过基本上是要调剂了，这可能就是——失败是人生的常态吧。不过还好，知道成绩之后就是每天谢谢毕业论文，打打游戏，等待开学了，虽然还遥遥无期。\n</p> \n\n<p style=\"text-indent:2em\">\n等待开学也是难熬的，因为在家里啥事没有，让人疯狂。最后等来了4月18号开学的消息，接下来就是返校了。\n返校之后，是一段空白期，因为需要调剂，所以需要等待第一批结束后才开始，而调剂开始的时间，让我记忆犹新，因为是5月20号，这个特殊的日子，让恋人开心，也让单身的考研狗开心，因为即将尘埃落定。相较于往年，今年是网络面试，没有太多变化的面试准备，机缘巧合下遇到了一个比较合乎我的想法的老师，调剂了985，我是幸运的，也许这就是命运吧，我终将走向北京，遇见新的朋友，新的同学，新的老师，新的挑战，以及新的目标。不断的前进，向上，这就是多数人都想要的。这样，我的考研的一年，准确的讲，是一年多，从三月到接近下一年的六月，就这样结束了。现在看来，考研对我来说没有什么困难之处，每一步都在按计划进行，没有过多的改变，就是不断的前行。似乎过于简单，以至于我现在还没有感觉到考研的困难所在。对于现在的我们，考研抑或工作是一种选择，并非一种压力，以后读博抑或工作也是如此。只要我们愿意，那么就可以，关键取决于你是否愿意，以及能否为自己的想法作出所有的努力。\n至于接下来的研究生生活，似乎不太值得关注，等过年的时候，总结这个学期吧。新年再见！！！\n\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/lifeknow/lifeknow.md","raw":"---\ntitle: lifeknow\ndate: 2020-12-24 11:11:56\ncategories:\n    - Life Know\n---\n### Life, you know what?\n<p style=\"text-indent:2em\">\n2020年12月31日\n\n</p> \n<p style=\"text-indent:2em\">\n一年飞快的逝去，去年往事历历在目。稍微回想了一下过去的一年，似乎发生了很多事，但是仔细回想起来却也没有什么值得去保存。去年的今年，似乎刚刚考完研，内心对于这次考研的经历没有太多的波澜。整体看来，考试整个过程似乎没有太出乎意料。虽然过程有点意外，但是总算是有惊无险。本想在去年总结一下考研的经历，但最后还是没有进行，也可能是考虑到还没有上岸吧。\n</p> \n<p style=\"text-indent:2em\">\n现在似乎是一个绝佳的时刻，总结考研准备过程，到考试，最后到面试，以及上岸后到学校报道的一些见闻。考研的过程没有很迷茫的时刻，时时刻刻都谨记着自己的初心和目标。从2019年三月份开始，就开始陆陆续续地准备数学的学习，因为一开始的目标比较难，所以也下了很大的决心要把数学搞好。为了学好数学二，从一开始循序渐进，先学习本科的高数课本开始，将整本书从头到尾全部看一遍，并将课后习题一题一题地过。这是第一遍针对高数部分的学习，当看完整本高数之后，开始看同济大学的高数课本，课后习题也是一题一题地过。期间开始刷英语真题，一句一句地看，力求仔细认真。一直到暑假，基本将高数课本结束，英语正常进度推进。当然在这期间并没有全部时间都在复习，因为还有课程以及课外自己的计划，比如当时向写一篇核心论文，尝试做一个自己想法的app，在学习深度学习相关的知识。暑假之前，论文写完，并发给了老师。至于app部分，解决了app的核心问题——深度学习识别验证码。这个经历还是让我感觉很不错的，因为从数据的获取，处理，构建简单的网络，最后得出模型。这个过程中问题曾出不穷，在解决问题的过程中对人工智能有了一点思考和想法，对深度学习的构建流程基本了解。解决了验证码识别的问题，之后将模型集成到app中之后就完成了app的登陆功能，也是最艰难的功能-_-!。能将这个问题解决还是让我感觉很兴奋的，因为这是为第一次从零开始，接触深度学习，代码全部是自己一个一个敲出来的。嘿嘿黑。。。。做完这个登陆功能之后就是后段代码的编写以及前端小程序的编写。在做这个让我比较重视的项目中，我也在不断的思考，不论是代码书写的规范，程序的适用性，是否可以优化，解决并发问题等等，对我来说，提高确实很大，很少有时间就这么纯粹的按照自己的想法，做一件对于自己来说很好，对别人来说也很有贡献的事情（这个app做完是免费开放给本校学生使用的，这是我的想法哈哈哈哈）。在暑假开始之前基本app完成了一半，后续只是代码编写和调试的劳动密集型工作。基本上感觉距离成功不远了，不过最后却没有完成，这也是让我非常遗憾的事情。因为做的是一个学校网站的信息爬取app，没想到学校换系统了。emmmmmm，始料未及，我感觉学校不讲武德，啥时候换不好，偏偏就在我要做好的时候换，偷袭我这个20多岁的小青年。不过回头一想，可能不完美才是真正的完美，有遗憾才是青春，那就这样结束吧。\n</p>\n<p style=\"text-indent:2em\">\n暑假开始之前，我就了解这个暑假将是考研过程中蜕变的关键期，一定要把握好暑假，把握住了暑假，基本成功一般。暑假开始，买了地学考研中心的复习资料，开始疯狂的背诵，日复一日，直到考研前一天。GIS的专业课，似乎背诵是最好的解决方式。而数学则是买了李永乐的红书，要保证滚瓜烂熟，一遍不行就两遍，真题认真作。关于线性代数部分也如同高数一般，先刷书再做课后习题。然后再看李永乐的红书部分的线性代数。政治的话，暑假就是附带着刷1000题。英语背诵单词和写作，持续进行。就这样暑假再高温和疯狂背诵之中结束。没有太多的回忆，不过温度确实很高，哈哈哈哈，整个考研教室开着空调完全感受不到冷气，我滴乖乖，活活热死。还好没有住校，因为学校宿舍没有空调，在外面租房子，说到租房子，是在贝壳找房上租的。房子很不错，和舍友一起，四个人，但是最后只有三个人住进来emmmmm。不过值得一提的是，初入社会没有经验，没想到租房找中介，中介的收费会这么贵，emmmmmm，好像要房租的一半还是一个月的房租，忘记了，不过我们租了两个月，但是需要付三个月的钱，最后也是中介人比较好，看在学生的份上，打了折扣。租房的地方叫天空之城，距离学校还是挺远的，所以就借了学第的电瓶车作为来回的工具。其中一个舍友，就在租房里面复习，没有去学校，但是我还是建议每天都去学校的。这样要求自己比较好点。就这样，暑假似乎也过得很快，没有过多的停留，时间飞逝地来到开学，虽说是开学，但是对于我们来说没有任何变化，还是不停地刷题，可能也就是复习计划进入到下一阶段，暑假结束，基本考研的准备已经接近80%。接下来就是题海战术了，以及一成不变的疯狂背诵。到11月政治肖四肖八背诵无需多说。在漫长的背诵刷题过程中，人的精神是很难保持高度集中的，总是需要一些娱乐。接近后期考研准备基本完成的时候，就是不断的巩固之前的背诵，不能忘记，很是无聊。于是emmmmm，嘿嘿我就开始看LOL的全球总决赛，记得当时是S9,我还是很喜欢接触游戏，虽然每个游戏在我这只能保持很短的新鲜感，但是看游戏还是我的爱好的。于是在考研过程中，时常会在无聊，心态不好的时候回到宿舍看直播，不过很可惜，作为IG的粉丝，IG在s9没有夺冠，这可能也是应了那句话，“人的巅峰是一时的，而失败才是常态”。面对失败，如何处理是一个人最重要的品质，这决定着你的最后成就。除了游戏，在这个过程中，最让人放松的是，在室内三五成群的背书，最后变成茶话会，哈哈哈哈，还是很喜欢和一群考研人谈天说地，而且不知不觉就过去了很长时间而不自知。\n</p> \n\n<p style=\"text-indent:2em\">\n就这样复习的时间就这样飞逝，转眼便已经考完，走在去食堂的路上，还偶遇胡哥和女生在一起交谈甚欢。嘿嘿黑，果然人在社会还是需要另一半啊，哈哈哈哈。。。考研结束之后，迎接的就是即将毕业的事宜，首先是实习，然后是毕业论文。放假之前老师安排我们去新兴华安实习，然后给一个月时间面试准备，最后写毕业论文。本以为就可以这样结束大学生涯，没想到还是老天爷玩的花，突如其来的疫情，打乱了所有的计划，只能蜗居家中写论文。也许社会的无常与人生是相通的，没有人能知道下一刻会发生什么，所以人生才有动力去拼搏。在家中的时间是无聊的，也只能和老王打游戏。当然，还有一件心心念念的事，考研成绩就要出了。哈哈哈哈，出成绩的那一天，似乎格外难熬。没想到武汉作为疫情的重灾区也正是我的目标大学-武汉大学所在地。别人成绩都出了，而我还在等待。难熬，这可能是让我记忆犹新的原因。不过再托，成绩也有公布的时候，我记得当时是晚上，虽有对成绩早有估计，但是心中还是不能放心。打开成绩的一刹那，我捂住了眼睛，如果旭旭宝宝增幅装备一般，但是我的感受绝对比他更强烈。生死就是一瞬，根据量子力学的思想，只要我不看，我的成绩就有一万种可能。啪地一下，我睁开了眼睛，很快啊，上来就是一个左钩拳emmmmm串戏了不好意思。我的成绩居然是#%%，emmmmm心里有点失望，因为我估计应该360+至少，如果没有那么应该就是专业课的问题了，因为专业课不好估计。也正是这样，专业课今年有点难，普遍没有几个超过100的人，我也不例外，但是心里还抱着一丝侥幸，希望武汉大学能扩招，哈哈哈哈。不过基本上是要调剂了，这可能就是——失败是人生的常态吧。不过还好，知道成绩之后就是每天谢谢毕业论文，打打游戏，等待开学了，虽然还遥遥无期。\n</p> \n\n<p style=\"text-indent:2em\">\n等待开学也是难熬的，因为在家里啥事没有，让人疯狂。最后等来了4月18号开学的消息，接下来就是返校了。\n返校之后，是一段空白期，因为需要调剂，所以需要等待第一批结束后才开始，而调剂开始的时间，让我记忆犹新，因为是5月20号，这个特殊的日子，让恋人开心，也让单身的考研狗开心，因为即将尘埃落定。相较于往年，今年是网络面试，没有太多变化的面试准备，机缘巧合下遇到了一个比较合乎我的想法的老师，调剂了985，我是幸运的，也许这就是命运吧，我终将走向北京，遇见新的朋友，新的同学，新的老师，新的挑战，以及新的目标。不断的前进，向上，这就是多数人都想要的。这样，我的考研的一年，准确的讲，是一年多，从三月到接近下一年的六月，就这样结束了。现在看来，考研对我来说没有什么困难之处，每一步都在按计划进行，没有过多的改变，就是不断的前行。似乎过于简单，以至于我现在还没有感觉到考研的困难所在。对于现在的我们，考研抑或工作是一种选择，并非一种压力，以后读博抑或工作也是如此。只要我们愿意，那么就可以，关键取决于你是否愿意，以及能否为自己的想法作出所有的努力。\n至于接下来的研究生生活，似乎不太值得关注，等过年的时候，总结这个学期吧。新年再见！！！\n\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"lifeknow/lifeknow","published":1,"updated":"2021-01-27T07:17:02.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknmrfu4x000330uo1d0s6556","content":"<h3 id=\"Life-you-know-what\"><a href=\"#Life-you-know-what\" class=\"headerlink\" title=\"Life, you know what?\"></a>Life, you know what?</h3><p style=\"text-indent:2em\">\n2020年12月31日\n\n</p> \n<p style=\"text-indent:2em\">\n一年飞快的逝去，去年往事历历在目。稍微回想了一下过去的一年，似乎发生了很多事，但是仔细回想起来却也没有什么值得去保存。去年的今年，似乎刚刚考完研，内心对于这次考研的经历没有太多的波澜。整体看来，考试整个过程似乎没有太出乎意料。虽然过程有点意外，但是总算是有惊无险。本想在去年总结一下考研的经历，但最后还是没有进行，也可能是考虑到还没有上岸吧。\n</p> \n<p style=\"text-indent:2em\">\n现在似乎是一个绝佳的时刻，总结考研准备过程，到考试，最后到面试，以及上岸后到学校报道的一些见闻。考研的过程没有很迷茫的时刻，时时刻刻都谨记着自己的初心和目标。从2019年三月份开始，就开始陆陆续续地准备数学的学习，因为一开始的目标比较难，所以也下了很大的决心要把数学搞好。为了学好数学二，从一开始循序渐进，先学习本科的高数课本开始，将整本书从头到尾全部看一遍，并将课后习题一题一题地过。这是第一遍针对高数部分的学习，当看完整本高数之后，开始看同济大学的高数课本，课后习题也是一题一题地过。期间开始刷英语真题，一句一句地看，力求仔细认真。一直到暑假，基本将高数课本结束，英语正常进度推进。当然在这期间并没有全部时间都在复习，因为还有课程以及课外自己的计划，比如当时向写一篇核心论文，尝试做一个自己想法的app，在学习深度学习相关的知识。暑假之前，论文写完，并发给了老师。至于app部分，解决了app的核心问题——深度学习识别验证码。这个经历还是让我感觉很不错的，因为从数据的获取，处理，构建简单的网络，最后得出模型。这个过程中问题曾出不穷，在解决问题的过程中对人工智能有了一点思考和想法，对深度学习的构建流程基本了解。解决了验证码识别的问题，之后将模型集成到app中之后就完成了app的登陆功能，也是最艰难的功能-_-!。能将这个问题解决还是让我感觉很兴奋的，因为这是为第一次从零开始，接触深度学习，代码全部是自己一个一个敲出来的。嘿嘿黑。。。。做完这个登陆功能之后就是后段代码的编写以及前端小程序的编写。在做这个让我比较重视的项目中，我也在不断的思考，不论是代码书写的规范，程序的适用性，是否可以优化，解决并发问题等等，对我来说，提高确实很大，很少有时间就这么纯粹的按照自己的想法，做一件对于自己来说很好，对别人来说也很有贡献的事情（这个app做完是免费开放给本校学生使用的，这是我的想法哈哈哈哈）。在暑假开始之前基本app完成了一半，后续只是代码编写和调试的劳动密集型工作。基本上感觉距离成功不远了，不过最后却没有完成，这也是让我非常遗憾的事情。因为做的是一个学校网站的信息爬取app，没想到学校换系统了。emmmmmm，始料未及，我感觉学校不讲武德，啥时候换不好，偏偏就在我要做好的时候换，偷袭我这个20多岁的小青年。不过回头一想，可能不完美才是真正的完美，有遗憾才是青春，那就这样结束吧。\n</p>\n<p style=\"text-indent:2em\">\n暑假开始之前，我就了解这个暑假将是考研过程中蜕变的关键期，一定要把握好暑假，把握住了暑假，基本成功一般。暑假开始，买了地学考研中心的复习资料，开始疯狂的背诵，日复一日，直到考研前一天。GIS的专业课，似乎背诵是最好的解决方式。而数学则是买了李永乐的红书，要保证滚瓜烂熟，一遍不行就两遍，真题认真作。关于线性代数部分也如同高数一般，先刷书再做课后习题。然后再看李永乐的红书部分的线性代数。政治的话，暑假就是附带着刷1000题。英语背诵单词和写作，持续进行。就这样暑假再高温和疯狂背诵之中结束。没有太多的回忆，不过温度确实很高，哈哈哈哈，整个考研教室开着空调完全感受不到冷气，我滴乖乖，活活热死。还好没有住校，因为学校宿舍没有空调，在外面租房子，说到租房子，是在贝壳找房上租的。房子很不错，和舍友一起，四个人，但是最后只有三个人住进来emmmmm。不过值得一提的是，初入社会没有经验，没想到租房找中介，中介的收费会这么贵，emmmmmm，好像要房租的一半还是一个月的房租，忘记了，不过我们租了两个月，但是需要付三个月的钱，最后也是中介人比较好，看在学生的份上，打了折扣。租房的地方叫天空之城，距离学校还是挺远的，所以就借了学第的电瓶车作为来回的工具。其中一个舍友，就在租房里面复习，没有去学校，但是我还是建议每天都去学校的。这样要求自己比较好点。就这样，暑假似乎也过得很快，没有过多的停留，时间飞逝地来到开学，虽说是开学，但是对于我们来说没有任何变化，还是不停地刷题，可能也就是复习计划进入到下一阶段，暑假结束，基本考研的准备已经接近80%。接下来就是题海战术了，以及一成不变的疯狂背诵。到11月政治肖四肖八背诵无需多说。在漫长的背诵刷题过程中，人的精神是很难保持高度集中的，总是需要一些娱乐。接近后期考研准备基本完成的时候，就是不断的巩固之前的背诵，不能忘记，很是无聊。于是emmmmm，嘿嘿我就开始看LOL的全球总决赛，记得当时是S9,我还是很喜欢接触游戏，虽然每个游戏在我这只能保持很短的新鲜感，但是看游戏还是我的爱好的。于是在考研过程中，时常会在无聊，心态不好的时候回到宿舍看直播，不过很可惜，作为IG的粉丝，IG在s9没有夺冠，这可能也是应了那句话，“人的巅峰是一时的，而失败才是常态”。面对失败，如何处理是一个人最重要的品质，这决定着你的最后成就。除了游戏，在这个过程中，最让人放松的是，在室内三五成群的背书，最后变成茶话会，哈哈哈哈，还是很喜欢和一群考研人谈天说地，而且不知不觉就过去了很长时间而不自知。\n</p> \n\n<p style=\"text-indent:2em\">\n就这样复习的时间就这样飞逝，转眼便已经考完，走在去食堂的路上，还偶遇胡哥和女生在一起交谈甚欢。嘿嘿黑，果然人在社会还是需要另一半啊，哈哈哈哈。。。考研结束之后，迎接的就是即将毕业的事宜，首先是实习，然后是毕业论文。放假之前老师安排我们去新兴华安实习，然后给一个月时间面试准备，最后写毕业论文。本以为就可以这样结束大学生涯，没想到还是老天爷玩的花，突如其来的疫情，打乱了所有的计划，只能蜗居家中写论文。也许社会的无常与人生是相通的，没有人能知道下一刻会发生什么，所以人生才有动力去拼搏。在家中的时间是无聊的，也只能和老王打游戏。当然，还有一件心心念念的事，考研成绩就要出了。哈哈哈哈，出成绩的那一天，似乎格外难熬。没想到武汉作为疫情的重灾区也正是我的目标大学-武汉大学所在地。别人成绩都出了，而我还在等待。难熬，这可能是让我记忆犹新的原因。不过再托，成绩也有公布的时候，我记得当时是晚上，虽有对成绩早有估计，但是心中还是不能放心。打开成绩的一刹那，我捂住了眼睛，如果旭旭宝宝增幅装备一般，但是我的感受绝对比他更强烈。生死就是一瞬，根据量子力学的思想，只要我不看，我的成绩就有一万种可能。啪地一下，我睁开了眼睛，很快啊，上来就是一个左钩拳emmmmm串戏了不好意思。我的成绩居然是#%%，emmmmm心里有点失望，因为我估计应该360+至少，如果没有那么应该就是专业课的问题了，因为专业课不好估计。也正是这样，专业课今年有点难，普遍没有几个超过100的人，我也不例外，但是心里还抱着一丝侥幸，希望武汉大学能扩招，哈哈哈哈。不过基本上是要调剂了，这可能就是——失败是人生的常态吧。不过还好，知道成绩之后就是每天谢谢毕业论文，打打游戏，等待开学了，虽然还遥遥无期。\n</p> \n\n<p style=\"text-indent:2em\">\n等待开学也是难熬的，因为在家里啥事没有，让人疯狂。最后等来了4月18号开学的消息，接下来就是返校了。\n返校之后，是一段空白期，因为需要调剂，所以需要等待第一批结束后才开始，而调剂开始的时间，让我记忆犹新，因为是5月20号，这个特殊的日子，让恋人开心，也让单身的考研狗开心，因为即将尘埃落定。相较于往年，今年是网络面试，没有太多变化的面试准备，机缘巧合下遇到了一个比较合乎我的想法的老师，调剂了985，我是幸运的，也许这就是命运吧，我终将走向北京，遇见新的朋友，新的同学，新的老师，新的挑战，以及新的目标。不断的前进，向上，这就是多数人都想要的。这样，我的考研的一年，准确的讲，是一年多，从三月到接近下一年的六月，就这样结束了。现在看来，考研对我来说没有什么困难之处，每一步都在按计划进行，没有过多的改变，就是不断的前行。似乎过于简单，以至于我现在还没有感觉到考研的困难所在。对于现在的我们，考研抑或工作是一种选择，并非一种压力，以后读博抑或工作也是如此。只要我们愿意，那么就可以，关键取决于你是否愿意，以及能否为自己的想法作出所有的努力。\n至于接下来的研究生生活，似乎不太值得关注，等过年的时候，总结这个学期吧。新年再见！！！\n\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"Life-you-know-what\"><a href=\"#Life-you-know-what\" class=\"headerlink\" title=\"Life, you know what?\"></a>Life, you know what?</h3><p style=\"text-indent:2em\">\n2020年12月31日\n\n</p> \n<p style=\"text-indent:2em\">\n一年飞快的逝去，去年往事历历在目。稍微回想了一下过去的一年，似乎发生了很多事，但是仔细回想起来却也没有什么值得去保存。去年的今年，似乎刚刚考完研，内心对于这次考研的经历没有太多的波澜。整体看来，考试整个过程似乎没有太出乎意料。虽然过程有点意外，但是总算是有惊无险。本想在去年总结一下考研的经历，但最后还是没有进行，也可能是考虑到还没有上岸吧。\n</p> \n<p style=\"text-indent:2em\">\n现在似乎是一个绝佳的时刻，总结考研准备过程，到考试，最后到面试，以及上岸后到学校报道的一些见闻。考研的过程没有很迷茫的时刻，时时刻刻都谨记着自己的初心和目标。从2019年三月份开始，就开始陆陆续续地准备数学的学习，因为一开始的目标比较难，所以也下了很大的决心要把数学搞好。为了学好数学二，从一开始循序渐进，先学习本科的高数课本开始，将整本书从头到尾全部看一遍，并将课后习题一题一题地过。这是第一遍针对高数部分的学习，当看完整本高数之后，开始看同济大学的高数课本，课后习题也是一题一题地过。期间开始刷英语真题，一句一句地看，力求仔细认真。一直到暑假，基本将高数课本结束，英语正常进度推进。当然在这期间并没有全部时间都在复习，因为还有课程以及课外自己的计划，比如当时向写一篇核心论文，尝试做一个自己想法的app，在学习深度学习相关的知识。暑假之前，论文写完，并发给了老师。至于app部分，解决了app的核心问题——深度学习识别验证码。这个经历还是让我感觉很不错的，因为从数据的获取，处理，构建简单的网络，最后得出模型。这个过程中问题曾出不穷，在解决问题的过程中对人工智能有了一点思考和想法，对深度学习的构建流程基本了解。解决了验证码识别的问题，之后将模型集成到app中之后就完成了app的登陆功能，也是最艰难的功能-_-!。能将这个问题解决还是让我感觉很兴奋的，因为这是为第一次从零开始，接触深度学习，代码全部是自己一个一个敲出来的。嘿嘿黑。。。。做完这个登陆功能之后就是后段代码的编写以及前端小程序的编写。在做这个让我比较重视的项目中，我也在不断的思考，不论是代码书写的规范，程序的适用性，是否可以优化，解决并发问题等等，对我来说，提高确实很大，很少有时间就这么纯粹的按照自己的想法，做一件对于自己来说很好，对别人来说也很有贡献的事情（这个app做完是免费开放给本校学生使用的，这是我的想法哈哈哈哈）。在暑假开始之前基本app完成了一半，后续只是代码编写和调试的劳动密集型工作。基本上感觉距离成功不远了，不过最后却没有完成，这也是让我非常遗憾的事情。因为做的是一个学校网站的信息爬取app，没想到学校换系统了。emmmmmm，始料未及，我感觉学校不讲武德，啥时候换不好，偏偏就在我要做好的时候换，偷袭我这个20多岁的小青年。不过回头一想，可能不完美才是真正的完美，有遗憾才是青春，那就这样结束吧。\n</p>\n<p style=\"text-indent:2em\">\n暑假开始之前，我就了解这个暑假将是考研过程中蜕变的关键期，一定要把握好暑假，把握住了暑假，基本成功一般。暑假开始，买了地学考研中心的复习资料，开始疯狂的背诵，日复一日，直到考研前一天。GIS的专业课，似乎背诵是最好的解决方式。而数学则是买了李永乐的红书，要保证滚瓜烂熟，一遍不行就两遍，真题认真作。关于线性代数部分也如同高数一般，先刷书再做课后习题。然后再看李永乐的红书部分的线性代数。政治的话，暑假就是附带着刷1000题。英语背诵单词和写作，持续进行。就这样暑假再高温和疯狂背诵之中结束。没有太多的回忆，不过温度确实很高，哈哈哈哈，整个考研教室开着空调完全感受不到冷气，我滴乖乖，活活热死。还好没有住校，因为学校宿舍没有空调，在外面租房子，说到租房子，是在贝壳找房上租的。房子很不错，和舍友一起，四个人，但是最后只有三个人住进来emmmmm。不过值得一提的是，初入社会没有经验，没想到租房找中介，中介的收费会这么贵，emmmmmm，好像要房租的一半还是一个月的房租，忘记了，不过我们租了两个月，但是需要付三个月的钱，最后也是中介人比较好，看在学生的份上，打了折扣。租房的地方叫天空之城，距离学校还是挺远的，所以就借了学第的电瓶车作为来回的工具。其中一个舍友，就在租房里面复习，没有去学校，但是我还是建议每天都去学校的。这样要求自己比较好点。就这样，暑假似乎也过得很快，没有过多的停留，时间飞逝地来到开学，虽说是开学，但是对于我们来说没有任何变化，还是不停地刷题，可能也就是复习计划进入到下一阶段，暑假结束，基本考研的准备已经接近80%。接下来就是题海战术了，以及一成不变的疯狂背诵。到11月政治肖四肖八背诵无需多说。在漫长的背诵刷题过程中，人的精神是很难保持高度集中的，总是需要一些娱乐。接近后期考研准备基本完成的时候，就是不断的巩固之前的背诵，不能忘记，很是无聊。于是emmmmm，嘿嘿我就开始看LOL的全球总决赛，记得当时是S9,我还是很喜欢接触游戏，虽然每个游戏在我这只能保持很短的新鲜感，但是看游戏还是我的爱好的。于是在考研过程中，时常会在无聊，心态不好的时候回到宿舍看直播，不过很可惜，作为IG的粉丝，IG在s9没有夺冠，这可能也是应了那句话，“人的巅峰是一时的，而失败才是常态”。面对失败，如何处理是一个人最重要的品质，这决定着你的最后成就。除了游戏，在这个过程中，最让人放松的是，在室内三五成群的背书，最后变成茶话会，哈哈哈哈，还是很喜欢和一群考研人谈天说地，而且不知不觉就过去了很长时间而不自知。\n</p> \n\n<p style=\"text-indent:2em\">\n就这样复习的时间就这样飞逝，转眼便已经考完，走在去食堂的路上，还偶遇胡哥和女生在一起交谈甚欢。嘿嘿黑，果然人在社会还是需要另一半啊，哈哈哈哈。。。考研结束之后，迎接的就是即将毕业的事宜，首先是实习，然后是毕业论文。放假之前老师安排我们去新兴华安实习，然后给一个月时间面试准备，最后写毕业论文。本以为就可以这样结束大学生涯，没想到还是老天爷玩的花，突如其来的疫情，打乱了所有的计划，只能蜗居家中写论文。也许社会的无常与人生是相通的，没有人能知道下一刻会发生什么，所以人生才有动力去拼搏。在家中的时间是无聊的，也只能和老王打游戏。当然，还有一件心心念念的事，考研成绩就要出了。哈哈哈哈，出成绩的那一天，似乎格外难熬。没想到武汉作为疫情的重灾区也正是我的目标大学-武汉大学所在地。别人成绩都出了，而我还在等待。难熬，这可能是让我记忆犹新的原因。不过再托，成绩也有公布的时候，我记得当时是晚上，虽有对成绩早有估计，但是心中还是不能放心。打开成绩的一刹那，我捂住了眼睛，如果旭旭宝宝增幅装备一般，但是我的感受绝对比他更强烈。生死就是一瞬，根据量子力学的思想，只要我不看，我的成绩就有一万种可能。啪地一下，我睁开了眼睛，很快啊，上来就是一个左钩拳emmmmm串戏了不好意思。我的成绩居然是#%%，emmmmm心里有点失望，因为我估计应该360+至少，如果没有那么应该就是专业课的问题了，因为专业课不好估计。也正是这样，专业课今年有点难，普遍没有几个超过100的人，我也不例外，但是心里还抱着一丝侥幸，希望武汉大学能扩招，哈哈哈哈。不过基本上是要调剂了，这可能就是——失败是人生的常态吧。不过还好，知道成绩之后就是每天谢谢毕业论文，打打游戏，等待开学了，虽然还遥遥无期。\n</p> \n\n<p style=\"text-indent:2em\">\n等待开学也是难熬的，因为在家里啥事没有，让人疯狂。最后等来了4月18号开学的消息，接下来就是返校了。\n返校之后，是一段空白期，因为需要调剂，所以需要等待第一批结束后才开始，而调剂开始的时间，让我记忆犹新，因为是5月20号，这个特殊的日子，让恋人开心，也让单身的考研狗开心，因为即将尘埃落定。相较于往年，今年是网络面试，没有太多变化的面试准备，机缘巧合下遇到了一个比较合乎我的想法的老师，调剂了985，我是幸运的，也许这就是命运吧，我终将走向北京，遇见新的朋友，新的同学，新的老师，新的挑战，以及新的目标。不断的前进，向上，这就是多数人都想要的。这样，我的考研的一年，准确的讲，是一年多，从三月到接近下一年的六月，就这样结束了。现在看来，考研对我来说没有什么困难之处，每一步都在按计划进行，没有过多的改变，就是不断的前行。似乎过于简单，以至于我现在还没有感觉到考研的困难所在。对于现在的我们，考研抑或工作是一种选择，并非一种压力，以后读博抑或工作也是如此。只要我们愿意，那么就可以，关键取决于你是否愿意，以及能否为自己的想法作出所有的努力。\n至于接下来的研究生生活，似乎不太值得关注，等过年的时候，总结这个学期吧。新年再见！！！\n\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"ResNet","date":"2021-04-18T05:19:58.000Z","top":true,"cover":true,"author":"Fanrencli","_content":"## 深度学习神经网络特征提取（一）\n\n### 网络结构\n\n要构建`ResNet`特征提取网络，我们只需要了解两个方面：\n\n- ResNet网络层数：Resnet50,ResNet101,ResNet152\n- ResNet网络基础组成：Conv_Block,Identity_Block\n\n在本文中，根据实际的项目要求，构建了RseNet101网络。\n![ResNet网络结构](http://39.105.26.229:4567/20180114205444652.png)\n![ResNet基础Backbone](http://39.105.26.229:4567/20180114184946861.png)\n\n### 构建Conv_Block模块\n针对`Conv_Block`模块，我们首先要了解这个模块的具体结构，`Conv_Block`从输入开始分两支分别进行特征提取，以一次卷积、一次归一化、一次`ReLu`激活函数的形式连接三次，并在第一次的卷积层步长为2进行降维，另一分支只进行一次步长为2的卷积、一次归一化，然后将两个分支进行连接，再一次激活函数层完成一次`Conv_Block`，结构如下图：\n![Conv_Block](http://39.105.26.229:4567/20191113094201415.png)\n```python\n    def Conv_block(input_feature,kernel_size,filters,strides = (2,2)):\n        filter1,filter2,filter3 = filters\n        #first line conv\n        x = layers.Conv2D(filter1,(1,1),strides = strides, use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size),padding = 'same', use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        #parallel conv\n        shortcut = layers.Conv2D(filter3,(1,1), strides = strides, use_bias=True)(input_feature)\n        shortcut = layers.BatchNormalization()(shortcut)\n\n        # add the parallel conv\n\n        x = layers.Add()([x,shortcut])\n        x = layers.Activation('relu')(x)\n        return x\n```\n\n### 构建Identity_Block模块\n\n`Identity_Block`模块不同于`Conv_Block`模块，`Identity_Block`模块只对特征进行提取，即只进行深度的堆叠不行进降维，所以在结构上与`Conv_Block`相似——同样是双分支结构，在另一分支上不进行操作，只是将输入与另一分支的结果进行叠加，具体结构如下：\n\n![Identity_Block](http://39.105.26.229:4567/20191113094135752.png)\n\n代码如下：\n```python\n    def identity_block(input_feature,kernel_size,filters):\n        filter1,filter2,filter3 = filters\n\n        x = layers.Conv2D(filter1,(1,1), use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size), padding = 'same', use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        x = layers.Add()([x,input_feature])\n        x = layers.Activation('relu')(x)\n        return x\n```\n\n### 构建ResNet101网络\n\n构建ResNet101网络的具体形式如上图所示。\n- 由于第一层7x7卷积，所以在卷积前加入`ZeroPadding2D`，然后如同图中所示，归一化接一层激活和池化\n- 第二层一次`Conv_block`、两次`identity_block`\n- 第三层一次`Conv_block`、三次`identity_block`\n- 第四层一次`Conv_block`、22次`identity_block`\n- 第五层一次`Conv_block`、两次`identity_block`\n\n在第五层之后本文接上一层全局池化以及两层全连接进行分类，但是ResNset网络在第五层基本就结束了，后续根据个人的需求进行修改即可，本文只是做了一个图片的分类的实例，接上后续的全连接分类。\n代码如下：\n```python\n    def get_resnet_model(input_shape,classes):\n        input_image = Input(shape = input_shape)\n        x = layers.ZeroPadding2D((3,3))(input_image)\n        x = layers.Conv2D(64,(7,7),strides=(2,2),  use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n        c1 = x = layers.MaxPooling2D((3,3),strides=(2, 2), padding='same')(x)\n\n        x = Conv_block(x, 3, [64,64,256], strides=(1,1))\n        x = identity_block(x,3,[64,64,256])\n        c2 = x = identity_block(x,3,[64,64,256])\n        x = Conv_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        c3 = x =identity_block(x,3,[128,128,512])\n        x = Conv_block(x,3,[256,256,1024])\n        for i in range(22):\n            x = identity_block(x,3,[256,256,1024])\n        c4 = x\n        x = Conv_block(x,3,[512,512,2048])\n        x = identity_block(x,3,[512,512,2048])\n        c5 = x = identity_block(x,3,[512,512,2048])\n        x = layers.GlobalAveragePooling2D()(x)\n        x = layers.Dropout(0.5)(x)\n        x = layers.Dense(1024,activation = 'relu')(x)\n        x = layers.Dropout(0.5)(x)\n        output = layers.Dense(classes,activation = 'softmax')(x)\n        model = models.Model(input_image,output)\n        return model\n```\n","source":"_posts/feature_extractor/resnet.md","raw":"---\ntitle: ResNet\ndate: 2021-04-18 13:19:58\ntop: true\ncover: true\ncategories:\n    - Deep Learning\ntags:\n    - ResNet101\n    - Fanrencli\nauthor: Fanrencli\n---\n## 深度学习神经网络特征提取（一）\n\n### 网络结构\n\n要构建`ResNet`特征提取网络，我们只需要了解两个方面：\n\n- ResNet网络层数：Resnet50,ResNet101,ResNet152\n- ResNet网络基础组成：Conv_Block,Identity_Block\n\n在本文中，根据实际的项目要求，构建了RseNet101网络。\n![ResNet网络结构](http://39.105.26.229:4567/20180114205444652.png)\n![ResNet基础Backbone](http://39.105.26.229:4567/20180114184946861.png)\n\n### 构建Conv_Block模块\n针对`Conv_Block`模块，我们首先要了解这个模块的具体结构，`Conv_Block`从输入开始分两支分别进行特征提取，以一次卷积、一次归一化、一次`ReLu`激活函数的形式连接三次，并在第一次的卷积层步长为2进行降维，另一分支只进行一次步长为2的卷积、一次归一化，然后将两个分支进行连接，再一次激活函数层完成一次`Conv_Block`，结构如下图：\n![Conv_Block](http://39.105.26.229:4567/20191113094201415.png)\n```python\n    def Conv_block(input_feature,kernel_size,filters,strides = (2,2)):\n        filter1,filter2,filter3 = filters\n        #first line conv\n        x = layers.Conv2D(filter1,(1,1),strides = strides, use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size),padding = 'same', use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        #parallel conv\n        shortcut = layers.Conv2D(filter3,(1,1), strides = strides, use_bias=True)(input_feature)\n        shortcut = layers.BatchNormalization()(shortcut)\n\n        # add the parallel conv\n\n        x = layers.Add()([x,shortcut])\n        x = layers.Activation('relu')(x)\n        return x\n```\n\n### 构建Identity_Block模块\n\n`Identity_Block`模块不同于`Conv_Block`模块，`Identity_Block`模块只对特征进行提取，即只进行深度的堆叠不行进降维，所以在结构上与`Conv_Block`相似——同样是双分支结构，在另一分支上不进行操作，只是将输入与另一分支的结果进行叠加，具体结构如下：\n\n![Identity_Block](http://39.105.26.229:4567/20191113094135752.png)\n\n代码如下：\n```python\n    def identity_block(input_feature,kernel_size,filters):\n        filter1,filter2,filter3 = filters\n\n        x = layers.Conv2D(filter1,(1,1), use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size), padding = 'same', use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        x = layers.Add()([x,input_feature])\n        x = layers.Activation('relu')(x)\n        return x\n```\n\n### 构建ResNet101网络\n\n构建ResNet101网络的具体形式如上图所示。\n- 由于第一层7x7卷积，所以在卷积前加入`ZeroPadding2D`，然后如同图中所示，归一化接一层激活和池化\n- 第二层一次`Conv_block`、两次`identity_block`\n- 第三层一次`Conv_block`、三次`identity_block`\n- 第四层一次`Conv_block`、22次`identity_block`\n- 第五层一次`Conv_block`、两次`identity_block`\n\n在第五层之后本文接上一层全局池化以及两层全连接进行分类，但是ResNset网络在第五层基本就结束了，后续根据个人的需求进行修改即可，本文只是做了一个图片的分类的实例，接上后续的全连接分类。\n代码如下：\n```python\n    def get_resnet_model(input_shape,classes):\n        input_image = Input(shape = input_shape)\n        x = layers.ZeroPadding2D((3,3))(input_image)\n        x = layers.Conv2D(64,(7,7),strides=(2,2),  use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n        c1 = x = layers.MaxPooling2D((3,3),strides=(2, 2), padding='same')(x)\n\n        x = Conv_block(x, 3, [64,64,256], strides=(1,1))\n        x = identity_block(x,3,[64,64,256])\n        c2 = x = identity_block(x,3,[64,64,256])\n        x = Conv_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        c3 = x =identity_block(x,3,[128,128,512])\n        x = Conv_block(x,3,[256,256,1024])\n        for i in range(22):\n            x = identity_block(x,3,[256,256,1024])\n        c4 = x\n        x = Conv_block(x,3,[512,512,2048])\n        x = identity_block(x,3,[512,512,2048])\n        c5 = x = identity_block(x,3,[512,512,2048])\n        x = layers.GlobalAveragePooling2D()(x)\n        x = layers.Dropout(0.5)(x)\n        x = layers.Dense(1024,activation = 'relu')(x)\n        x = layers.Dropout(0.5)(x)\n        output = layers.Dense(classes,activation = 'softmax')(x)\n        model = models.Model(input_image,output)\n        return model\n```\n","slug":"feature_extractor/resnet","published":1,"updated":"2021-04-18T13:07:51.687Z","_id":"cknmrh5ye0000v4uo97w11k7u","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习神经网络特征提取（一）\"><a href=\"#深度学习神经网络特征提取（一）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（一）\"></a>深度学习神经网络特征提取（一）</h2><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p>要构建<code>ResNet</code>特征提取网络，我们只需要了解两个方面：</p>\n<ul>\n<li>ResNet网络层数：Resnet50,ResNet101,ResNet152</li>\n<li>ResNet网络基础组成：Conv_Block,Identity_Block</li>\n</ul>\n<p>在本文中，根据实际的项目要求，构建了RseNet101网络。<br><img src=\"http://39.105.26.229:4567/20180114205444652.png\" alt=\"ResNet网络结构\"><br><img src=\"http://39.105.26.229:4567/20180114184946861.png\" alt=\"ResNet基础Backbone\"></p>\n<h3 id=\"构建Conv-Block模块\"><a href=\"#构建Conv-Block模块\" class=\"headerlink\" title=\"构建Conv_Block模块\"></a>构建Conv_Block模块</h3><p>针对<code>Conv_Block</code>模块，我们首先要了解这个模块的具体结构，<code>Conv_Block</code>从输入开始分两支分别进行特征提取，以一次卷积、一次归一化、一次<code>ReLu</code>激活函数的形式连接三次，并在第一次的卷积层步长为2进行降维，另一分支只进行一次步长为2的卷积、一次归一化，然后将两个分支进行连接，再一次激活函数层完成一次<code>Conv_Block</code>，结构如下图：<br><img src=\"http://39.105.26.229:4567/20191113094201415.png\" alt=\"Conv_Block\"></p>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">Conv_block</span><span class=\"token punctuation\">(</span>input_feature<span class=\"token punctuation\">,</span>kernel_size<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        filter1<span class=\"token punctuation\">,</span>filter2<span class=\"token punctuation\">,</span>filter3 <span class=\"token operator\">=</span> filters\n        <span class=\"token comment\" spellcheck=\"true\">#first line conv</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span> strides<span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_feature<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>kernel_size<span class=\"token punctuation\">,</span>kernel_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">#parallel conv</span>\n        shortcut <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides <span class=\"token operator\">=</span> strides<span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_feature<span class=\"token punctuation\">)</span>\n        shortcut <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>shortcut<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># add the parallel conv</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span>shortcut<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<h3 id=\"构建Identity-Block模块\"><a href=\"#构建Identity-Block模块\" class=\"headerlink\" title=\"构建Identity_Block模块\"></a>构建Identity_Block模块</h3><p><code>Identity_Block</code>模块不同于<code>Conv_Block</code>模块，<code>Identity_Block</code>模块只对特征进行提取，即只进行深度的堆叠不行进降维，所以在结构上与<code>Conv_Block</code>相似——同样是双分支结构，在另一分支上不进行操作，只是将输入与另一分支的结果进行叠加，具体结构如下：</p>\n<p><img src=\"http://39.105.26.229:4567/20191113094135752.png\" alt=\"Identity_Block\"></p>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">identity_block</span><span class=\"token punctuation\">(</span>input_feature<span class=\"token punctuation\">,</span>kernel_size<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        filter1<span class=\"token punctuation\">,</span>filter2<span class=\"token punctuation\">,</span>filter3 <span class=\"token operator\">=</span> filters\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_feature<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>kernel_size<span class=\"token punctuation\">,</span>kernel_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span>input_feature<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<h3 id=\"构建ResNet101网络\"><a href=\"#构建ResNet101网络\" class=\"headerlink\" title=\"构建ResNet101网络\"></a>构建ResNet101网络</h3><p>构建ResNet101网络的具体形式如上图所示。</p>\n<ul>\n<li>由于第一层7x7卷积，所以在卷积前加入<code>ZeroPadding2D</code>，然后如同图中所示，归一化接一层激活和池化</li>\n<li>第二层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n<li>第三层一次<code>Conv_block</code>、三次<code>identity_block</code></li>\n<li>第四层一次<code>Conv_block</code>、22次<code>identity_block</code></li>\n<li>第五层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n</ul>\n<p>在第五层之后本文接上一层全局池化以及两层全连接进行分类，但是ResNset网络在第五层基本就结束了，后续根据个人的需求进行修改即可，本文只是做了一个图片的分类的实例，接上后续的全连接分类。<br>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">get_resnet_model</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">,</span>classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        input_image <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape <span class=\"token operator\">=</span> input_shape<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_image<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        c1 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> Conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        c2 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> Conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        c3 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span>identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> Conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        c4 <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> Conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        c5 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>GlobalAveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        output <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span>activation <span class=\"token operator\">=</span> <span class=\"token string\">'softmax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        model <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">(</span>input_image<span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> model</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习神经网络特征提取（一）\"><a href=\"#深度学习神经网络特征提取（一）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（一）\"></a>深度学习神经网络特征提取（一）</h2><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p>要构建<code>ResNet</code>特征提取网络，我们只需要了解两个方面：</p>\n<ul>\n<li>ResNet网络层数：Resnet50,ResNet101,ResNet152</li>\n<li>ResNet网络基础组成：Conv_Block,Identity_Block</li>\n</ul>\n<p>在本文中，根据实际的项目要求，构建了RseNet101网络。<br><img src=\"http://39.105.26.229:4567/20180114205444652.png\" alt=\"ResNet网络结构\"><br><img src=\"http://39.105.26.229:4567/20180114184946861.png\" alt=\"ResNet基础Backbone\"></p>\n<h3 id=\"构建Conv-Block模块\"><a href=\"#构建Conv-Block模块\" class=\"headerlink\" title=\"构建Conv_Block模块\"></a>构建Conv_Block模块</h3><p>针对<code>Conv_Block</code>模块，我们首先要了解这个模块的具体结构，<code>Conv_Block</code>从输入开始分两支分别进行特征提取，以一次卷积、一次归一化、一次<code>ReLu</code>激活函数的形式连接三次，并在第一次的卷积层步长为2进行降维，另一分支只进行一次步长为2的卷积、一次归一化，然后将两个分支进行连接，再一次激活函数层完成一次<code>Conv_Block</code>，结构如下图：<br><img src=\"http://39.105.26.229:4567/20191113094201415.png\" alt=\"Conv_Block\"></p>\n<pre><code class=\"python\">    def Conv_block(input_feature,kernel_size,filters,strides = (2,2)):\n        filter1,filter2,filter3 = filters\n        #first line conv\n        x = layers.Conv2D(filter1,(1,1),strides = strides, use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation(&#39;relu&#39;)(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size),padding = &#39;same&#39;, use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation(&#39;relu&#39;)(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        #parallel conv\n        shortcut = layers.Conv2D(filter3,(1,1), strides = strides, use_bias=True)(input_feature)\n        shortcut = layers.BatchNormalization()(shortcut)\n\n        # add the parallel conv\n\n        x = layers.Add()([x,shortcut])\n        x = layers.Activation(&#39;relu&#39;)(x)\n        return x</code></pre>\n<h3 id=\"构建Identity-Block模块\"><a href=\"#构建Identity-Block模块\" class=\"headerlink\" title=\"构建Identity_Block模块\"></a>构建Identity_Block模块</h3><p><code>Identity_Block</code>模块不同于<code>Conv_Block</code>模块，<code>Identity_Block</code>模块只对特征进行提取，即只进行深度的堆叠不行进降维，所以在结构上与<code>Conv_Block</code>相似——同样是双分支结构，在另一分支上不进行操作，只是将输入与另一分支的结果进行叠加，具体结构如下：</p>\n<p><img src=\"http://39.105.26.229:4567/20191113094135752.png\" alt=\"Identity_Block\"></p>\n<p>代码如下：</p>\n<pre><code class=\"python\">    def identity_block(input_feature,kernel_size,filters):\n        filter1,filter2,filter3 = filters\n\n        x = layers.Conv2D(filter1,(1,1), use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation(&#39;relu&#39;)(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size), padding = &#39;same&#39;, use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation(&#39;relu&#39;)(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        x = layers.Add()([x,input_feature])\n        x = layers.Activation(&#39;relu&#39;)(x)\n        return x</code></pre>\n<h3 id=\"构建ResNet101网络\"><a href=\"#构建ResNet101网络\" class=\"headerlink\" title=\"构建ResNet101网络\"></a>构建ResNet101网络</h3><p>构建ResNet101网络的具体形式如上图所示。</p>\n<ul>\n<li>由于第一层7x7卷积，所以在卷积前加入<code>ZeroPadding2D</code>，然后如同图中所示，归一化接一层激活和池化</li>\n<li>第二层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n<li>第三层一次<code>Conv_block</code>、三次<code>identity_block</code></li>\n<li>第四层一次<code>Conv_block</code>、22次<code>identity_block</code></li>\n<li>第五层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n</ul>\n<p>在第五层之后本文接上一层全局池化以及两层全连接进行分类，但是ResNset网络在第五层基本就结束了，后续根据个人的需求进行修改即可，本文只是做了一个图片的分类的实例，接上后续的全连接分类。<br>代码如下：</p>\n<pre><code class=\"python\">    def get_resnet_model(input_shape,classes):\n        input_image = Input(shape = input_shape)\n        x = layers.ZeroPadding2D((3,3))(input_image)\n        x = layers.Conv2D(64,(7,7),strides=(2,2),  use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation(&#39;relu&#39;)(x)\n        c1 = x = layers.MaxPooling2D((3,3),strides=(2, 2), padding=&#39;same&#39;)(x)\n\n        x = Conv_block(x, 3, [64,64,256], strides=(1,1))\n        x = identity_block(x,3,[64,64,256])\n        c2 = x = identity_block(x,3,[64,64,256])\n        x = Conv_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        c3 = x =identity_block(x,3,[128,128,512])\n        x = Conv_block(x,3,[256,256,1024])\n        for i in range(22):\n            x = identity_block(x,3,[256,256,1024])\n        c4 = x\n        x = Conv_block(x,3,[512,512,2048])\n        x = identity_block(x,3,[512,512,2048])\n        c5 = x = identity_block(x,3,[512,512,2048])\n        x = layers.GlobalAveragePooling2D()(x)\n        x = layers.Dropout(0.5)(x)\n        x = layers.Dense(1024,activation = &#39;relu&#39;)(x)\n        x = layers.Dropout(0.5)(x)\n        output = layers.Dense(classes,activation = &#39;softmax&#39;)(x)\n        model = models.Model(input_image,output)\n        return model</code></pre>\n"},{"title":"VGG","date":"2021-04-18T06:06:34.000Z","top":true,"cover":true,"author":"Fanrencli","_content":"## 深度学习神经网络特征提取（二）\n\n### 网络结构\n\n要构建`VGG16`特征提取网络，我们只需要了解：\n\n- VGG16网络层数：VGG16,VGG19\n\n在本文中，根据实际的项目要求，构建了VGG16网络，相对于ResNet网络较为简单，整个网络只是一个线性的结构，没有分支，所以在VGG的学习中只需要掌握基础的深度学习原理就可以构建出来VGG网络。\n![VGG网络结构](http://39.105.26.229:4567/v2-ea924e733676e0da534f677a97c98653_720w.jpg)\n![VGG16网络结构](http://39.105.26.229:4567/2019101614532169.png)\n\n### 构建VGG16网络结构\n\nVGG16的网络有三种不同的层构成，分别是卷积、池化和全连接，具体的运行方式：\n- 输入一张尺寸为（224，224，3）的图片\n- 两次(3,3)卷积，层数64，输出为(224,224,64)，(2，2)最大池化，输出(112,112,64)。\n- 两次(3,3)卷积，层数128，输出为(112,112,128)，(2，2)最大池化，输出(56,56,64)。\n- 三次(3,3)卷积，层数256，输出为(56,56,64)，(2，2)最大池化，输出(28,28,64)。\n- 三次(3,3)卷积，层数512，输出为(28,28,64)，(2，2)最大池化，输出(14,14,64)。\n- 三次(3,3)卷积，层数512，输出为(14,14,64)，(2，2)最大池化，输出(7,7,64)。\n- 对结果进行平铺，接上两层4096的全连接层\n- 最后全连接进行分类\n\n代码如下：\n```python\n    def get_VGG16_model(input_shape,classes):\n        image_input = Input(shape = input_shape)\n\n        x = layers.Conv2D(64,(3,3),padding = 'same', activation = 'relu')(image_input)\n        x = layers.Conv2D(64,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(128,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(128,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Flatten()(x)\n        x = layers.Dense(4096,activation = 'relu')(x)\n        x = layers.Dense(4096,activation = 'relu')(x)\n        x = layers.Dense(classes, activation = 'softmax')(x) \n        model = models.Model(image_input,x)\n        return model\n```\n\n最后，根据VGG16的网络结构，大家可以自行尝试构建VGG19的网络结构。","source":"_posts/feature_extractor/VGG.md","raw":"---\ntitle: VGG\ndate: 2021-04-18 14:06:34\ntop: true\ncover: true\ncategories:\n- Deep Learning\ntags:\n- VGG16\n- Fanrencli\nauthor: Fanrencli\n---\n## 深度学习神经网络特征提取（二）\n\n### 网络结构\n\n要构建`VGG16`特征提取网络，我们只需要了解：\n\n- VGG16网络层数：VGG16,VGG19\n\n在本文中，根据实际的项目要求，构建了VGG16网络，相对于ResNet网络较为简单，整个网络只是一个线性的结构，没有分支，所以在VGG的学习中只需要掌握基础的深度学习原理就可以构建出来VGG网络。\n![VGG网络结构](http://39.105.26.229:4567/v2-ea924e733676e0da534f677a97c98653_720w.jpg)\n![VGG16网络结构](http://39.105.26.229:4567/2019101614532169.png)\n\n### 构建VGG16网络结构\n\nVGG16的网络有三种不同的层构成，分别是卷积、池化和全连接，具体的运行方式：\n- 输入一张尺寸为（224，224，3）的图片\n- 两次(3,3)卷积，层数64，输出为(224,224,64)，(2，2)最大池化，输出(112,112,64)。\n- 两次(3,3)卷积，层数128，输出为(112,112,128)，(2，2)最大池化，输出(56,56,64)。\n- 三次(3,3)卷积，层数256，输出为(56,56,64)，(2，2)最大池化，输出(28,28,64)。\n- 三次(3,3)卷积，层数512，输出为(28,28,64)，(2，2)最大池化，输出(14,14,64)。\n- 三次(3,3)卷积，层数512，输出为(14,14,64)，(2，2)最大池化，输出(7,7,64)。\n- 对结果进行平铺，接上两层4096的全连接层\n- 最后全连接进行分类\n\n代码如下：\n```python\n    def get_VGG16_model(input_shape,classes):\n        image_input = Input(shape = input_shape)\n\n        x = layers.Conv2D(64,(3,3),padding = 'same', activation = 'relu')(image_input)\n        x = layers.Conv2D(64,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(128,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(128,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Flatten()(x)\n        x = layers.Dense(4096,activation = 'relu')(x)\n        x = layers.Dense(4096,activation = 'relu')(x)\n        x = layers.Dense(classes, activation = 'softmax')(x) \n        model = models.Model(image_input,x)\n        return model\n```\n\n最后，根据VGG16的网络结构，大家可以自行尝试构建VGG19的网络结构。","slug":"feature_extractor/VGG","published":1,"updated":"2021-04-18T13:07:51.687Z","_id":"cknms8g6d000060uo8adu5pch","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习神经网络特征提取（二）\"><a href=\"#深度学习神经网络特征提取（二）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（二）\"></a>深度学习神经网络特征提取（二）</h2><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p>要构建<code>VGG16</code>特征提取网络，我们只需要了解：</p>\n<ul>\n<li>VGG16网络层数：VGG16,VGG19</li>\n</ul>\n<p>在本文中，根据实际的项目要求，构建了VGG16网络，相对于ResNet网络较为简单，整个网络只是一个线性的结构，没有分支，所以在VGG的学习中只需要掌握基础的深度学习原理就可以构建出来VGG网络。<br><img src=\"http://39.105.26.229:4567/v2-ea924e733676e0da534f677a97c98653_720w.jpg\" alt=\"VGG网络结构\"><br><img src=\"http://39.105.26.229:4567/2019101614532169.png\" alt=\"VGG16网络结构\"></p>\n<h3 id=\"构建VGG16网络结构\"><a href=\"#构建VGG16网络结构\" class=\"headerlink\" title=\"构建VGG16网络结构\"></a>构建VGG16网络结构</h3><p>VGG16的网络有三种不同的层构成，分别是卷积、池化和全连接，具体的运行方式：</p>\n<ul>\n<li>输入一张尺寸为（224，224，3）的图片</li>\n<li>两次(3,3)卷积，层数64，输出为(224,224,64)，(2，2)最大池化，输出(112,112,64)。</li>\n<li>两次(3,3)卷积，层数128，输出为(112,112,128)，(2，2)最大池化，输出(56,56,64)。</li>\n<li>三次(3,3)卷积，层数256，输出为(56,56,64)，(2，2)最大池化，输出(28,28,64)。</li>\n<li>三次(3,3)卷积，层数512，输出为(28,28,64)，(2，2)最大池化，输出(14,14,64)。</li>\n<li>三次(3,3)卷积，层数512，输出为(14,14,64)，(2，2)最大池化，输出(7,7,64)。</li>\n<li>对结果进行平铺，接上两层4096的全连接层</li>\n<li>最后全连接进行分类</li>\n</ul>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">get_VGG16_model</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">,</span>classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        image_input <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape <span class=\"token operator\">=</span> input_shape<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>image_input<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'softmax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> \n        model <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">(</span>image_input<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> model</code></pre>\n<p>最后，根据VGG16的网络结构，大家可以自行尝试构建VGG19的网络结构。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习神经网络特征提取（二）\"><a href=\"#深度学习神经网络特征提取（二）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（二）\"></a>深度学习神经网络特征提取（二）</h2><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p>要构建<code>VGG16</code>特征提取网络，我们只需要了解：</p>\n<ul>\n<li>VGG16网络层数：VGG16,VGG19</li>\n</ul>\n<p>在本文中，根据实际的项目要求，构建了VGG16网络，相对于ResNet网络较为简单，整个网络只是一个线性的结构，没有分支，所以在VGG的学习中只需要掌握基础的深度学习原理就可以构建出来VGG网络。<br><img src=\"http://39.105.26.229:4567/v2-ea924e733676e0da534f677a97c98653_720w.jpg\" alt=\"VGG网络结构\"><br><img src=\"http://39.105.26.229:4567/2019101614532169.png\" alt=\"VGG16网络结构\"></p>\n<h3 id=\"构建VGG16网络结构\"><a href=\"#构建VGG16网络结构\" class=\"headerlink\" title=\"构建VGG16网络结构\"></a>构建VGG16网络结构</h3><p>VGG16的网络有三种不同的层构成，分别是卷积、池化和全连接，具体的运行方式：</p>\n<ul>\n<li>输入一张尺寸为（224，224，3）的图片</li>\n<li>两次(3,3)卷积，层数64，输出为(224,224,64)，(2，2)最大池化，输出(112,112,64)。</li>\n<li>两次(3,3)卷积，层数128，输出为(112,112,128)，(2，2)最大池化，输出(56,56,64)。</li>\n<li>三次(3,3)卷积，层数256，输出为(56,56,64)，(2，2)最大池化，输出(28,28,64)。</li>\n<li>三次(3,3)卷积，层数512，输出为(28,28,64)，(2，2)最大池化，输出(14,14,64)。</li>\n<li>三次(3,3)卷积，层数512，输出为(14,14,64)，(2，2)最大池化，输出(7,7,64)。</li>\n<li>对结果进行平铺，接上两层4096的全连接层</li>\n<li>最后全连接进行分类</li>\n</ul>\n<p>代码如下：</p>\n<pre><code class=\"python\">    def get_VGG16_model(input_shape,classes):\n        image_input = Input(shape = input_shape)\n\n        x = layers.Conv2D(64,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(image_input)\n        x = layers.Conv2D(64,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(128,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(128,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(256,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(256,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(256,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Flatten()(x)\n        x = layers.Dense(4096,activation = &#39;relu&#39;)(x)\n        x = layers.Dense(4096,activation = &#39;relu&#39;)(x)\n        x = layers.Dense(classes, activation = &#39;softmax&#39;)(x) \n        model = models.Model(image_input,x)\n        return model</code></pre>\n<p>最后，根据VGG16的网络结构，大家可以自行尝试构建VGG19的网络结构。</p>\n"},{"title":"SSD","date":"2021-04-19T01:42:12.000Z","top":true,"cover":true,"author":"Fanrencli","_content":" \n## 深度学习之目标检测SSD\n\n### What is SSD?\n\n关于目标检测算法，当下已经有很多优秀的开源算法，其中算法主要分为两类：one-stage 和 two-stage。本次介绍的SSD算法就是one-stage算法的一种。主要的工作流程就是在利用主流的特征提取网络提取特征后，根据特征维度在图片上的不同位置进行密集采样，每个采样点都包含不同尺度和长宽比的`先验框`，然后对不同的先验框中的物体种类进行预测和相对于预测框位置进行回归，速度较快。\n但是针对密集采样，由于采样点较多，且可能多数点都不存在目标，所以容易导致正负样本不平衡，从而使得训练难度上升。\n\n### 主干网络结构简介\n\n针对SSD算法，其中主要利用的是`VGG16`作为主干特征提取网络，并且将`VGG16`中的`FC6`和`FC7`两层转换为卷积层，去掉所有的丢弃层和`FC8`层，并增加`Conv8`和`Conv9`。由于之前文章中已经介绍过`VGG16`，所以此处不再重复介绍。\n本文此次以`SSD300`为例，介绍`SSD`算法，网络结构如下：\n![SSD网络结构](http://39.105.26.229:4567/20190427212254620.png)\n![SSD网络结构](http://39.105.26.229:4567/20190427212220602.png)\n\n网络处理流程：\n- 输入图片首先resize到300x300大小的图片\n- 2次（3，3）卷积，1次（2，2）池化\n- 2次（3，3）卷积，1次（2，2）池化\n- 3次（3，3）卷积，1次（2，2）池化\n- 3次（3，3）卷积，1次（2，2）池化\n- 3次（3，3）卷积，1次（2，2）池化\n- 1次（3，3）卷积，1次（1，1）卷积\n- 1次（1，1）卷积，1次（3，3）卷积，步长2\n- 1次（1，1）卷积，1次（3，3）卷积，步长2\n- 1次（1，1）卷积，1次（3，3）卷积，padding = vaild\n- 1次（1，1）卷积，1次（3，3）卷积，padding = vaild\n\n代码如下：\n```python\ndef VGG16(input_tensor):\n    net = {} \n    # Block 1\n    net['input'] = input_tensor\n    # 300,300,3 -> 150,150,64\n    net['conv1_1'] = Conv2D(64, kernel_size=(3,3), activation='relu', padding='same', name='conv1_1')(net['input'])\n    net['conv1_2'] = Conv2D(64, kernel_size=(3,3), activation='relu', padding='same', name='conv1_2')(net['conv1_1'])\n    net['pool1'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool1')(net['conv1_2'])\n    # Block 2\n    # 150,150,64 -> 75,75,128\n    net['conv2_1'] = Conv2D(128, kernel_size=(3,3), activation='relu', padding='same', name='conv2_1')(net['pool1'])\n    net['conv2_2'] = Conv2D(128, kernel_size=(3,3), activation='relu', padding='same', name='conv2_2')(net['conv2_1'])\n    net['pool2'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool2')(net['conv2_2'])\n    # Block 3\n    # 75,75,128 -> 38,38,256\n    net['conv3_1'] = Conv2D(256, kernel_size=(3,3), activation='relu', padding='same', name='conv3_1')(net['pool2'])\n    net['conv3_2'] = Conv2D(256, kernel_size=(3,3), activation='relu', padding='same', name='conv3_2')(net['conv3_1'])\n    net['conv3_3'] = Conv2D(256, kernel_size=(3,3), activation='relu', padding='same', name='conv3_3')(net['conv3_2'])\n    net['pool3'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool3')(net['conv3_3'])\n    # Block 4\n    # 38,38,256 -> 19,19,512\n    net['conv4_1'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv4_1')(net['pool3'])\n    net['conv4_2'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv4_2')(net['conv4_1'])\n    net['conv4_3'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv4_3')(net['conv4_2'])\n    net['pool4'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool4')(net['conv4_3'])\n    # Block 5\n    # 19,19,512 -> 19,19,512\n    net['conv5_1'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv5_1')(net['pool4'])\n    net['conv5_2'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv5_2')(net['conv5_1'])\n    net['conv5_3'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv5_3')(net['conv5_2'])\n    net['pool5'] = MaxPooling2D((3, 3), strides=(1, 1), padding='same', name='pool5')(net['conv5_3'])\n    # FC6\n    # 19,19,512 -> 19,19,1024\n    net['fc6'] = Conv2D(1024, kernel_size=(3,3), dilation_rate=(6, 6), activation='relu', padding='same', name='fc6')(net['pool5'])\n\n    # x = Dropout(0.5, name='drop6')(x)\n    # FC7\n    # 19,19,1024 -> 19,19,1024\n    net['fc7'] = Conv2D(1024, kernel_size=(1,1), activation='relu', padding='same', name='fc7')(net['fc6'])\n\n    # x = Dropout(0.5, name='drop7')(x)\n    # Block 6\n    # 19,19,512 -> 10,10,512\n    net['conv6_1'] = Conv2D(256, kernel_size=(1,1), activation='relu', padding='same', name='conv6_1')(net['fc7'])\n    net['conv6_2'] = ZeroPadding2D(padding=((1, 1), (1, 1)), name='conv6_padding')(net['conv6_1'])\n    net['conv6_2'] = Conv2D(512, kernel_size=(3,3), strides=(2, 2), activation='relu', name='conv6_2')(net['conv6_2'])\n\n    # Block 7\n    # 10,10,512 -> 5,5,256\n    net['conv7_1'] = Conv2D(128, kernel_size=(1,1), activation='relu', padding='same',  name='conv7_1')(net['conv6_2'])\n    net['conv7_2'] = ZeroPadding2D(padding=((1, 1), (1, 1)), name='conv7_padding')(net['conv7_1'])\n    net['conv7_2'] = Conv2D(256, kernel_size=(3,3), strides=(2, 2), activation='relu', padding='valid', name='conv7_2')(net['conv7_2'])\n    # Block 8\n    # 5,5,256 -> 3,3,256\n    net['conv8_1'] = Conv2D(128, kernel_size=(1,1), activation='relu', padding='same', name='conv8_1')(net['conv7_2'])\n    net['conv8_2'] = Conv2D(256, kernel_size=(3,3), strides=(1, 1), activation='relu', padding='valid', name='conv8_2')(net['conv8_1'])\n\n    # Block 9\n    # 3,3,256 -> 1,1,256\n    net['conv9_1'] = Conv2D(128, kernel_size=(1,1), activation='relu', padding='same', name='conv9_1')(net['conv8_2'])\n    net['conv9_2'] = Conv2D(256, kernel_size=(3,3), strides=(1, 1), activation='relu', padding='valid', name='conv9_2')(net['conv9_1'])\n    return net\n\n```\n\n### 构建预测值\n\nSSD网络的最后预测值主要包含三个部分：\n- net{'mbox_loc'}：先验框的预期位置——包含目标的先验框相对于其匹配的真实框的中心xy位移和长宽缩放比\n- net{'mbox_conf'}：先验框中的目标类别——one-hot编码后softmax进行分类\n- net{'mbox_priorbox'}：先验框的原始位置以及variances（用于预测框解码或编码）——这部分不进行训练，只作为预测结果的辅助使用\n其中按照SSD300的输入大小，先验框的数量为`8732`个。\n代码如下：\n```python\ndef SSD300(input_shape, num_classes=21):\n    # 300,300,3\n    input_tensor = Input(shape=input_shape)\n    img_size = (input_shape[1], input_shape[0])\n\n    # SSD结构,net字典\n    net = VGG16(input_tensor)\n    #-----------------------将提取到的主干特征进行处理---------------------------#\n    # 对conv4_3进行处理 38,38,512\n    net['conv4_3_norm'] = Normalize(20, name='conv4_3_norm')(net['conv4_3'])\n    num_priors = 4\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    net['conv4_3_norm_mbox_loc'] = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same', name='conv4_3_norm_mbox_loc')(net['conv4_3_norm'])\n    net['conv4_3_norm_mbox_loc_flat'] = Flatten(name='conv4_3_norm_mbox_loc_flat')(net['conv4_3_norm_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    net['conv4_3_norm_mbox_conf'] = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv4_3_norm_mbox_conf')(net['conv4_3_norm'])\n    net['conv4_3_norm_mbox_conf_flat'] = Flatten(name='conv4_3_norm_mbox_conf_flat')(net['conv4_3_norm_mbox_conf'])\n    priorbox = PriorBox(img_size, 30.0,max_size = 60.0, aspect_ratios=[2],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv4_3_norm_mbox_priorbox')\n    net['conv4_3_norm_mbox_priorbox'] = priorbox(net['conv4_3_norm'])\n    \n    # 对fc7层进行处理 \n    num_priors = 6\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    net['fc7_mbox_loc'] = Conv2D(num_priors * 4, kernel_size=(3,3),padding='same',name='fc7_mbox_loc')(net['fc7'])\n    net['fc7_mbox_loc_flat'] = Flatten(name='fc7_mbox_loc_flat')(net['fc7_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    net['fc7_mbox_conf'] = Conv2D(num_priors * num_classes, kernel_size=(3,3),padding='same',name='fc7_mbox_conf')(net['fc7'])\n    net['fc7_mbox_conf_flat'] = Flatten(name='fc7_mbox_conf_flat')(net['fc7_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 60.0, max_size=111.0, aspect_ratios=[2, 3],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='fc7_mbox_priorbox')\n    net['fc7_mbox_priorbox'] = priorbox(net['fc7'])\n\n    # 对conv6_2进行处理\n    num_priors = 6\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv6_2_mbox_loc')(net['conv6_2'])\n    net['conv6_2_mbox_loc'] = x\n    net['conv6_2_mbox_loc_flat'] = Flatten(name='conv6_2_mbox_loc_flat')(net['conv6_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv6_2_mbox_conf')(net['conv6_2'])\n    net['conv6_2_mbox_conf'] = x\n    net['conv6_2_mbox_conf_flat'] = Flatten(name='conv6_2_mbox_conf_flat')(net['conv6_2_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 111.0, max_size=162.0, aspect_ratios=[2, 3],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv6_2_mbox_priorbox')\n    net['conv6_2_mbox_priorbox'] = priorbox(net['conv6_2'])\n\n    # 对conv7_2进行处理\n    num_priors = 6\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv7_2_mbox_loc')(net['conv7_2'])\n    net['conv7_2_mbox_loc'] = x\n    net['conv7_2_mbox_loc_flat'] = Flatten(name='conv7_2_mbox_loc_flat')(net['conv7_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv7_2_mbox_conf')(net['conv7_2'])\n    net['conv7_2_mbox_conf'] = x\n    net['conv7_2_mbox_conf_flat'] = Flatten(name='conv7_2_mbox_conf_flat')(net['conv7_2_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 162.0, max_size=213.0, aspect_ratios=[2, 3],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv7_2_mbox_priorbox')\n    net['conv7_2_mbox_priorbox'] = priorbox(net['conv7_2'])\n\n    # 对conv8_2进行处理\n    num_priors = 4\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv8_2_mbox_loc')(net['conv8_2'])\n    net['conv8_2_mbox_loc'] = x\n    net['conv8_2_mbox_loc_flat'] = Flatten(name='conv8_2_mbox_loc_flat')(net['conv8_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv8_2_mbox_conf')(net['conv8_2'])\n    net['conv8_2_mbox_conf'] = x\n    net['conv8_2_mbox_conf_flat'] = Flatten(name='conv8_2_mbox_conf_flat')(net['conv8_2_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 213.0, max_size=264.0, aspect_ratios=[2],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv8_2_mbox_priorbox')\n    net['conv8_2_mbox_priorbox'] = priorbox(net['conv8_2'])\n\n    # 对conv9_2进行处理\n    num_priors = 4\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv9_2_mbox_loc')(net['conv9_2'])\n    net['conv9_2_mbox_loc'] = x\n    net['conv9_2_mbox_loc_flat'] = Flatten(name='conv9_2_mbox_loc_flat')(net['conv9_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv9_2_mbox_conf')(net['conv9_2'])\n    net['conv9_2_mbox_conf'] = x\n    net['conv9_2_mbox_conf_flat'] = Flatten(name='conv9_2_mbox_conf_flat')(net['conv9_2_mbox_conf'])\n    \n    priorbox = PriorBox(img_size, 264.0, max_size=315.0, aspect_ratios=[2],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv9_2_mbox_priorbox')\n\n    net['conv9_2_mbox_priorbox'] = priorbox(net['conv9_2'])\n\n    # 将所有结果进行堆叠\n    net['mbox_loc'] = concatenate([net['conv4_3_norm_mbox_loc_flat'],\n                             net['fc7_mbox_loc_flat'],\n                             net['conv6_2_mbox_loc_flat'],\n                             net['conv7_2_mbox_loc_flat'],\n                             net['conv8_2_mbox_loc_flat'],\n                             net['conv9_2_mbox_loc_flat']],\n                            axis=1, name='mbox_loc')\n    net['mbox_conf'] = concatenate([net['conv4_3_norm_mbox_conf_flat'],\n                              net['fc7_mbox_conf_flat'],\n                              net['conv6_2_mbox_conf_flat'],\n                              net['conv7_2_mbox_conf_flat'],\n                              net['conv8_2_mbox_conf_flat'],\n                              net['conv9_2_mbox_conf_flat']],\n                             axis=1, name='mbox_conf')\n    # 先验框的位置和辅助变量\n    net['mbox_priorbox'] = concatenate([net['conv4_3_norm_mbox_priorbox'],\n                                  net['fc7_mbox_priorbox'],\n                                  net['conv6_2_mbox_priorbox'],\n                                  net['conv7_2_mbox_priorbox'],\n                                  net['conv8_2_mbox_priorbox'],\n                                  net['conv9_2_mbox_priorbox']],\n                                  axis=1, name='mbox_priorbox')\n\n    if hasattr(net['mbox_loc'], '_keras_shape'):\n        num_boxes = net['mbox_loc']._keras_shape[-1] // 4\n    elif hasattr(net['mbox_loc'], 'int_shape'):\n        num_boxes = K.int_shape(net['mbox_loc'])[-1] // 4\n    # 预期位置\n    net['mbox_loc'] = Reshape((num_boxes, 4),name='mbox_loc_final')(net['mbox_loc'])\n    # 分类结果\n    net['mbox_conf'] = Reshape((num_boxes, num_classes),name='mbox_conf_logits')(net['mbox_conf'])\n    net['mbox_conf'] = Activation('softmax',name='mbox_conf_final')(net['mbox_conf'])\n\n    net['predictions'] = concatenate([net['mbox_loc'],\n                               net['mbox_conf'],\n                               net['mbox_priorbox']],\n                               axis=2, name='predictions')\n    print(net['predictions'])\n    model = Model(net['input'], net['predictions'])\n    return model\n```\n\n### 先验框编码与解码\n\n针对先验框的编码过程，即计算net{'mbox_loc'}——先验框的预期位置。\n- 找到与真实框重合度高于某个阈值（如0.5）的所有先验框\n- 根据先验框匹配的真实框进行编码得到预期位置\n- 然后根据one-hot编码，将目标类别进行编码\n- 最后的先验框原始位置和variances值不需要进行提取，只添加一个是否包含物体的判断值即可，用于loss计算\n\n```python\n    def encode_box(self, box, return_iou=True):\n        iou = self.iou(box)\n        encoded_box = np.zeros((self.num_priors, 4 + return_iou))\n\n        # 找到每一个真实框，重合程度较高的先验框\n        assign_mask = iou > self.overlap_threshold\n        if not assign_mask.any():\n            assign_mask[iou.argmax()] = True\n        if return_iou:\n            encoded_box[:, -1][assign_mask] = iou[assign_mask]\n        \n        # 找到对应的先验框\n        assigned_priors = self.priors[assign_mask]\n        # 逆向编码，将真实框转化为ssd预测结果的格式\n\n        # 先计算真实框的中心与长宽\n        box_center = 0.5 * (box[:2] + box[2:])\n        box_wh = box[2:] - box[:2]\n        # 再计算重合度较高的先验框的中心与长宽\n        assigned_priors_center = 0.5 * (assigned_priors[:, :2] +\n                                        assigned_priors[:, 2:4])\n        assigned_priors_wh = (assigned_priors[:, 2:4] -\n                                assigned_priors[:, :2])\n        \n        # 逆向求取ssd应该有的预测结果\n        encoded_box[:, :2][assign_mask] = box_center - assigned_priors_center\n        encoded_box[:, :2][assign_mask] /= assigned_priors_wh\n        # 除以0.1\n        encoded_box[:, :2][assign_mask] /= assigned_priors[:, -4:-2]\n\n        encoded_box[:, 2:4][assign_mask] = np.log(box_wh / assigned_priors_wh)\n        # 除以0.2\n        encoded_box[:, 2:4][assign_mask] /= assigned_priors[:, -2:]\n        return encoded_box.ravel()\n    def assign_boxes(self, boxes):\n        #---------------------------------------------------#\n        #   assignment分为3个部分\n        #   :4      的内容为网络应该有的回归预测结果\n        #   4:-8    的内容为先验框所对应的种类，默认为背景\n        #   -8      的内容为当前先验框是否包含目标\n        #   -7:     无意义\n        #---------------------------------------------------#\n        assignment = np.zeros((self.num_priors, 4 + self.num_classes + 8))\n        assignment[:, 4] = 1.0\n        if len(boxes) == 0:\n            return assignment\n\n        # 对每一个真实框都进行iou计算\n        encoded_boxes = np.apply_along_axis(self.encode_box, 1, boxes[:, :4])\n        #---------------------------------------------------#\n        #   在reshape后，获得的encoded_boxes的shape为：\n        #   [num_true_box, num_priors, 4+1]\n        #   4是编码后的结果，1为iou\n        #---------------------------------------------------#\n        encoded_boxes = encoded_boxes.reshape(-1, self.num_priors, 5)\n        \n        #---------------------------------------------------#\n        #   [num_priors]求取每一个先验框重合度最大的真实框\n        #---------------------------------------------------#\n        best_iou = encoded_boxes[:, :, -1].max(axis=0)\n        best_iou_idx = encoded_boxes[:, :, -1].argmax(axis=0)\n        best_iou_mask = best_iou > 0\n        best_iou_idx = best_iou_idx[best_iou_mask]\n        \n        #---------------------------------------------------#\n        #   计算一共有多少先验框满足需求\n        #---------------------------------------------------#\n        assign_num = len(best_iou_idx)\n\n        # 将编码后的真实框取出\n        encoded_boxes = encoded_boxes[:, best_iou_mask, :]\n        assignment[:, :4][best_iou_mask] = encoded_boxes[best_iou_idx,np.arange(assign_num),:4]\n        #----------------------------------------------------------#\n        #   4代表为背景的概率，设定为0，因为这些先验框有对应的物体\n        #----------------------------------------------------------#\n        assignment[:, 4][best_iou_mask] = 0\n        assignment[:, 5:-8][best_iou_mask] = boxes[best_iou_idx, 4:]\n        #----------------------------------------------------------#\n        #   -8表示先验框是否有对应的物体\n        #----------------------------------------------------------#\n        assignment[:, -8][best_iou_mask] = 1\n        # 通过assign_boxes我们就获得了，输入进来的这张图片，应该有的预测结果是什么样子的\n        return assignment\n```\n\n### loss计算\n\n在loss计算过程中，由于SSD可能导致正负样本的不平衡而增加的训练难度，所以一般在计算loss时，通常取1：3的正负样本比例，同意注意:预测值的前四位是预期位置信息，第五位到倒数第八位是类别信息，后面是先验框的原始位置信息。\n```python\nclass MultiboxLoss(object):\n    def __init__(self, num_classes, alpha=1.0, neg_pos_ratio=3.0,\n                 background_label_id=0, negatives_for_hard=100.0):\n        self.num_classes = num_classes\n        self.alpha = alpha\n        self.neg_pos_ratio = neg_pos_ratio\n        if background_label_id != 0:\n            raise Exception('Only 0 as background label id is supported')\n        self.background_label_id = background_label_id\n        self.negatives_for_hard = negatives_for_hard\n\n    def _l1_smooth_loss(self, y_true, y_pred):\n        abs_loss = tf.abs(y_true - y_pred)\n        sq_loss = 0.5 * (y_true - y_pred)**2\n        l1_loss = tf.where(tf.less(abs_loss, 1.0), sq_loss, abs_loss - 0.5)\n        return tf.reduce_sum(l1_loss, -1)\n\n    def _softmax_loss(self, y_true, y_pred):\n        y_pred = tf.maximum(tf.minimum(y_pred, 1 - 1e-15), 1e-15)\n        softmax_loss = -tf.reduce_sum(y_true * tf.log(y_pred),\n                                      axis=-1)\n        return softmax_loss\n\n    def compute_loss(self, y_true, y_pred):\n        batch_size = tf.shape(y_true)[0]\n        num_boxes = tf.to_float(tf.shape(y_true)[1])\n\n        # 计算所有的loss\n        # 分类的loss\n        # batch_size,8732,21 -> batch_size,8732\n        conf_loss = self._softmax_loss(y_true[:, :, 4:-8],\n                                       y_pred[:, :, 4:-8])\n        # 框的位置的loss\n        # batch_size,8732,4 -> batch_size,8732\n        loc_loss = self._l1_smooth_loss(y_true[:, :, :4],\n                                        y_pred[:, :, :4])\n\n        # 获取所有的正标签的loss\n        # 每一张图的pos的个数\n        num_pos = tf.reduce_sum(y_true[:, :, -8], axis=-1)\n        # 每一张图的pos_loc_loss\n        pos_loc_loss = tf.reduce_sum(loc_loss * y_true[:, :, -8],\n                                     axis=1)\n        # 每一张图的pos_conf_loss\n        pos_conf_loss = tf.reduce_sum(conf_loss * y_true[:, :, -8],\n                                      axis=1)\n\n        # 获取一定的负样本\n        num_neg = tf.minimum(self.neg_pos_ratio * num_pos,\n                             num_boxes - num_pos)\n\n        # 找到了哪些值是大于0的\n        pos_num_neg_mask = tf.greater(num_neg, 0)\n        # 获得一个1.0\n        has_min = tf.to_float(tf.reduce_any(pos_num_neg_mask))\n        num_neg = tf.concat( axis=0,values=[num_neg,\n                                [(1 - has_min) * self.negatives_for_hard]])\n        # 求平均每个图片要取多少个负样本\n        num_neg_batch = tf.reduce_mean(tf.boolean_mask(num_neg,\n                                                      tf.greater(num_neg, 0)))\n        num_neg_batch = tf.to_int32(num_neg_batch)\n\n        # conf的起始\n        confs_start = 4 + self.background_label_id + 1\n        # conf的结束\n        confs_end = confs_start + self.num_classes - 1\n\n        # 找到实际上在该位置不应该有预测结果的框，求他们最大的置信度。\n        max_confs = tf.reduce_max(y_pred[:, :, confs_start:confs_end],\n                                  axis=2)\n        \n        # 取top_k个置信度，作为负样本\n        _, indices = tf.nn.top_k(max_confs * (1 - y_true[:, :, -8]),\n                                 k=num_neg_batch)\n\n        # 找到其在1维上的索引\n        batch_idx = tf.expand_dims(tf.range(0, batch_size), 1)\n        batch_idx = tf.tile(batch_idx, (1, num_neg_batch))\n        full_indices = (tf.reshape(batch_idx, [-1]) * tf.to_int32(num_boxes) +\n                        tf.reshape(indices, [-1]))\n        \n\n        neg_conf_loss = tf.gather(tf.reshape(conf_loss, [-1]),\n                                  full_indices)\n        neg_conf_loss = tf.reshape(neg_conf_loss,\n                                   [batch_size, num_neg_batch])\n        neg_conf_loss = tf.reduce_sum(neg_conf_loss, axis=1)\n\n        # 求loss总和\n        total_loss = K.sum(pos_conf_loss + neg_conf_loss)/K.cast(batch_size,K.dtype(pos_conf_loss))\n\n        total_loss +=  K.sum(self.alpha * pos_loc_loss)/K.cast(batch_size,K.dtype(pos_loc_loss))\n        return total_loss\n\n```\n\n至此，所有关于SSD的关键部分就讲解完了，后续会陆续更新其他算法。","source":"_posts/object_detector/SSD.md","raw":"---\ntitle: SSD\ndate: 2021-04-19 09:42:12\ntop: true\ncover: true\ncategories:\n- Deep Learning\ntags:\n- object detection\n- SSD\n- Fanrencli\nauthor: Fanrencli\n---\n \n## 深度学习之目标检测SSD\n\n### What is SSD?\n\n关于目标检测算法，当下已经有很多优秀的开源算法，其中算法主要分为两类：one-stage 和 two-stage。本次介绍的SSD算法就是one-stage算法的一种。主要的工作流程就是在利用主流的特征提取网络提取特征后，根据特征维度在图片上的不同位置进行密集采样，每个采样点都包含不同尺度和长宽比的`先验框`，然后对不同的先验框中的物体种类进行预测和相对于预测框位置进行回归，速度较快。\n但是针对密集采样，由于采样点较多，且可能多数点都不存在目标，所以容易导致正负样本不平衡，从而使得训练难度上升。\n\n### 主干网络结构简介\n\n针对SSD算法，其中主要利用的是`VGG16`作为主干特征提取网络，并且将`VGG16`中的`FC6`和`FC7`两层转换为卷积层，去掉所有的丢弃层和`FC8`层，并增加`Conv8`和`Conv9`。由于之前文章中已经介绍过`VGG16`，所以此处不再重复介绍。\n本文此次以`SSD300`为例，介绍`SSD`算法，网络结构如下：\n![SSD网络结构](http://39.105.26.229:4567/20190427212254620.png)\n![SSD网络结构](http://39.105.26.229:4567/20190427212220602.png)\n\n网络处理流程：\n- 输入图片首先resize到300x300大小的图片\n- 2次（3，3）卷积，1次（2，2）池化\n- 2次（3，3）卷积，1次（2，2）池化\n- 3次（3，3）卷积，1次（2，2）池化\n- 3次（3，3）卷积，1次（2，2）池化\n- 3次（3，3）卷积，1次（2，2）池化\n- 1次（3，3）卷积，1次（1，1）卷积\n- 1次（1，1）卷积，1次（3，3）卷积，步长2\n- 1次（1，1）卷积，1次（3，3）卷积，步长2\n- 1次（1，1）卷积，1次（3，3）卷积，padding = vaild\n- 1次（1，1）卷积，1次（3，3）卷积，padding = vaild\n\n代码如下：\n```python\ndef VGG16(input_tensor):\n    net = {} \n    # Block 1\n    net['input'] = input_tensor\n    # 300,300,3 -> 150,150,64\n    net['conv1_1'] = Conv2D(64, kernel_size=(3,3), activation='relu', padding='same', name='conv1_1')(net['input'])\n    net['conv1_2'] = Conv2D(64, kernel_size=(3,3), activation='relu', padding='same', name='conv1_2')(net['conv1_1'])\n    net['pool1'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool1')(net['conv1_2'])\n    # Block 2\n    # 150,150,64 -> 75,75,128\n    net['conv2_1'] = Conv2D(128, kernel_size=(3,3), activation='relu', padding='same', name='conv2_1')(net['pool1'])\n    net['conv2_2'] = Conv2D(128, kernel_size=(3,3), activation='relu', padding='same', name='conv2_2')(net['conv2_1'])\n    net['pool2'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool2')(net['conv2_2'])\n    # Block 3\n    # 75,75,128 -> 38,38,256\n    net['conv3_1'] = Conv2D(256, kernel_size=(3,3), activation='relu', padding='same', name='conv3_1')(net['pool2'])\n    net['conv3_2'] = Conv2D(256, kernel_size=(3,3), activation='relu', padding='same', name='conv3_2')(net['conv3_1'])\n    net['conv3_3'] = Conv2D(256, kernel_size=(3,3), activation='relu', padding='same', name='conv3_3')(net['conv3_2'])\n    net['pool3'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool3')(net['conv3_3'])\n    # Block 4\n    # 38,38,256 -> 19,19,512\n    net['conv4_1'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv4_1')(net['pool3'])\n    net['conv4_2'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv4_2')(net['conv4_1'])\n    net['conv4_3'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv4_3')(net['conv4_2'])\n    net['pool4'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool4')(net['conv4_3'])\n    # Block 5\n    # 19,19,512 -> 19,19,512\n    net['conv5_1'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv5_1')(net['pool4'])\n    net['conv5_2'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv5_2')(net['conv5_1'])\n    net['conv5_3'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv5_3')(net['conv5_2'])\n    net['pool5'] = MaxPooling2D((3, 3), strides=(1, 1), padding='same', name='pool5')(net['conv5_3'])\n    # FC6\n    # 19,19,512 -> 19,19,1024\n    net['fc6'] = Conv2D(1024, kernel_size=(3,3), dilation_rate=(6, 6), activation='relu', padding='same', name='fc6')(net['pool5'])\n\n    # x = Dropout(0.5, name='drop6')(x)\n    # FC7\n    # 19,19,1024 -> 19,19,1024\n    net['fc7'] = Conv2D(1024, kernel_size=(1,1), activation='relu', padding='same', name='fc7')(net['fc6'])\n\n    # x = Dropout(0.5, name='drop7')(x)\n    # Block 6\n    # 19,19,512 -> 10,10,512\n    net['conv6_1'] = Conv2D(256, kernel_size=(1,1), activation='relu', padding='same', name='conv6_1')(net['fc7'])\n    net['conv6_2'] = ZeroPadding2D(padding=((1, 1), (1, 1)), name='conv6_padding')(net['conv6_1'])\n    net['conv6_2'] = Conv2D(512, kernel_size=(3,3), strides=(2, 2), activation='relu', name='conv6_2')(net['conv6_2'])\n\n    # Block 7\n    # 10,10,512 -> 5,5,256\n    net['conv7_1'] = Conv2D(128, kernel_size=(1,1), activation='relu', padding='same',  name='conv7_1')(net['conv6_2'])\n    net['conv7_2'] = ZeroPadding2D(padding=((1, 1), (1, 1)), name='conv7_padding')(net['conv7_1'])\n    net['conv7_2'] = Conv2D(256, kernel_size=(3,3), strides=(2, 2), activation='relu', padding='valid', name='conv7_2')(net['conv7_2'])\n    # Block 8\n    # 5,5,256 -> 3,3,256\n    net['conv8_1'] = Conv2D(128, kernel_size=(1,1), activation='relu', padding='same', name='conv8_1')(net['conv7_2'])\n    net['conv8_2'] = Conv2D(256, kernel_size=(3,3), strides=(1, 1), activation='relu', padding='valid', name='conv8_2')(net['conv8_1'])\n\n    # Block 9\n    # 3,3,256 -> 1,1,256\n    net['conv9_1'] = Conv2D(128, kernel_size=(1,1), activation='relu', padding='same', name='conv9_1')(net['conv8_2'])\n    net['conv9_2'] = Conv2D(256, kernel_size=(3,3), strides=(1, 1), activation='relu', padding='valid', name='conv9_2')(net['conv9_1'])\n    return net\n\n```\n\n### 构建预测值\n\nSSD网络的最后预测值主要包含三个部分：\n- net{'mbox_loc'}：先验框的预期位置——包含目标的先验框相对于其匹配的真实框的中心xy位移和长宽缩放比\n- net{'mbox_conf'}：先验框中的目标类别——one-hot编码后softmax进行分类\n- net{'mbox_priorbox'}：先验框的原始位置以及variances（用于预测框解码或编码）——这部分不进行训练，只作为预测结果的辅助使用\n其中按照SSD300的输入大小，先验框的数量为`8732`个。\n代码如下：\n```python\ndef SSD300(input_shape, num_classes=21):\n    # 300,300,3\n    input_tensor = Input(shape=input_shape)\n    img_size = (input_shape[1], input_shape[0])\n\n    # SSD结构,net字典\n    net = VGG16(input_tensor)\n    #-----------------------将提取到的主干特征进行处理---------------------------#\n    # 对conv4_3进行处理 38,38,512\n    net['conv4_3_norm'] = Normalize(20, name='conv4_3_norm')(net['conv4_3'])\n    num_priors = 4\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    net['conv4_3_norm_mbox_loc'] = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same', name='conv4_3_norm_mbox_loc')(net['conv4_3_norm'])\n    net['conv4_3_norm_mbox_loc_flat'] = Flatten(name='conv4_3_norm_mbox_loc_flat')(net['conv4_3_norm_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    net['conv4_3_norm_mbox_conf'] = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv4_3_norm_mbox_conf')(net['conv4_3_norm'])\n    net['conv4_3_norm_mbox_conf_flat'] = Flatten(name='conv4_3_norm_mbox_conf_flat')(net['conv4_3_norm_mbox_conf'])\n    priorbox = PriorBox(img_size, 30.0,max_size = 60.0, aspect_ratios=[2],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv4_3_norm_mbox_priorbox')\n    net['conv4_3_norm_mbox_priorbox'] = priorbox(net['conv4_3_norm'])\n    \n    # 对fc7层进行处理 \n    num_priors = 6\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    net['fc7_mbox_loc'] = Conv2D(num_priors * 4, kernel_size=(3,3),padding='same',name='fc7_mbox_loc')(net['fc7'])\n    net['fc7_mbox_loc_flat'] = Flatten(name='fc7_mbox_loc_flat')(net['fc7_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    net['fc7_mbox_conf'] = Conv2D(num_priors * num_classes, kernel_size=(3,3),padding='same',name='fc7_mbox_conf')(net['fc7'])\n    net['fc7_mbox_conf_flat'] = Flatten(name='fc7_mbox_conf_flat')(net['fc7_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 60.0, max_size=111.0, aspect_ratios=[2, 3],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='fc7_mbox_priorbox')\n    net['fc7_mbox_priorbox'] = priorbox(net['fc7'])\n\n    # 对conv6_2进行处理\n    num_priors = 6\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv6_2_mbox_loc')(net['conv6_2'])\n    net['conv6_2_mbox_loc'] = x\n    net['conv6_2_mbox_loc_flat'] = Flatten(name='conv6_2_mbox_loc_flat')(net['conv6_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv6_2_mbox_conf')(net['conv6_2'])\n    net['conv6_2_mbox_conf'] = x\n    net['conv6_2_mbox_conf_flat'] = Flatten(name='conv6_2_mbox_conf_flat')(net['conv6_2_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 111.0, max_size=162.0, aspect_ratios=[2, 3],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv6_2_mbox_priorbox')\n    net['conv6_2_mbox_priorbox'] = priorbox(net['conv6_2'])\n\n    # 对conv7_2进行处理\n    num_priors = 6\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv7_2_mbox_loc')(net['conv7_2'])\n    net['conv7_2_mbox_loc'] = x\n    net['conv7_2_mbox_loc_flat'] = Flatten(name='conv7_2_mbox_loc_flat')(net['conv7_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv7_2_mbox_conf')(net['conv7_2'])\n    net['conv7_2_mbox_conf'] = x\n    net['conv7_2_mbox_conf_flat'] = Flatten(name='conv7_2_mbox_conf_flat')(net['conv7_2_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 162.0, max_size=213.0, aspect_ratios=[2, 3],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv7_2_mbox_priorbox')\n    net['conv7_2_mbox_priorbox'] = priorbox(net['conv7_2'])\n\n    # 对conv8_2进行处理\n    num_priors = 4\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv8_2_mbox_loc')(net['conv8_2'])\n    net['conv8_2_mbox_loc'] = x\n    net['conv8_2_mbox_loc_flat'] = Flatten(name='conv8_2_mbox_loc_flat')(net['conv8_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv8_2_mbox_conf')(net['conv8_2'])\n    net['conv8_2_mbox_conf'] = x\n    net['conv8_2_mbox_conf_flat'] = Flatten(name='conv8_2_mbox_conf_flat')(net['conv8_2_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 213.0, max_size=264.0, aspect_ratios=[2],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv8_2_mbox_priorbox')\n    net['conv8_2_mbox_priorbox'] = priorbox(net['conv8_2'])\n\n    # 对conv9_2进行处理\n    num_priors = 4\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv9_2_mbox_loc')(net['conv9_2'])\n    net['conv9_2_mbox_loc'] = x\n    net['conv9_2_mbox_loc_flat'] = Flatten(name='conv9_2_mbox_loc_flat')(net['conv9_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv9_2_mbox_conf')(net['conv9_2'])\n    net['conv9_2_mbox_conf'] = x\n    net['conv9_2_mbox_conf_flat'] = Flatten(name='conv9_2_mbox_conf_flat')(net['conv9_2_mbox_conf'])\n    \n    priorbox = PriorBox(img_size, 264.0, max_size=315.0, aspect_ratios=[2],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv9_2_mbox_priorbox')\n\n    net['conv9_2_mbox_priorbox'] = priorbox(net['conv9_2'])\n\n    # 将所有结果进行堆叠\n    net['mbox_loc'] = concatenate([net['conv4_3_norm_mbox_loc_flat'],\n                             net['fc7_mbox_loc_flat'],\n                             net['conv6_2_mbox_loc_flat'],\n                             net['conv7_2_mbox_loc_flat'],\n                             net['conv8_2_mbox_loc_flat'],\n                             net['conv9_2_mbox_loc_flat']],\n                            axis=1, name='mbox_loc')\n    net['mbox_conf'] = concatenate([net['conv4_3_norm_mbox_conf_flat'],\n                              net['fc7_mbox_conf_flat'],\n                              net['conv6_2_mbox_conf_flat'],\n                              net['conv7_2_mbox_conf_flat'],\n                              net['conv8_2_mbox_conf_flat'],\n                              net['conv9_2_mbox_conf_flat']],\n                             axis=1, name='mbox_conf')\n    # 先验框的位置和辅助变量\n    net['mbox_priorbox'] = concatenate([net['conv4_3_norm_mbox_priorbox'],\n                                  net['fc7_mbox_priorbox'],\n                                  net['conv6_2_mbox_priorbox'],\n                                  net['conv7_2_mbox_priorbox'],\n                                  net['conv8_2_mbox_priorbox'],\n                                  net['conv9_2_mbox_priorbox']],\n                                  axis=1, name='mbox_priorbox')\n\n    if hasattr(net['mbox_loc'], '_keras_shape'):\n        num_boxes = net['mbox_loc']._keras_shape[-1] // 4\n    elif hasattr(net['mbox_loc'], 'int_shape'):\n        num_boxes = K.int_shape(net['mbox_loc'])[-1] // 4\n    # 预期位置\n    net['mbox_loc'] = Reshape((num_boxes, 4),name='mbox_loc_final')(net['mbox_loc'])\n    # 分类结果\n    net['mbox_conf'] = Reshape((num_boxes, num_classes),name='mbox_conf_logits')(net['mbox_conf'])\n    net['mbox_conf'] = Activation('softmax',name='mbox_conf_final')(net['mbox_conf'])\n\n    net['predictions'] = concatenate([net['mbox_loc'],\n                               net['mbox_conf'],\n                               net['mbox_priorbox']],\n                               axis=2, name='predictions')\n    print(net['predictions'])\n    model = Model(net['input'], net['predictions'])\n    return model\n```\n\n### 先验框编码与解码\n\n针对先验框的编码过程，即计算net{'mbox_loc'}——先验框的预期位置。\n- 找到与真实框重合度高于某个阈值（如0.5）的所有先验框\n- 根据先验框匹配的真实框进行编码得到预期位置\n- 然后根据one-hot编码，将目标类别进行编码\n- 最后的先验框原始位置和variances值不需要进行提取，只添加一个是否包含物体的判断值即可，用于loss计算\n\n```python\n    def encode_box(self, box, return_iou=True):\n        iou = self.iou(box)\n        encoded_box = np.zeros((self.num_priors, 4 + return_iou))\n\n        # 找到每一个真实框，重合程度较高的先验框\n        assign_mask = iou > self.overlap_threshold\n        if not assign_mask.any():\n            assign_mask[iou.argmax()] = True\n        if return_iou:\n            encoded_box[:, -1][assign_mask] = iou[assign_mask]\n        \n        # 找到对应的先验框\n        assigned_priors = self.priors[assign_mask]\n        # 逆向编码，将真实框转化为ssd预测结果的格式\n\n        # 先计算真实框的中心与长宽\n        box_center = 0.5 * (box[:2] + box[2:])\n        box_wh = box[2:] - box[:2]\n        # 再计算重合度较高的先验框的中心与长宽\n        assigned_priors_center = 0.5 * (assigned_priors[:, :2] +\n                                        assigned_priors[:, 2:4])\n        assigned_priors_wh = (assigned_priors[:, 2:4] -\n                                assigned_priors[:, :2])\n        \n        # 逆向求取ssd应该有的预测结果\n        encoded_box[:, :2][assign_mask] = box_center - assigned_priors_center\n        encoded_box[:, :2][assign_mask] /= assigned_priors_wh\n        # 除以0.1\n        encoded_box[:, :2][assign_mask] /= assigned_priors[:, -4:-2]\n\n        encoded_box[:, 2:4][assign_mask] = np.log(box_wh / assigned_priors_wh)\n        # 除以0.2\n        encoded_box[:, 2:4][assign_mask] /= assigned_priors[:, -2:]\n        return encoded_box.ravel()\n    def assign_boxes(self, boxes):\n        #---------------------------------------------------#\n        #   assignment分为3个部分\n        #   :4      的内容为网络应该有的回归预测结果\n        #   4:-8    的内容为先验框所对应的种类，默认为背景\n        #   -8      的内容为当前先验框是否包含目标\n        #   -7:     无意义\n        #---------------------------------------------------#\n        assignment = np.zeros((self.num_priors, 4 + self.num_classes + 8))\n        assignment[:, 4] = 1.0\n        if len(boxes) == 0:\n            return assignment\n\n        # 对每一个真实框都进行iou计算\n        encoded_boxes = np.apply_along_axis(self.encode_box, 1, boxes[:, :4])\n        #---------------------------------------------------#\n        #   在reshape后，获得的encoded_boxes的shape为：\n        #   [num_true_box, num_priors, 4+1]\n        #   4是编码后的结果，1为iou\n        #---------------------------------------------------#\n        encoded_boxes = encoded_boxes.reshape(-1, self.num_priors, 5)\n        \n        #---------------------------------------------------#\n        #   [num_priors]求取每一个先验框重合度最大的真实框\n        #---------------------------------------------------#\n        best_iou = encoded_boxes[:, :, -1].max(axis=0)\n        best_iou_idx = encoded_boxes[:, :, -1].argmax(axis=0)\n        best_iou_mask = best_iou > 0\n        best_iou_idx = best_iou_idx[best_iou_mask]\n        \n        #---------------------------------------------------#\n        #   计算一共有多少先验框满足需求\n        #---------------------------------------------------#\n        assign_num = len(best_iou_idx)\n\n        # 将编码后的真实框取出\n        encoded_boxes = encoded_boxes[:, best_iou_mask, :]\n        assignment[:, :4][best_iou_mask] = encoded_boxes[best_iou_idx,np.arange(assign_num),:4]\n        #----------------------------------------------------------#\n        #   4代表为背景的概率，设定为0，因为这些先验框有对应的物体\n        #----------------------------------------------------------#\n        assignment[:, 4][best_iou_mask] = 0\n        assignment[:, 5:-8][best_iou_mask] = boxes[best_iou_idx, 4:]\n        #----------------------------------------------------------#\n        #   -8表示先验框是否有对应的物体\n        #----------------------------------------------------------#\n        assignment[:, -8][best_iou_mask] = 1\n        # 通过assign_boxes我们就获得了，输入进来的这张图片，应该有的预测结果是什么样子的\n        return assignment\n```\n\n### loss计算\n\n在loss计算过程中，由于SSD可能导致正负样本的不平衡而增加的训练难度，所以一般在计算loss时，通常取1：3的正负样本比例，同意注意:预测值的前四位是预期位置信息，第五位到倒数第八位是类别信息，后面是先验框的原始位置信息。\n```python\nclass MultiboxLoss(object):\n    def __init__(self, num_classes, alpha=1.0, neg_pos_ratio=3.0,\n                 background_label_id=0, negatives_for_hard=100.0):\n        self.num_classes = num_classes\n        self.alpha = alpha\n        self.neg_pos_ratio = neg_pos_ratio\n        if background_label_id != 0:\n            raise Exception('Only 0 as background label id is supported')\n        self.background_label_id = background_label_id\n        self.negatives_for_hard = negatives_for_hard\n\n    def _l1_smooth_loss(self, y_true, y_pred):\n        abs_loss = tf.abs(y_true - y_pred)\n        sq_loss = 0.5 * (y_true - y_pred)**2\n        l1_loss = tf.where(tf.less(abs_loss, 1.0), sq_loss, abs_loss - 0.5)\n        return tf.reduce_sum(l1_loss, -1)\n\n    def _softmax_loss(self, y_true, y_pred):\n        y_pred = tf.maximum(tf.minimum(y_pred, 1 - 1e-15), 1e-15)\n        softmax_loss = -tf.reduce_sum(y_true * tf.log(y_pred),\n                                      axis=-1)\n        return softmax_loss\n\n    def compute_loss(self, y_true, y_pred):\n        batch_size = tf.shape(y_true)[0]\n        num_boxes = tf.to_float(tf.shape(y_true)[1])\n\n        # 计算所有的loss\n        # 分类的loss\n        # batch_size,8732,21 -> batch_size,8732\n        conf_loss = self._softmax_loss(y_true[:, :, 4:-8],\n                                       y_pred[:, :, 4:-8])\n        # 框的位置的loss\n        # batch_size,8732,4 -> batch_size,8732\n        loc_loss = self._l1_smooth_loss(y_true[:, :, :4],\n                                        y_pred[:, :, :4])\n\n        # 获取所有的正标签的loss\n        # 每一张图的pos的个数\n        num_pos = tf.reduce_sum(y_true[:, :, -8], axis=-1)\n        # 每一张图的pos_loc_loss\n        pos_loc_loss = tf.reduce_sum(loc_loss * y_true[:, :, -8],\n                                     axis=1)\n        # 每一张图的pos_conf_loss\n        pos_conf_loss = tf.reduce_sum(conf_loss * y_true[:, :, -8],\n                                      axis=1)\n\n        # 获取一定的负样本\n        num_neg = tf.minimum(self.neg_pos_ratio * num_pos,\n                             num_boxes - num_pos)\n\n        # 找到了哪些值是大于0的\n        pos_num_neg_mask = tf.greater(num_neg, 0)\n        # 获得一个1.0\n        has_min = tf.to_float(tf.reduce_any(pos_num_neg_mask))\n        num_neg = tf.concat( axis=0,values=[num_neg,\n                                [(1 - has_min) * self.negatives_for_hard]])\n        # 求平均每个图片要取多少个负样本\n        num_neg_batch = tf.reduce_mean(tf.boolean_mask(num_neg,\n                                                      tf.greater(num_neg, 0)))\n        num_neg_batch = tf.to_int32(num_neg_batch)\n\n        # conf的起始\n        confs_start = 4 + self.background_label_id + 1\n        # conf的结束\n        confs_end = confs_start + self.num_classes - 1\n\n        # 找到实际上在该位置不应该有预测结果的框，求他们最大的置信度。\n        max_confs = tf.reduce_max(y_pred[:, :, confs_start:confs_end],\n                                  axis=2)\n        \n        # 取top_k个置信度，作为负样本\n        _, indices = tf.nn.top_k(max_confs * (1 - y_true[:, :, -8]),\n                                 k=num_neg_batch)\n\n        # 找到其在1维上的索引\n        batch_idx = tf.expand_dims(tf.range(0, batch_size), 1)\n        batch_idx = tf.tile(batch_idx, (1, num_neg_batch))\n        full_indices = (tf.reshape(batch_idx, [-1]) * tf.to_int32(num_boxes) +\n                        tf.reshape(indices, [-1]))\n        \n\n        neg_conf_loss = tf.gather(tf.reshape(conf_loss, [-1]),\n                                  full_indices)\n        neg_conf_loss = tf.reshape(neg_conf_loss,\n                                   [batch_size, num_neg_batch])\n        neg_conf_loss = tf.reduce_sum(neg_conf_loss, axis=1)\n\n        # 求loss总和\n        total_loss = K.sum(pos_conf_loss + neg_conf_loss)/K.cast(batch_size,K.dtype(pos_conf_loss))\n\n        total_loss +=  K.sum(self.alpha * pos_loc_loss)/K.cast(batch_size,K.dtype(pos_loc_loss))\n        return total_loss\n\n```\n\n至此，所有关于SSD的关键部分就讲解完了，后续会陆续更新其他算法。","slug":"object_detector/SSD","published":1,"updated":"2021-04-19T03:06:27.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckno0pgzn0000kcuo0tqwfmi7","content":"<h2 id=\"深度学习之目标检测SSD\"><a href=\"#深度学习之目标检测SSD\" class=\"headerlink\" title=\"深度学习之目标检测SSD\"></a>深度学习之目标检测SSD</h2><h3 id=\"What-is-SSD\"><a href=\"#What-is-SSD\" class=\"headerlink\" title=\"What is SSD?\"></a>What is SSD?</h3><p>关于目标检测算法，当下已经有很多优秀的开源算法，其中算法主要分为两类：one-stage 和 two-stage。本次介绍的SSD算法就是one-stage算法的一种。主要的工作流程就是在利用主流的特征提取网络提取特征后，根据特征维度在图片上的不同位置进行密集采样，每个采样点都包含不同尺度和长宽比的<code>先验框</code>，然后对不同的先验框中的物体种类进行预测和相对于预测框位置进行回归，速度较快。<br>但是针对密集采样，由于采样点较多，且可能多数点都不存在目标，所以容易导致正负样本不平衡，从而使得训练难度上升。</p>\n<h3 id=\"主干网络结构简介\"><a href=\"#主干网络结构简介\" class=\"headerlink\" title=\"主干网络结构简介\"></a>主干网络结构简介</h3><p>针对SSD算法，其中主要利用的是<code>VGG16</code>作为主干特征提取网络，并且将<code>VGG16</code>中的<code>FC6</code>和<code>FC7</code>两层转换为卷积层，去掉所有的丢弃层和<code>FC8</code>层，并增加<code>Conv8</code>和<code>Conv9</code>。由于之前文章中已经介绍过<code>VGG16</code>，所以此处不再重复介绍。<br>本文此次以<code>SSD300</code>为例，介绍<code>SSD</code>算法，网络结构如下：<br><img src=\"http://39.105.26.229:4567/20190427212254620.png\" alt=\"SSD网络结构\"><br><img src=\"http://39.105.26.229:4567/20190427212220602.png\" alt=\"SSD网络结构\"></p>\n<p>网络处理流程：</p>\n<ul>\n<li>输入图片首先resize到300x300大小的图片</li>\n<li>2次（3，3）卷积，1次（2，2）池化</li>\n<li>2次（3，3）卷积，1次（2，2）池化</li>\n<li>3次（3，3）卷积，1次（2，2）池化</li>\n<li>3次（3，3）卷积，1次（2，2）池化</li>\n<li>3次（3，3）卷积，1次（2，2）池化</li>\n<li>1次（3，3）卷积，1次（1，1）卷积</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，步长2</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，步长2</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，padding = vaild</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，padding = vaild</li>\n</ul>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">VGG16</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    net <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \n    <span class=\"token comment\" spellcheck=\"true\"># Block 1</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input_tensor\n    <span class=\"token comment\" spellcheck=\"true\"># 300,300,3 -> 150,150,64</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv1_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv1_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv1_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv1_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv1_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'pool1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv1_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block 2</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 150,150,64 -> 75,75,128</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv2_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv2_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv2_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv2_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv2_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'pool2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv2_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block 3</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 75,75,128 -> 38,38,256</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv3_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv3_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv3_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv3_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv3_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv3_3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv3_3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv3_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'pool3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv3_3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block 4</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 38,38,256 -> 19,19,512</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool4'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'pool4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block 5</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 19,19,512 -> 19,19,512</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv5_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv5_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool4'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv5_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv5_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv5_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv5_3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv5_3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv5_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool5'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'pool5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv5_3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># FC6</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 19,19,512 -> 19,19,1024</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc6'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dilation_rate<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'fc6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool5'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># x = Dropout(0.5, name='drop6')(x)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># FC7</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 19,19,1024 -> 19,19,1024</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'fc7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc6'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># x = Dropout(0.5, name='drop7')(x)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block 6</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 19,19,512 -> 10,10,512</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_padding'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block 7</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 10,10,512 -> 5,5,256</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>  name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_padding'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block 8</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 5,5,256 -> 3,3,256</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv8_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv8_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block 9</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 3,3,256 -> 1,1,256</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv9_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv9_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> net\n</code></pre>\n<h3 id=\"构建预测值\"><a href=\"#构建预测值\" class=\"headerlink\" title=\"构建预测值\"></a>构建预测值</h3><p>SSD网络的最后预测值主要包含三个部分：</p>\n<ul>\n<li><p>net{‘mbox_loc’}：先验框的预期位置——包含目标的先验框相对于其匹配的真实框的中心xy位移和长宽缩放比</p>\n</li>\n<li><p>net{‘mbox_conf’}：先验框中的目标类别——one-hot编码后softmax进行分类</p>\n</li>\n<li><p>net{‘mbox_priorbox’}：先验框的原始位置以及variances（用于预测框解码或编码）——这部分不进行训练，只作为预测结果的辅助使用<br>其中按照SSD300的输入大小，先验框的数量为<code>8732</code>个。<br>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">SSD300</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">,</span> num_classes<span class=\"token operator\">=</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 300,300,3</span>\n  input_tensor <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span>input_shape<span class=\"token punctuation\">)</span>\n  img_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\"># SSD结构,net字典</span>\n  net <span class=\"token operator\">=</span> VGG16<span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\">#-----------------------将提取到的主干特征进行处理---------------------------#</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 对conv4_3进行处理 38,38,512</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Normalize<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_3_norm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  num_priors <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 预测框的处理</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_3_norm_mbox_loc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_loc_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_3_norm_mbox_loc_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，num_classes是所分的类</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> num_classes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_3_norm_mbox_conf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_conf_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_3_norm_mbox_conf_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  priorbox <span class=\"token operator\">=</span> PriorBox<span class=\"token punctuation\">(</span>img_size<span class=\"token punctuation\">,</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">,</span>max_size <span class=\"token operator\">=</span> <span class=\"token number\">60.0</span><span class=\"token punctuation\">,</span> aspect_ratios<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      variances<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_3_norm_mbox_priorbox'</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_priorbox'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> priorbox<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\"># 对fc7层进行处理 </span>\n  num_priors <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 预测框的处理</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'fc7_mbox_loc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_loc_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'fc7_mbox_loc_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，num_classes是所分的类</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> num_classes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'fc7_mbox_conf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_conf_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'fc7_mbox_conf_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  priorbox <span class=\"token operator\">=</span> PriorBox<span class=\"token punctuation\">(</span>img_size<span class=\"token punctuation\">,</span> <span class=\"token number\">60.0</span><span class=\"token punctuation\">,</span> max_size<span class=\"token operator\">=</span><span class=\"token number\">111.0</span><span class=\"token punctuation\">,</span> aspect_ratios<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      variances<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">=</span><span class=\"token string\">'fc7_mbox_priorbox'</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_priorbox'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> priorbox<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\"># 对conv6_2进行处理</span>\n  num_priors <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 预测框的处理</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_2_mbox_loc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_2_mbox_loc_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，num_classes是所分的类</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> num_classes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_2_mbox_conf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_2_mbox_conf_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  priorbox <span class=\"token operator\">=</span> PriorBox<span class=\"token punctuation\">(</span>img_size<span class=\"token punctuation\">,</span> <span class=\"token number\">111.0</span><span class=\"token punctuation\">,</span> max_size<span class=\"token operator\">=</span><span class=\"token number\">162.0</span><span class=\"token punctuation\">,</span> aspect_ratios<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      variances<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_2_mbox_priorbox'</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> priorbox<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\"># 对conv7_2进行处理</span>\n  num_priors <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 预测框的处理</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_2_mbox_loc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_2_mbox_loc_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，num_classes是所分的类</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> num_classes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_2_mbox_conf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_2_mbox_conf_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  priorbox <span class=\"token operator\">=</span> PriorBox<span class=\"token punctuation\">(</span>img_size<span class=\"token punctuation\">,</span> <span class=\"token number\">162.0</span><span class=\"token punctuation\">,</span> max_size<span class=\"token operator\">=</span><span class=\"token number\">213.0</span><span class=\"token punctuation\">,</span> aspect_ratios<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      variances<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_2_mbox_priorbox'</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> priorbox<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\"># 对conv8_2进行处理</span>\n  num_priors <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 预测框的处理</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv8_2_mbox_loc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv8_2_mbox_loc_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，num_classes是所分的类</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> num_classes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv8_2_mbox_conf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv8_2_mbox_conf_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  priorbox <span class=\"token operator\">=</span> PriorBox<span class=\"token punctuation\">(</span>img_size<span class=\"token punctuation\">,</span> <span class=\"token number\">213.0</span><span class=\"token punctuation\">,</span> max_size<span class=\"token operator\">=</span><span class=\"token number\">264.0</span><span class=\"token punctuation\">,</span> aspect_ratios<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      variances<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">=</span><span class=\"token string\">'conv8_2_mbox_priorbox'</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> priorbox<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\"># 对conv9_2进行处理</span>\n  num_priors <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 预测框的处理</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv9_2_mbox_loc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv9_2_mbox_loc_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，num_classes是所分的类</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> num_classes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv9_2_mbox_conf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv9_2_mbox_conf_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  priorbox <span class=\"token operator\">=</span> PriorBox<span class=\"token punctuation\">(</span>img_size<span class=\"token punctuation\">,</span> <span class=\"token number\">264.0</span><span class=\"token punctuation\">,</span> max_size<span class=\"token operator\">=</span><span class=\"token number\">315.0</span><span class=\"token punctuation\">,</span> aspect_ratios<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      variances<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">=</span><span class=\"token string\">'conv9_2_mbox_priorbox'</span><span class=\"token punctuation\">)</span>\n\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> priorbox<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\"># 将所有结果进行堆叠</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_loc_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                           net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_loc_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                           net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                           net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                           net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                           net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                          axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_conf_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_conf_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                           axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mbox_conf'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 先验框的位置和辅助变量</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_priorbox'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_priorbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_priorbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mbox_priorbox'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> hasattr<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_keras_shape'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      num_boxes <span class=\"token operator\">=</span> net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_keras_shape<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">//</span> <span class=\"token number\">4</span>\n  <span class=\"token keyword\">elif</span> hasattr<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int_shape'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      num_boxes <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>int_shape<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">//</span> <span class=\"token number\">4</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 预期位置</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num_boxes<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'mbox_loc_final'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 分类结果</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num_boxes<span class=\"token punctuation\">,</span> num_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'mbox_conf_logits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'mbox_conf_final'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'predictions'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                             net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                             net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_priorbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                             axis<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'predictions'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'predictions'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> net<span class=\"token punctuation\">[</span><span class=\"token string\">'predictions'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> model</code></pre>\n</li>\n</ul>\n<h3 id=\"先验框编码与解码\"><a href=\"#先验框编码与解码\" class=\"headerlink\" title=\"先验框编码与解码\"></a>先验框编码与解码</h3><p>针对先验框的编码过程，即计算net{‘mbox_loc’}——先验框的预期位置。</p>\n<ul>\n<li>找到与真实框重合度高于某个阈值（如0.5）的所有先验框</li>\n<li>根据先验框匹配的真实框进行编码得到预期位置</li>\n<li>然后根据one-hot编码，将目标类别进行编码</li>\n<li>最后的先验框原始位置和variances值不需要进行提取，只添加一个是否包含物体的判断值即可，用于loss计算</li>\n</ul>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">encode_box</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">,</span> return_iou<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        iou <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>iou<span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">)</span>\n        encoded_box <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>num_priors<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> return_iou<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 找到每一个真实框，重合程度较高的先验框</span>\n        assign_mask <span class=\"token operator\">=</span> iou <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>overlap_threshold\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> assign_mask<span class=\"token punctuation\">.</span>any<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            assign_mask<span class=\"token punctuation\">[</span>iou<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">if</span> return_iou<span class=\"token punctuation\">:</span>\n            encoded_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> iou<span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 找到对应的先验框</span>\n        assigned_priors <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>priors<span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 逆向编码，将真实框转化为ssd预测结果的格式</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 先计算真实框的中心与长宽</span>\n        box_center <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> box<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        box_wh <span class=\"token operator\">=</span> box<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 再计算重合度较高的先验框的中心与长宽</span>\n        assigned_priors_center <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>assigned_priors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span>\n                                        assigned_priors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        assigned_priors_wh <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>assigned_priors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span>\n                                assigned_priors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 逆向求取ssd应该有的预测结果</span>\n        encoded_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> box_center <span class=\"token operator\">-</span> assigned_priors_center\n        encoded_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">/=</span> assigned_priors_wh\n        <span class=\"token comment\" spellcheck=\"true\"># 除以0.1</span>\n        encoded_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">/=</span> assigned_priors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n        encoded_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>box_wh <span class=\"token operator\">/</span> assigned_priors_wh<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 除以0.2</span>\n        encoded_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">/=</span> assigned_priors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> encoded_box<span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">assign_boxes</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> boxes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   assignment分为3个部分</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   :4      的内容为网络应该有的回归预测结果</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   4:-8    的内容为先验框所对应的种类，默认为背景</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   -8      的内容为当前先验框是否包含目标</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   -7:     无意义</span>\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        assignment <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>num_priors<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>num_classes <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        assignment<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>\n        <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> assignment\n\n        <span class=\"token comment\" spellcheck=\"true\"># 对每一个真实框都进行iou计算</span>\n        encoded_boxes <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>apply_along_axis<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>encode_box<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> boxes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   在reshape后，获得的encoded_boxes的shape为：</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   [num_true_box, num_priors, 4+1]</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   4是编码后的结果，1为iou</span>\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        encoded_boxes <span class=\"token operator\">=</span> encoded_boxes<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>num_priors<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   [num_priors]求取每一个先验框重合度最大的真实框</span>\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        best_iou <span class=\"token operator\">=</span> encoded_boxes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        best_iou_idx <span class=\"token operator\">=</span> encoded_boxes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        best_iou_mask <span class=\"token operator\">=</span> best_iou <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n        best_iou_idx <span class=\"token operator\">=</span> best_iou_idx<span class=\"token punctuation\">[</span>best_iou_mask<span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   计算一共有多少先验框满足需求</span>\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        assign_num <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>best_iou_idx<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 将编码后的真实框取出</span>\n        encoded_boxes <span class=\"token operator\">=</span> encoded_boxes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> best_iou_mask<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        assignment<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>best_iou_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> encoded_boxes<span class=\"token punctuation\">[</span>best_iou_idx<span class=\"token punctuation\">,</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>assign_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\" spellcheck=\"true\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   4代表为背景的概率，设定为0，因为这些先验框有对应的物体</span>\n        <span class=\"token comment\" spellcheck=\"true\">#----------------------------------------------------------#</span>\n        assignment<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>best_iou_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        assignment<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>best_iou_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> boxes<span class=\"token punctuation\">[</span>best_iou_idx<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\" spellcheck=\"true\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   -8表示先验框是否有对应的物体</span>\n        <span class=\"token comment\" spellcheck=\"true\">#----------------------------------------------------------#</span>\n        assignment<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>best_iou_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 通过assign_boxes我们就获得了，输入进来的这张图片，应该有的预测结果是什么样子的</span>\n        <span class=\"token keyword\">return</span> assignment</code></pre>\n<h3 id=\"loss计算\"><a href=\"#loss计算\" class=\"headerlink\" title=\"loss计算\"></a>loss计算</h3><p>在loss计算过程中，由于SSD可能导致正负样本的不平衡而增加的训练难度，所以一般在计算loss时，通常取1：3的正负样本比例，同意注意:预测值的前四位是预期位置信息，第五位到倒数第八位是类别信息，后面是先验框的原始位置信息。</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MultiboxLoss</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num_classes<span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> neg_pos_ratio<span class=\"token operator\">=</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span>\n                 background_label_id<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> negatives_for_hard<span class=\"token operator\">=</span><span class=\"token number\">100.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>num_classes <span class=\"token operator\">=</span> num_classes\n        self<span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">=</span> alpha\n        self<span class=\"token punctuation\">.</span>neg_pos_ratio <span class=\"token operator\">=</span> neg_pos_ratio\n        <span class=\"token keyword\">if</span> background_label_id <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">'Only 0 as background label id is supported'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>background_label_id <span class=\"token operator\">=</span> background_label_id\n        self<span class=\"token punctuation\">.</span>negatives_for_hard <span class=\"token operator\">=</span> negatives_for_hard\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_l1_smooth_loss</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> y_true<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        abs_loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>abs<span class=\"token punctuation\">(</span>y_true <span class=\"token operator\">-</span> y_pred<span class=\"token punctuation\">)</span>\n        sq_loss <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y_true <span class=\"token operator\">-</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token operator\">**</span><span class=\"token number\">2</span>\n        l1_loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>less<span class=\"token punctuation\">(</span>abs_loss<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sq_loss<span class=\"token punctuation\">,</span> abs_loss <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> tf<span class=\"token punctuation\">.</span>reduce_sum<span class=\"token punctuation\">(</span>l1_loss<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_softmax_loss</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> y_true<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        y_pred <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">(</span>y_pred<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n        softmax_loss <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>tf<span class=\"token punctuation\">.</span>reduce_sum<span class=\"token punctuation\">(</span>y_true <span class=\"token operator\">*</span> tf<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                      axis<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> softmax_loss\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">compute_loss</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> y_true<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        batch_size <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>y_true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        num_boxes <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>to_float<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>y_true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 计算所有的loss</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 分类的loss</span>\n        <span class=\"token comment\" spellcheck=\"true\"># batch_size,8732,21 -> batch_size,8732</span>\n        conf_loss <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_softmax_loss<span class=\"token punctuation\">(</span>y_true<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                       y_pred<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 框的位置的loss</span>\n        <span class=\"token comment\" spellcheck=\"true\"># batch_size,8732,4 -> batch_size,8732</span>\n        loc_loss <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_l1_smooth_loss<span class=\"token punctuation\">(</span>y_true<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                        y_pred<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 获取所有的正标签的loss</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 每一张图的pos的个数</span>\n        num_pos <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_sum<span class=\"token punctuation\">(</span>y_true<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 每一张图的pos_loc_loss</span>\n        pos_loc_loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_sum<span class=\"token punctuation\">(</span>loc_loss <span class=\"token operator\">*</span> y_true<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                     axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 每一张图的pos_conf_loss</span>\n        pos_conf_loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_sum<span class=\"token punctuation\">(</span>conf_loss <span class=\"token operator\">*</span> y_true<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                      axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 获取一定的负样本</span>\n        num_neg <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>neg_pos_ratio <span class=\"token operator\">*</span> num_pos<span class=\"token punctuation\">,</span>\n                             num_boxes <span class=\"token operator\">-</span> num_pos<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 找到了哪些值是大于0的</span>\n        pos_num_neg_mask <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>greater<span class=\"token punctuation\">(</span>num_neg<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 获得一个1.0</span>\n        has_min <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>to_float<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>reduce_any<span class=\"token punctuation\">(</span>pos_num_neg_mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        num_neg <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>values<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>num_neg<span class=\"token punctuation\">,</span>\n                                <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> has_min<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>negatives_for_hard<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 求平均每个图片要取多少个负样本</span>\n        num_neg_batch <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_mean<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>boolean_mask<span class=\"token punctuation\">(</span>num_neg<span class=\"token punctuation\">,</span>\n                                                      tf<span class=\"token punctuation\">.</span>greater<span class=\"token punctuation\">(</span>num_neg<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        num_neg_batch <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>to_int32<span class=\"token punctuation\">(</span>num_neg_batch<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># conf的起始</span>\n        confs_start <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>background_label_id <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\" spellcheck=\"true\"># conf的结束</span>\n        confs_end <span class=\"token operator\">=</span> confs_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>num_classes <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 找到实际上在该位置不应该有预测结果的框，求他们最大的置信度。</span>\n        max_confs <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_max<span class=\"token punctuation\">(</span>y_pred<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> confs_start<span class=\"token punctuation\">:</span>confs_end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                  axis<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 取top_k个置信度，作为负样本</span>\n        _<span class=\"token punctuation\">,</span> indices <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>top_k<span class=\"token punctuation\">(</span>max_confs <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> y_true<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                 k<span class=\"token operator\">=</span>num_neg_batch<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 找到其在1维上的索引</span>\n        batch_idx <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> batch_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        batch_idx <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>tile<span class=\"token punctuation\">(</span>batch_idx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num_neg_batch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        full_indices <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>batch_idx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> tf<span class=\"token punctuation\">.</span>to_int32<span class=\"token punctuation\">(</span>num_boxes<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                        tf<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>indices<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n        neg_conf_loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>conf_loss<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                  full_indices<span class=\"token punctuation\">)</span>\n        neg_conf_loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>neg_conf_loss<span class=\"token punctuation\">,</span>\n                                   <span class=\"token punctuation\">[</span>batch_size<span class=\"token punctuation\">,</span> num_neg_batch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        neg_conf_loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_sum<span class=\"token punctuation\">(</span>neg_conf_loss<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 求loss总和</span>\n        total_loss <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>pos_conf_loss <span class=\"token operator\">+</span> neg_conf_loss<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>K<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">(</span>pos_conf_loss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        total_loss <span class=\"token operator\">+=</span>  K<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">*</span> pos_loc_loss<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>K<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">(</span>pos_loc_loss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> total_loss\n</code></pre>\n<p>至此，所有关于SSD的关键部分就讲解完了，后续会陆续更新其他算法。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习之目标检测SSD\"><a href=\"#深度学习之目标检测SSD\" class=\"headerlink\" title=\"深度学习之目标检测SSD\"></a>深度学习之目标检测SSD</h2><h3 id=\"What-is-SSD\"><a href=\"#What-is-SSD\" class=\"headerlink\" title=\"What is SSD?\"></a>What is SSD?</h3><p>关于目标检测算法，当下已经有很多优秀的开源算法，其中算法主要分为两类：one-stage 和 two-stage。本次介绍的SSD算法就是one-stage算法的一种。主要的工作流程就是在利用主流的特征提取网络提取特征后，根据特征维度在图片上的不同位置进行密集采样，每个采样点都包含不同尺度和长宽比的<code>先验框</code>，然后对不同的先验框中的物体种类进行预测和相对于预测框位置进行回归，速度较快。<br>但是针对密集采样，由于采样点较多，且可能多数点都不存在目标，所以容易导致正负样本不平衡，从而使得训练难度上升。</p>\n<h3 id=\"主干网络结构简介\"><a href=\"#主干网络结构简介\" class=\"headerlink\" title=\"主干网络结构简介\"></a>主干网络结构简介</h3><p>针对SSD算法，其中主要利用的是<code>VGG16</code>作为主干特征提取网络，并且将<code>VGG16</code>中的<code>FC6</code>和<code>FC7</code>两层转换为卷积层，去掉所有的丢弃层和<code>FC8</code>层，并增加<code>Conv8</code>和<code>Conv9</code>。由于之前文章中已经介绍过<code>VGG16</code>，所以此处不再重复介绍。<br>本文此次以<code>SSD300</code>为例，介绍<code>SSD</code>算法，网络结构如下：<br><img src=\"http://39.105.26.229:4567/20190427212254620.png\" alt=\"SSD网络结构\"><br><img src=\"http://39.105.26.229:4567/20190427212220602.png\" alt=\"SSD网络结构\"></p>\n<p>网络处理流程：</p>\n<ul>\n<li>输入图片首先resize到300x300大小的图片</li>\n<li>2次（3，3）卷积，1次（2，2）池化</li>\n<li>2次（3，3）卷积，1次（2，2）池化</li>\n<li>3次（3，3）卷积，1次（2，2）池化</li>\n<li>3次（3，3）卷积，1次（2，2）池化</li>\n<li>3次（3，3）卷积，1次（2，2）池化</li>\n<li>1次（3，3）卷积，1次（1，1）卷积</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，步长2</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，步长2</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，padding = vaild</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，padding = vaild</li>\n</ul>\n<p>代码如下：</p>\n<pre><code class=\"python\">def VGG16(input_tensor):\n    net = &#123;&#125; \n    # Block 1\n    net[&#39;input&#39;] = input_tensor\n    # 300,300,3 -&gt; 150,150,64\n    net[&#39;conv1_1&#39;] = Conv2D(64, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv1_1&#39;)(net[&#39;input&#39;])\n    net[&#39;conv1_2&#39;] = Conv2D(64, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv1_2&#39;)(net[&#39;conv1_1&#39;])\n    net[&#39;pool1&#39;] = MaxPooling2D((2, 2), strides=(2, 2), padding=&#39;same&#39;, name=&#39;pool1&#39;)(net[&#39;conv1_2&#39;])\n    # Block 2\n    # 150,150,64 -&gt; 75,75,128\n    net[&#39;conv2_1&#39;] = Conv2D(128, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv2_1&#39;)(net[&#39;pool1&#39;])\n    net[&#39;conv2_2&#39;] = Conv2D(128, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv2_2&#39;)(net[&#39;conv2_1&#39;])\n    net[&#39;pool2&#39;] = MaxPooling2D((2, 2), strides=(2, 2), padding=&#39;same&#39;, name=&#39;pool2&#39;)(net[&#39;conv2_2&#39;])\n    # Block 3\n    # 75,75,128 -&gt; 38,38,256\n    net[&#39;conv3_1&#39;] = Conv2D(256, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv3_1&#39;)(net[&#39;pool2&#39;])\n    net[&#39;conv3_2&#39;] = Conv2D(256, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv3_2&#39;)(net[&#39;conv3_1&#39;])\n    net[&#39;conv3_3&#39;] = Conv2D(256, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv3_3&#39;)(net[&#39;conv3_2&#39;])\n    net[&#39;pool3&#39;] = MaxPooling2D((2, 2), strides=(2, 2), padding=&#39;same&#39;, name=&#39;pool3&#39;)(net[&#39;conv3_3&#39;])\n    # Block 4\n    # 38,38,256 -&gt; 19,19,512\n    net[&#39;conv4_1&#39;] = Conv2D(512, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv4_1&#39;)(net[&#39;pool3&#39;])\n    net[&#39;conv4_2&#39;] = Conv2D(512, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv4_2&#39;)(net[&#39;conv4_1&#39;])\n    net[&#39;conv4_3&#39;] = Conv2D(512, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv4_3&#39;)(net[&#39;conv4_2&#39;])\n    net[&#39;pool4&#39;] = MaxPooling2D((2, 2), strides=(2, 2), padding=&#39;same&#39;, name=&#39;pool4&#39;)(net[&#39;conv4_3&#39;])\n    # Block 5\n    # 19,19,512 -&gt; 19,19,512\n    net[&#39;conv5_1&#39;] = Conv2D(512, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv5_1&#39;)(net[&#39;pool4&#39;])\n    net[&#39;conv5_2&#39;] = Conv2D(512, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv5_2&#39;)(net[&#39;conv5_1&#39;])\n    net[&#39;conv5_3&#39;] = Conv2D(512, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv5_3&#39;)(net[&#39;conv5_2&#39;])\n    net[&#39;pool5&#39;] = MaxPooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;, name=&#39;pool5&#39;)(net[&#39;conv5_3&#39;])\n    # FC6\n    # 19,19,512 -&gt; 19,19,1024\n    net[&#39;fc6&#39;] = Conv2D(1024, kernel_size=(3,3), dilation_rate=(6, 6), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;fc6&#39;)(net[&#39;pool5&#39;])\n\n    # x = Dropout(0.5, name=&#39;drop6&#39;)(x)\n    # FC7\n    # 19,19,1024 -&gt; 19,19,1024\n    net[&#39;fc7&#39;] = Conv2D(1024, kernel_size=(1,1), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;fc7&#39;)(net[&#39;fc6&#39;])\n\n    # x = Dropout(0.5, name=&#39;drop7&#39;)(x)\n    # Block 6\n    # 19,19,512 -&gt; 10,10,512\n    net[&#39;conv6_1&#39;] = Conv2D(256, kernel_size=(1,1), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv6_1&#39;)(net[&#39;fc7&#39;])\n    net[&#39;conv6_2&#39;] = ZeroPadding2D(padding=((1, 1), (1, 1)), name=&#39;conv6_padding&#39;)(net[&#39;conv6_1&#39;])\n    net[&#39;conv6_2&#39;] = Conv2D(512, kernel_size=(3,3), strides=(2, 2), activation=&#39;relu&#39;, name=&#39;conv6_2&#39;)(net[&#39;conv6_2&#39;])\n\n    # Block 7\n    # 10,10,512 -&gt; 5,5,256\n    net[&#39;conv7_1&#39;] = Conv2D(128, kernel_size=(1,1), activation=&#39;relu&#39;, padding=&#39;same&#39;,  name=&#39;conv7_1&#39;)(net[&#39;conv6_2&#39;])\n    net[&#39;conv7_2&#39;] = ZeroPadding2D(padding=((1, 1), (1, 1)), name=&#39;conv7_padding&#39;)(net[&#39;conv7_1&#39;])\n    net[&#39;conv7_2&#39;] = Conv2D(256, kernel_size=(3,3), strides=(2, 2), activation=&#39;relu&#39;, padding=&#39;valid&#39;, name=&#39;conv7_2&#39;)(net[&#39;conv7_2&#39;])\n    # Block 8\n    # 5,5,256 -&gt; 3,3,256\n    net[&#39;conv8_1&#39;] = Conv2D(128, kernel_size=(1,1), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv8_1&#39;)(net[&#39;conv7_2&#39;])\n    net[&#39;conv8_2&#39;] = Conv2D(256, kernel_size=(3,3), strides=(1, 1), activation=&#39;relu&#39;, padding=&#39;valid&#39;, name=&#39;conv8_2&#39;)(net[&#39;conv8_1&#39;])\n\n    # Block 9\n    # 3,3,256 -&gt; 1,1,256\n    net[&#39;conv9_1&#39;] = Conv2D(128, kernel_size=(1,1), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv9_1&#39;)(net[&#39;conv8_2&#39;])\n    net[&#39;conv9_2&#39;] = Conv2D(256, kernel_size=(3,3), strides=(1, 1), activation=&#39;relu&#39;, padding=&#39;valid&#39;, name=&#39;conv9_2&#39;)(net[&#39;conv9_1&#39;])\n    return net\n</code></pre>\n<h3 id=\"构建预测值\"><a href=\"#构建预测值\" class=\"headerlink\" title=\"构建预测值\"></a>构建预测值</h3><p>SSD网络的最后预测值主要包含三个部分：</p>\n<ul>\n<li><p>net{‘mbox_loc’}：先验框的预期位置——包含目标的先验框相对于其匹配的真实框的中心xy位移和长宽缩放比</p>\n</li>\n<li><p>net{‘mbox_conf’}：先验框中的目标类别——one-hot编码后softmax进行分类</p>\n</li>\n<li><p>net{‘mbox_priorbox’}：先验框的原始位置以及variances（用于预测框解码或编码）——这部分不进行训练，只作为预测结果的辅助使用<br>其中按照SSD300的输入大小，先验框的数量为<code>8732</code>个。<br>代码如下：</p>\n<pre><code class=\"python\">def SSD300(input_shape, num_classes=21):\n  # 300,300,3\n  input_tensor = Input(shape=input_shape)\n  img_size = (input_shape[1], input_shape[0])\n\n  # SSD结构,net字典\n  net = VGG16(input_tensor)\n  #-----------------------将提取到的主干特征进行处理---------------------------#\n  # 对conv4_3进行处理 38,38,512\n  net[&#39;conv4_3_norm&#39;] = Normalize(20, name=&#39;conv4_3_norm&#39;)(net[&#39;conv4_3&#39;])\n  num_priors = 4\n  # 预测框的处理\n  # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n  net[&#39;conv4_3_norm_mbox_loc&#39;] = Conv2D(num_priors * 4, kernel_size=(3,3), padding=&#39;same&#39;, name=&#39;conv4_3_norm_mbox_loc&#39;)(net[&#39;conv4_3_norm&#39;])\n  net[&#39;conv4_3_norm_mbox_loc_flat&#39;] = Flatten(name=&#39;conv4_3_norm_mbox_loc_flat&#39;)(net[&#39;conv4_3_norm_mbox_loc&#39;])\n  # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n  net[&#39;conv4_3_norm_mbox_conf&#39;] = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv4_3_norm_mbox_conf&#39;)(net[&#39;conv4_3_norm&#39;])\n  net[&#39;conv4_3_norm_mbox_conf_flat&#39;] = Flatten(name=&#39;conv4_3_norm_mbox_conf_flat&#39;)(net[&#39;conv4_3_norm_mbox_conf&#39;])\n  priorbox = PriorBox(img_size, 30.0,max_size = 60.0, aspect_ratios=[2],\n                      variances=[0.1, 0.1, 0.2, 0.2],\n                      name=&#39;conv4_3_norm_mbox_priorbox&#39;)\n  net[&#39;conv4_3_norm_mbox_priorbox&#39;] = priorbox(net[&#39;conv4_3_norm&#39;])\n\n  # 对fc7层进行处理 \n  num_priors = 6\n  # 预测框的处理\n  # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n  net[&#39;fc7_mbox_loc&#39;] = Conv2D(num_priors * 4, kernel_size=(3,3),padding=&#39;same&#39;,name=&#39;fc7_mbox_loc&#39;)(net[&#39;fc7&#39;])\n  net[&#39;fc7_mbox_loc_flat&#39;] = Flatten(name=&#39;fc7_mbox_loc_flat&#39;)(net[&#39;fc7_mbox_loc&#39;])\n  # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n  net[&#39;fc7_mbox_conf&#39;] = Conv2D(num_priors * num_classes, kernel_size=(3,3),padding=&#39;same&#39;,name=&#39;fc7_mbox_conf&#39;)(net[&#39;fc7&#39;])\n  net[&#39;fc7_mbox_conf_flat&#39;] = Flatten(name=&#39;fc7_mbox_conf_flat&#39;)(net[&#39;fc7_mbox_conf&#39;])\n\n  priorbox = PriorBox(img_size, 60.0, max_size=111.0, aspect_ratios=[2, 3],\n                      variances=[0.1, 0.1, 0.2, 0.2],\n                      name=&#39;fc7_mbox_priorbox&#39;)\n  net[&#39;fc7_mbox_priorbox&#39;] = priorbox(net[&#39;fc7&#39;])\n\n  # 对conv6_2进行处理\n  num_priors = 6\n  # 预测框的处理\n  # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n  x = Conv2D(num_priors * 4, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv6_2_mbox_loc&#39;)(net[&#39;conv6_2&#39;])\n  net[&#39;conv6_2_mbox_loc&#39;] = x\n  net[&#39;conv6_2_mbox_loc_flat&#39;] = Flatten(name=&#39;conv6_2_mbox_loc_flat&#39;)(net[&#39;conv6_2_mbox_loc&#39;])\n  # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n  x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv6_2_mbox_conf&#39;)(net[&#39;conv6_2&#39;])\n  net[&#39;conv6_2_mbox_conf&#39;] = x\n  net[&#39;conv6_2_mbox_conf_flat&#39;] = Flatten(name=&#39;conv6_2_mbox_conf_flat&#39;)(net[&#39;conv6_2_mbox_conf&#39;])\n\n  priorbox = PriorBox(img_size, 111.0, max_size=162.0, aspect_ratios=[2, 3],\n                      variances=[0.1, 0.1, 0.2, 0.2],\n                      name=&#39;conv6_2_mbox_priorbox&#39;)\n  net[&#39;conv6_2_mbox_priorbox&#39;] = priorbox(net[&#39;conv6_2&#39;])\n\n  # 对conv7_2进行处理\n  num_priors = 6\n  # 预测框的处理\n  # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n  x = Conv2D(num_priors * 4, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv7_2_mbox_loc&#39;)(net[&#39;conv7_2&#39;])\n  net[&#39;conv7_2_mbox_loc&#39;] = x\n  net[&#39;conv7_2_mbox_loc_flat&#39;] = Flatten(name=&#39;conv7_2_mbox_loc_flat&#39;)(net[&#39;conv7_2_mbox_loc&#39;])\n  # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n  x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv7_2_mbox_conf&#39;)(net[&#39;conv7_2&#39;])\n  net[&#39;conv7_2_mbox_conf&#39;] = x\n  net[&#39;conv7_2_mbox_conf_flat&#39;] = Flatten(name=&#39;conv7_2_mbox_conf_flat&#39;)(net[&#39;conv7_2_mbox_conf&#39;])\n\n  priorbox = PriorBox(img_size, 162.0, max_size=213.0, aspect_ratios=[2, 3],\n                      variances=[0.1, 0.1, 0.2, 0.2],\n                      name=&#39;conv7_2_mbox_priorbox&#39;)\n  net[&#39;conv7_2_mbox_priorbox&#39;] = priorbox(net[&#39;conv7_2&#39;])\n\n  # 对conv8_2进行处理\n  num_priors = 4\n  # 预测框的处理\n  # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n  x = Conv2D(num_priors * 4, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv8_2_mbox_loc&#39;)(net[&#39;conv8_2&#39;])\n  net[&#39;conv8_2_mbox_loc&#39;] = x\n  net[&#39;conv8_2_mbox_loc_flat&#39;] = Flatten(name=&#39;conv8_2_mbox_loc_flat&#39;)(net[&#39;conv8_2_mbox_loc&#39;])\n  # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n  x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv8_2_mbox_conf&#39;)(net[&#39;conv8_2&#39;])\n  net[&#39;conv8_2_mbox_conf&#39;] = x\n  net[&#39;conv8_2_mbox_conf_flat&#39;] = Flatten(name=&#39;conv8_2_mbox_conf_flat&#39;)(net[&#39;conv8_2_mbox_conf&#39;])\n\n  priorbox = PriorBox(img_size, 213.0, max_size=264.0, aspect_ratios=[2],\n                      variances=[0.1, 0.1, 0.2, 0.2],\n                      name=&#39;conv8_2_mbox_priorbox&#39;)\n  net[&#39;conv8_2_mbox_priorbox&#39;] = priorbox(net[&#39;conv8_2&#39;])\n\n  # 对conv9_2进行处理\n  num_priors = 4\n  # 预测框的处理\n  # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n  x = Conv2D(num_priors * 4, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv9_2_mbox_loc&#39;)(net[&#39;conv9_2&#39;])\n  net[&#39;conv9_2_mbox_loc&#39;] = x\n  net[&#39;conv9_2_mbox_loc_flat&#39;] = Flatten(name=&#39;conv9_2_mbox_loc_flat&#39;)(net[&#39;conv9_2_mbox_loc&#39;])\n  # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n  x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv9_2_mbox_conf&#39;)(net[&#39;conv9_2&#39;])\n  net[&#39;conv9_2_mbox_conf&#39;] = x\n  net[&#39;conv9_2_mbox_conf_flat&#39;] = Flatten(name=&#39;conv9_2_mbox_conf_flat&#39;)(net[&#39;conv9_2_mbox_conf&#39;])\n\n  priorbox = PriorBox(img_size, 264.0, max_size=315.0, aspect_ratios=[2],\n                      variances=[0.1, 0.1, 0.2, 0.2],\n                      name=&#39;conv9_2_mbox_priorbox&#39;)\n\n  net[&#39;conv9_2_mbox_priorbox&#39;] = priorbox(net[&#39;conv9_2&#39;])\n\n  # 将所有结果进行堆叠\n  net[&#39;mbox_loc&#39;] = concatenate([net[&#39;conv4_3_norm_mbox_loc_flat&#39;],\n                           net[&#39;fc7_mbox_loc_flat&#39;],\n                           net[&#39;conv6_2_mbox_loc_flat&#39;],\n                           net[&#39;conv7_2_mbox_loc_flat&#39;],\n                           net[&#39;conv8_2_mbox_loc_flat&#39;],\n                           net[&#39;conv9_2_mbox_loc_flat&#39;]],\n                          axis=1, name=&#39;mbox_loc&#39;)\n  net[&#39;mbox_conf&#39;] = concatenate([net[&#39;conv4_3_norm_mbox_conf_flat&#39;],\n                            net[&#39;fc7_mbox_conf_flat&#39;],\n                            net[&#39;conv6_2_mbox_conf_flat&#39;],\n                            net[&#39;conv7_2_mbox_conf_flat&#39;],\n                            net[&#39;conv8_2_mbox_conf_flat&#39;],\n                            net[&#39;conv9_2_mbox_conf_flat&#39;]],\n                           axis=1, name=&#39;mbox_conf&#39;)\n  # 先验框的位置和辅助变量\n  net[&#39;mbox_priorbox&#39;] = concatenate([net[&#39;conv4_3_norm_mbox_priorbox&#39;],\n                                net[&#39;fc7_mbox_priorbox&#39;],\n                                net[&#39;conv6_2_mbox_priorbox&#39;],\n                                net[&#39;conv7_2_mbox_priorbox&#39;],\n                                net[&#39;conv8_2_mbox_priorbox&#39;],\n                                net[&#39;conv9_2_mbox_priorbox&#39;]],\n                                axis=1, name=&#39;mbox_priorbox&#39;)\n\n  if hasattr(net[&#39;mbox_loc&#39;], &#39;_keras_shape&#39;):\n      num_boxes = net[&#39;mbox_loc&#39;]._keras_shape[-1] // 4\n  elif hasattr(net[&#39;mbox_loc&#39;], &#39;int_shape&#39;):\n      num_boxes = K.int_shape(net[&#39;mbox_loc&#39;])[-1] // 4\n  # 预期位置\n  net[&#39;mbox_loc&#39;] = Reshape((num_boxes, 4),name=&#39;mbox_loc_final&#39;)(net[&#39;mbox_loc&#39;])\n  # 分类结果\n  net[&#39;mbox_conf&#39;] = Reshape((num_boxes, num_classes),name=&#39;mbox_conf_logits&#39;)(net[&#39;mbox_conf&#39;])\n  net[&#39;mbox_conf&#39;] = Activation(&#39;softmax&#39;,name=&#39;mbox_conf_final&#39;)(net[&#39;mbox_conf&#39;])\n\n  net[&#39;predictions&#39;] = concatenate([net[&#39;mbox_loc&#39;],\n                             net[&#39;mbox_conf&#39;],\n                             net[&#39;mbox_priorbox&#39;]],\n                             axis=2, name=&#39;predictions&#39;)\n  print(net[&#39;predictions&#39;])\n  model = Model(net[&#39;input&#39;], net[&#39;predictions&#39;])\n  return model</code></pre>\n</li>\n</ul>\n<h3 id=\"先验框编码与解码\"><a href=\"#先验框编码与解码\" class=\"headerlink\" title=\"先验框编码与解码\"></a>先验框编码与解码</h3><p>针对先验框的编码过程，即计算net{‘mbox_loc’}——先验框的预期位置。</p>\n<ul>\n<li>找到与真实框重合度高于某个阈值（如0.5）的所有先验框</li>\n<li>根据先验框匹配的真实框进行编码得到预期位置</li>\n<li>然后根据one-hot编码，将目标类别进行编码</li>\n<li>最后的先验框原始位置和variances值不需要进行提取，只添加一个是否包含物体的判断值即可，用于loss计算</li>\n</ul>\n<pre><code class=\"python\">    def encode_box(self, box, return_iou=True):\n        iou = self.iou(box)\n        encoded_box = np.zeros((self.num_priors, 4 + return_iou))\n\n        # 找到每一个真实框，重合程度较高的先验框\n        assign_mask = iou &gt; self.overlap_threshold\n        if not assign_mask.any():\n            assign_mask[iou.argmax()] = True\n        if return_iou:\n            encoded_box[:, -1][assign_mask] = iou[assign_mask]\n\n        # 找到对应的先验框\n        assigned_priors = self.priors[assign_mask]\n        # 逆向编码，将真实框转化为ssd预测结果的格式\n\n        # 先计算真实框的中心与长宽\n        box_center = 0.5 * (box[:2] + box[2:])\n        box_wh = box[2:] - box[:2]\n        # 再计算重合度较高的先验框的中心与长宽\n        assigned_priors_center = 0.5 * (assigned_priors[:, :2] +\n                                        assigned_priors[:, 2:4])\n        assigned_priors_wh = (assigned_priors[:, 2:4] -\n                                assigned_priors[:, :2])\n\n        # 逆向求取ssd应该有的预测结果\n        encoded_box[:, :2][assign_mask] = box_center - assigned_priors_center\n        encoded_box[:, :2][assign_mask] /= assigned_priors_wh\n        # 除以0.1\n        encoded_box[:, :2][assign_mask] /= assigned_priors[:, -4:-2]\n\n        encoded_box[:, 2:4][assign_mask] = np.log(box_wh / assigned_priors_wh)\n        # 除以0.2\n        encoded_box[:, 2:4][assign_mask] /= assigned_priors[:, -2:]\n        return encoded_box.ravel()\n    def assign_boxes(self, boxes):\n        #---------------------------------------------------#\n        #   assignment分为3个部分\n        #   :4      的内容为网络应该有的回归预测结果\n        #   4:-8    的内容为先验框所对应的种类，默认为背景\n        #   -8      的内容为当前先验框是否包含目标\n        #   -7:     无意义\n        #---------------------------------------------------#\n        assignment = np.zeros((self.num_priors, 4 + self.num_classes + 8))\n        assignment[:, 4] = 1.0\n        if len(boxes) == 0:\n            return assignment\n\n        # 对每一个真实框都进行iou计算\n        encoded_boxes = np.apply_along_axis(self.encode_box, 1, boxes[:, :4])\n        #---------------------------------------------------#\n        #   在reshape后，获得的encoded_boxes的shape为：\n        #   [num_true_box, num_priors, 4+1]\n        #   4是编码后的结果，1为iou\n        #---------------------------------------------------#\n        encoded_boxes = encoded_boxes.reshape(-1, self.num_priors, 5)\n\n        #---------------------------------------------------#\n        #   [num_priors]求取每一个先验框重合度最大的真实框\n        #---------------------------------------------------#\n        best_iou = encoded_boxes[:, :, -1].max(axis=0)\n        best_iou_idx = encoded_boxes[:, :, -1].argmax(axis=0)\n        best_iou_mask = best_iou &gt; 0\n        best_iou_idx = best_iou_idx[best_iou_mask]\n\n        #---------------------------------------------------#\n        #   计算一共有多少先验框满足需求\n        #---------------------------------------------------#\n        assign_num = len(best_iou_idx)\n\n        # 将编码后的真实框取出\n        encoded_boxes = encoded_boxes[:, best_iou_mask, :]\n        assignment[:, :4][best_iou_mask] = encoded_boxes[best_iou_idx,np.arange(assign_num),:4]\n        #----------------------------------------------------------#\n        #   4代表为背景的概率，设定为0，因为这些先验框有对应的物体\n        #----------------------------------------------------------#\n        assignment[:, 4][best_iou_mask] = 0\n        assignment[:, 5:-8][best_iou_mask] = boxes[best_iou_idx, 4:]\n        #----------------------------------------------------------#\n        #   -8表示先验框是否有对应的物体\n        #----------------------------------------------------------#\n        assignment[:, -8][best_iou_mask] = 1\n        # 通过assign_boxes我们就获得了，输入进来的这张图片，应该有的预测结果是什么样子的\n        return assignment</code></pre>\n<h3 id=\"loss计算\"><a href=\"#loss计算\" class=\"headerlink\" title=\"loss计算\"></a>loss计算</h3><p>在loss计算过程中，由于SSD可能导致正负样本的不平衡而增加的训练难度，所以一般在计算loss时，通常取1：3的正负样本比例，同意注意:预测值的前四位是预期位置信息，第五位到倒数第八位是类别信息，后面是先验框的原始位置信息。</p>\n<pre><code class=\"python\">class MultiboxLoss(object):\n    def __init__(self, num_classes, alpha=1.0, neg_pos_ratio=3.0,\n                 background_label_id=0, negatives_for_hard=100.0):\n        self.num_classes = num_classes\n        self.alpha = alpha\n        self.neg_pos_ratio = neg_pos_ratio\n        if background_label_id != 0:\n            raise Exception(&#39;Only 0 as background label id is supported&#39;)\n        self.background_label_id = background_label_id\n        self.negatives_for_hard = negatives_for_hard\n\n    def _l1_smooth_loss(self, y_true, y_pred):\n        abs_loss = tf.abs(y_true - y_pred)\n        sq_loss = 0.5 * (y_true - y_pred)**2\n        l1_loss = tf.where(tf.less(abs_loss, 1.0), sq_loss, abs_loss - 0.5)\n        return tf.reduce_sum(l1_loss, -1)\n\n    def _softmax_loss(self, y_true, y_pred):\n        y_pred = tf.maximum(tf.minimum(y_pred, 1 - 1e-15), 1e-15)\n        softmax_loss = -tf.reduce_sum(y_true * tf.log(y_pred),\n                                      axis=-1)\n        return softmax_loss\n\n    def compute_loss(self, y_true, y_pred):\n        batch_size = tf.shape(y_true)[0]\n        num_boxes = tf.to_float(tf.shape(y_true)[1])\n\n        # 计算所有的loss\n        # 分类的loss\n        # batch_size,8732,21 -&gt; batch_size,8732\n        conf_loss = self._softmax_loss(y_true[:, :, 4:-8],\n                                       y_pred[:, :, 4:-8])\n        # 框的位置的loss\n        # batch_size,8732,4 -&gt; batch_size,8732\n        loc_loss = self._l1_smooth_loss(y_true[:, :, :4],\n                                        y_pred[:, :, :4])\n\n        # 获取所有的正标签的loss\n        # 每一张图的pos的个数\n        num_pos = tf.reduce_sum(y_true[:, :, -8], axis=-1)\n        # 每一张图的pos_loc_loss\n        pos_loc_loss = tf.reduce_sum(loc_loss * y_true[:, :, -8],\n                                     axis=1)\n        # 每一张图的pos_conf_loss\n        pos_conf_loss = tf.reduce_sum(conf_loss * y_true[:, :, -8],\n                                      axis=1)\n\n        # 获取一定的负样本\n        num_neg = tf.minimum(self.neg_pos_ratio * num_pos,\n                             num_boxes - num_pos)\n\n        # 找到了哪些值是大于0的\n        pos_num_neg_mask = tf.greater(num_neg, 0)\n        # 获得一个1.0\n        has_min = tf.to_float(tf.reduce_any(pos_num_neg_mask))\n        num_neg = tf.concat( axis=0,values=[num_neg,\n                                [(1 - has_min) * self.negatives_for_hard]])\n        # 求平均每个图片要取多少个负样本\n        num_neg_batch = tf.reduce_mean(tf.boolean_mask(num_neg,\n                                                      tf.greater(num_neg, 0)))\n        num_neg_batch = tf.to_int32(num_neg_batch)\n\n        # conf的起始\n        confs_start = 4 + self.background_label_id + 1\n        # conf的结束\n        confs_end = confs_start + self.num_classes - 1\n\n        # 找到实际上在该位置不应该有预测结果的框，求他们最大的置信度。\n        max_confs = tf.reduce_max(y_pred[:, :, confs_start:confs_end],\n                                  axis=2)\n\n        # 取top_k个置信度，作为负样本\n        _, indices = tf.nn.top_k(max_confs * (1 - y_true[:, :, -8]),\n                                 k=num_neg_batch)\n\n        # 找到其在1维上的索引\n        batch_idx = tf.expand_dims(tf.range(0, batch_size), 1)\n        batch_idx = tf.tile(batch_idx, (1, num_neg_batch))\n        full_indices = (tf.reshape(batch_idx, [-1]) * tf.to_int32(num_boxes) +\n                        tf.reshape(indices, [-1]))\n\n\n        neg_conf_loss = tf.gather(tf.reshape(conf_loss, [-1]),\n                                  full_indices)\n        neg_conf_loss = tf.reshape(neg_conf_loss,\n                                   [batch_size, num_neg_batch])\n        neg_conf_loss = tf.reduce_sum(neg_conf_loss, axis=1)\n\n        # 求loss总和\n        total_loss = K.sum(pos_conf_loss + neg_conf_loss)/K.cast(batch_size,K.dtype(pos_conf_loss))\n\n        total_loss +=  K.sum(self.alpha * pos_loc_loss)/K.cast(batch_size,K.dtype(pos_loc_loss))\n        return total_loss\n</code></pre>\n<p>至此，所有关于SSD的关键部分就讲解完了，后续会陆续更新其他算法。</p>\n"},{"title":"MobileNet","date":"2021-04-20T12:17:00.000Z","top":true,"cover":true,"_content":"\n## 深度学习神经网络特征提取（三）\n\n### MobileNet简介\n\n在之前的文章中已经介绍了`VGG`和`ResNet`相关的网络结构，随着深度学习的发展，都在追求精度和准确性，因此也导致了网络层数的加深抑或网络的扩展。然而随着网络的不断加深和扩展，参数的数量也在急剧上升，从而导致性能的下降。`MobileNet`的出现也正是为了解决这种情况。\n\n### MobileNetv1\n\n`MobileNetv1`网络特点主要集中于提出的深度可分离卷积，其网络结构部分只是线性连接，如下图所示。\n\n![MobileNetv1](http://39.105.26.229:4567/20191030153845940.png)\n\n#### 深度可分离卷积\n\n介绍深度可分离卷积，那我们不得不与常规的卷积进行对比，常规的卷积操作如下图。\n\n![常规卷积](http://39.105.26.229:4567/v2-617b082492f5c1c31bde1c6e2d994bc0_720w.jpg)\n\n对于一张通道数为3，长宽为5的输入图像，经过3x3的卷积核，且输出层数为4的卷积时，其卷积核的真实情况如上图，在此种情况下参数量为：4x3x3x3=108。\n而在深度可分离卷积中，我们进行同样的3x3的卷积核，且输出层数为4的卷积时，其操作情况如下两张图片。\n\n![图1](http://39.105.26.229:4567/v2-a20824492e3e8778a959ca3731dfeea3_720w.jpg)\n![图2](http://39.105.26.229:4567/v2-2cdae9b3ad2f1d07e2c738331dac6d8b_720w.jpg)\n\n在深度可分离卷积中，首先通过N个3x3的卷积核（其中N为输入的层数，在图一中N为3）与输入层数一一对应进行特征提取，然后再通过M个1xN的卷积进行层数的缩放（图2）。在这种情况下，参数量为：3x3x3+1x1x3x4=39。相较于常规卷积操作，深度可分离卷积的参数量下降了很多，大大提高了模型的运行性能，并且对最终的结果的精确度影响并不是很高。\n\n#### MobileNetv1的网络结构\n\n在上图中，我们给出了`MobileNetv1`的网络结构，主要处理流程为：\n- （步长为2的卷积和归一化）x 1\n- （步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化，步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 3\n- （步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化）x 5\n- （步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 2\n- 一次7x7平均池化，一层全连接层\n- 最后softmax层\n\n代码如下：\n```python\n#-------------------------------------------------------------#\n#   MobileNet的网络部分\n#-------------------------------------------------------------#\ndef MobileNet(input_shape=[224,224,3], depth_multiplier=1, dropout=1e-3, classes=1000):\n    img_input = Input(shape=input_shape)\n\n    # 224,224,3 -> 112,112,32\n    x = _conv_block(img_input, 32, strides=(2, 2))\n\n    # 112,112,32 -> 112,112,64\n    x = _depthwise_conv_block(x, 64, depth_multiplier, block_id=1)\n\n    # 112,112,64 -> 56,56,128\n    x = _depthwise_conv_block(x, 128, depth_multiplier, strides=(2, 2), block_id=2)\n    # 56,56,128 -> 56,56,128\n    x = _depthwise_conv_block(x, 128, depth_multiplier, block_id=3)\n\n    # 56,56,128 -> 28,28,256\n    x = _depthwise_conv_block(x, 256, depth_multiplier, strides=(2, 2), block_id=4)\n    \n    # 28,28,256 -> 28,28,256\n    x = _depthwise_conv_block(x, 256, depth_multiplier, block_id=5)\n\n    # 28,28,256 -> 14,14,512\n    x = _depthwise_conv_block(x, 512, depth_multiplier, strides=(2, 2), block_id=6)\n    \n    # 14,14,512 -> 14,14,512\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=7)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=8)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=9)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=10)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=11)\n\n    # 14,14,512 -> 7,7,1024\n    x = _depthwise_conv_block(x, 1024, depth_multiplier, strides=(2, 2), block_id=12)\n    x = _depthwise_conv_block(x, 1024, depth_multiplier, block_id=13)\n\n    # 7,7,1024 -> 1,1,1024\n    x = GlobalAveragePooling2D()(x)\n    x = Reshape((1, 1, 1024), name='reshape_1')(x)\n    x = Dropout(dropout, name='dropout')(x)\n    x = Conv2D(classes, (1, 1),padding='same', name='conv_preds')(x)\n    x = Activation('softmax', name='act_softmax')(x)\n    x = Reshape((classes,), name='reshape_2')(x)\n\n    inputs = img_input\n\n    model = Model(inputs, x, name='mobilenet_1_0_224_tf')\n    return model\n\ndef _conv_block(inputs, filters, kernel=(3, 3), strides=(1, 1)):\n    x = Conv2D(filters, kernel, padding='same', use_bias=False, strides=strides, name='conv1')(inputs)\n    x = BatchNormalization(name='conv1_bn')(x)\n    return Activation(relu6, name='conv1_relu')(x)\n\n\ndef _depthwise_conv_block(inputs, pointwise_conv_filters, depth_multiplier=1, strides=(1, 1), block_id=1):\n\n    x = DepthwiseConv2D((3, 3), padding='same', depth_multiplier=depth_multiplier, strides=strides, use_bias=False, name='conv_dw_%d' % block_id)(inputs)\n\n    x = BatchNormalization(name='conv_dw_%d_bn' % block_id)(x)\n    x = Activation(relu6, name='conv_dw_%d_relu' % block_id)(x)\n\n    x = Conv2D(pointwise_conv_filters, (1, 1), padding='same', use_bias=False, strides=(1, 1), name='conv_pw_%d' % block_id)(x)\n    x = BatchNormalization(name='conv_pw_%d_bn' % block_id)(x)\n    return Activation(relu6, name='conv_pw_%d_relu' % block_id)(x)\n\ndef relu6(x):\n    return K.relu(x, max_value=6)\n```\n\n### MobileNetv2\n\n`MobileNetv2`网络特点相较于`MobileNetv1`提出了反残差结构和线性瓶颈结构，总体网络结构如下图所示。\n\n![MobileNetv2](http://39.105.26.229:4567/20191101094224444.png)\n\n#### 反残差结构和线性瓶颈结构\n\n反残差结构是相对于ResNet50而言的，此外MobileNetv2的基础结构和ResNet的基础结构一样，同样是双分支残差连接：\n\n![结构对比](http://39.105.26.229:4567/201911131056046.png)\n![基础结构](http://39.105.26.229:4567/v2-38bcaaee3e9e28611ecc984727e6d598_720w.png)\n\n其中ResNet50中先卷积降维，然后进行3x3卷积提取特征，然后在进行升维，这样做在实际中部证明是比直接3x3卷积效果更好的。而在`MobileNetv2`中，反向进行操作。\n而所谓的线性瓶颈结构则是在卷积降维之后不再进行`ReLu6`层激活，保证提取得到的特征不被破坏，直接与输入相加。\n\n#### MobileNetv2的网络结构\n\n在上图中，我们给出了`MobileNetv2`的网络结构，主要处理流程为：\n- 步长为2的卷积层 x 1\n- 步长为1的瓶颈层 x 1\n- 步长为2的瓶颈层 x 3\n- 步长为1的瓶颈层 x 1\n- 步长为2的瓶颈层 x 1\n- 步长为1的瓶颈层 x 1\n- 步长为1的卷积层 x 1\n- 7x7 平均池化层 x 1\n- 全连接层softmax分类\n\n代码如下：\n```python\n#-------------------------------------------------------------#\n#   MobileNetV2的网络部分\n#-------------------------------------------------------------#\n# relu6！\ndef relu6(x):\n    return K.relu(x, max_value=6)\n\n\ndef MobileNetV2(input_shape=[224,224,3], classes=1000):\n\n    img_input = Input(shape=input_shape)\n\n    # 224,224,3 -> 112,112,32\n    x = ZeroPadding2D(padding=(1, 1), name='Conv1_pad')(img_input)\n    x = Conv2D(32, kernel_size=3, strides=(2, 2), padding='valid', use_bias=False, name='Conv1')(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name='bn_Conv1')(x)\n    x = Activation(relu6, name='Conv1_relu')(x)\n\n    # 112,112,32 -> 112,112,16\n    x = _inverted_res_block(x, filters=16, stride=1,expansion=1, block_id=0)\n\n    # 112,112,16 -> 56,56,24\n    x = _inverted_res_block(x, filters=24, stride=2, expansion=6, block_id=1)\n    x = _inverted_res_block(x, filters=24, stride=1, expansion=6, block_id=2)\n\n    # 56,56,24 -> 28,28,32\n    x = _inverted_res_block(x, filters=32, stride=2, expansion=6, block_id=3)\n    x = _inverted_res_block(x, filters=32, stride=1, expansion=6, block_id=4)\n    x = _inverted_res_block(x, filters=32, stride=1, expansion=6, block_id=5)\n\n    # 28,28,32 -> 14,14,64\n    x = _inverted_res_block(x, filters=64, stride=2, expansion=6, block_id=6)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=7)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=8)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=9)\n\n    # 14,14,64 -> 14,14,96\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=10)\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=11)\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=12)\n    # 14,14,96 -> 7,7,160\n    x = _inverted_res_block(x, filters=160, stride=2, expansion=6, block_id=13)\n    x = _inverted_res_block(x, filters=160, stride=1, expansion=6, block_id=14)\n    x = _inverted_res_block(x, filters=160, stride=1, expansion=6, block_id=15)\n\n    # 7,7,160 -> 7,7,320\n    x = _inverted_res_block(x, filters=320, stride=1, expansion=6, block_id=16)\n\n    # 7,7,320 -> 7,7,1280\n    x = Conv2D(1280, kernel_size=1, use_bias=False, name='Conv_1')(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name='Conv_1_bn')(x)\n    x = Activation(relu6, name='out_relu')(x)\n\n    x = GlobalAveragePooling2D()(x)\n    x = Dense(classes, activation='softmax', use_bias=True, name='Logits')(x)\n\n    inputs = img_input\n\n    model = Model(inputs, x)\n\n    return model\n\n\ndef _inverted_res_block(inputs, expansion, stride, pointwise_filters, block_id):\n    in_channels = backend.int_shape(inputs)[-1]\n    x = inputs\n    prefix = 'block_{}_'.format(block_id)\n\n    # part1 数据扩张\n    if block_id:\n        # Expand\n        x = Conv2D(expansion * in_channels, kernel_size=1, padding='same', use_bias=False, activation=None, name=prefix + 'expand')(x)\n        x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + 'expand_BN')(x)\n        x = Activation(relu6, name=prefix + 'expand_relu')(x)\n    else:\n        prefix = 'expanded_conv_'\n\n    if stride == 2:\n        x = ZeroPadding2D(padding=(1,1), name=prefix + 'pad')(x)\n    \n    # part2 可分离卷积\n    x = DepthwiseConv2D(kernel_size=3, strides=stride, activation=None, use_bias=False, padding='same' if stride == 1 else 'valid', name=prefix + 'depthwise')(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + 'depthwise_BN')(x)\n\n    x = Activation(relu6, name=prefix + 'depthwise_relu')(x)\n\n    # part3压缩特征，而且不使用relu函数，保证特征不被破坏\n    x = Conv2D(pointwise_filters, kernel_size=1, padding='same', use_bias=False, activation=None, name=prefix + 'project')(x)\n\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + 'project_BN')(x)\n\n    if in_channels == pointwise_filters and stride == 1:\n        return Add(name=prefix + 'add')([inputs, x])\n    return x\n```\n\n### MobileNetv3\n\n`MobileNetv3`网络特点相较于`MobileNetv2`主要添加了以下特点：\n\n- 轻量级的注意力机制\n- 利用h-swish代替swish函数\n\n主要网络结构有两种，一种large，一种small，主要区别在于通道数和基础块的次数，本文介绍small类型，网络结构如下：\n\n![MobileNetv3](http://39.105.26.229:4567/20200122140810351.png)\n\n#### 轻量级注意力机制引入\n\n在`MobileNetv3`中，由于轻量级注意力机制的引入，使得原来的基础块结构产生了一些变化，新的结构如图所示:\n\n![MobileNetv3 block](http://39.105.26.229:4567/20200122110008244.png)\n\n从上图我们可以直观的感受到，轻量级注意力机制的引入主要用于改变各个特征层之间的权重系数。\n相信通过前面代码的学习你对特征提取的网络已经有了一定的了解，那么下面的代码就很容易理解了。\n代码如下：\n```python\nalpha = 1\ndef relu6(x):\n    # relu函数\n    return K.relu(x, max_value=6.0)\n\ndef hard_swish(x):\n    # 利用relu函数乘上x模拟sigmoid\n    return x * K.relu(x + 3.0, max_value=6.0) / 6.0\n\ndef return_activation(x, nl):\n    # 用于判断使用哪个激活函数\n    if nl == 'HS':\n        x = Activation(hard_swish)(x)\n    if nl == 'RE':\n        x = Activation(relu6)(x)\n\n    return x\n\ndef conv_block(inputs, filters, kernel, strides, nl):\n    # 一个卷积单元，也就是conv2d + batchnormalization + activation\n    channel_axis = 1 if K.image_data_format() == 'channels_first' else -1\n\n    x = Conv2D(filters, kernel, padding='same', strides=strides)(inputs)\n    x = BatchNormalization(axis=channel_axis)(x)\n\n    return return_activation(x, nl)\n\ndef squeeze(inputs):\n    # 注意力机制单元\n    input_channels = int(inputs.shape[-1])\n\n    x = GlobalAveragePooling2D()(inputs)\n    x = Dense(int(input_channels/4))(x)\n    x = Activation(relu6)(x)\n    x = Dense(input_channels)(x)\n    x = Activation(hard_swish)(x)\n    x = Reshape((1, 1, input_channels))(x)\n    x = Multiply()([inputs, x])\n\n    return x\n\ndef bottleneck(inputs, filters, kernel, up_dim, stride, sq, nl):\n    channel_axis = 1 if K.image_data_format() == 'channels_first' else -1\n\n    input_shape = K.int_shape(inputs)\n\n    tchannel = int(up_dim)\n    cchannel = int(alpha * filters)\n\n    r = stride == 1 and input_shape[3] == filters\n    # 1x1卷积调整通道数，通道数上升\n    x = conv_block(inputs, tchannel, (1, 1), (1, 1), nl)\n    # 进行3x3深度可分离卷积\n    x = DepthwiseConv2D(kernel, strides=(stride, stride), depth_multiplier=1, padding='same')(x)\n    x = BatchNormalization(axis=channel_axis)(x)\n    x = return_activation(x, nl)\n    # 引入注意力机制\n    if sq:\n        x = squeeze(x)\n    # 下降通道数\n    x = Conv2D(cchannel, (1, 1), strides=(1, 1), padding='same')(x)\n    x = BatchNormalization(axis=channel_axis)(x)\n\n\n    if r:\n        x = Add()([x, inputs])\n\n    return x\n\ndef MobileNetv3_small(shape = (224,224,3),n_class = 1000):\n    inputs = Input(shape)\n    # 224,224,3 -> 112,112,16\n    x = conv_block(inputs, 16, (3, 3), strides=(2, 2), nl='HS')\n\n    # 112,112,16 -> 56,56,16\n    x = bottleneck(x, 16, (3, 3), up_dim=16, stride=2, sq=True, nl='RE')\n\n    # 56,56,16 -> 28,28,24\n    x = bottleneck(x, 24, (3, 3), up_dim=72, stride=2, sq=False, nl='RE')\n    x = bottleneck(x, 24, (3, 3), up_dim=88, stride=1, sq=False, nl='RE')\n    \n    # 28,28,24 -> 14,14,40\n    x = bottleneck(x, 40, (5, 5), up_dim=96, stride=2, sq=True, nl='HS')\n    x = bottleneck(x, 40, (5, 5), up_dim=240, stride=1, sq=True, nl='HS')\n    x = bottleneck(x, 40, (5, 5), up_dim=240, stride=1, sq=True, nl='HS')\n    # 14,14,40 -> 14,14,48\n    x = bottleneck(x, 48, (5, 5), up_dim=120, stride=1, sq=True, nl='HS')\n    x = bottleneck(x, 48, (5, 5), up_dim=144, stride=1, sq=True, nl='HS')\n\n    # 14,14,48 -> 7,7,96\n    x = bottleneck(x, 96, (5, 5), up_dim=288, stride=2, sq=True, nl='HS')\n    x = bottleneck(x, 96, (5, 5), up_dim=576, stride=1, sq=True, nl='HS')\n    x = bottleneck(x, 96, (5, 5), up_dim=576, stride=1, sq=True, nl='HS')\n\n    x = conv_block(x, 576, (1, 1), strides=(1, 1), nl='HS')\n    x = GlobalAveragePooling2D()(x)\n    x = Reshape((1, 1, 576))(x)\n\n    x = Conv2D(1024, (1, 1), padding='same')(x)\n    x = return_activation(x, 'HS')\n\n    x = Conv2D(n_class, (1, 1), padding='same', activation='softmax')(x)\n    x = Reshape((n_class,))(x)\n\n    model = Model(inputs, x)\n\n    return model\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/feature_extractor/mobilenet.md","raw":"---\ntitle: MobileNet\ndate: 2021-04-20 20:17:00\ntop: true\ncover: true\ncategories:\n- Deep Learning\ntags:\n- MobileNetv1\n- MobileNetv2\n- MobileNetv3\n- Fanrencli\n---\n\n## 深度学习神经网络特征提取（三）\n\n### MobileNet简介\n\n在之前的文章中已经介绍了`VGG`和`ResNet`相关的网络结构，随着深度学习的发展，都在追求精度和准确性，因此也导致了网络层数的加深抑或网络的扩展。然而随着网络的不断加深和扩展，参数的数量也在急剧上升，从而导致性能的下降。`MobileNet`的出现也正是为了解决这种情况。\n\n### MobileNetv1\n\n`MobileNetv1`网络特点主要集中于提出的深度可分离卷积，其网络结构部分只是线性连接，如下图所示。\n\n![MobileNetv1](http://39.105.26.229:4567/20191030153845940.png)\n\n#### 深度可分离卷积\n\n介绍深度可分离卷积，那我们不得不与常规的卷积进行对比，常规的卷积操作如下图。\n\n![常规卷积](http://39.105.26.229:4567/v2-617b082492f5c1c31bde1c6e2d994bc0_720w.jpg)\n\n对于一张通道数为3，长宽为5的输入图像，经过3x3的卷积核，且输出层数为4的卷积时，其卷积核的真实情况如上图，在此种情况下参数量为：4x3x3x3=108。\n而在深度可分离卷积中，我们进行同样的3x3的卷积核，且输出层数为4的卷积时，其操作情况如下两张图片。\n\n![图1](http://39.105.26.229:4567/v2-a20824492e3e8778a959ca3731dfeea3_720w.jpg)\n![图2](http://39.105.26.229:4567/v2-2cdae9b3ad2f1d07e2c738331dac6d8b_720w.jpg)\n\n在深度可分离卷积中，首先通过N个3x3的卷积核（其中N为输入的层数，在图一中N为3）与输入层数一一对应进行特征提取，然后再通过M个1xN的卷积进行层数的缩放（图2）。在这种情况下，参数量为：3x3x3+1x1x3x4=39。相较于常规卷积操作，深度可分离卷积的参数量下降了很多，大大提高了模型的运行性能，并且对最终的结果的精确度影响并不是很高。\n\n#### MobileNetv1的网络结构\n\n在上图中，我们给出了`MobileNetv1`的网络结构，主要处理流程为：\n- （步长为2的卷积和归一化）x 1\n- （步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化，步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 3\n- （步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化）x 5\n- （步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 2\n- 一次7x7平均池化，一层全连接层\n- 最后softmax层\n\n代码如下：\n```python\n#-------------------------------------------------------------#\n#   MobileNet的网络部分\n#-------------------------------------------------------------#\ndef MobileNet(input_shape=[224,224,3], depth_multiplier=1, dropout=1e-3, classes=1000):\n    img_input = Input(shape=input_shape)\n\n    # 224,224,3 -> 112,112,32\n    x = _conv_block(img_input, 32, strides=(2, 2))\n\n    # 112,112,32 -> 112,112,64\n    x = _depthwise_conv_block(x, 64, depth_multiplier, block_id=1)\n\n    # 112,112,64 -> 56,56,128\n    x = _depthwise_conv_block(x, 128, depth_multiplier, strides=(2, 2), block_id=2)\n    # 56,56,128 -> 56,56,128\n    x = _depthwise_conv_block(x, 128, depth_multiplier, block_id=3)\n\n    # 56,56,128 -> 28,28,256\n    x = _depthwise_conv_block(x, 256, depth_multiplier, strides=(2, 2), block_id=4)\n    \n    # 28,28,256 -> 28,28,256\n    x = _depthwise_conv_block(x, 256, depth_multiplier, block_id=5)\n\n    # 28,28,256 -> 14,14,512\n    x = _depthwise_conv_block(x, 512, depth_multiplier, strides=(2, 2), block_id=6)\n    \n    # 14,14,512 -> 14,14,512\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=7)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=8)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=9)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=10)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=11)\n\n    # 14,14,512 -> 7,7,1024\n    x = _depthwise_conv_block(x, 1024, depth_multiplier, strides=(2, 2), block_id=12)\n    x = _depthwise_conv_block(x, 1024, depth_multiplier, block_id=13)\n\n    # 7,7,1024 -> 1,1,1024\n    x = GlobalAveragePooling2D()(x)\n    x = Reshape((1, 1, 1024), name='reshape_1')(x)\n    x = Dropout(dropout, name='dropout')(x)\n    x = Conv2D(classes, (1, 1),padding='same', name='conv_preds')(x)\n    x = Activation('softmax', name='act_softmax')(x)\n    x = Reshape((classes,), name='reshape_2')(x)\n\n    inputs = img_input\n\n    model = Model(inputs, x, name='mobilenet_1_0_224_tf')\n    return model\n\ndef _conv_block(inputs, filters, kernel=(3, 3), strides=(1, 1)):\n    x = Conv2D(filters, kernel, padding='same', use_bias=False, strides=strides, name='conv1')(inputs)\n    x = BatchNormalization(name='conv1_bn')(x)\n    return Activation(relu6, name='conv1_relu')(x)\n\n\ndef _depthwise_conv_block(inputs, pointwise_conv_filters, depth_multiplier=1, strides=(1, 1), block_id=1):\n\n    x = DepthwiseConv2D((3, 3), padding='same', depth_multiplier=depth_multiplier, strides=strides, use_bias=False, name='conv_dw_%d' % block_id)(inputs)\n\n    x = BatchNormalization(name='conv_dw_%d_bn' % block_id)(x)\n    x = Activation(relu6, name='conv_dw_%d_relu' % block_id)(x)\n\n    x = Conv2D(pointwise_conv_filters, (1, 1), padding='same', use_bias=False, strides=(1, 1), name='conv_pw_%d' % block_id)(x)\n    x = BatchNormalization(name='conv_pw_%d_bn' % block_id)(x)\n    return Activation(relu6, name='conv_pw_%d_relu' % block_id)(x)\n\ndef relu6(x):\n    return K.relu(x, max_value=6)\n```\n\n### MobileNetv2\n\n`MobileNetv2`网络特点相较于`MobileNetv1`提出了反残差结构和线性瓶颈结构，总体网络结构如下图所示。\n\n![MobileNetv2](http://39.105.26.229:4567/20191101094224444.png)\n\n#### 反残差结构和线性瓶颈结构\n\n反残差结构是相对于ResNet50而言的，此外MobileNetv2的基础结构和ResNet的基础结构一样，同样是双分支残差连接：\n\n![结构对比](http://39.105.26.229:4567/201911131056046.png)\n![基础结构](http://39.105.26.229:4567/v2-38bcaaee3e9e28611ecc984727e6d598_720w.png)\n\n其中ResNet50中先卷积降维，然后进行3x3卷积提取特征，然后在进行升维，这样做在实际中部证明是比直接3x3卷积效果更好的。而在`MobileNetv2`中，反向进行操作。\n而所谓的线性瓶颈结构则是在卷积降维之后不再进行`ReLu6`层激活，保证提取得到的特征不被破坏，直接与输入相加。\n\n#### MobileNetv2的网络结构\n\n在上图中，我们给出了`MobileNetv2`的网络结构，主要处理流程为：\n- 步长为2的卷积层 x 1\n- 步长为1的瓶颈层 x 1\n- 步长为2的瓶颈层 x 3\n- 步长为1的瓶颈层 x 1\n- 步长为2的瓶颈层 x 1\n- 步长为1的瓶颈层 x 1\n- 步长为1的卷积层 x 1\n- 7x7 平均池化层 x 1\n- 全连接层softmax分类\n\n代码如下：\n```python\n#-------------------------------------------------------------#\n#   MobileNetV2的网络部分\n#-------------------------------------------------------------#\n# relu6！\ndef relu6(x):\n    return K.relu(x, max_value=6)\n\n\ndef MobileNetV2(input_shape=[224,224,3], classes=1000):\n\n    img_input = Input(shape=input_shape)\n\n    # 224,224,3 -> 112,112,32\n    x = ZeroPadding2D(padding=(1, 1), name='Conv1_pad')(img_input)\n    x = Conv2D(32, kernel_size=3, strides=(2, 2), padding='valid', use_bias=False, name='Conv1')(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name='bn_Conv1')(x)\n    x = Activation(relu6, name='Conv1_relu')(x)\n\n    # 112,112,32 -> 112,112,16\n    x = _inverted_res_block(x, filters=16, stride=1,expansion=1, block_id=0)\n\n    # 112,112,16 -> 56,56,24\n    x = _inverted_res_block(x, filters=24, stride=2, expansion=6, block_id=1)\n    x = _inverted_res_block(x, filters=24, stride=1, expansion=6, block_id=2)\n\n    # 56,56,24 -> 28,28,32\n    x = _inverted_res_block(x, filters=32, stride=2, expansion=6, block_id=3)\n    x = _inverted_res_block(x, filters=32, stride=1, expansion=6, block_id=4)\n    x = _inverted_res_block(x, filters=32, stride=1, expansion=6, block_id=5)\n\n    # 28,28,32 -> 14,14,64\n    x = _inverted_res_block(x, filters=64, stride=2, expansion=6, block_id=6)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=7)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=8)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=9)\n\n    # 14,14,64 -> 14,14,96\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=10)\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=11)\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=12)\n    # 14,14,96 -> 7,7,160\n    x = _inverted_res_block(x, filters=160, stride=2, expansion=6, block_id=13)\n    x = _inverted_res_block(x, filters=160, stride=1, expansion=6, block_id=14)\n    x = _inverted_res_block(x, filters=160, stride=1, expansion=6, block_id=15)\n\n    # 7,7,160 -> 7,7,320\n    x = _inverted_res_block(x, filters=320, stride=1, expansion=6, block_id=16)\n\n    # 7,7,320 -> 7,7,1280\n    x = Conv2D(1280, kernel_size=1, use_bias=False, name='Conv_1')(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name='Conv_1_bn')(x)\n    x = Activation(relu6, name='out_relu')(x)\n\n    x = GlobalAveragePooling2D()(x)\n    x = Dense(classes, activation='softmax', use_bias=True, name='Logits')(x)\n\n    inputs = img_input\n\n    model = Model(inputs, x)\n\n    return model\n\n\ndef _inverted_res_block(inputs, expansion, stride, pointwise_filters, block_id):\n    in_channels = backend.int_shape(inputs)[-1]\n    x = inputs\n    prefix = 'block_{}_'.format(block_id)\n\n    # part1 数据扩张\n    if block_id:\n        # Expand\n        x = Conv2D(expansion * in_channels, kernel_size=1, padding='same', use_bias=False, activation=None, name=prefix + 'expand')(x)\n        x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + 'expand_BN')(x)\n        x = Activation(relu6, name=prefix + 'expand_relu')(x)\n    else:\n        prefix = 'expanded_conv_'\n\n    if stride == 2:\n        x = ZeroPadding2D(padding=(1,1), name=prefix + 'pad')(x)\n    \n    # part2 可分离卷积\n    x = DepthwiseConv2D(kernel_size=3, strides=stride, activation=None, use_bias=False, padding='same' if stride == 1 else 'valid', name=prefix + 'depthwise')(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + 'depthwise_BN')(x)\n\n    x = Activation(relu6, name=prefix + 'depthwise_relu')(x)\n\n    # part3压缩特征，而且不使用relu函数，保证特征不被破坏\n    x = Conv2D(pointwise_filters, kernel_size=1, padding='same', use_bias=False, activation=None, name=prefix + 'project')(x)\n\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + 'project_BN')(x)\n\n    if in_channels == pointwise_filters and stride == 1:\n        return Add(name=prefix + 'add')([inputs, x])\n    return x\n```\n\n### MobileNetv3\n\n`MobileNetv3`网络特点相较于`MobileNetv2`主要添加了以下特点：\n\n- 轻量级的注意力机制\n- 利用h-swish代替swish函数\n\n主要网络结构有两种，一种large，一种small，主要区别在于通道数和基础块的次数，本文介绍small类型，网络结构如下：\n\n![MobileNetv3](http://39.105.26.229:4567/20200122140810351.png)\n\n#### 轻量级注意力机制引入\n\n在`MobileNetv3`中，由于轻量级注意力机制的引入，使得原来的基础块结构产生了一些变化，新的结构如图所示:\n\n![MobileNetv3 block](http://39.105.26.229:4567/20200122110008244.png)\n\n从上图我们可以直观的感受到，轻量级注意力机制的引入主要用于改变各个特征层之间的权重系数。\n相信通过前面代码的学习你对特征提取的网络已经有了一定的了解，那么下面的代码就很容易理解了。\n代码如下：\n```python\nalpha = 1\ndef relu6(x):\n    # relu函数\n    return K.relu(x, max_value=6.0)\n\ndef hard_swish(x):\n    # 利用relu函数乘上x模拟sigmoid\n    return x * K.relu(x + 3.0, max_value=6.0) / 6.0\n\ndef return_activation(x, nl):\n    # 用于判断使用哪个激活函数\n    if nl == 'HS':\n        x = Activation(hard_swish)(x)\n    if nl == 'RE':\n        x = Activation(relu6)(x)\n\n    return x\n\ndef conv_block(inputs, filters, kernel, strides, nl):\n    # 一个卷积单元，也就是conv2d + batchnormalization + activation\n    channel_axis = 1 if K.image_data_format() == 'channels_first' else -1\n\n    x = Conv2D(filters, kernel, padding='same', strides=strides)(inputs)\n    x = BatchNormalization(axis=channel_axis)(x)\n\n    return return_activation(x, nl)\n\ndef squeeze(inputs):\n    # 注意力机制单元\n    input_channels = int(inputs.shape[-1])\n\n    x = GlobalAveragePooling2D()(inputs)\n    x = Dense(int(input_channels/4))(x)\n    x = Activation(relu6)(x)\n    x = Dense(input_channels)(x)\n    x = Activation(hard_swish)(x)\n    x = Reshape((1, 1, input_channels))(x)\n    x = Multiply()([inputs, x])\n\n    return x\n\ndef bottleneck(inputs, filters, kernel, up_dim, stride, sq, nl):\n    channel_axis = 1 if K.image_data_format() == 'channels_first' else -1\n\n    input_shape = K.int_shape(inputs)\n\n    tchannel = int(up_dim)\n    cchannel = int(alpha * filters)\n\n    r = stride == 1 and input_shape[3] == filters\n    # 1x1卷积调整通道数，通道数上升\n    x = conv_block(inputs, tchannel, (1, 1), (1, 1), nl)\n    # 进行3x3深度可分离卷积\n    x = DepthwiseConv2D(kernel, strides=(stride, stride), depth_multiplier=1, padding='same')(x)\n    x = BatchNormalization(axis=channel_axis)(x)\n    x = return_activation(x, nl)\n    # 引入注意力机制\n    if sq:\n        x = squeeze(x)\n    # 下降通道数\n    x = Conv2D(cchannel, (1, 1), strides=(1, 1), padding='same')(x)\n    x = BatchNormalization(axis=channel_axis)(x)\n\n\n    if r:\n        x = Add()([x, inputs])\n\n    return x\n\ndef MobileNetv3_small(shape = (224,224,3),n_class = 1000):\n    inputs = Input(shape)\n    # 224,224,3 -> 112,112,16\n    x = conv_block(inputs, 16, (3, 3), strides=(2, 2), nl='HS')\n\n    # 112,112,16 -> 56,56,16\n    x = bottleneck(x, 16, (3, 3), up_dim=16, stride=2, sq=True, nl='RE')\n\n    # 56,56,16 -> 28,28,24\n    x = bottleneck(x, 24, (3, 3), up_dim=72, stride=2, sq=False, nl='RE')\n    x = bottleneck(x, 24, (3, 3), up_dim=88, stride=1, sq=False, nl='RE')\n    \n    # 28,28,24 -> 14,14,40\n    x = bottleneck(x, 40, (5, 5), up_dim=96, stride=2, sq=True, nl='HS')\n    x = bottleneck(x, 40, (5, 5), up_dim=240, stride=1, sq=True, nl='HS')\n    x = bottleneck(x, 40, (5, 5), up_dim=240, stride=1, sq=True, nl='HS')\n    # 14,14,40 -> 14,14,48\n    x = bottleneck(x, 48, (5, 5), up_dim=120, stride=1, sq=True, nl='HS')\n    x = bottleneck(x, 48, (5, 5), up_dim=144, stride=1, sq=True, nl='HS')\n\n    # 14,14,48 -> 7,7,96\n    x = bottleneck(x, 96, (5, 5), up_dim=288, stride=2, sq=True, nl='HS')\n    x = bottleneck(x, 96, (5, 5), up_dim=576, stride=1, sq=True, nl='HS')\n    x = bottleneck(x, 96, (5, 5), up_dim=576, stride=1, sq=True, nl='HS')\n\n    x = conv_block(x, 576, (1, 1), strides=(1, 1), nl='HS')\n    x = GlobalAveragePooling2D()(x)\n    x = Reshape((1, 1, 576))(x)\n\n    x = Conv2D(1024, (1, 1), padding='same')(x)\n    x = return_activation(x, 'HS')\n\n    x = Conv2D(n_class, (1, 1), padding='same', activation='softmax')(x)\n    x = Reshape((n_class,))(x)\n\n    model = Model(inputs, x)\n\n    return model\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"feature_extractor/mobilenet","published":1,"updated":"2021-04-20T15:30:16.653Z","_id":"cknq6gtow0000gwuo23tu1wuh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习神经网络特征提取（三）\"><a href=\"#深度学习神经网络特征提取（三）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（三）\"></a>深度学习神经网络特征提取（三）</h2><h3 id=\"MobileNet简介\"><a href=\"#MobileNet简介\" class=\"headerlink\" title=\"MobileNet简介\"></a>MobileNet简介</h3><p>在之前的文章中已经介绍了<code>VGG</code>和<code>ResNet</code>相关的网络结构，随着深度学习的发展，都在追求精度和准确性，因此也导致了网络层数的加深抑或网络的扩展。然而随着网络的不断加深和扩展，参数的数量也在急剧上升，从而导致性能的下降。<code>MobileNet</code>的出现也正是为了解决这种情况。</p>\n<h3 id=\"MobileNetv1\"><a href=\"#MobileNetv1\" class=\"headerlink\" title=\"MobileNetv1\"></a>MobileNetv1</h3><p><code>MobileNetv1</code>网络特点主要集中于提出的深度可分离卷积，其网络结构部分只是线性连接，如下图所示。</p>\n<p><img src=\"http://39.105.26.229:4567/20191030153845940.png\" alt=\"MobileNetv1\"></p>\n<h4 id=\"深度可分离卷积\"><a href=\"#深度可分离卷积\" class=\"headerlink\" title=\"深度可分离卷积\"></a>深度可分离卷积</h4><p>介绍深度可分离卷积，那我们不得不与常规的卷积进行对比，常规的卷积操作如下图。</p>\n<p><img src=\"http://39.105.26.229:4567/v2-617b082492f5c1c31bde1c6e2d994bc0_720w.jpg\" alt=\"常规卷积\"></p>\n<p>对于一张通道数为3，长宽为5的输入图像，经过3x3的卷积核，且输出层数为4的卷积时，其卷积核的真实情况如上图，在此种情况下参数量为：4x3x3x3=108。<br>而在深度可分离卷积中，我们进行同样的3x3的卷积核，且输出层数为4的卷积时，其操作情况如下两张图片。</p>\n<p><img src=\"http://39.105.26.229:4567/v2-a20824492e3e8778a959ca3731dfeea3_720w.jpg\" alt=\"图1\"><br><img src=\"http://39.105.26.229:4567/v2-2cdae9b3ad2f1d07e2c738331dac6d8b_720w.jpg\" alt=\"图2\"></p>\n<p>在深度可分离卷积中，首先通过N个3x3的卷积核（其中N为输入的层数，在图一中N为3）与输入层数一一对应进行特征提取，然后再通过M个1xN的卷积进行层数的缩放（图2）。在这种情况下，参数量为：3x3x3+1x1x3x4=39。相较于常规卷积操作，深度可分离卷积的参数量下降了很多，大大提高了模型的运行性能，并且对最终的结果的精确度影响并不是很高。</p>\n<h4 id=\"MobileNetv1的网络结构\"><a href=\"#MobileNetv1的网络结构\" class=\"headerlink\" title=\"MobileNetv1的网络结构\"></a>MobileNetv1的网络结构</h4><p>在上图中，我们给出了<code>MobileNetv1</code>的网络结构，主要处理流程为：</p>\n<ul>\n<li>（步长为2的卷积和归一化）x 1</li>\n<li>（步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化，步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 3</li>\n<li>（步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化）x 5</li>\n<li>（步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 2</li>\n<li>一次7x7平均池化，一层全连接层</li>\n<li>最后softmax层</li>\n</ul>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token comment\" spellcheck=\"true\">#   MobileNet的网络部分</span>\n<span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">MobileNet</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> dropout<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> classes<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    img_input <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span>input_shape<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 224,224,3 -> 112,112,32</span>\n    x <span class=\"token operator\">=</span> _conv_block<span class=\"token punctuation\">(</span>img_input<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 112,112,32 -> 112,112,64</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 112,112,64 -> 56,56,128</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 56,56,128 -> 56,56,128</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 56,56,128 -> 28,28,256</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 28,28,256 -> 28,28,256</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 28,28,256 -> 14,14,512</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 14,14,512 -> 14,14,512</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 14,14,512 -> 7,7,1024</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 7,7,1024 -> 1,1,1024</span>\n    x <span class=\"token operator\">=</span> GlobalAveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'reshape_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Dropout<span class=\"token punctuation\">(</span>dropout<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'dropout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv_preds'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'act_softmax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'reshape_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    inputs <span class=\"token operator\">=</span> img_input\n\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mobilenet_1_0_224_tf'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_conv_block</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">,</span> kernel<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv1_relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_depthwise_conv_block</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> pointwise_conv_filters<span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    x <span class=\"token operator\">=</span> DepthwiseConv2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token operator\">=</span>depth_multiplier<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv_dw_%d'</span> <span class=\"token operator\">%</span> block_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv_dw_%d_bn'</span> <span class=\"token operator\">%</span> block_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv_dw_%d_relu'</span> <span class=\"token operator\">%</span> block_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>pointwise_conv_filters<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv_pw_%d'</span> <span class=\"token operator\">%</span> block_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv_pw_%d_bn'</span> <span class=\"token operator\">%</span> block_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv_pw_%d_relu'</span> <span class=\"token operator\">%</span> block_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">relu6</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> K<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> max_value<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"MobileNetv2\"><a href=\"#MobileNetv2\" class=\"headerlink\" title=\"MobileNetv2\"></a>MobileNetv2</h3><p><code>MobileNetv2</code>网络特点相较于<code>MobileNetv1</code>提出了反残差结构和线性瓶颈结构，总体网络结构如下图所示。</p>\n<p><img src=\"http://39.105.26.229:4567/20191101094224444.png\" alt=\"MobileNetv2\"></p>\n<h4 id=\"反残差结构和线性瓶颈结构\"><a href=\"#反残差结构和线性瓶颈结构\" class=\"headerlink\" title=\"反残差结构和线性瓶颈结构\"></a>反残差结构和线性瓶颈结构</h4><p>反残差结构是相对于ResNet50而言的，此外MobileNetv2的基础结构和ResNet的基础结构一样，同样是双分支残差连接：</p>\n<p><img src=\"http://39.105.26.229:4567/201911131056046.png\" alt=\"结构对比\"><br><img src=\"http://39.105.26.229:4567/v2-38bcaaee3e9e28611ecc984727e6d598_720w.png\" alt=\"基础结构\"></p>\n<p>其中ResNet50中先卷积降维，然后进行3x3卷积提取特征，然后在进行升维，这样做在实际中部证明是比直接3x3卷积效果更好的。而在<code>MobileNetv2</code>中，反向进行操作。<br>而所谓的线性瓶颈结构则是在卷积降维之后不再进行<code>ReLu6</code>层激活，保证提取得到的特征不被破坏，直接与输入相加。</p>\n<h4 id=\"MobileNetv2的网络结构\"><a href=\"#MobileNetv2的网络结构\" class=\"headerlink\" title=\"MobileNetv2的网络结构\"></a>MobileNetv2的网络结构</h4><p>在上图中，我们给出了<code>MobileNetv2</code>的网络结构，主要处理流程为：</p>\n<ul>\n<li>步长为2的卷积层 x 1</li>\n<li>步长为1的瓶颈层 x 1</li>\n<li>步长为2的瓶颈层 x 3</li>\n<li>步长为1的瓶颈层 x 1</li>\n<li>步长为2的瓶颈层 x 1</li>\n<li>步长为1的瓶颈层 x 1</li>\n<li>步长为1的卷积层 x 1</li>\n<li>7x7 平均池化层 x 1</li>\n<li>全连接层softmax分类</li>\n</ul>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token comment\" spellcheck=\"true\">#   MobileNetV2的网络部分</span>\n<span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token comment\" spellcheck=\"true\"># relu6！</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">relu6</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> K<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> max_value<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">MobileNetV2</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> classes<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    img_input <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span>input_shape<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 224,224,3 -> 112,112,32</span>\n    x <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Conv1_pad'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>img_input<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Conv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>epsilon<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.999</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'bn_Conv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Conv1_relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 112,112,32 -> 112,112,16</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>expansion<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 112,112,16 -> 56,56,24</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 56,56,24 -> 28,28,32</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 28,28,32 -> 14,14,64</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 14,14,64 -> 14,14,96</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 14,14,96 -> 7,7,160</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 7,7,160 -> 7,7,320</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 7,7,320 -> 7,7,1280</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">1280</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Conv_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>epsilon<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.999</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Conv_1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'out_relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> GlobalAveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Dense<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Logits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    inputs <span class=\"token operator\">=</span> img_input\n\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> model\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_inverted_res_block</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> expansion<span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">,</span> pointwise_filters<span class=\"token punctuation\">,</span> block_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    in_channels <span class=\"token operator\">=</span> backend<span class=\"token punctuation\">.</span>int_shape<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    x <span class=\"token operator\">=</span> inputs\n    prefix <span class=\"token operator\">=</span> <span class=\"token string\">'block_{}_'</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>block_id<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># part1 数据扩张</span>\n    <span class=\"token keyword\">if</span> block_id<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\"># Expand</span>\n        x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>expansion <span class=\"token operator\">*</span> in_channels<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'expand'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>epsilon<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.999</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'expand_BN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'expand_relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        prefix <span class=\"token operator\">=</span> <span class=\"token string\">'expanded_conv_'</span>\n\n    <span class=\"token keyword\">if</span> stride <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'pad'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># part2 可分离卷积</span>\n    x <span class=\"token operator\">=</span> DepthwiseConv2D<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>stride<span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span> <span class=\"token keyword\">if</span> stride <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'valid'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'depthwise'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>epsilon<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.999</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'depthwise_BN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'depthwise_relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># part3压缩特征，而且不使用relu函数，保证特征不被破坏</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>pointwise_filters<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'project'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>epsilon<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.999</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'project_BN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> in_channels <span class=\"token operator\">==</span> pointwise_filters <span class=\"token operator\">and</span> stride <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> Add<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>inputs<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x</code></pre>\n<h3 id=\"MobileNetv3\"><a href=\"#MobileNetv3\" class=\"headerlink\" title=\"MobileNetv3\"></a>MobileNetv3</h3><p><code>MobileNetv3</code>网络特点相较于<code>MobileNetv2</code>主要添加了以下特点：</p>\n<ul>\n<li>轻量级的注意力机制</li>\n<li>利用h-swish代替swish函数</li>\n</ul>\n<p>主要网络结构有两种，一种large，一种small，主要区别在于通道数和基础块的次数，本文介绍small类型，网络结构如下：</p>\n<p><img src=\"http://39.105.26.229:4567/20200122140810351.png\" alt=\"MobileNetv3\"></p>\n<h4 id=\"轻量级注意力机制引入\"><a href=\"#轻量级注意力机制引入\" class=\"headerlink\" title=\"轻量级注意力机制引入\"></a>轻量级注意力机制引入</h4><p>在<code>MobileNetv3</code>中，由于轻量级注意力机制的引入，使得原来的基础块结构产生了一些变化，新的结构如图所示:</p>\n<p><img src=\"http://39.105.26.229:4567/20200122110008244.png\" alt=\"MobileNetv3 block\"></p>\n<p>从上图我们可以直观的感受到，轻量级注意力机制的引入主要用于改变各个特征层之间的权重系数。<br>相信通过前面代码的学习你对特征提取的网络已经有了一定的了解，那么下面的代码就很容易理解了。<br>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">alpha <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">relu6</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># relu函数</span>\n    <span class=\"token keyword\">return</span> K<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> max_value<span class=\"token operator\">=</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hard_swish</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 利用relu函数乘上x模拟sigmoid</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> K<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> max_value<span class=\"token operator\">=</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">6.0</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">return_activation</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> nl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 用于判断使用哪个激活函数</span>\n    <span class=\"token keyword\">if</span> nl <span class=\"token operator\">==</span> <span class=\"token string\">'HS'</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>hard_swish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> nl <span class=\"token operator\">==</span> <span class=\"token string\">'RE'</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> x\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">conv_block</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> strides<span class=\"token punctuation\">,</span> nl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 一个卷积单元，也就是conv2d + batchnormalization + activation</span>\n    channel_axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> K<span class=\"token punctuation\">.</span>image_data_format<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'channels_first'</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span>channel_axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> return_activation<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> nl<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">squeeze</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 注意力机制单元</span>\n    input_channels <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> GlobalAveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Dense<span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>input_channels<span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Dense<span class=\"token punctuation\">(</span>input_channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>hard_swish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> input_channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Multiply<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>inputs<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> x\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">bottleneck</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> up_dim<span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">,</span> sq<span class=\"token punctuation\">,</span> nl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    channel_axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> K<span class=\"token punctuation\">.</span>image_data_format<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'channels_first'</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n    input_shape <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>int_shape<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span>\n\n    tchannel <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>up_dim<span class=\"token punctuation\">)</span>\n    cchannel <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>alpha <span class=\"token operator\">*</span> filters<span class=\"token punctuation\">)</span>\n\n    r <span class=\"token operator\">=</span> stride <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">and</span> input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> filters\n    <span class=\"token comment\" spellcheck=\"true\"># 1x1卷积调整通道数，通道数上升</span>\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> tchannel<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nl<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 进行3x3深度可分离卷积</span>\n    x <span class=\"token operator\">=</span> DepthwiseConv2D<span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>stride<span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span>channel_axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> return_activation<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> nl<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 引入注意力机制</span>\n    <span class=\"token keyword\">if</span> sq<span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> squeeze<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 下降通道数</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>cchannel<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span>channel_axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token keyword\">if</span> r<span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> Add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> x\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">MobileNetv3_small</span><span class=\"token punctuation\">(</span>shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>n_class <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    inputs <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 224,224,3 -> 112,112,16</span>\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 112,112,16 -> 56,56,16</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'RE'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 56,56,16 -> 28,28,24</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">72</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'RE'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">88</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'RE'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 28,28,24 -> 14,14,40</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">240</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">240</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 14,14,40 -> 14,14,48</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">144</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 14,14,48 -> 7,7,96</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">288</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">576</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">576</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">576</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> GlobalAveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">576</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> return_activation<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>n_class<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n_class<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> model</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习神经网络特征提取（三）\"><a href=\"#深度学习神经网络特征提取（三）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（三）\"></a>深度学习神经网络特征提取（三）</h2><h3 id=\"MobileNet简介\"><a href=\"#MobileNet简介\" class=\"headerlink\" title=\"MobileNet简介\"></a>MobileNet简介</h3><p>在之前的文章中已经介绍了<code>VGG</code>和<code>ResNet</code>相关的网络结构，随着深度学习的发展，都在追求精度和准确性，因此也导致了网络层数的加深抑或网络的扩展。然而随着网络的不断加深和扩展，参数的数量也在急剧上升，从而导致性能的下降。<code>MobileNet</code>的出现也正是为了解决这种情况。</p>\n<h3 id=\"MobileNetv1\"><a href=\"#MobileNetv1\" class=\"headerlink\" title=\"MobileNetv1\"></a>MobileNetv1</h3><p><code>MobileNetv1</code>网络特点主要集中于提出的深度可分离卷积，其网络结构部分只是线性连接，如下图所示。</p>\n<p><img src=\"http://39.105.26.229:4567/20191030153845940.png\" alt=\"MobileNetv1\"></p>\n<h4 id=\"深度可分离卷积\"><a href=\"#深度可分离卷积\" class=\"headerlink\" title=\"深度可分离卷积\"></a>深度可分离卷积</h4><p>介绍深度可分离卷积，那我们不得不与常规的卷积进行对比，常规的卷积操作如下图。</p>\n<p><img src=\"http://39.105.26.229:4567/v2-617b082492f5c1c31bde1c6e2d994bc0_720w.jpg\" alt=\"常规卷积\"></p>\n<p>对于一张通道数为3，长宽为5的输入图像，经过3x3的卷积核，且输出层数为4的卷积时，其卷积核的真实情况如上图，在此种情况下参数量为：4x3x3x3=108。<br>而在深度可分离卷积中，我们进行同样的3x3的卷积核，且输出层数为4的卷积时，其操作情况如下两张图片。</p>\n<p><img src=\"http://39.105.26.229:4567/v2-a20824492e3e8778a959ca3731dfeea3_720w.jpg\" alt=\"图1\"><br><img src=\"http://39.105.26.229:4567/v2-2cdae9b3ad2f1d07e2c738331dac6d8b_720w.jpg\" alt=\"图2\"></p>\n<p>在深度可分离卷积中，首先通过N个3x3的卷积核（其中N为输入的层数，在图一中N为3）与输入层数一一对应进行特征提取，然后再通过M个1xN的卷积进行层数的缩放（图2）。在这种情况下，参数量为：3x3x3+1x1x3x4=39。相较于常规卷积操作，深度可分离卷积的参数量下降了很多，大大提高了模型的运行性能，并且对最终的结果的精确度影响并不是很高。</p>\n<h4 id=\"MobileNetv1的网络结构\"><a href=\"#MobileNetv1的网络结构\" class=\"headerlink\" title=\"MobileNetv1的网络结构\"></a>MobileNetv1的网络结构</h4><p>在上图中，我们给出了<code>MobileNetv1</code>的网络结构，主要处理流程为：</p>\n<ul>\n<li>（步长为2的卷积和归一化）x 1</li>\n<li>（步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化，步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 3</li>\n<li>（步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化）x 5</li>\n<li>（步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 2</li>\n<li>一次7x7平均池化，一层全连接层</li>\n<li>最后softmax层</li>\n</ul>\n<p>代码如下：</p>\n<pre><code class=\"python\">#-------------------------------------------------------------#\n#   MobileNet的网络部分\n#-------------------------------------------------------------#\ndef MobileNet(input_shape=[224,224,3], depth_multiplier=1, dropout=1e-3, classes=1000):\n    img_input = Input(shape=input_shape)\n\n    # 224,224,3 -&gt; 112,112,32\n    x = _conv_block(img_input, 32, strides=(2, 2))\n\n    # 112,112,32 -&gt; 112,112,64\n    x = _depthwise_conv_block(x, 64, depth_multiplier, block_id=1)\n\n    # 112,112,64 -&gt; 56,56,128\n    x = _depthwise_conv_block(x, 128, depth_multiplier, strides=(2, 2), block_id=2)\n    # 56,56,128 -&gt; 56,56,128\n    x = _depthwise_conv_block(x, 128, depth_multiplier, block_id=3)\n\n    # 56,56,128 -&gt; 28,28,256\n    x = _depthwise_conv_block(x, 256, depth_multiplier, strides=(2, 2), block_id=4)\n\n    # 28,28,256 -&gt; 28,28,256\n    x = _depthwise_conv_block(x, 256, depth_multiplier, block_id=5)\n\n    # 28,28,256 -&gt; 14,14,512\n    x = _depthwise_conv_block(x, 512, depth_multiplier, strides=(2, 2), block_id=6)\n\n    # 14,14,512 -&gt; 14,14,512\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=7)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=8)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=9)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=10)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=11)\n\n    # 14,14,512 -&gt; 7,7,1024\n    x = _depthwise_conv_block(x, 1024, depth_multiplier, strides=(2, 2), block_id=12)\n    x = _depthwise_conv_block(x, 1024, depth_multiplier, block_id=13)\n\n    # 7,7,1024 -&gt; 1,1,1024\n    x = GlobalAveragePooling2D()(x)\n    x = Reshape((1, 1, 1024), name=&#39;reshape_1&#39;)(x)\n    x = Dropout(dropout, name=&#39;dropout&#39;)(x)\n    x = Conv2D(classes, (1, 1),padding=&#39;same&#39;, name=&#39;conv_preds&#39;)(x)\n    x = Activation(&#39;softmax&#39;, name=&#39;act_softmax&#39;)(x)\n    x = Reshape((classes,), name=&#39;reshape_2&#39;)(x)\n\n    inputs = img_input\n\n    model = Model(inputs, x, name=&#39;mobilenet_1_0_224_tf&#39;)\n    return model\n\ndef _conv_block(inputs, filters, kernel=(3, 3), strides=(1, 1)):\n    x = Conv2D(filters, kernel, padding=&#39;same&#39;, use_bias=False, strides=strides, name=&#39;conv1&#39;)(inputs)\n    x = BatchNormalization(name=&#39;conv1_bn&#39;)(x)\n    return Activation(relu6, name=&#39;conv1_relu&#39;)(x)\n\n\ndef _depthwise_conv_block(inputs, pointwise_conv_filters, depth_multiplier=1, strides=(1, 1), block_id=1):\n\n    x = DepthwiseConv2D((3, 3), padding=&#39;same&#39;, depth_multiplier=depth_multiplier, strides=strides, use_bias=False, name=&#39;conv_dw_%d&#39; % block_id)(inputs)\n\n    x = BatchNormalization(name=&#39;conv_dw_%d_bn&#39; % block_id)(x)\n    x = Activation(relu6, name=&#39;conv_dw_%d_relu&#39; % block_id)(x)\n\n    x = Conv2D(pointwise_conv_filters, (1, 1), padding=&#39;same&#39;, use_bias=False, strides=(1, 1), name=&#39;conv_pw_%d&#39; % block_id)(x)\n    x = BatchNormalization(name=&#39;conv_pw_%d_bn&#39; % block_id)(x)\n    return Activation(relu6, name=&#39;conv_pw_%d_relu&#39; % block_id)(x)\n\ndef relu6(x):\n    return K.relu(x, max_value=6)</code></pre>\n<h3 id=\"MobileNetv2\"><a href=\"#MobileNetv2\" class=\"headerlink\" title=\"MobileNetv2\"></a>MobileNetv2</h3><p><code>MobileNetv2</code>网络特点相较于<code>MobileNetv1</code>提出了反残差结构和线性瓶颈结构，总体网络结构如下图所示。</p>\n<p><img src=\"http://39.105.26.229:4567/20191101094224444.png\" alt=\"MobileNetv2\"></p>\n<h4 id=\"反残差结构和线性瓶颈结构\"><a href=\"#反残差结构和线性瓶颈结构\" class=\"headerlink\" title=\"反残差结构和线性瓶颈结构\"></a>反残差结构和线性瓶颈结构</h4><p>反残差结构是相对于ResNet50而言的，此外MobileNetv2的基础结构和ResNet的基础结构一样，同样是双分支残差连接：</p>\n<p><img src=\"http://39.105.26.229:4567/201911131056046.png\" alt=\"结构对比\"><br><img src=\"http://39.105.26.229:4567/v2-38bcaaee3e9e28611ecc984727e6d598_720w.png\" alt=\"基础结构\"></p>\n<p>其中ResNet50中先卷积降维，然后进行3x3卷积提取特征，然后在进行升维，这样做在实际中部证明是比直接3x3卷积效果更好的。而在<code>MobileNetv2</code>中，反向进行操作。<br>而所谓的线性瓶颈结构则是在卷积降维之后不再进行<code>ReLu6</code>层激活，保证提取得到的特征不被破坏，直接与输入相加。</p>\n<h4 id=\"MobileNetv2的网络结构\"><a href=\"#MobileNetv2的网络结构\" class=\"headerlink\" title=\"MobileNetv2的网络结构\"></a>MobileNetv2的网络结构</h4><p>在上图中，我们给出了<code>MobileNetv2</code>的网络结构，主要处理流程为：</p>\n<ul>\n<li>步长为2的卷积层 x 1</li>\n<li>步长为1的瓶颈层 x 1</li>\n<li>步长为2的瓶颈层 x 3</li>\n<li>步长为1的瓶颈层 x 1</li>\n<li>步长为2的瓶颈层 x 1</li>\n<li>步长为1的瓶颈层 x 1</li>\n<li>步长为1的卷积层 x 1</li>\n<li>7x7 平均池化层 x 1</li>\n<li>全连接层softmax分类</li>\n</ul>\n<p>代码如下：</p>\n<pre><code class=\"python\">#-------------------------------------------------------------#\n#   MobileNetV2的网络部分\n#-------------------------------------------------------------#\n# relu6！\ndef relu6(x):\n    return K.relu(x, max_value=6)\n\n\ndef MobileNetV2(input_shape=[224,224,3], classes=1000):\n\n    img_input = Input(shape=input_shape)\n\n    # 224,224,3 -&gt; 112,112,32\n    x = ZeroPadding2D(padding=(1, 1), name=&#39;Conv1_pad&#39;)(img_input)\n    x = Conv2D(32, kernel_size=3, strides=(2, 2), padding=&#39;valid&#39;, use_bias=False, name=&#39;Conv1&#39;)(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=&#39;bn_Conv1&#39;)(x)\n    x = Activation(relu6, name=&#39;Conv1_relu&#39;)(x)\n\n    # 112,112,32 -&gt; 112,112,16\n    x = _inverted_res_block(x, filters=16, stride=1,expansion=1, block_id=0)\n\n    # 112,112,16 -&gt; 56,56,24\n    x = _inverted_res_block(x, filters=24, stride=2, expansion=6, block_id=1)\n    x = _inverted_res_block(x, filters=24, stride=1, expansion=6, block_id=2)\n\n    # 56,56,24 -&gt; 28,28,32\n    x = _inverted_res_block(x, filters=32, stride=2, expansion=6, block_id=3)\n    x = _inverted_res_block(x, filters=32, stride=1, expansion=6, block_id=4)\n    x = _inverted_res_block(x, filters=32, stride=1, expansion=6, block_id=5)\n\n    # 28,28,32 -&gt; 14,14,64\n    x = _inverted_res_block(x, filters=64, stride=2, expansion=6, block_id=6)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=7)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=8)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=9)\n\n    # 14,14,64 -&gt; 14,14,96\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=10)\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=11)\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=12)\n    # 14,14,96 -&gt; 7,7,160\n    x = _inverted_res_block(x, filters=160, stride=2, expansion=6, block_id=13)\n    x = _inverted_res_block(x, filters=160, stride=1, expansion=6, block_id=14)\n    x = _inverted_res_block(x, filters=160, stride=1, expansion=6, block_id=15)\n\n    # 7,7,160 -&gt; 7,7,320\n    x = _inverted_res_block(x, filters=320, stride=1, expansion=6, block_id=16)\n\n    # 7,7,320 -&gt; 7,7,1280\n    x = Conv2D(1280, kernel_size=1, use_bias=False, name=&#39;Conv_1&#39;)(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=&#39;Conv_1_bn&#39;)(x)\n    x = Activation(relu6, name=&#39;out_relu&#39;)(x)\n\n    x = GlobalAveragePooling2D()(x)\n    x = Dense(classes, activation=&#39;softmax&#39;, use_bias=True, name=&#39;Logits&#39;)(x)\n\n    inputs = img_input\n\n    model = Model(inputs, x)\n\n    return model\n\n\ndef _inverted_res_block(inputs, expansion, stride, pointwise_filters, block_id):\n    in_channels = backend.int_shape(inputs)[-1]\n    x = inputs\n    prefix = &#39;block_&#123;&#125;_&#39;.format(block_id)\n\n    # part1 数据扩张\n    if block_id:\n        # Expand\n        x = Conv2D(expansion * in_channels, kernel_size=1, padding=&#39;same&#39;, use_bias=False, activation=None, name=prefix + &#39;expand&#39;)(x)\n        x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + &#39;expand_BN&#39;)(x)\n        x = Activation(relu6, name=prefix + &#39;expand_relu&#39;)(x)\n    else:\n        prefix = &#39;expanded_conv_&#39;\n\n    if stride == 2:\n        x = ZeroPadding2D(padding=(1,1), name=prefix + &#39;pad&#39;)(x)\n\n    # part2 可分离卷积\n    x = DepthwiseConv2D(kernel_size=3, strides=stride, activation=None, use_bias=False, padding=&#39;same&#39; if stride == 1 else &#39;valid&#39;, name=prefix + &#39;depthwise&#39;)(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + &#39;depthwise_BN&#39;)(x)\n\n    x = Activation(relu6, name=prefix + &#39;depthwise_relu&#39;)(x)\n\n    # part3压缩特征，而且不使用relu函数，保证特征不被破坏\n    x = Conv2D(pointwise_filters, kernel_size=1, padding=&#39;same&#39;, use_bias=False, activation=None, name=prefix + &#39;project&#39;)(x)\n\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + &#39;project_BN&#39;)(x)\n\n    if in_channels == pointwise_filters and stride == 1:\n        return Add(name=prefix + &#39;add&#39;)([inputs, x])\n    return x</code></pre>\n<h3 id=\"MobileNetv3\"><a href=\"#MobileNetv3\" class=\"headerlink\" title=\"MobileNetv3\"></a>MobileNetv3</h3><p><code>MobileNetv3</code>网络特点相较于<code>MobileNetv2</code>主要添加了以下特点：</p>\n<ul>\n<li>轻量级的注意力机制</li>\n<li>利用h-swish代替swish函数</li>\n</ul>\n<p>主要网络结构有两种，一种large，一种small，主要区别在于通道数和基础块的次数，本文介绍small类型，网络结构如下：</p>\n<p><img src=\"http://39.105.26.229:4567/20200122140810351.png\" alt=\"MobileNetv3\"></p>\n<h4 id=\"轻量级注意力机制引入\"><a href=\"#轻量级注意力机制引入\" class=\"headerlink\" title=\"轻量级注意力机制引入\"></a>轻量级注意力机制引入</h4><p>在<code>MobileNetv3</code>中，由于轻量级注意力机制的引入，使得原来的基础块结构产生了一些变化，新的结构如图所示:</p>\n<p><img src=\"http://39.105.26.229:4567/20200122110008244.png\" alt=\"MobileNetv3 block\"></p>\n<p>从上图我们可以直观的感受到，轻量级注意力机制的引入主要用于改变各个特征层之间的权重系数。<br>相信通过前面代码的学习你对特征提取的网络已经有了一定的了解，那么下面的代码就很容易理解了。<br>代码如下：</p>\n<pre><code class=\"python\">alpha = 1\ndef relu6(x):\n    # relu函数\n    return K.relu(x, max_value=6.0)\n\ndef hard_swish(x):\n    # 利用relu函数乘上x模拟sigmoid\n    return x * K.relu(x + 3.0, max_value=6.0) / 6.0\n\ndef return_activation(x, nl):\n    # 用于判断使用哪个激活函数\n    if nl == &#39;HS&#39;:\n        x = Activation(hard_swish)(x)\n    if nl == &#39;RE&#39;:\n        x = Activation(relu6)(x)\n\n    return x\n\ndef conv_block(inputs, filters, kernel, strides, nl):\n    # 一个卷积单元，也就是conv2d + batchnormalization + activation\n    channel_axis = 1 if K.image_data_format() == &#39;channels_first&#39; else -1\n\n    x = Conv2D(filters, kernel, padding=&#39;same&#39;, strides=strides)(inputs)\n    x = BatchNormalization(axis=channel_axis)(x)\n\n    return return_activation(x, nl)\n\ndef squeeze(inputs):\n    # 注意力机制单元\n    input_channels = int(inputs.shape[-1])\n\n    x = GlobalAveragePooling2D()(inputs)\n    x = Dense(int(input_channels/4))(x)\n    x = Activation(relu6)(x)\n    x = Dense(input_channels)(x)\n    x = Activation(hard_swish)(x)\n    x = Reshape((1, 1, input_channels))(x)\n    x = Multiply()([inputs, x])\n\n    return x\n\ndef bottleneck(inputs, filters, kernel, up_dim, stride, sq, nl):\n    channel_axis = 1 if K.image_data_format() == &#39;channels_first&#39; else -1\n\n    input_shape = K.int_shape(inputs)\n\n    tchannel = int(up_dim)\n    cchannel = int(alpha * filters)\n\n    r = stride == 1 and input_shape[3] == filters\n    # 1x1卷积调整通道数，通道数上升\n    x = conv_block(inputs, tchannel, (1, 1), (1, 1), nl)\n    # 进行3x3深度可分离卷积\n    x = DepthwiseConv2D(kernel, strides=(stride, stride), depth_multiplier=1, padding=&#39;same&#39;)(x)\n    x = BatchNormalization(axis=channel_axis)(x)\n    x = return_activation(x, nl)\n    # 引入注意力机制\n    if sq:\n        x = squeeze(x)\n    # 下降通道数\n    x = Conv2D(cchannel, (1, 1), strides=(1, 1), padding=&#39;same&#39;)(x)\n    x = BatchNormalization(axis=channel_axis)(x)\n\n\n    if r:\n        x = Add()([x, inputs])\n\n    return x\n\ndef MobileNetv3_small(shape = (224,224,3),n_class = 1000):\n    inputs = Input(shape)\n    # 224,224,3 -&gt; 112,112,16\n    x = conv_block(inputs, 16, (3, 3), strides=(2, 2), nl=&#39;HS&#39;)\n\n    # 112,112,16 -&gt; 56,56,16\n    x = bottleneck(x, 16, (3, 3), up_dim=16, stride=2, sq=True, nl=&#39;RE&#39;)\n\n    # 56,56,16 -&gt; 28,28,24\n    x = bottleneck(x, 24, (3, 3), up_dim=72, stride=2, sq=False, nl=&#39;RE&#39;)\n    x = bottleneck(x, 24, (3, 3), up_dim=88, stride=1, sq=False, nl=&#39;RE&#39;)\n\n    # 28,28,24 -&gt; 14,14,40\n    x = bottleneck(x, 40, (5, 5), up_dim=96, stride=2, sq=True, nl=&#39;HS&#39;)\n    x = bottleneck(x, 40, (5, 5), up_dim=240, stride=1, sq=True, nl=&#39;HS&#39;)\n    x = bottleneck(x, 40, (5, 5), up_dim=240, stride=1, sq=True, nl=&#39;HS&#39;)\n    # 14,14,40 -&gt; 14,14,48\n    x = bottleneck(x, 48, (5, 5), up_dim=120, stride=1, sq=True, nl=&#39;HS&#39;)\n    x = bottleneck(x, 48, (5, 5), up_dim=144, stride=1, sq=True, nl=&#39;HS&#39;)\n\n    # 14,14,48 -&gt; 7,7,96\n    x = bottleneck(x, 96, (5, 5), up_dim=288, stride=2, sq=True, nl=&#39;HS&#39;)\n    x = bottleneck(x, 96, (5, 5), up_dim=576, stride=1, sq=True, nl=&#39;HS&#39;)\n    x = bottleneck(x, 96, (5, 5), up_dim=576, stride=1, sq=True, nl=&#39;HS&#39;)\n\n    x = conv_block(x, 576, (1, 1), strides=(1, 1), nl=&#39;HS&#39;)\n    x = GlobalAveragePooling2D()(x)\n    x = Reshape((1, 1, 576))(x)\n\n    x = Conv2D(1024, (1, 1), padding=&#39;same&#39;)(x)\n    x = return_activation(x, &#39;HS&#39;)\n\n    x = Conv2D(n_class, (1, 1), padding=&#39;same&#39;, activation=&#39;softmax&#39;)(x)\n    x = Reshape((n_class,))(x)\n\n    model = Model(inputs, x)\n\n    return model</code></pre>\n"},{"title":"Inception","date":"2021-04-20T15:39:26.000Z","top":true,"cover":true,"author":"Fanrencli","_content":" \n## 深度学习神经网络特征提取（四）\n\n`Inception`模型是谷歌提出的`GoogLeNet`网络中的主干特征提取网络。从`Inceptionv1`到`Xception`，模型的结构不断的改进，本文针对其中较为经典的`Inceptionv3`和`Xception`进行介绍。\n\n### Inceptionv3模型\n\n`Inceptionv3`模型相比于其他模型创新在于使用了四个并行分支，且每个分支采用的卷积核大小不同，使得存在不同的感受野，最后在进行特征融合，得到不同尺度的特征。其主要包括三个部分：block1、block2、block3，由这些部分线性连接组成了`Inceptionv3`(其中层数可能会有一些改变，但是总体结构一样)。\n\n![block1](http://39.105.26.229:4567/2019111309515588.png)\nblock1中四个分支分别为不同卷积核大小的卷积层。\n![block2](http://39.105.26.229:4567/20191113095610269.png)\nblock2中四个分支中将原始的卷积操作转换成横向和纵向结合的卷积操作，通过这样操作可以减少参数量。\n![block3](http://39.105.26.229:4567/2019111309572648.png)\nblock3的卷积形式和block2的卷积形式相同，只是其中组合的卷积核大小不同。\n\n代码如下：\n\n```python\n#-------------------------------------------------------------#\n#   InceptionV3的网络部分\n#-------------------------------------------------------------#\ndef conv2d_bn(x, filters, num_row, num_col, padding='same', strides=(1, 1), name=None):\n    x = Conv2D(filters, (num_row, num_col), strides=strides, padding=padding, use_bias=False)(x)\n    x = BatchNormalization(scale=False)(x)\n    x = Activation('relu')(x)\n    return x\n\n\ndef InceptionV3(input_shape=[299,299,3], classes=1000):\n    img_input = Input(shape=input_shape)\n    # 299x299 -> 149x149\n    x = conv2d_bn(img_input, 32, 3, 3, strides=(2, 2), padding='valid')\n    # 149x149 -> 147x147\n    x = conv2d_bn(x, 32, 3, 3, padding='valid')\n    # 147x147 -> 147x147\n    x = conv2d_bn(x, 64, 3, 3)\n    # 147x147 -> 73x73\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    # 73x73 -> 73x73\n    x = conv2d_bn(x, 80, 1, 1, padding='valid')\n    # 73x73 -> 71x71\n    x = conv2d_bn(x, 192, 3, 3, padding='valid')\n    # 71x71 -> 35x35\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n\n    #--------------------------------#\n    #   Block1 35x35\n    #--------------------------------#\n    # Block1 part1\n    # 35 x 35 x 192 -> 35 x 35 x 256\n    branch1x1 = conv2d_bn(x, 64, 1, 1)#第一分支\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)# 第二分支\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)#第三分支\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)#第四分支\n    branch_pool = conv2d_bn(branch_pool, 32, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name='mixed0')\n\n    # Block1 part2\n    # 35 x 35 x 256 -> 35 x 35 x 288\n    branch1x1 = conv2d_bn(x, 64, 1, 1)\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 64, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name='mixed1')\n\n    # Block1 part3\n    # 35 x 35 x 288 -> 35 x 35 x 288\n    branch1x1 = conv2d_bn(x, 64, 1, 1)\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 64, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name='mixed2')\n\n    #--------------------------------#\n    #   Block2 17x17\n    #--------------------------------#\n    # Block2 part1\n    # 35 x 35 x 288 -> 17 x 17 x 768\n    branch3x3 = conv2d_bn(x, 384, 3, 3, strides=(2, 2), padding='valid')\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3, strides=(2, 2), padding='valid')\n\n    branch_pool = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    x = layers.concatenate([branch3x3, branch3x3dbl, branch_pool], axis=3, name='mixed3')\n\n    # Block2 part2\n    # 17 x 17 x 768 -> 17 x 17 x 768\n    branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n    branch7x7 = conv2d_bn(x, 128, 1, 1)\n    branch7x7 = conv2d_bn(branch7x7, 128, 1, 7)\n    branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n    branch7x7dbl = conv2d_bn(x, 128, 1, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 1, 7)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n    x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name='mixed4')\n\n    # Block2 part3 and part4\n    # 17 x 17 x 768 -> 17 x 17 x 768 -> 17 x 17 x 768\n    for i in range(2):\n        branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n        branch7x7 = conv2d_bn(x, 160, 1, 1)\n        branch7x7 = conv2d_bn(branch7x7, 160, 1, 7)\n        branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n        branch7x7dbl = conv2d_bn(x, 160, 1, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 7, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 1, 7)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 7, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n        branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n        branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n        x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name='mixed' + str(5 + i))\n\n    # Block2 part5\n    # 17 x 17 x 768 -> 17 x 17 x 768\n    branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n    branch7x7 = conv2d_bn(x, 192, 1, 1)\n    branch7x7 = conv2d_bn(branch7x7, 192, 1, 7)\n    branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n    branch7x7dbl = conv2d_bn(x, 192, 1, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n    x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name='mixed7')\n\n    #--------------------------------#\n    #   Block3 8x8\n    #--------------------------------#\n    # Block3 part1\n    # 17 x 17 x 768 -> 8 x 8 x 1280\n    branch3x3 = conv2d_bn(x, 192, 1, 1)\n    branch3x3 = conv2d_bn(branch3x3, 320, 3, 3, strides=(2, 2), padding='valid')\n\n    branch7x7x3 = conv2d_bn(x, 192, 1, 1)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 1, 7)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 7, 1)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 3, 3, strides=(2, 2), padding='valid')\n\n    branch_pool = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    x = layers.concatenate([branch3x3, branch7x7x3, branch_pool], axis=3, name='mixed8')\n\n    # Block3 part2 part3\n    # 8 x 8 x 1280 -> 8 x 8 x 2048 -> 8 x 8 x 2048\n    for i in range(2):\n        branch1x1 = conv2d_bn(x, 320, 1, 1)\n\n        branch3x3 = conv2d_bn(x, 384, 1, 1)\n        branch3x3_1 = conv2d_bn(branch3x3, 384, 1, 3)\n        branch3x3_2 = conv2d_bn(branch3x3, 384, 3, 1)\n        branch3x3 = layers.concatenate([branch3x3_1, branch3x3_2], axis=3, name='mixed9_' + str(i))\n\n        branch3x3dbl = conv2d_bn(x, 448, 1, 1)\n        branch3x3dbl = conv2d_bn(branch3x3dbl, 384, 3, 3)\n        branch3x3dbl_1 = conv2d_bn(branch3x3dbl, 384, 1, 3)\n        branch3x3dbl_2 = conv2d_bn(branch3x3dbl, 384, 3, 1)\n        branch3x3dbl = layers.concatenate([branch3x3dbl_1, branch3x3dbl_2], axis=3)\n\n        branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n        branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n        x = layers.concatenate([branch1x1, branch3x3, branch3x3dbl, branch_pool], axis=3, name='mixed' + str(9 + i))\n    # 平均池化后全连接。\n    x = GlobalAveragePooling2D(name='avg_pool')(x)\n    x = Dense(classes, activation='softmax', name='predictions')(x)\n    inputs = img_input\n    model = Model(inputs, x, name='inception_v3')\n    return model\n```\n\n### Xception模型\n\n`Xception`是在`Inceptionv3`的基础上改进而来的，主要的改进在原来的多尺寸卷积，使用了深度可分离卷积进行替换，关于深度可分离卷积在之前的`MobileNet`文章中已经介绍，所以我们直接来看`Xception`的网络结构吧。\n\n![Xception](http://39.105.26.229:4567/20191030102403596.png)\n\n`Xception`的结构和`Inception`结构类似，同样也分为三个部分：entry flow、middle flow、exit flow。总共包含14个block，其中entry flow有4个，middle flow有重复8次即8个block，exit flow有两个。\n其中entry flow和exit flow中的block结构如下图所示：\n\n![block](http://39.105.26.229:4567/20191030103011544.png)\n\nmiddle flow的block结构如下图所示：\n\n![block](http://39.105.26.229:4567/2019111310354382.png)\n\n如果对于之前的ResNet已经有学习过，相信你已经对这个结构游刃有余了，所以直接来看代码吧。\n\n代码如下\n```python\n#-------------------------------------------------------------#\n#   Xception的网络部分\n#-------------------------------------------------------------#\ndef Xception(input_shape = [299,299,3],classes=1000):\n    img_input = Input(shape=input_shape)\n    #--------------------------#\n    # Entry flow\n    #--------------------------#\n    #--------------------#\n    # block1\n    #--------------------#\n    # 299,299,3 -> 149,149,64\n    x = Conv2D(32, (3, 3), strides=(2, 2), use_bias=False, name='block1_conv1')(img_input)\n    x = BatchNormalization(name='block1_conv1_bn')(x)\n    x = Activation('relu', name='block1_conv1_act')(x)\n    x = Conv2D(64, (3, 3), use_bias=False, name='block1_conv2')(x)\n    x = BatchNormalization(name='block1_conv2_bn')(x)\n    x = Activation('relu', name='block1_conv2_act')(x)\n\n    #--------------------#\n    # block2\n    #--------------------#\n    # 149,149,64 -> 75,75,128\n    residual = Conv2D(128, (1, 1), strides=(2, 2), padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = SeparableConv2D(128, (3, 3), padding='same', use_bias=False, name='block2_sepconv1')(x)\n    x = BatchNormalization(name='block2_sepconv1_bn')(x)\n    x = Activation('relu', name='block2_sepconv2_act')(x)\n    x = SeparableConv2D(128, (3, 3), padding='same', use_bias=False, name='block2_sepconv2')(x)\n    x = BatchNormalization(name='block2_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block2_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block3\n    #--------------------#\n    # 75,75,128 -> 38,38,256\n    residual = Conv2D(256, (1, 1), strides=(2, 2),padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation('relu', name='block3_sepconv1_act')(x)\n    x = SeparableConv2D(256, (3, 3), padding='same', use_bias=False, name='block3_sepconv1')(x)\n    x = BatchNormalization(name='block3_sepconv1_bn')(x)\n    x = Activation('relu', name='block3_sepconv2_act')(x)\n    x = SeparableConv2D(256, (3, 3), padding='same', use_bias=False, name='block3_sepconv2')(x)\n    x = BatchNormalization(name='block3_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block3_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block4\n    #--------------------#\n    # 38,38,256 -> 19,19,728\n    residual = Conv2D(728, (1, 1), strides=(2, 2),padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation('relu', name='block4_sepconv1_act')(x)\n    x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name='block4_sepconv1')(x)\n    x = BatchNormalization(name='block4_sepconv1_bn')(x)\n    x = Activation('relu', name='block4_sepconv2_act')(x)\n    x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name='block4_sepconv2')(x)\n    x = BatchNormalization(name='block4_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block4_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------------#\n    # Middle flow\n    #--------------------------#\n    #--------------------#\n    # block5--block12\n    #--------------------#\n    # 19,19,728 -> 19,19,728\n    for i in range(8):\n        residual = x\n        prefix = 'block' + str(i + 5)\n\n        x = Activation('relu', name=prefix + '_sepconv1_act')(x)\n        x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name=prefix + '_sepconv1')(x)\n        x = BatchNormalization(name=prefix + '_sepconv1_bn')(x)\n        x = Activation('relu', name=prefix + '_sepconv2_act')(x)\n        x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name=prefix + '_sepconv2')(x)\n        x = BatchNormalization(name=prefix + '_sepconv2_bn')(x)\n        x = Activation('relu', name=prefix + '_sepconv3_act')(x)\n        x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name=prefix + '_sepconv3')(x)\n        x = BatchNormalization(name=prefix + '_sepconv3_bn')(x)\n\n        x = layers.add([x, residual])\n    #--------------------------#\n    # Exit flow\n    #--------------------------#\n    #--------------------#\n    # block13\n    #--------------------#\n    # 19,19,728 -> 10,10,1024\n    residual = Conv2D(1024, (1, 1), strides=(2, 2),\n                      padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation('relu', name='block13_sepconv1_act')(x)\n    x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name='block13_sepconv1')(x)\n    x = BatchNormalization(name='block13_sepconv1_bn')(x)\n    x = Activation('relu', name='block13_sepconv2_act')(x)\n    x = SeparableConv2D(1024, (3, 3), padding='same', use_bias=False, name='block13_sepconv2')(x)\n    x = BatchNormalization(name='block13_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block13_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block14\n    #--------------------#\n    # 10,10,1024 -> 10,10,2048\n    x = SeparableConv2D(1536, (3, 3), padding='same', use_bias=False, name='block14_sepconv1')(x)\n    x = BatchNormalization(name='block14_sepconv1_bn')(x)\n    x = Activation('relu', name='block14_sepconv1_act')(x)\n\n    x = SeparableConv2D(2048, (3, 3), padding='same', use_bias=False, name='block14_sepconv2')(x)\n    x = BatchNormalization(name='block14_sepconv2_bn')(x)\n    x = Activation('relu', name='block14_sepconv2_act')(x)\n\n    x = GlobalAveragePooling2D(name='avg_pool')(x)\n    x = Dense(classes, activation='softmax', name='predictions')(x)\n    inputs = img_input\n    model = Model(inputs, x, name='xception')\n    return model\n```\n\n\n","source":"_posts/feature_extractor/Inception.md","raw":"---\ntitle: Inception\ndate: 2021-04-20 23:39:26\ntop: true\ncover: true\ncategories:\n- Deep Learning\ntags:\n- Inceptionv3\n- Xception\n- Fanrencli\nauthor: Fanrencli\n---\n \n## 深度学习神经网络特征提取（四）\n\n`Inception`模型是谷歌提出的`GoogLeNet`网络中的主干特征提取网络。从`Inceptionv1`到`Xception`，模型的结构不断的改进，本文针对其中较为经典的`Inceptionv3`和`Xception`进行介绍。\n\n### Inceptionv3模型\n\n`Inceptionv3`模型相比于其他模型创新在于使用了四个并行分支，且每个分支采用的卷积核大小不同，使得存在不同的感受野，最后在进行特征融合，得到不同尺度的特征。其主要包括三个部分：block1、block2、block3，由这些部分线性连接组成了`Inceptionv3`(其中层数可能会有一些改变，但是总体结构一样)。\n\n![block1](http://39.105.26.229:4567/2019111309515588.png)\nblock1中四个分支分别为不同卷积核大小的卷积层。\n![block2](http://39.105.26.229:4567/20191113095610269.png)\nblock2中四个分支中将原始的卷积操作转换成横向和纵向结合的卷积操作，通过这样操作可以减少参数量。\n![block3](http://39.105.26.229:4567/2019111309572648.png)\nblock3的卷积形式和block2的卷积形式相同，只是其中组合的卷积核大小不同。\n\n代码如下：\n\n```python\n#-------------------------------------------------------------#\n#   InceptionV3的网络部分\n#-------------------------------------------------------------#\ndef conv2d_bn(x, filters, num_row, num_col, padding='same', strides=(1, 1), name=None):\n    x = Conv2D(filters, (num_row, num_col), strides=strides, padding=padding, use_bias=False)(x)\n    x = BatchNormalization(scale=False)(x)\n    x = Activation('relu')(x)\n    return x\n\n\ndef InceptionV3(input_shape=[299,299,3], classes=1000):\n    img_input = Input(shape=input_shape)\n    # 299x299 -> 149x149\n    x = conv2d_bn(img_input, 32, 3, 3, strides=(2, 2), padding='valid')\n    # 149x149 -> 147x147\n    x = conv2d_bn(x, 32, 3, 3, padding='valid')\n    # 147x147 -> 147x147\n    x = conv2d_bn(x, 64, 3, 3)\n    # 147x147 -> 73x73\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    # 73x73 -> 73x73\n    x = conv2d_bn(x, 80, 1, 1, padding='valid')\n    # 73x73 -> 71x71\n    x = conv2d_bn(x, 192, 3, 3, padding='valid')\n    # 71x71 -> 35x35\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n\n    #--------------------------------#\n    #   Block1 35x35\n    #--------------------------------#\n    # Block1 part1\n    # 35 x 35 x 192 -> 35 x 35 x 256\n    branch1x1 = conv2d_bn(x, 64, 1, 1)#第一分支\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)# 第二分支\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)#第三分支\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)#第四分支\n    branch_pool = conv2d_bn(branch_pool, 32, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name='mixed0')\n\n    # Block1 part2\n    # 35 x 35 x 256 -> 35 x 35 x 288\n    branch1x1 = conv2d_bn(x, 64, 1, 1)\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 64, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name='mixed1')\n\n    # Block1 part3\n    # 35 x 35 x 288 -> 35 x 35 x 288\n    branch1x1 = conv2d_bn(x, 64, 1, 1)\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 64, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name='mixed2')\n\n    #--------------------------------#\n    #   Block2 17x17\n    #--------------------------------#\n    # Block2 part1\n    # 35 x 35 x 288 -> 17 x 17 x 768\n    branch3x3 = conv2d_bn(x, 384, 3, 3, strides=(2, 2), padding='valid')\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3, strides=(2, 2), padding='valid')\n\n    branch_pool = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    x = layers.concatenate([branch3x3, branch3x3dbl, branch_pool], axis=3, name='mixed3')\n\n    # Block2 part2\n    # 17 x 17 x 768 -> 17 x 17 x 768\n    branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n    branch7x7 = conv2d_bn(x, 128, 1, 1)\n    branch7x7 = conv2d_bn(branch7x7, 128, 1, 7)\n    branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n    branch7x7dbl = conv2d_bn(x, 128, 1, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 1, 7)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n    x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name='mixed4')\n\n    # Block2 part3 and part4\n    # 17 x 17 x 768 -> 17 x 17 x 768 -> 17 x 17 x 768\n    for i in range(2):\n        branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n        branch7x7 = conv2d_bn(x, 160, 1, 1)\n        branch7x7 = conv2d_bn(branch7x7, 160, 1, 7)\n        branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n        branch7x7dbl = conv2d_bn(x, 160, 1, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 7, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 1, 7)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 7, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n        branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n        branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n        x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name='mixed' + str(5 + i))\n\n    # Block2 part5\n    # 17 x 17 x 768 -> 17 x 17 x 768\n    branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n    branch7x7 = conv2d_bn(x, 192, 1, 1)\n    branch7x7 = conv2d_bn(branch7x7, 192, 1, 7)\n    branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n    branch7x7dbl = conv2d_bn(x, 192, 1, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n    x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name='mixed7')\n\n    #--------------------------------#\n    #   Block3 8x8\n    #--------------------------------#\n    # Block3 part1\n    # 17 x 17 x 768 -> 8 x 8 x 1280\n    branch3x3 = conv2d_bn(x, 192, 1, 1)\n    branch3x3 = conv2d_bn(branch3x3, 320, 3, 3, strides=(2, 2), padding='valid')\n\n    branch7x7x3 = conv2d_bn(x, 192, 1, 1)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 1, 7)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 7, 1)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 3, 3, strides=(2, 2), padding='valid')\n\n    branch_pool = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    x = layers.concatenate([branch3x3, branch7x7x3, branch_pool], axis=3, name='mixed8')\n\n    # Block3 part2 part3\n    # 8 x 8 x 1280 -> 8 x 8 x 2048 -> 8 x 8 x 2048\n    for i in range(2):\n        branch1x1 = conv2d_bn(x, 320, 1, 1)\n\n        branch3x3 = conv2d_bn(x, 384, 1, 1)\n        branch3x3_1 = conv2d_bn(branch3x3, 384, 1, 3)\n        branch3x3_2 = conv2d_bn(branch3x3, 384, 3, 1)\n        branch3x3 = layers.concatenate([branch3x3_1, branch3x3_2], axis=3, name='mixed9_' + str(i))\n\n        branch3x3dbl = conv2d_bn(x, 448, 1, 1)\n        branch3x3dbl = conv2d_bn(branch3x3dbl, 384, 3, 3)\n        branch3x3dbl_1 = conv2d_bn(branch3x3dbl, 384, 1, 3)\n        branch3x3dbl_2 = conv2d_bn(branch3x3dbl, 384, 3, 1)\n        branch3x3dbl = layers.concatenate([branch3x3dbl_1, branch3x3dbl_2], axis=3)\n\n        branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n        branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n        x = layers.concatenate([branch1x1, branch3x3, branch3x3dbl, branch_pool], axis=3, name='mixed' + str(9 + i))\n    # 平均池化后全连接。\n    x = GlobalAveragePooling2D(name='avg_pool')(x)\n    x = Dense(classes, activation='softmax', name='predictions')(x)\n    inputs = img_input\n    model = Model(inputs, x, name='inception_v3')\n    return model\n```\n\n### Xception模型\n\n`Xception`是在`Inceptionv3`的基础上改进而来的，主要的改进在原来的多尺寸卷积，使用了深度可分离卷积进行替换，关于深度可分离卷积在之前的`MobileNet`文章中已经介绍，所以我们直接来看`Xception`的网络结构吧。\n\n![Xception](http://39.105.26.229:4567/20191030102403596.png)\n\n`Xception`的结构和`Inception`结构类似，同样也分为三个部分：entry flow、middle flow、exit flow。总共包含14个block，其中entry flow有4个，middle flow有重复8次即8个block，exit flow有两个。\n其中entry flow和exit flow中的block结构如下图所示：\n\n![block](http://39.105.26.229:4567/20191030103011544.png)\n\nmiddle flow的block结构如下图所示：\n\n![block](http://39.105.26.229:4567/2019111310354382.png)\n\n如果对于之前的ResNet已经有学习过，相信你已经对这个结构游刃有余了，所以直接来看代码吧。\n\n代码如下\n```python\n#-------------------------------------------------------------#\n#   Xception的网络部分\n#-------------------------------------------------------------#\ndef Xception(input_shape = [299,299,3],classes=1000):\n    img_input = Input(shape=input_shape)\n    #--------------------------#\n    # Entry flow\n    #--------------------------#\n    #--------------------#\n    # block1\n    #--------------------#\n    # 299,299,3 -> 149,149,64\n    x = Conv2D(32, (3, 3), strides=(2, 2), use_bias=False, name='block1_conv1')(img_input)\n    x = BatchNormalization(name='block1_conv1_bn')(x)\n    x = Activation('relu', name='block1_conv1_act')(x)\n    x = Conv2D(64, (3, 3), use_bias=False, name='block1_conv2')(x)\n    x = BatchNormalization(name='block1_conv2_bn')(x)\n    x = Activation('relu', name='block1_conv2_act')(x)\n\n    #--------------------#\n    # block2\n    #--------------------#\n    # 149,149,64 -> 75,75,128\n    residual = Conv2D(128, (1, 1), strides=(2, 2), padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = SeparableConv2D(128, (3, 3), padding='same', use_bias=False, name='block2_sepconv1')(x)\n    x = BatchNormalization(name='block2_sepconv1_bn')(x)\n    x = Activation('relu', name='block2_sepconv2_act')(x)\n    x = SeparableConv2D(128, (3, 3), padding='same', use_bias=False, name='block2_sepconv2')(x)\n    x = BatchNormalization(name='block2_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block2_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block3\n    #--------------------#\n    # 75,75,128 -> 38,38,256\n    residual = Conv2D(256, (1, 1), strides=(2, 2),padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation('relu', name='block3_sepconv1_act')(x)\n    x = SeparableConv2D(256, (3, 3), padding='same', use_bias=False, name='block3_sepconv1')(x)\n    x = BatchNormalization(name='block3_sepconv1_bn')(x)\n    x = Activation('relu', name='block3_sepconv2_act')(x)\n    x = SeparableConv2D(256, (3, 3), padding='same', use_bias=False, name='block3_sepconv2')(x)\n    x = BatchNormalization(name='block3_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block3_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block4\n    #--------------------#\n    # 38,38,256 -> 19,19,728\n    residual = Conv2D(728, (1, 1), strides=(2, 2),padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation('relu', name='block4_sepconv1_act')(x)\n    x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name='block4_sepconv1')(x)\n    x = BatchNormalization(name='block4_sepconv1_bn')(x)\n    x = Activation('relu', name='block4_sepconv2_act')(x)\n    x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name='block4_sepconv2')(x)\n    x = BatchNormalization(name='block4_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block4_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------------#\n    # Middle flow\n    #--------------------------#\n    #--------------------#\n    # block5--block12\n    #--------------------#\n    # 19,19,728 -> 19,19,728\n    for i in range(8):\n        residual = x\n        prefix = 'block' + str(i + 5)\n\n        x = Activation('relu', name=prefix + '_sepconv1_act')(x)\n        x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name=prefix + '_sepconv1')(x)\n        x = BatchNormalization(name=prefix + '_sepconv1_bn')(x)\n        x = Activation('relu', name=prefix + '_sepconv2_act')(x)\n        x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name=prefix + '_sepconv2')(x)\n        x = BatchNormalization(name=prefix + '_sepconv2_bn')(x)\n        x = Activation('relu', name=prefix + '_sepconv3_act')(x)\n        x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name=prefix + '_sepconv3')(x)\n        x = BatchNormalization(name=prefix + '_sepconv3_bn')(x)\n\n        x = layers.add([x, residual])\n    #--------------------------#\n    # Exit flow\n    #--------------------------#\n    #--------------------#\n    # block13\n    #--------------------#\n    # 19,19,728 -> 10,10,1024\n    residual = Conv2D(1024, (1, 1), strides=(2, 2),\n                      padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation('relu', name='block13_sepconv1_act')(x)\n    x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name='block13_sepconv1')(x)\n    x = BatchNormalization(name='block13_sepconv1_bn')(x)\n    x = Activation('relu', name='block13_sepconv2_act')(x)\n    x = SeparableConv2D(1024, (3, 3), padding='same', use_bias=False, name='block13_sepconv2')(x)\n    x = BatchNormalization(name='block13_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block13_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block14\n    #--------------------#\n    # 10,10,1024 -> 10,10,2048\n    x = SeparableConv2D(1536, (3, 3), padding='same', use_bias=False, name='block14_sepconv1')(x)\n    x = BatchNormalization(name='block14_sepconv1_bn')(x)\n    x = Activation('relu', name='block14_sepconv1_act')(x)\n\n    x = SeparableConv2D(2048, (3, 3), padding='same', use_bias=False, name='block14_sepconv2')(x)\n    x = BatchNormalization(name='block14_sepconv2_bn')(x)\n    x = Activation('relu', name='block14_sepconv2_act')(x)\n\n    x = GlobalAveragePooling2D(name='avg_pool')(x)\n    x = Dense(classes, activation='softmax', name='predictions')(x)\n    inputs = img_input\n    model = Model(inputs, x, name='xception')\n    return model\n```\n\n\n","slug":"feature_extractor/Inception","published":1,"updated":"2021-04-21T08:05:42.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknr69kyb0000pkuo4ouf0ff3","content":"<h2 id=\"深度学习神经网络特征提取（四）\"><a href=\"#深度学习神经网络特征提取（四）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（四）\"></a>深度学习神经网络特征提取（四）</h2><p><code>Inception</code>模型是谷歌提出的<code>GoogLeNet</code>网络中的主干特征提取网络。从<code>Inceptionv1</code>到<code>Xception</code>，模型的结构不断的改进，本文针对其中较为经典的<code>Inceptionv3</code>和<code>Xception</code>进行介绍。</p>\n<h3 id=\"Inceptionv3模型\"><a href=\"#Inceptionv3模型\" class=\"headerlink\" title=\"Inceptionv3模型\"></a>Inceptionv3模型</h3><p><code>Inceptionv3</code>模型相比于其他模型创新在于使用了四个并行分支，且每个分支采用的卷积核大小不同，使得存在不同的感受野，最后在进行特征融合，得到不同尺度的特征。其主要包括三个部分：block1、block2、block3，由这些部分线性连接组成了<code>Inceptionv3</code>(其中层数可能会有一些改变，但是总体结构一样)。</p>\n<p><img src=\"http://39.105.26.229:4567/2019111309515588.png\" alt=\"block1\"><br>block1中四个分支分别为不同卷积核大小的卷积层。<br><img src=\"http://39.105.26.229:4567/20191113095610269.png\" alt=\"block2\"><br>block2中四个分支中将原始的卷积操作转换成横向和纵向结合的卷积操作，通过这样操作可以减少参数量。<br><img src=\"http://39.105.26.229:4567/2019111309572648.png\" alt=\"block3\"><br>block3的卷积形式和block2的卷积形式相同，只是其中组合的卷积核大小不同。</p>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token comment\" spellcheck=\"true\">#   InceptionV3的网络部分</span>\n<span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">conv2d_bn</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">,</span> num_row<span class=\"token punctuation\">,</span> num_col<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>num_row<span class=\"token punctuation\">,</span> num_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span>padding<span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>scale<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">InceptionV3</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">299</span><span class=\"token punctuation\">,</span><span class=\"token number\">299</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> classes<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    img_input <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span>input_shape<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 299x299 -> 149x149</span>\n    x <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>img_input<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 149x149 -> 147x147</span>\n    x <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 147x147 -> 147x147</span>\n    x <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 147x147 -> 73x73</span>\n    x <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 73x73 -> 73x73</span>\n    x <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 73x73 -> 71x71</span>\n    x <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 71x71 -> 35x35</span>\n    x <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\">#   Block1 35x35</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block1 part1</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 35 x 35 x 192 -> 35 x 35 x 256</span>\n    branch1x1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#第一分支</span>\n\n    branch5x5 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\"># 第二分支</span>\n    branch5x5 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch5x5<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#第三分支</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n    branch_pool <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#第四分支</span>\n    branch_pool <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch_pool<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch1x1<span class=\"token punctuation\">,</span> branch5x5<span class=\"token punctuation\">,</span> branch3x3dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed0'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block1 part2</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 35 x 35 x 256 -> 35 x 35 x 288</span>\n    branch1x1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    branch5x5 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch5x5 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch5x5<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n    branch_pool <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    branch_pool <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch_pool<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch1x1<span class=\"token punctuation\">,</span> branch5x5<span class=\"token punctuation\">,</span> branch3x3dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed1'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block1 part3</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 35 x 35 x 288 -> 35 x 35 x 288</span>\n    branch1x1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    branch5x5 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch5x5 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch5x5<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n    branch_pool <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    branch_pool <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch_pool<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch1x1<span class=\"token punctuation\">,</span> branch5x5<span class=\"token punctuation\">,</span> branch3x3dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed2'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\">#   Block2 17x17</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block2 part1</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 35 x 35 x 288 -> 17 x 17 x 768</span>\n    branch3x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n\n    branch_pool <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch3x3<span class=\"token punctuation\">,</span> branch3x3dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed3'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block2 part2</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 17 x 17 x 768 -> 17 x 17 x 768</span>\n    branch1x1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n    branch_pool <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    branch_pool <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch_pool<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch1x1<span class=\"token punctuation\">,</span> branch7x7<span class=\"token punctuation\">,</span> branch7x7dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed4'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block2 part3 and part4</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 17 x 17 x 768 -> 17 x 17 x 768 -> 17 x 17 x 768</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        branch1x1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7<span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n        branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n        branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n        branch_pool <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        branch_pool <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch_pool<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch1x1<span class=\"token punctuation\">,</span> branch7x7<span class=\"token punctuation\">,</span> branch7x7dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block2 part5</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 17 x 17 x 768 -> 17 x 17 x 768</span>\n    branch1x1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n    branch_pool <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    branch_pool <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch_pool<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch1x1<span class=\"token punctuation\">,</span> branch7x7<span class=\"token punctuation\">,</span> branch7x7dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed7'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\">#   Block3 8x8</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block3 part1</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 17 x 17 x 768 -> 8 x 8 x 1280</span>\n    branch3x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch3x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3<span class=\"token punctuation\">,</span> <span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n\n    branch7x7x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7x3<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    branch7x7x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7x3<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7x3<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n\n    branch_pool <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch3x3<span class=\"token punctuation\">,</span> branch7x7x3<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed8'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block3 part2 part3</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 8 x 8 x 1280 -> 8 x 8 x 2048 -> 8 x 8 x 2048</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        branch1x1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        branch3x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch3x3_1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3<span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        branch3x3_2 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3<span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch3x3 <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch3x3_1<span class=\"token punctuation\">,</span> branch3x3_2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed9_'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">448</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        branch3x3dbl_1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        branch3x3dbl_2 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch3x3dbl <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch3x3dbl_1<span class=\"token punctuation\">,</span> branch3x3dbl_2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n        branch_pool <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        branch_pool <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch_pool<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch1x1<span class=\"token punctuation\">,</span> branch3x3<span class=\"token punctuation\">,</span> branch3x3dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 平均池化后全连接。</span>\n    x <span class=\"token operator\">=</span> GlobalAveragePooling2D<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'avg_pool'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Dense<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'predictions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    inputs <span class=\"token operator\">=</span> img_input\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'inception_v3'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model</code></pre>\n<h3 id=\"Xception模型\"><a href=\"#Xception模型\" class=\"headerlink\" title=\"Xception模型\"></a>Xception模型</h3><p><code>Xception</code>是在<code>Inceptionv3</code>的基础上改进而来的，主要的改进在原来的多尺寸卷积，使用了深度可分离卷积进行替换，关于深度可分离卷积在之前的<code>MobileNet</code>文章中已经介绍，所以我们直接来看<code>Xception</code>的网络结构吧。</p>\n<p><img src=\"http://39.105.26.229:4567/20191030102403596.png\" alt=\"Xception\"></p>\n<p><code>Xception</code>的结构和<code>Inception</code>结构类似，同样也分为三个部分：entry flow、middle flow、exit flow。总共包含14个block，其中entry flow有4个，middle flow有重复8次即8个block，exit flow有两个。<br>其中entry flow和exit flow中的block结构如下图所示：</p>\n<p><img src=\"http://39.105.26.229:4567/20191030103011544.png\" alt=\"block\"></p>\n<p>middle flow的block结构如下图所示：</p>\n<p><img src=\"http://39.105.26.229:4567/2019111310354382.png\" alt=\"block\"></p>\n<p>如果对于之前的ResNet已经有学习过，相信你已经对这个结构游刃有余了，所以直接来看代码吧。</p>\n<p>代码如下</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token comment\" spellcheck=\"true\">#   Xception的网络部分</span>\n<span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Xception</span><span class=\"token punctuation\">(</span>input_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">299</span><span class=\"token punctuation\">,</span><span class=\"token number\">299</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>classes<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    img_input <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span>input_shape<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Entry flow</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># block1</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 299,299,3 -> 149,149,64</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block1_conv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>img_input<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block1_conv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block1_conv1_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block1_conv2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block1_conv2_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block1_conv2_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># block2</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 149,149,64 -> 75,75,128</span>\n    residual <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    residual <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>residual<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block2_sepconv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block2_sepconv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block2_sepconv2_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block2_sepconv2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block2_sepconv2_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block2_pool'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> residual<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># block3</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 75,75,128 -> 38,38,256</span>\n    residual <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    residual <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>residual<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block3_sepconv1_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block3_sepconv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block3_sepconv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block3_sepconv2_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block3_sepconv2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block3_sepconv2_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block3_pool'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> residual<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># block4</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 38,38,256 -> 19,19,728</span>\n    residual <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    residual <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>residual<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block4_sepconv1_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block4_sepconv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block4_sepconv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block4_sepconv2_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block4_sepconv2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block4_sepconv2_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block4_pool'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> residual<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Middle flow</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># block5--block12</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 19,19,728 -> 19,19,728</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        residual <span class=\"token operator\">=</span> x\n        prefix <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv1_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv2_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv2_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv3_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv3_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> residual<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Exit flow</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># block13</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 19,19,728 -> 10,10,1024</span>\n    residual <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    residual <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>residual<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block13_sepconv1_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block13_sepconv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block13_sepconv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block13_sepconv2_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block13_sepconv2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block13_sepconv2_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block13_pool'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> residual<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># block14</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 10,10,1024 -> 10,10,2048</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">1536</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block14_sepconv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block14_sepconv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block14_sepconv1_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block14_sepconv2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block14_sepconv2_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block14_sepconv2_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> GlobalAveragePooling2D<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'avg_pool'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Dense<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'predictions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    inputs <span class=\"token operator\">=</span> img_input\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'xception'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习神经网络特征提取（四）\"><a href=\"#深度学习神经网络特征提取（四）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（四）\"></a>深度学习神经网络特征提取（四）</h2><p><code>Inception</code>模型是谷歌提出的<code>GoogLeNet</code>网络中的主干特征提取网络。从<code>Inceptionv1</code>到<code>Xception</code>，模型的结构不断的改进，本文针对其中较为经典的<code>Inceptionv3</code>和<code>Xception</code>进行介绍。</p>\n<h3 id=\"Inceptionv3模型\"><a href=\"#Inceptionv3模型\" class=\"headerlink\" title=\"Inceptionv3模型\"></a>Inceptionv3模型</h3><p><code>Inceptionv3</code>模型相比于其他模型创新在于使用了四个并行分支，且每个分支采用的卷积核大小不同，使得存在不同的感受野，最后在进行特征融合，得到不同尺度的特征。其主要包括三个部分：block1、block2、block3，由这些部分线性连接组成了<code>Inceptionv3</code>(其中层数可能会有一些改变，但是总体结构一样)。</p>\n<p><img src=\"http://39.105.26.229:4567/2019111309515588.png\" alt=\"block1\"><br>block1中四个分支分别为不同卷积核大小的卷积层。<br><img src=\"http://39.105.26.229:4567/20191113095610269.png\" alt=\"block2\"><br>block2中四个分支中将原始的卷积操作转换成横向和纵向结合的卷积操作，通过这样操作可以减少参数量。<br><img src=\"http://39.105.26.229:4567/2019111309572648.png\" alt=\"block3\"><br>block3的卷积形式和block2的卷积形式相同，只是其中组合的卷积核大小不同。</p>\n<p>代码如下：</p>\n<pre><code class=\"python\">#-------------------------------------------------------------#\n#   InceptionV3的网络部分\n#-------------------------------------------------------------#\ndef conv2d_bn(x, filters, num_row, num_col, padding=&#39;same&#39;, strides=(1, 1), name=None):\n    x = Conv2D(filters, (num_row, num_col), strides=strides, padding=padding, use_bias=False)(x)\n    x = BatchNormalization(scale=False)(x)\n    x = Activation(&#39;relu&#39;)(x)\n    return x\n\n\ndef InceptionV3(input_shape=[299,299,3], classes=1000):\n    img_input = Input(shape=input_shape)\n    # 299x299 -&gt; 149x149\n    x = conv2d_bn(img_input, 32, 3, 3, strides=(2, 2), padding=&#39;valid&#39;)\n    # 149x149 -&gt; 147x147\n    x = conv2d_bn(x, 32, 3, 3, padding=&#39;valid&#39;)\n    # 147x147 -&gt; 147x147\n    x = conv2d_bn(x, 64, 3, 3)\n    # 147x147 -&gt; 73x73\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    # 73x73 -&gt; 73x73\n    x = conv2d_bn(x, 80, 1, 1, padding=&#39;valid&#39;)\n    # 73x73 -&gt; 71x71\n    x = conv2d_bn(x, 192, 3, 3, padding=&#39;valid&#39;)\n    # 71x71 -&gt; 35x35\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n\n    #--------------------------------#\n    #   Block1 35x35\n    #--------------------------------#\n    # Block1 part1\n    # 35 x 35 x 192 -&gt; 35 x 35 x 256\n    branch1x1 = conv2d_bn(x, 64, 1, 1)#第一分支\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)# 第二分支\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)#第三分支\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;)(x)#第四分支\n    branch_pool = conv2d_bn(branch_pool, 32, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name=&#39;mixed0&#39;)\n\n    # Block1 part2\n    # 35 x 35 x 256 -&gt; 35 x 35 x 288\n    branch1x1 = conv2d_bn(x, 64, 1, 1)\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;)(x)\n    branch_pool = conv2d_bn(branch_pool, 64, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name=&#39;mixed1&#39;)\n\n    # Block1 part3\n    # 35 x 35 x 288 -&gt; 35 x 35 x 288\n    branch1x1 = conv2d_bn(x, 64, 1, 1)\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;)(x)\n    branch_pool = conv2d_bn(branch_pool, 64, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name=&#39;mixed2&#39;)\n\n    #--------------------------------#\n    #   Block2 17x17\n    #--------------------------------#\n    # Block2 part1\n    # 35 x 35 x 288 -&gt; 17 x 17 x 768\n    branch3x3 = conv2d_bn(x, 384, 3, 3, strides=(2, 2), padding=&#39;valid&#39;)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3, strides=(2, 2), padding=&#39;valid&#39;)\n\n    branch_pool = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    x = layers.concatenate([branch3x3, branch3x3dbl, branch_pool], axis=3, name=&#39;mixed3&#39;)\n\n    # Block2 part2\n    # 17 x 17 x 768 -&gt; 17 x 17 x 768\n    branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n    branch7x7 = conv2d_bn(x, 128, 1, 1)\n    branch7x7 = conv2d_bn(branch7x7, 128, 1, 7)\n    branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n    branch7x7dbl = conv2d_bn(x, 128, 1, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 1, 7)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;)(x)\n    branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n    x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name=&#39;mixed4&#39;)\n\n    # Block2 part3 and part4\n    # 17 x 17 x 768 -&gt; 17 x 17 x 768 -&gt; 17 x 17 x 768\n    for i in range(2):\n        branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n        branch7x7 = conv2d_bn(x, 160, 1, 1)\n        branch7x7 = conv2d_bn(branch7x7, 160, 1, 7)\n        branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n        branch7x7dbl = conv2d_bn(x, 160, 1, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 7, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 1, 7)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 7, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n        branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;)(x)\n        branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n        x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name=&#39;mixed&#39; + str(5 + i))\n\n    # Block2 part5\n    # 17 x 17 x 768 -&gt; 17 x 17 x 768\n    branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n    branch7x7 = conv2d_bn(x, 192, 1, 1)\n    branch7x7 = conv2d_bn(branch7x7, 192, 1, 7)\n    branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n    branch7x7dbl = conv2d_bn(x, 192, 1, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;)(x)\n    branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n    x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name=&#39;mixed7&#39;)\n\n    #--------------------------------#\n    #   Block3 8x8\n    #--------------------------------#\n    # Block3 part1\n    # 17 x 17 x 768 -&gt; 8 x 8 x 1280\n    branch3x3 = conv2d_bn(x, 192, 1, 1)\n    branch3x3 = conv2d_bn(branch3x3, 320, 3, 3, strides=(2, 2), padding=&#39;valid&#39;)\n\n    branch7x7x3 = conv2d_bn(x, 192, 1, 1)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 1, 7)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 7, 1)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 3, 3, strides=(2, 2), padding=&#39;valid&#39;)\n\n    branch_pool = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    x = layers.concatenate([branch3x3, branch7x7x3, branch_pool], axis=3, name=&#39;mixed8&#39;)\n\n    # Block3 part2 part3\n    # 8 x 8 x 1280 -&gt; 8 x 8 x 2048 -&gt; 8 x 8 x 2048\n    for i in range(2):\n        branch1x1 = conv2d_bn(x, 320, 1, 1)\n\n        branch3x3 = conv2d_bn(x, 384, 1, 1)\n        branch3x3_1 = conv2d_bn(branch3x3, 384, 1, 3)\n        branch3x3_2 = conv2d_bn(branch3x3, 384, 3, 1)\n        branch3x3 = layers.concatenate([branch3x3_1, branch3x3_2], axis=3, name=&#39;mixed9_&#39; + str(i))\n\n        branch3x3dbl = conv2d_bn(x, 448, 1, 1)\n        branch3x3dbl = conv2d_bn(branch3x3dbl, 384, 3, 3)\n        branch3x3dbl_1 = conv2d_bn(branch3x3dbl, 384, 1, 3)\n        branch3x3dbl_2 = conv2d_bn(branch3x3dbl, 384, 3, 1)\n        branch3x3dbl = layers.concatenate([branch3x3dbl_1, branch3x3dbl_2], axis=3)\n\n        branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;)(x)\n        branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n        x = layers.concatenate([branch1x1, branch3x3, branch3x3dbl, branch_pool], axis=3, name=&#39;mixed&#39; + str(9 + i))\n    # 平均池化后全连接。\n    x = GlobalAveragePooling2D(name=&#39;avg_pool&#39;)(x)\n    x = Dense(classes, activation=&#39;softmax&#39;, name=&#39;predictions&#39;)(x)\n    inputs = img_input\n    model = Model(inputs, x, name=&#39;inception_v3&#39;)\n    return model</code></pre>\n<h3 id=\"Xception模型\"><a href=\"#Xception模型\" class=\"headerlink\" title=\"Xception模型\"></a>Xception模型</h3><p><code>Xception</code>是在<code>Inceptionv3</code>的基础上改进而来的，主要的改进在原来的多尺寸卷积，使用了深度可分离卷积进行替换，关于深度可分离卷积在之前的<code>MobileNet</code>文章中已经介绍，所以我们直接来看<code>Xception</code>的网络结构吧。</p>\n<p><img src=\"http://39.105.26.229:4567/20191030102403596.png\" alt=\"Xception\"></p>\n<p><code>Xception</code>的结构和<code>Inception</code>结构类似，同样也分为三个部分：entry flow、middle flow、exit flow。总共包含14个block，其中entry flow有4个，middle flow有重复8次即8个block，exit flow有两个。<br>其中entry flow和exit flow中的block结构如下图所示：</p>\n<p><img src=\"http://39.105.26.229:4567/20191030103011544.png\" alt=\"block\"></p>\n<p>middle flow的block结构如下图所示：</p>\n<p><img src=\"http://39.105.26.229:4567/2019111310354382.png\" alt=\"block\"></p>\n<p>如果对于之前的ResNet已经有学习过，相信你已经对这个结构游刃有余了，所以直接来看代码吧。</p>\n<p>代码如下</p>\n<pre><code class=\"python\">#-------------------------------------------------------------#\n#   Xception的网络部分\n#-------------------------------------------------------------#\ndef Xception(input_shape = [299,299,3],classes=1000):\n    img_input = Input(shape=input_shape)\n    #--------------------------#\n    # Entry flow\n    #--------------------------#\n    #--------------------#\n    # block1\n    #--------------------#\n    # 299,299,3 -&gt; 149,149,64\n    x = Conv2D(32, (3, 3), strides=(2, 2), use_bias=False, name=&#39;block1_conv1&#39;)(img_input)\n    x = BatchNormalization(name=&#39;block1_conv1_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block1_conv1_act&#39;)(x)\n    x = Conv2D(64, (3, 3), use_bias=False, name=&#39;block1_conv2&#39;)(x)\n    x = BatchNormalization(name=&#39;block1_conv2_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block1_conv2_act&#39;)(x)\n\n    #--------------------#\n    # block2\n    #--------------------#\n    # 149,149,64 -&gt; 75,75,128\n    residual = Conv2D(128, (1, 1), strides=(2, 2), padding=&#39;same&#39;, use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = SeparableConv2D(128, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block2_sepconv1&#39;)(x)\n    x = BatchNormalization(name=&#39;block2_sepconv1_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block2_sepconv2_act&#39;)(x)\n    x = SeparableConv2D(128, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block2_sepconv2&#39;)(x)\n    x = BatchNormalization(name=&#39;block2_sepconv2_bn&#39;)(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding=&#39;same&#39;, name=&#39;block2_pool&#39;)(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block3\n    #--------------------#\n    # 75,75,128 -&gt; 38,38,256\n    residual = Conv2D(256, (1, 1), strides=(2, 2),padding=&#39;same&#39;, use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation(&#39;relu&#39;, name=&#39;block3_sepconv1_act&#39;)(x)\n    x = SeparableConv2D(256, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block3_sepconv1&#39;)(x)\n    x = BatchNormalization(name=&#39;block3_sepconv1_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block3_sepconv2_act&#39;)(x)\n    x = SeparableConv2D(256, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block3_sepconv2&#39;)(x)\n    x = BatchNormalization(name=&#39;block3_sepconv2_bn&#39;)(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding=&#39;same&#39;, name=&#39;block3_pool&#39;)(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block4\n    #--------------------#\n    # 38,38,256 -&gt; 19,19,728\n    residual = Conv2D(728, (1, 1), strides=(2, 2),padding=&#39;same&#39;, use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation(&#39;relu&#39;, name=&#39;block4_sepconv1_act&#39;)(x)\n    x = SeparableConv2D(728, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block4_sepconv1&#39;)(x)\n    x = BatchNormalization(name=&#39;block4_sepconv1_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block4_sepconv2_act&#39;)(x)\n    x = SeparableConv2D(728, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block4_sepconv2&#39;)(x)\n    x = BatchNormalization(name=&#39;block4_sepconv2_bn&#39;)(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding=&#39;same&#39;, name=&#39;block4_pool&#39;)(x)\n    x = layers.add([x, residual])\n\n    #--------------------------#\n    # Middle flow\n    #--------------------------#\n    #--------------------#\n    # block5--block12\n    #--------------------#\n    # 19,19,728 -&gt; 19,19,728\n    for i in range(8):\n        residual = x\n        prefix = &#39;block&#39; + str(i + 5)\n\n        x = Activation(&#39;relu&#39;, name=prefix + &#39;_sepconv1_act&#39;)(x)\n        x = SeparableConv2D(728, (3, 3), padding=&#39;same&#39;, use_bias=False, name=prefix + &#39;_sepconv1&#39;)(x)\n        x = BatchNormalization(name=prefix + &#39;_sepconv1_bn&#39;)(x)\n        x = Activation(&#39;relu&#39;, name=prefix + &#39;_sepconv2_act&#39;)(x)\n        x = SeparableConv2D(728, (3, 3), padding=&#39;same&#39;, use_bias=False, name=prefix + &#39;_sepconv2&#39;)(x)\n        x = BatchNormalization(name=prefix + &#39;_sepconv2_bn&#39;)(x)\n        x = Activation(&#39;relu&#39;, name=prefix + &#39;_sepconv3_act&#39;)(x)\n        x = SeparableConv2D(728, (3, 3), padding=&#39;same&#39;, use_bias=False, name=prefix + &#39;_sepconv3&#39;)(x)\n        x = BatchNormalization(name=prefix + &#39;_sepconv3_bn&#39;)(x)\n\n        x = layers.add([x, residual])\n    #--------------------------#\n    # Exit flow\n    #--------------------------#\n    #--------------------#\n    # block13\n    #--------------------#\n    # 19,19,728 -&gt; 10,10,1024\n    residual = Conv2D(1024, (1, 1), strides=(2, 2),\n                      padding=&#39;same&#39;, use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation(&#39;relu&#39;, name=&#39;block13_sepconv1_act&#39;)(x)\n    x = SeparableConv2D(728, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block13_sepconv1&#39;)(x)\n    x = BatchNormalization(name=&#39;block13_sepconv1_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block13_sepconv2_act&#39;)(x)\n    x = SeparableConv2D(1024, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block13_sepconv2&#39;)(x)\n    x = BatchNormalization(name=&#39;block13_sepconv2_bn&#39;)(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding=&#39;same&#39;, name=&#39;block13_pool&#39;)(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block14\n    #--------------------#\n    # 10,10,1024 -&gt; 10,10,2048\n    x = SeparableConv2D(1536, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block14_sepconv1&#39;)(x)\n    x = BatchNormalization(name=&#39;block14_sepconv1_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block14_sepconv1_act&#39;)(x)\n\n    x = SeparableConv2D(2048, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block14_sepconv2&#39;)(x)\n    x = BatchNormalization(name=&#39;block14_sepconv2_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block14_sepconv2_act&#39;)(x)\n\n    x = GlobalAveragePooling2D(name=&#39;avg_pool&#39;)(x)\n    x = Dense(classes, activation=&#39;softmax&#39;, name=&#39;predictions&#39;)(x)\n    inputs = img_input\n    model = Model(inputs, x, name=&#39;xception&#39;)\n    return model</code></pre>\n"},{"title":"OpenNI2_OpenCV","date":"2020-12-06T01:24:37.000Z","mathjax":true,"markup":"mmark","author":"Fanrencli","_content":"\n## 奥比中光OpenNISDK安装（Linux）\n奥比中光针对ZaroP1开发板和深度摄像机提供了相关的[OpenNI2的SDK](https://abzg-oss.oss-cn-shenzhen.aliyuncs.com/files/OpenNI-Linux-Arm64-2.3.0.65.rar),针对Windows/Linux/Android不同平台提供了相关的[安装文档](https://developer.orbbec.com.cn/technical_library.html?id=30).根据官方文档将OpenNI2配置完成，注意官方文档中说Linux平台内置驱动不需要额外安装，但是需要仔细阅读`README`文件：\n```\nOpenNI\n------\n\nWebsite: http://structure.io/openni\n\nBuilding Prerequisites(前置依赖)\n======================\n\nLinux\n-----\n- GCC 4.x\n    From: http://gcc.gnu.org/releases.html\n    Or via apt:\n    sudo apt-get install g++\n- Python 2.6+/3.x\n    From: http://www.python.org/download/\n    Or via apt:\n    sudo apt-get install python\n- LibUSB 1.0.x\n    From: http://sourceforge.net/projects/libusb/files/libusb-1.0/\n    Or via apt:\n    sudo apt-get install libusb-1.0-0-dev\n- LibUDEV\n    sudo apt-get install libudev-dev\n- JDK 6.0\n    From: http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u32-downloads-1594644.html\n    Or via apt:\n    sudo apt-get install openjdk-6-jdk\n- FreeGLUT3\n    From: http://freeglut.sourceforge.net/index.php#download\n    Or via apt:\n    sudo apt-get install freeglut3-dev\n- Doxygen\n    From: http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc\n    Or via apt:\n    sudo apt-get install doxygen\n- GraphViz\n    From: http://www.graphviz.org/Download_linux_ubuntu.php\n    Or via apt:\n    sudo apt-get install graphviz\n```\n将以上的依赖安装完成之后，运行其中示例代码还需要安装对应的USB驱动，驱动安装方法如下(此方法将同目录下的USB驱动文件拷贝到系统目录中，并自动生成环境文件指明OpenNI的路径)：\n\n进入安装包OpenNI目录中\n```sh\n orbbec@localhost:OpenNI$ ./install.sh\n```\n最后，在安装文件中找到`NiViewer`运行文件，若文件不能运行，查看`chmod`权限。\n```sh\nsudo ./NiViewer\n```\n![结果图片](https://api.orbbec.com.cn/uploads/kindeditor/20200718113033.jpg)\n经过以上的配置过程，OpenNI的环境就配置完成了。\n\n## OpenCV在Arm平台上编译\n在运用开发板设备获取数据的时候，通常运用`OpenNI2`获取数据流，通过`OpenCV`对数据流进行转换，生成RGB图片和深度图片。\n\n### 下载源文件\n源文件[官方地址](https://opencv.org/releases/)，本文用的是`OpenCV3.4.3`版本。OpenCV编译的方法自行百度，编译完成后对orbbec中OpenNI2SDK和opencv进行配置。\n\n## OpenCV+OpenNI2配置\n根据官方给出的示例代码，进行编写。由于官方的代码是在`Makefile`文件中进行编写，所以opencv也需要在其中编写。根据`Makefile`文件编写规则进行编写。\n```Makefile\n#Includes\nCFLAGS = ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS = ${shell pkg-config opencv --libs}\n\n```\n其中`pkg-config`需要在系统中配置`opencv.pc`文件，文件内容，在安装的文件中可以找到，若没有则可能默认没有生成（opencv4之后的版本默认不生成），需要在编译的时候设置。\n\n`opencv`环境配置没有问题后，在orbbec提供的OpenNI2的文件中示例代码中进行整合开发。文件位置在：\n```sh\n/OpenNI/Samples/\n```\n选择其中`SimpleViewer`文件夹中的示例代码进行编写。在`CommonCppMakefile`文件夹中找到`CFLAGS`和`LDFLAGS`变量位置，在其后加上：\n```Makefile\n#Includes\nCFLAGS += ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS += ${shell pkg-config opencv --libs}\n\n```\n此外还需要在`Makefile`文件中加入OpenNI头文件的路径和Redist的路径，这就是在配置OpenNI时运行`install.sh`文件生成的环境文件中的内容，也在同级目录下。\n\n其后编译即可通过。接下来就可以使用opencv对数据进行获取保存了。","source":"_posts/other/OpenNI2-OpenCV.md","raw":"---\ntitle: OpenNI2_OpenCV\ndate: 2020-12-06 09:24:37\nmathjax: true\nmarkup: mmark\ncategories:\n  - 环境配置\ntags:\n  - Orbbec_OpenNI\n  - OpenCV\n  - Fanrencli\nauthor: Fanrencli\n---\n\n## 奥比中光OpenNISDK安装（Linux）\n奥比中光针对ZaroP1开发板和深度摄像机提供了相关的[OpenNI2的SDK](https://abzg-oss.oss-cn-shenzhen.aliyuncs.com/files/OpenNI-Linux-Arm64-2.3.0.65.rar),针对Windows/Linux/Android不同平台提供了相关的[安装文档](https://developer.orbbec.com.cn/technical_library.html?id=30).根据官方文档将OpenNI2配置完成，注意官方文档中说Linux平台内置驱动不需要额外安装，但是需要仔细阅读`README`文件：\n```\nOpenNI\n------\n\nWebsite: http://structure.io/openni\n\nBuilding Prerequisites(前置依赖)\n======================\n\nLinux\n-----\n- GCC 4.x\n    From: http://gcc.gnu.org/releases.html\n    Or via apt:\n    sudo apt-get install g++\n- Python 2.6+/3.x\n    From: http://www.python.org/download/\n    Or via apt:\n    sudo apt-get install python\n- LibUSB 1.0.x\n    From: http://sourceforge.net/projects/libusb/files/libusb-1.0/\n    Or via apt:\n    sudo apt-get install libusb-1.0-0-dev\n- LibUDEV\n    sudo apt-get install libudev-dev\n- JDK 6.0\n    From: http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u32-downloads-1594644.html\n    Or via apt:\n    sudo apt-get install openjdk-6-jdk\n- FreeGLUT3\n    From: http://freeglut.sourceforge.net/index.php#download\n    Or via apt:\n    sudo apt-get install freeglut3-dev\n- Doxygen\n    From: http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc\n    Or via apt:\n    sudo apt-get install doxygen\n- GraphViz\n    From: http://www.graphviz.org/Download_linux_ubuntu.php\n    Or via apt:\n    sudo apt-get install graphviz\n```\n将以上的依赖安装完成之后，运行其中示例代码还需要安装对应的USB驱动，驱动安装方法如下(此方法将同目录下的USB驱动文件拷贝到系统目录中，并自动生成环境文件指明OpenNI的路径)：\n\n进入安装包OpenNI目录中\n```sh\n orbbec@localhost:OpenNI$ ./install.sh\n```\n最后，在安装文件中找到`NiViewer`运行文件，若文件不能运行，查看`chmod`权限。\n```sh\nsudo ./NiViewer\n```\n![结果图片](https://api.orbbec.com.cn/uploads/kindeditor/20200718113033.jpg)\n经过以上的配置过程，OpenNI的环境就配置完成了。\n\n## OpenCV在Arm平台上编译\n在运用开发板设备获取数据的时候，通常运用`OpenNI2`获取数据流，通过`OpenCV`对数据流进行转换，生成RGB图片和深度图片。\n\n### 下载源文件\n源文件[官方地址](https://opencv.org/releases/)，本文用的是`OpenCV3.4.3`版本。OpenCV编译的方法自行百度，编译完成后对orbbec中OpenNI2SDK和opencv进行配置。\n\n## OpenCV+OpenNI2配置\n根据官方给出的示例代码，进行编写。由于官方的代码是在`Makefile`文件中进行编写，所以opencv也需要在其中编写。根据`Makefile`文件编写规则进行编写。\n```Makefile\n#Includes\nCFLAGS = ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS = ${shell pkg-config opencv --libs}\n\n```\n其中`pkg-config`需要在系统中配置`opencv.pc`文件，文件内容，在安装的文件中可以找到，若没有则可能默认没有生成（opencv4之后的版本默认不生成），需要在编译的时候设置。\n\n`opencv`环境配置没有问题后，在orbbec提供的OpenNI2的文件中示例代码中进行整合开发。文件位置在：\n```sh\n/OpenNI/Samples/\n```\n选择其中`SimpleViewer`文件夹中的示例代码进行编写。在`CommonCppMakefile`文件夹中找到`CFLAGS`和`LDFLAGS`变量位置，在其后加上：\n```Makefile\n#Includes\nCFLAGS += ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS += ${shell pkg-config opencv --libs}\n\n```\n此外还需要在`Makefile`文件中加入OpenNI头文件的路径和Redist的路径，这就是在配置OpenNI时运行`install.sh`文件生成的环境文件中的内容，也在同级目录下。\n\n其后编译即可通过。接下来就可以使用opencv对数据进行获取保存了。","slug":"other/OpenNI2-OpenCV","published":1,"updated":"2021-04-22T06:46:12.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknsx2fq40000scuo4t9adrdr","content":"<h2 id=\"奥比中光OpenNISDK安装（Linux）\"><a href=\"#奥比中光OpenNISDK安装（Linux）\" class=\"headerlink\" title=\"奥比中光OpenNISDK安装（Linux）\"></a>奥比中光OpenNISDK安装（Linux）</h2><p>奥比中光针对ZaroP1开发板和深度摄像机提供了相关的<a href=\"https://abzg-oss.oss-cn-shenzhen.aliyuncs.com/files/OpenNI-Linux-Arm64-2.3.0.65.rar\">OpenNI2的SDK</a>,针对Windows/Linux/Android不同平台提供了相关的<a href=\"https://developer.orbbec.com.cn/technical_library.html?id=30\">安装文档</a>.根据官方文档将OpenNI2配置完成，注意官方文档中说Linux平台内置驱动不需要额外安装，但是需要仔细阅读<code>README</code>文件：</p>\n<pre><code>OpenNI\n------\n\nWebsite: http://structure.io/openni\n\nBuilding Prerequisites(前置依赖)\n======================\n\nLinux\n-----\n- GCC 4.x\n    From: http://gcc.gnu.org/releases.html\n    Or via apt:\n    sudo apt-get install g++\n- Python 2.6+/3.x\n    From: http://www.python.org/download/\n    Or via apt:\n    sudo apt-get install python\n- LibUSB 1.0.x\n    From: http://sourceforge.net/projects/libusb/files/libusb-1.0/\n    Or via apt:\n    sudo apt-get install libusb-1.0-0-dev\n- LibUDEV\n    sudo apt-get install libudev-dev\n- JDK 6.0\n    From: http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u32-downloads-1594644.html\n    Or via apt:\n    sudo apt-get install openjdk-6-jdk\n- FreeGLUT3\n    From: http://freeglut.sourceforge.net/index.php#download\n    Or via apt:\n    sudo apt-get install freeglut3-dev\n- Doxygen\n    From: http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc\n    Or via apt:\n    sudo apt-get install doxygen\n- GraphViz\n    From: http://www.graphviz.org/Download_linux_ubuntu.php\n    Or via apt:\n    sudo apt-get install graphviz</code></pre>\n<p>将以上的依赖安装完成之后，运行其中示例代码还需要安装对应的USB驱动，驱动安装方法如下(此方法将同目录下的USB驱动文件拷贝到系统目录中，并自动生成环境文件指明OpenNI的路径)：</p>\n<p>进入安装包OpenNI目录中</p>\n<pre class=\" language-sh\"><code class=\"language-sh\"> orbbec@localhost:OpenNI$ ./install.sh</code></pre>\n<p>最后，在安装文件中找到<code>NiViewer</code>运行文件，若文件不能运行，查看<code>chmod</code>权限。</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">sudo ./NiViewer</code></pre>\n<p><img src=\"https://api.orbbec.com.cn/uploads/kindeditor/20200718113033.jpg\" alt=\"结果图片\"><br>经过以上的配置过程，OpenNI的环境就配置完成了。</p>\n<h2 id=\"OpenCV在Arm平台上编译\"><a href=\"#OpenCV在Arm平台上编译\" class=\"headerlink\" title=\"OpenCV在Arm平台上编译\"></a>OpenCV在Arm平台上编译</h2><p>在运用开发板设备获取数据的时候，通常运用<code>OpenNI2</code>获取数据流，通过<code>OpenCV</code>对数据流进行转换，生成RGB图片和深度图片。</p>\n<h3 id=\"下载源文件\"><a href=\"#下载源文件\" class=\"headerlink\" title=\"下载源文件\"></a>下载源文件</h3><p>源文件<a href=\"https://opencv.org/releases/\">官方地址</a>，本文用的是<code>OpenCV3.4.3</code>版本。OpenCV编译的方法自行百度，编译完成后对orbbec中OpenNI2SDK和opencv进行配置。</p>\n<h2 id=\"OpenCV-OpenNI2配置\"><a href=\"#OpenCV-OpenNI2配置\" class=\"headerlink\" title=\"OpenCV+OpenNI2配置\"></a>OpenCV+OpenNI2配置</h2><p>根据官方给出的示例代码，进行编写。由于官方的代码是在<code>Makefile</code>文件中进行编写，所以opencv也需要在其中编写。根据<code>Makefile</code>文件编写规则进行编写。</p>\n<pre class=\" language-Makefile\"><code class=\"language-Makefile\">#Includes\nCFLAGS = ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS = ${shell pkg-config opencv --libs}\n</code></pre>\n<p>其中<code>pkg-config</code>需要在系统中配置<code>opencv.pc</code>文件，文件内容，在安装的文件中可以找到，若没有则可能默认没有生成（opencv4之后的版本默认不生成），需要在编译的时候设置。</p>\n<p><code>opencv</code>环境配置没有问题后，在orbbec提供的OpenNI2的文件中示例代码中进行整合开发。文件位置在：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">/OpenNI/Samples/</code></pre>\n<p>选择其中<code>SimpleViewer</code>文件夹中的示例代码进行编写。在<code>CommonCppMakefile</code>文件夹中找到<code>CFLAGS</code>和<code>LDFLAGS</code>变量位置，在其后加上：</p>\n<pre class=\" language-Makefile\"><code class=\"language-Makefile\">#Includes\nCFLAGS += ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS += ${shell pkg-config opencv --libs}\n</code></pre>\n<p>此外还需要在<code>Makefile</code>文件中加入OpenNI头文件的路径和Redist的路径，这就是在配置OpenNI时运行<code>install.sh</code>文件生成的环境文件中的内容，也在同级目录下。</p>\n<p>其后编译即可通过。接下来就可以使用opencv对数据进行获取保存了。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"奥比中光OpenNISDK安装（Linux）\"><a href=\"#奥比中光OpenNISDK安装（Linux）\" class=\"headerlink\" title=\"奥比中光OpenNISDK安装（Linux）\"></a>奥比中光OpenNISDK安装（Linux）</h2><p>奥比中光针对ZaroP1开发板和深度摄像机提供了相关的<a href=\"https://abzg-oss.oss-cn-shenzhen.aliyuncs.com/files/OpenNI-Linux-Arm64-2.3.0.65.rar\">OpenNI2的SDK</a>,针对Windows/Linux/Android不同平台提供了相关的<a href=\"https://developer.orbbec.com.cn/technical_library.html?id=30\">安装文档</a>.根据官方文档将OpenNI2配置完成，注意官方文档中说Linux平台内置驱动不需要额外安装，但是需要仔细阅读<code>README</code>文件：</p>\n<pre><code>OpenNI\n------\n\nWebsite: http://structure.io/openni\n\nBuilding Prerequisites(前置依赖)\n======================\n\nLinux\n-----\n- GCC 4.x\n    From: http://gcc.gnu.org/releases.html\n    Or via apt:\n    sudo apt-get install g++\n- Python 2.6+/3.x\n    From: http://www.python.org/download/\n    Or via apt:\n    sudo apt-get install python\n- LibUSB 1.0.x\n    From: http://sourceforge.net/projects/libusb/files/libusb-1.0/\n    Or via apt:\n    sudo apt-get install libusb-1.0-0-dev\n- LibUDEV\n    sudo apt-get install libudev-dev\n- JDK 6.0\n    From: http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u32-downloads-1594644.html\n    Or via apt:\n    sudo apt-get install openjdk-6-jdk\n- FreeGLUT3\n    From: http://freeglut.sourceforge.net/index.php#download\n    Or via apt:\n    sudo apt-get install freeglut3-dev\n- Doxygen\n    From: http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc\n    Or via apt:\n    sudo apt-get install doxygen\n- GraphViz\n    From: http://www.graphviz.org/Download_linux_ubuntu.php\n    Or via apt:\n    sudo apt-get install graphviz</code></pre>\n<p>将以上的依赖安装完成之后，运行其中示例代码还需要安装对应的USB驱动，驱动安装方法如下(此方法将同目录下的USB驱动文件拷贝到系统目录中，并自动生成环境文件指明OpenNI的路径)：</p>\n<p>进入安装包OpenNI目录中</p>\n<pre><code class=\"sh\"> orbbec@localhost:OpenNI$ ./install.sh</code></pre>\n<p>最后，在安装文件中找到<code>NiViewer</code>运行文件，若文件不能运行，查看<code>chmod</code>权限。</p>\n<pre><code class=\"sh\">sudo ./NiViewer</code></pre>\n<p><img src=\"https://api.orbbec.com.cn/uploads/kindeditor/20200718113033.jpg\" alt=\"结果图片\"><br>经过以上的配置过程，OpenNI的环境就配置完成了。</p>\n<h2 id=\"OpenCV在Arm平台上编译\"><a href=\"#OpenCV在Arm平台上编译\" class=\"headerlink\" title=\"OpenCV在Arm平台上编译\"></a>OpenCV在Arm平台上编译</h2><p>在运用开发板设备获取数据的时候，通常运用<code>OpenNI2</code>获取数据流，通过<code>OpenCV</code>对数据流进行转换，生成RGB图片和深度图片。</p>\n<h3 id=\"下载源文件\"><a href=\"#下载源文件\" class=\"headerlink\" title=\"下载源文件\"></a>下载源文件</h3><p>源文件<a href=\"https://opencv.org/releases/\">官方地址</a>，本文用的是<code>OpenCV3.4.3</code>版本。OpenCV编译的方法自行百度，编译完成后对orbbec中OpenNI2SDK和opencv进行配置。</p>\n<h2 id=\"OpenCV-OpenNI2配置\"><a href=\"#OpenCV-OpenNI2配置\" class=\"headerlink\" title=\"OpenCV+OpenNI2配置\"></a>OpenCV+OpenNI2配置</h2><p>根据官方给出的示例代码，进行编写。由于官方的代码是在<code>Makefile</code>文件中进行编写，所以opencv也需要在其中编写。根据<code>Makefile</code>文件编写规则进行编写。</p>\n<pre><code class=\"Makefile\">#Includes\nCFLAGS = $&#123;shell pkg-config opencv --cflags&#125;\n\n#lib\nLDFLAGS = $&#123;shell pkg-config opencv --libs&#125;\n</code></pre>\n<p>其中<code>pkg-config</code>需要在系统中配置<code>opencv.pc</code>文件，文件内容，在安装的文件中可以找到，若没有则可能默认没有生成（opencv4之后的版本默认不生成），需要在编译的时候设置。</p>\n<p><code>opencv</code>环境配置没有问题后，在orbbec提供的OpenNI2的文件中示例代码中进行整合开发。文件位置在：</p>\n<pre><code class=\"sh\">/OpenNI/Samples/</code></pre>\n<p>选择其中<code>SimpleViewer</code>文件夹中的示例代码进行编写。在<code>CommonCppMakefile</code>文件夹中找到<code>CFLAGS</code>和<code>LDFLAGS</code>变量位置，在其后加上：</p>\n<pre><code class=\"Makefile\">#Includes\nCFLAGS += $&#123;shell pkg-config opencv --cflags&#125;\n\n#lib\nLDFLAGS += $&#123;shell pkg-config opencv --libs&#125;\n</code></pre>\n<p>此外还需要在<code>Makefile</code>文件中加入OpenNI头文件的路径和Redist的路径，这就是在配置OpenNI时运行<code>install.sh</code>文件生成的环境文件中的内容，也在同级目录下。</p>\n<p>其后编译即可通过。接下来就可以使用opencv对数据进行获取保存了。</p>\n"},{"title":"Haar Wavelet（1）","date":"2020-10-23T04:33:49.000Z","author":"Fanrencli","_content":">haar小波变换的图像应用实例\n\n## Haar Wavelet 图片示例\n![Picture resolutions(512*512)](http://39.105.26.229:4567/pic.png)\n```python\nimport numpy as np\nimport cv2\nimport math\nimport requests\n\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #为了强化图片的显示效果，对数据进行归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == '__main__':\n    #读取网络图片（2选1）\n    file_pic=requests.get('http://39.105.26.229:4567/pic.png')\n    img= cv2.imdecode(np.fromstring(file_pic.content, np.uint8), 0).astype(np.float64)\n    #读取本地图片（2选1）\n    # img= cv2.imread(\"pic.png\",0).astype(np.float64)\n    cv2.imshow('asd',haar_dwt2D(img))\n    cv2.waitKey(0)\n    for i in range(0,img.shape[0]//2-1,img.shape[0]//2-1):\n        for j in range(0,img.shape[1]//2-1,img.shape[1]//2-1):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)  \n```","source":"_posts/other/haar_wavelet.md","raw":"---\ntitle: Haar Wavelet（1）\ndate: 2020-10-23 12:33:49\ncategories:\n  - 小波变换\ntags:\n  - Haar Wavelet\n  - Python\n  - Fanrencli\nauthor: Fanrencli\n---\n>haar小波变换的图像应用实例\n\n## Haar Wavelet 图片示例\n![Picture resolutions(512*512)](http://39.105.26.229:4567/pic.png)\n```python\nimport numpy as np\nimport cv2\nimport math\nimport requests\n\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #为了强化图片的显示效果，对数据进行归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == '__main__':\n    #读取网络图片（2选1）\n    file_pic=requests.get('http://39.105.26.229:4567/pic.png')\n    img= cv2.imdecode(np.fromstring(file_pic.content, np.uint8), 0).astype(np.float64)\n    #读取本地图片（2选1）\n    # img= cv2.imread(\"pic.png\",0).astype(np.float64)\n    cv2.imshow('asd',haar_dwt2D(img))\n    cv2.waitKey(0)\n    for i in range(0,img.shape[0]//2-1,img.shape[0]//2-1):\n        for j in range(0,img.shape[1]//2-1,img.shape[1]//2-1):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)  \n```","slug":"other/haar_wavelet","published":1,"updated":"2021-04-22T06:46:12.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknsx2fq90001scuohzjcdqks","content":"<blockquote>\n<p>haar小波变换的图像应用实例</p>\n</blockquote>\n<h2 id=\"Haar-Wavelet-图片示例\"><a href=\"#Haar-Wavelet-图片示例\" class=\"headerlink\" title=\"Haar Wavelet 图片示例\"></a>Haar Wavelet 图片示例</h2><p><img src=\"http://39.105.26.229:4567/pic.png\" alt=\"Picture resolutions(512*512)\"></p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> math\n<span class=\"token keyword\">import</span> requests\n\n<span class=\"token comment\" spellcheck=\"true\"># numpy数组归一化</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Normalize</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _range <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>img <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> _range\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: row or column of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array handle with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\" spellcheck=\"true\">#图片需要为2的次方形状</span>\n    length<span class=\"token operator\">=</span>len<span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    Low_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#小波变换的主体部分</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Low_frequency<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        High_frequency<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Low_frequency<span class=\"token punctuation\">,</span>High_frequency<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: array of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array of image handel with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>row_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>col_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#为了强化图片的显示效果，对数据进行归一化处理</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\">#读取网络图片（2选1）</span>\n    file_pic<span class=\"token operator\">=</span>requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://39.105.26.229:4567/pic.png'</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imdecode<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>file_pic<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#读取本地图片（2选1）</span>\n    <span class=\"token comment\" spellcheck=\"true\"># img= cv2.imread(\"pic.png\",0).astype(np.float64)</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">,</span>haar_dwt2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">:</span>j<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">:</span>j<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  </code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>haar小波变换的图像应用实例</p>\n</blockquote>\n<h2 id=\"Haar-Wavelet-图片示例\"><a href=\"#Haar-Wavelet-图片示例\" class=\"headerlink\" title=\"Haar Wavelet 图片示例\"></a>Haar Wavelet 图片示例</h2><p><img src=\"http://39.105.26.229:4567/pic.png\" alt=\"Picture resolutions(512*512)\"></p>\n<pre><code class=\"python\">import numpy as np\nimport cv2\nimport math\nimport requests\n\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #为了强化图片的显示效果，对数据进行归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == &#39;__main__&#39;:\n    #读取网络图片（2选1）\n    file_pic=requests.get(&#39;http://39.105.26.229:4567/pic.png&#39;)\n    img= cv2.imdecode(np.fromstring(file_pic.content, np.uint8), 0).astype(np.float64)\n    #读取本地图片（2选1）\n    # img= cv2.imread(&quot;pic.png&quot;,0).astype(np.float64)\n    cv2.imshow(&#39;asd&#39;,haar_dwt2D(img))\n    cv2.waitKey(0)\n    for i in range(0,img.shape[0]//2-1,img.shape[0]//2-1):\n        for j in range(0,img.shape[1]//2-1,img.shape[1]//2-1):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow(&#39;asd&#39;,img)\n    cv2.waitKey(0)  </code></pre>\n"},{"title":"Haar Wavelet（2）","date":"2020-10-23T04:33:49.000Z","mathjax":true,"markup":"mmark","author":"Fanrencli","_content":">haar小波变换的图像应用实例（优化）\n\n## 优化目标\n- 针对一维变换的循环处理方式，将使用矩阵运算进行代替\n- 针对二维的分行、列的处理方法，使用矩阵运算代替\n- 边界处理\n\n### 一维处理\n观察[上篇文章](https://fanrencli.cn/2020/10/27/haar-wavelet/)的代码,其中的一维变换代码`haar_dwt`，使用简单的循环处理方法，如下:\n```python \n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)\n```\n显然此种循环处理方法的性能不足，针对这个缺点，本文采用矩阵运算进行代替。首先分析循环的处理过程，转为矩阵方式，如下:\n$$Matrix_{lowfrequency}=\n{1\\over \\sqrt{2}}\n\\begin{pmatrix}\n1&1&0&\\cdots&\\cdots&0\\\\\\\\\n0&0&1&1&\\cdots&0\\\\\\\\\n\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\\\\\\\\n0&\\cdots&\\cdots&0&1&1\\\\\\\\\n\\end{pmatrix}（n*{n\\over 2}）\n$$\n$$Matrix_{highfrequency}=\n{1\\over \\sqrt{2}}\n\\begin{pmatrix}\n1&-1&0&\\cdots&\\cdots&0\\\\\\\\\n0&0&1&-1&\\cdots&0\\\\\\\\\n\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\\\\\\\\n0&\\cdots&\\cdots&0&1&-1\\\\\\\\\n\\end{pmatrix}（n*{n\\over 2}）\n$$\n$$\nLowfrequency=Matrix_{lowfrequency}\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nHighfrequency=Matrix_{highfrequency}\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{roworcol}=\n\\begin{pmatrix}\nLowfrequency\\\\\\\\\nHighfrequency\\\\\\\\\n\\end{pmatrix}\n$$\n由此分析，针对代码进行优化，将矩阵构造处理抽取出来作为一个函数`Create_haar_matrix`，这样便于以后根据图像分辨率进行构建矩阵，并且将$Matrix_{lowfrequency}$与$Matrix_{highfrequency}$合成为一个矩阵T,有以下的运算过程:\n$$\nT=\n\\begin{pmatrix}\nMatrix_{lowfrequency}\\\\\\\\\nMatrix_{highfrequency}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{roworcol}=T\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n代码如下:\n```python\n#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(length):\n    half_length=length//2\n    haar_wavelet_matrix=np.zeros((length,length),dtype=float)\n    for i in range(half_length):\n        haar_wavelet_matrix[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(haar_wavelet_matrix,row_or_col)\n    return Low_High_frequency\n\n```\n### 二维处理\n观察上篇文章的代码,其中的二维变换代码`haar_dwt2D`，使用简单的循环处理方法，如下:\n```python\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n此处代码，分行列分别进行运算，由一维变换过程:\n$$\nimg_{roworcol}=T\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n对此进行拓展得到：\n$$\nimg=T\\cdot\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1n}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nn}\\\\\\\\\n\\end{pmatrix}\n$$\n进而代码如下：\n```python\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n紧接着对代码的这个部分进行思考：\n```python\n    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T\n```\n此部分的代码逻辑过程可描述为：\n$$\nimg_{pic}=\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1n}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nn}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{row}=T \\cdot img_{pic}\n$$\n$$\nimg_{col}=T \\cdot (img_{row})^T\n$$\n$$\nimg_{pic}=(img_{col})^T\n$$\n即：\n$$\nimg_{pic}= (T \\cdot (T \\cdot img_{pic})^T)^T=T\\cdot img_{pic} \\cdot T^T\n$$\n由此将代码进一步转化：\n```python\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix,img),haar_wavelet_matrix.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n### 边界处理\n以上的处理基本解决了代码性能方面的不足，接着对代码的适用性进行考虑，此代码要求图片的分辨率必须为$2^x*2^x$，所以需要针对不是2的次方的图片进行扩展，思路：边界填充。\n> 边缘填充:\n> - 复制法：复制最边缘的像素\n> - 反射法：对称轴\n> - 外包装法：\n> - 常量法：用常量值填充四周\n\n本文选用其中的复制法，作为示例，在`python`中`OpenCV`提供了相关的方法`cv2.copyMakeBorder(src,top, bottom, left, right ,borderType,value)`。\n\n- src : 需要填充的图像\n- top : 图像上的填充边界长度\n- bottom : 图像下面的填充边界长度\n- left : 图像左边的填充边界长度\n- right : 图像右边的填充边界长度\n- borderType : 边界填充类型\n- value : 填充边界的颜色，常用于常量法。\n\n本文针对图像的分辨率，对于宽和高不是2的倍数，则对应边界添加一行复制行，本文代码用于每压缩一次则填充边界一次（即每次只填充一行，将行或列增加至2的倍数），并不是将边界一次扩展到2的次方倍，所以`haar_dwt2D`代码如下：\n```python\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n\n```\n由于图片的行列不在是2的次方倍数，且行列数不尽相同，根据上文提及的矩阵运算的过程，此时的运算过程:\n$$\nimg_{pic}=\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1m}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nm}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{row}=T_1 \\cdot img_{pic}\n$$\n$$\nimg_{col}=T_2 \\cdot (img_{row})^T\n$$\n$$\nimg_{pic}=(img_{col})^T\n$$\n即：\n$$\nimg_{pic}= (T_2 \\cdot (T_1 \\cdot img_{pic})^T)^T=T_1\\cdot img_{pic} \\cdot T_2^T\n$$\n针对`Create_haar_matrix`和`haar_dwt`的代码要进行调整:\n```python\ndef Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency\n```\n## 最终代码结果\n```python\nimport numpy as np\nimport cv2\nimport math\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == '__main__':\n    img= cv2.imread(\"pic1.png\",0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)\n```\n注意考虑到代码的适用性，本文的代码仅可以压缩一次。若需要连续压缩，需要将需要压缩的图片数据单独取出，重新输入，考虑到代码的适用性，以后再做更新。即以下的形式不正确：\n```python\nif __name__ == '__main__':\n    img= cv2.imread(\"pic.png\",0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)\n    #!!!!!!!本文代码在此处不能照抄之前的运行代码，本文已经删除以下代码。\n    for i in range(0,img.shape[0]//2+1,img.shape[0]//2):\n        for j in range(0,img.shape[1]//2+1,img.shape[1]//2):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)  \n```\n## 最后的思考\n>  本文采用haar wavelet对图像进行压缩，运算过程中将图像以行列作为区别，将二维图像转为一维矩阵运算，本质上应该还是属于一维的运算方法，但此方法感觉不应止于此。根据haar wavelet的计算原理，可否使用二维计算方法，即使用卷积计算。\n>\n> 计算思路如下:\n> \n> 压缩后的每一个图像像素点仅与压缩前的2x2矩阵中的信息相关，所以针对这一特性，我们只需要给出4个不同的卷积核，分别对应于$LL,LH,HL,HH,$这四个图像。本文针对Haar wavelet,给出以下四个卷积矩阵：\n> $$LL= {1\\over 2}\n\\begin{pmatrix}\n1&1\\\\\\\\\n1&1\\\\\\\\\n\\end{pmatrix}\n>$$\n>$$HH= {1\\over 2}\n\\begin{pmatrix}\n1&-1\\\\\\\\\n-1&1\\\\\\\\\n\\end{pmatrix}\n>$$\n> $$HL= {1\\over 2}\n\\begin{pmatrix}\n1&-1\\\\\\\\\n1&-1\\\\\\\\\n\\end{pmatrix}\n>$$\n> $$HL= {1\\over 2}\n\\begin{pmatrix}\n1&1\\\\\\\\\n-1&-1\\\\\\\\\n\\end{pmatrix}\n>$$\n>其中HL和LH的顺序可能不对，尚未验证。通过给出的四个卷积核，通过对图像进行卷积运算得出四个矩阵，即使haar wavelet的压缩结果。","source":"_posts/other/haar_wavelet_optimization.md","raw":"---\ntitle: Haar Wavelet（2）\ndate: 2020-10-23 12:33:49\nmathjax: true\nmarkup: mmark\ncategories:\n  - 小波变换\ntags:\n  - Haar Wavelet\n  - Python\n  - Fanrencli\nauthor: Fanrencli\n---\n>haar小波变换的图像应用实例（优化）\n\n## 优化目标\n- 针对一维变换的循环处理方式，将使用矩阵运算进行代替\n- 针对二维的分行、列的处理方法，使用矩阵运算代替\n- 边界处理\n\n### 一维处理\n观察[上篇文章](https://fanrencli.cn/2020/10/27/haar-wavelet/)的代码,其中的一维变换代码`haar_dwt`，使用简单的循环处理方法，如下:\n```python \n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)\n```\n显然此种循环处理方法的性能不足，针对这个缺点，本文采用矩阵运算进行代替。首先分析循环的处理过程，转为矩阵方式，如下:\n$$Matrix_{lowfrequency}=\n{1\\over \\sqrt{2}}\n\\begin{pmatrix}\n1&1&0&\\cdots&\\cdots&0\\\\\\\\\n0&0&1&1&\\cdots&0\\\\\\\\\n\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\\\\\\\\n0&\\cdots&\\cdots&0&1&1\\\\\\\\\n\\end{pmatrix}（n*{n\\over 2}）\n$$\n$$Matrix_{highfrequency}=\n{1\\over \\sqrt{2}}\n\\begin{pmatrix}\n1&-1&0&\\cdots&\\cdots&0\\\\\\\\\n0&0&1&-1&\\cdots&0\\\\\\\\\n\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\\\\\\\\n0&\\cdots&\\cdots&0&1&-1\\\\\\\\\n\\end{pmatrix}（n*{n\\over 2}）\n$$\n$$\nLowfrequency=Matrix_{lowfrequency}\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nHighfrequency=Matrix_{highfrequency}\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{roworcol}=\n\\begin{pmatrix}\nLowfrequency\\\\\\\\\nHighfrequency\\\\\\\\\n\\end{pmatrix}\n$$\n由此分析，针对代码进行优化，将矩阵构造处理抽取出来作为一个函数`Create_haar_matrix`，这样便于以后根据图像分辨率进行构建矩阵，并且将$Matrix_{lowfrequency}$与$Matrix_{highfrequency}$合成为一个矩阵T,有以下的运算过程:\n$$\nT=\n\\begin{pmatrix}\nMatrix_{lowfrequency}\\\\\\\\\nMatrix_{highfrequency}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{roworcol}=T\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n代码如下:\n```python\n#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(length):\n    half_length=length//2\n    haar_wavelet_matrix=np.zeros((length,length),dtype=float)\n    for i in range(half_length):\n        haar_wavelet_matrix[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(haar_wavelet_matrix,row_or_col)\n    return Low_High_frequency\n\n```\n### 二维处理\n观察上篇文章的代码,其中的二维变换代码`haar_dwt2D`，使用简单的循环处理方法，如下:\n```python\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n此处代码，分行列分别进行运算，由一维变换过程:\n$$\nimg_{roworcol}=T\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n对此进行拓展得到：\n$$\nimg=T\\cdot\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1n}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nn}\\\\\\\\\n\\end{pmatrix}\n$$\n进而代码如下：\n```python\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n紧接着对代码的这个部分进行思考：\n```python\n    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T\n```\n此部分的代码逻辑过程可描述为：\n$$\nimg_{pic}=\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1n}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nn}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{row}=T \\cdot img_{pic}\n$$\n$$\nimg_{col}=T \\cdot (img_{row})^T\n$$\n$$\nimg_{pic}=(img_{col})^T\n$$\n即：\n$$\nimg_{pic}= (T \\cdot (T \\cdot img_{pic})^T)^T=T\\cdot img_{pic} \\cdot T^T\n$$\n由此将代码进一步转化：\n```python\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix,img),haar_wavelet_matrix.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n### 边界处理\n以上的处理基本解决了代码性能方面的不足，接着对代码的适用性进行考虑，此代码要求图片的分辨率必须为$2^x*2^x$，所以需要针对不是2的次方的图片进行扩展，思路：边界填充。\n> 边缘填充:\n> - 复制法：复制最边缘的像素\n> - 反射法：对称轴\n> - 外包装法：\n> - 常量法：用常量值填充四周\n\n本文选用其中的复制法，作为示例，在`python`中`OpenCV`提供了相关的方法`cv2.copyMakeBorder(src,top, bottom, left, right ,borderType,value)`。\n\n- src : 需要填充的图像\n- top : 图像上的填充边界长度\n- bottom : 图像下面的填充边界长度\n- left : 图像左边的填充边界长度\n- right : 图像右边的填充边界长度\n- borderType : 边界填充类型\n- value : 填充边界的颜色，常用于常量法。\n\n本文针对图像的分辨率，对于宽和高不是2的倍数，则对应边界添加一行复制行，本文代码用于每压缩一次则填充边界一次（即每次只填充一行，将行或列增加至2的倍数），并不是将边界一次扩展到2的次方倍，所以`haar_dwt2D`代码如下：\n```python\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n\n```\n由于图片的行列不在是2的次方倍数，且行列数不尽相同，根据上文提及的矩阵运算的过程，此时的运算过程:\n$$\nimg_{pic}=\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1m}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nm}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{row}=T_1 \\cdot img_{pic}\n$$\n$$\nimg_{col}=T_2 \\cdot (img_{row})^T\n$$\n$$\nimg_{pic}=(img_{col})^T\n$$\n即：\n$$\nimg_{pic}= (T_2 \\cdot (T_1 \\cdot img_{pic})^T)^T=T_1\\cdot img_{pic} \\cdot T_2^T\n$$\n针对`Create_haar_matrix`和`haar_dwt`的代码要进行调整:\n```python\ndef Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency\n```\n## 最终代码结果\n```python\nimport numpy as np\nimport cv2\nimport math\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == '__main__':\n    img= cv2.imread(\"pic1.png\",0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)\n```\n注意考虑到代码的适用性，本文的代码仅可以压缩一次。若需要连续压缩，需要将需要压缩的图片数据单独取出，重新输入，考虑到代码的适用性，以后再做更新。即以下的形式不正确：\n```python\nif __name__ == '__main__':\n    img= cv2.imread(\"pic.png\",0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)\n    #!!!!!!!本文代码在此处不能照抄之前的运行代码，本文已经删除以下代码。\n    for i in range(0,img.shape[0]//2+1,img.shape[0]//2):\n        for j in range(0,img.shape[1]//2+1,img.shape[1]//2):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)  \n```\n## 最后的思考\n>  本文采用haar wavelet对图像进行压缩，运算过程中将图像以行列作为区别，将二维图像转为一维矩阵运算，本质上应该还是属于一维的运算方法，但此方法感觉不应止于此。根据haar wavelet的计算原理，可否使用二维计算方法，即使用卷积计算。\n>\n> 计算思路如下:\n> \n> 压缩后的每一个图像像素点仅与压缩前的2x2矩阵中的信息相关，所以针对这一特性，我们只需要给出4个不同的卷积核，分别对应于$LL,LH,HL,HH,$这四个图像。本文针对Haar wavelet,给出以下四个卷积矩阵：\n> $$LL= {1\\over 2}\n\\begin{pmatrix}\n1&1\\\\\\\\\n1&1\\\\\\\\\n\\end{pmatrix}\n>$$\n>$$HH= {1\\over 2}\n\\begin{pmatrix}\n1&-1\\\\\\\\\n-1&1\\\\\\\\\n\\end{pmatrix}\n>$$\n> $$HL= {1\\over 2}\n\\begin{pmatrix}\n1&-1\\\\\\\\\n1&-1\\\\\\\\\n\\end{pmatrix}\n>$$\n> $$HL= {1\\over 2}\n\\begin{pmatrix}\n1&1\\\\\\\\\n-1&-1\\\\\\\\\n\\end{pmatrix}\n>$$\n>其中HL和LH的顺序可能不对，尚未验证。通过给出的四个卷积核，通过对图像进行卷积运算得出四个矩阵，即使haar wavelet的压缩结果。","slug":"other/haar_wavelet_optimization","published":1,"updated":"2021-04-22T06:46:12.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknsx2fqb0003scuo2wsa59jg","content":"<blockquote>\n<p>haar小波变换的图像应用实例（优化）</p>\n</blockquote>\n<h2 id=\"优化目标\"><a href=\"#优化目标\" class=\"headerlink\" title=\"优化目标\"></a>优化目标</h2><ul>\n<li>针对一维变换的循环处理方式，将使用矩阵运算进行代替</li>\n<li>针对二维的分行、列的处理方法，使用矩阵运算代替</li>\n<li>边界处理</li>\n</ul>\n<h3 id=\"一维处理\"><a href=\"#一维处理\" class=\"headerlink\" title=\"一维处理\"></a>一维处理</h3><p>观察<a href=\"https://fanrencli.cn/2020/10/27/haar-wavelet/\">上篇文章</a>的代码,其中的一维变换代码<code>haar_dwt</code>，使用简单的循环处理方法，如下:</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#inputdata: row or column of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array handle with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\" spellcheck=\"true\">#图片需要为2的次方形状</span>\n    length<span class=\"token operator\">=</span>len<span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    Low_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#小波变换的主体部分</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Low_frequency<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        High_frequency<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Low_frequency<span class=\"token punctuation\">,</span>High_frequency<span class=\"token punctuation\">)</span></code></pre>\n<p>显然此种循环处理方法的性能不足，针对这个缺点，本文采用矩阵运算进行代替。首先分析循环的处理过程，转为矩阵方式，如下:<br>$$Matrix_{lowfrequency}=<br>{1\\over \\sqrt{2}}<br>\\begin{pmatrix}<br>1&amp;1&amp;0&amp;\\cdots&amp;\\cdots&amp;0\\\\<br>0&amp;0&amp;1&amp;1&amp;\\cdots&amp;0\\\\<br>\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\\\<br>0&amp;\\cdots&amp;\\cdots&amp;0&amp;1&amp;1\\\\<br>\\end{pmatrix}（n*{n\\over 2}）<br>$$<br>$$Matrix_{highfrequency}=<br>{1\\over \\sqrt{2}}<br>\\begin{pmatrix}<br>1&amp;-1&amp;0&amp;\\cdots&amp;\\cdots&amp;0\\\\<br>0&amp;0&amp;1&amp;-1&amp;\\cdots&amp;0\\\\<br>\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\\\<br>0&amp;\\cdots&amp;\\cdots&amp;0&amp;1&amp;-1\\\\<br>\\end{pmatrix}（n*{n\\over 2}）<br>$$<br>$$<br>Lowfrequency=Matrix_{lowfrequency}<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>Highfrequency=Matrix_{highfrequency}<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{roworcol}=<br>\\begin{pmatrix}<br>Lowfrequency\\\\<br>Highfrequency\\\\<br>\\end{pmatrix}<br>$$<br>由此分析，针对代码进行优化，将矩阵构造处理抽取出来作为一个函数<code>Create_haar_matrix</code>，这样便于以后根据图像分辨率进行构建矩阵，并且将$Matrix_{lowfrequency}$与$Matrix_{highfrequency}$合成为一个矩阵T,有以下的运算过程:<br>$$<br>T=<br>\\begin{pmatrix}<br>Matrix_{lowfrequency}\\\\<br>Matrix_{highfrequency}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{roworcol}=T<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>代码如下:</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#根据输入数组长度创建小波变换矩阵</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Create_haar_matrix</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    half_length<span class=\"token operator\">=</span>length<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    haar_wavelet_matrix<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>half_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        haar_wavelet_matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix<span class=\"token punctuation\">[</span>half_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix<span class=\"token punctuation\">[</span>half_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> haar_wavelet_matrix\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: row or column of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array handle with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    Low_High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>haar_wavelet_matrix<span class=\"token punctuation\">,</span>row_or_col<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Low_High_frequency\n</code></pre>\n<h3 id=\"二维处理\"><a href=\"#二维处理\" class=\"headerlink\" title=\"二维处理\"></a>二维处理</h3><p>观察上篇文章的代码,其中的二维变换代码<code>haar_dwt2D</code>，使用简单的循环处理方法，如下:</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#inputdata: array of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array of image handel with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>row_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>col_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#归一化处理</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img</code></pre>\n<p>此处代码，分行列分别进行运算，由一维变换过程:<br>$$<br>img_{roworcol}=T<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>对此进行拓展得到：<br>$$<br>img=T\\cdot<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1n}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nn}\\\\<br>\\end{pmatrix}<br>$$<br>进而代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#inputdata: array of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array of image handel with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\">#创建小波变换矩阵</span>\n    haar_wavelet_matrix<span class=\"token operator\">=</span>Create_haar_matrix<span class=\"token punctuation\">(</span>col_num<span class=\"token punctuation\">)</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>T\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img</code></pre>\n<p>紧接着对代码的这个部分进行思考：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>T</code></pre>\n<p>此部分的代码逻辑过程可描述为：<br>$$<br>img_{pic}=<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1n}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nn}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{row}=T \\cdot img_{pic}<br>$$<br>$$<br>img_{col}=T \\cdot (img_{row})^T<br>$$<br>$$<br>img_{pic}=(img_{col})^T<br>$$<br>即：<br>$$<br>img_{pic}= (T \\cdot (T \\cdot img_{pic})^T)^T=T\\cdot img_{pic} \\cdot T^T<br>$$<br>由此将代码进一步转化：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#inputdata: row or column of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array handle with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    Low_High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>haar_wavelet_matrix<span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Low_High_frequency\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: array of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array of image handel with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\">#创建小波变换矩阵</span>\n    haar_wavelet_matrix<span class=\"token operator\">=</span>Create_haar_matrix<span class=\"token punctuation\">(</span>col_num<span class=\"token punctuation\">)</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span>\n\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img</code></pre>\n<h3 id=\"边界处理\"><a href=\"#边界处理\" class=\"headerlink\" title=\"边界处理\"></a>边界处理</h3><p>以上的处理基本解决了代码性能方面的不足，接着对代码的适用性进行考虑，此代码要求图片的分辨率必须为$2^x*2^x$，所以需要针对不是2的次方的图片进行扩展，思路：边界填充。</p>\n<blockquote>\n<p>边缘填充:</p>\n<ul>\n<li>复制法：复制最边缘的像素</li>\n<li>反射法：对称轴</li>\n<li>外包装法：</li>\n<li>常量法：用常量值填充四周</li>\n</ul>\n</blockquote>\n<p>本文选用其中的复制法，作为示例，在<code>python</code>中<code>OpenCV</code>提供了相关的方法<code>cv2.copyMakeBorder(src,top, bottom, left, right ,borderType,value)</code>。</p>\n<ul>\n<li>src : 需要填充的图像</li>\n<li>top : 图像上的填充边界长度</li>\n<li>bottom : 图像下面的填充边界长度</li>\n<li>left : 图像左边的填充边界长度</li>\n<li>right : 图像右边的填充边界长度</li>\n<li>borderType : 边界填充类型</li>\n<li>value : 填充边界的颜色，常用于常量法。</li>\n</ul>\n<p>本文针对图像的分辨率，对于宽和高不是2的倍数，则对应边界添加一行复制行，本文代码用于每压缩一次则填充边界一次（即每次只填充一行，将行或列增加至2的倍数），并不是将边界一次扩展到2的次方倍，所以<code>haar_dwt2D</code>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\">#创建小波变换矩阵</span>\n    haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token operator\">=</span>Create_haar_matrix<span class=\"token punctuation\">(</span>row_num<span class=\"token punctuation\">,</span>col_num<span class=\"token punctuation\">)</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token punctuation\">)</span>\n\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img\n</code></pre>\n<p>由于图片的行列不在是2的次方倍数，且行列数不尽相同，根据上文提及的矩阵运算的过程，此时的运算过程:<br>$$<br>img_{pic}=<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1m}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nm}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{row}=T_1 \\cdot img_{pic}<br>$$<br>$$<br>img_{col}=T_2 \\cdot (img_{row})^T<br>$$<br>$$<br>img_{pic}=(img_{col})^T<br>$$<br>即：<br>$$<br>img_{pic}= (T_2 \\cdot (T_1 \\cdot img_{pic})^T)^T=T_1\\cdot img_{pic} \\cdot T_2^T<br>$$<br>针对<code>Create_haar_matrix</code>和<code>haar_dwt</code>的代码要进行调整:</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">Create_haar_matrix</span><span class=\"token punctuation\">(</span>row_length<span class=\"token punctuation\">,</span>col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    half_row_length<span class=\"token operator\">=</span>row_length<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_col_length<span class=\"token operator\">=</span>col_length<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    haar_wavelet_matrix_row<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row_length<span class=\"token punctuation\">,</span>row_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    haar_wavelet_matrix_col<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>col_length<span class=\"token punctuation\">,</span>col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>half_row_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>half_row_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>half_row_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>half_col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>half_col_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>half_col_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> haar_wavelet_matrix_col<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    Low_High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>haar_wavelet_matrix_col<span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Low_High_frequency</code></pre>\n<h2 id=\"最终代码结果\"><a href=\"#最终代码结果\" class=\"headerlink\" title=\"最终代码结果\"></a>最终代码结果</h2><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> math\n<span class=\"token comment\" spellcheck=\"true\"># numpy数组归一化</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Normalize</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _range <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>img <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> _range\n<span class=\"token comment\" spellcheck=\"true\">#根据输入数组长度创建小波变换矩阵</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Create_haar_matrix</span><span class=\"token punctuation\">(</span>row_length<span class=\"token punctuation\">,</span>col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    half_row_length<span class=\"token operator\">=</span>row_length<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_col_length<span class=\"token operator\">=</span>col_length<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    haar_wavelet_matrix_row<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row_length<span class=\"token punctuation\">,</span>row_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    haar_wavelet_matrix_col<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>col_length<span class=\"token punctuation\">,</span>col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>half_row_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>half_row_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>half_row_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>half_col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>half_col_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>half_col_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> haar_wavelet_matrix_col<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: row or column of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array handle with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    Low_High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>haar_wavelet_matrix_col<span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Low_High_frequency\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: array of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array of image handel with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\">#创建小波变换矩阵</span>\n    haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token operator\">=</span>Create_haar_matrix<span class=\"token punctuation\">(</span>row_num<span class=\"token punctuation\">,</span>col_num<span class=\"token punctuation\">)</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token punctuation\">)</span>\n\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    img<span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"pic1.png\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>haar_dwt2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre>\n<p>注意考虑到代码的适用性，本文的代码仅可以压缩一次。若需要连续压缩，需要将需要压缩的图片数据单独取出，重新输入，考虑到代码的适用性，以后再做更新。即以下的形式不正确：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    img<span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"pic.png\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>haar_dwt2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#!!!!!!!本文代码在此处不能照抄之前的运行代码，本文已经删除以下代码。</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">:</span>j<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">:</span>j<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  </code></pre>\n<h2 id=\"最后的思考\"><a href=\"#最后的思考\" class=\"headerlink\" title=\"最后的思考\"></a>最后的思考</h2><blockquote>\n<p> 本文采用haar wavelet对图像进行压缩，运算过程中将图像以行列作为区别，将二维图像转为一维矩阵运算，本质上应该还是属于一维的运算方法，但此方法感觉不应止于此。根据haar wavelet的计算原理，可否使用二维计算方法，即使用卷积计算。</p>\n<p>计算思路如下:</p>\n<p>压缩后的每一个图像像素点仅与压缩前的2x2矩阵中的信息相关，所以针对这一特性，我们只需要给出4个不同的卷积核，分别对应于$LL,LH,HL,HH,$这四个图像。本文针对Haar wavelet,给出以下四个卷积矩阵：<br>$$LL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;1\\\\<br>1&amp;1\\\\<br>\\end{pmatrix}<br>$$<br>$$HH= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;-1\\\\<br>-1&amp;1\\\\<br>\\end{pmatrix}<br>$$<br>$$HL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;-1\\\\<br>1&amp;-1\\\\<br>\\end{pmatrix}<br>$$<br>$$HL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;1\\\\<br>-1&amp;-1\\\\<br>\\end{pmatrix}<br>$$<br>其中HL和LH的顺序可能不对，尚未验证。通过给出的四个卷积核，通过对图像进行卷积运算得出四个矩阵，即使haar wavelet的压缩结果。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>haar小波变换的图像应用实例（优化）</p>\n</blockquote>\n<h2 id=\"优化目标\"><a href=\"#优化目标\" class=\"headerlink\" title=\"优化目标\"></a>优化目标</h2><ul>\n<li>针对一维变换的循环处理方式，将使用矩阵运算进行代替</li>\n<li>针对二维的分行、列的处理方法，使用矩阵运算代替</li>\n<li>边界处理</li>\n</ul>\n<h3 id=\"一维处理\"><a href=\"#一维处理\" class=\"headerlink\" title=\"一维处理\"></a>一维处理</h3><p>观察<a href=\"https://fanrencli.cn/2020/10/27/haar-wavelet/\">上篇文章</a>的代码,其中的一维变换代码<code>haar_dwt</code>，使用简单的循环处理方法，如下:</p>\n<pre><code class=\"python\">#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)</code></pre>\n<p>显然此种循环处理方法的性能不足，针对这个缺点，本文采用矩阵运算进行代替。首先分析循环的处理过程，转为矩阵方式，如下:<br>$$Matrix_{lowfrequency}=<br>{1\\over \\sqrt{2}}<br>\\begin{pmatrix}<br>1&amp;1&amp;0&amp;\\cdots&amp;\\cdots&amp;0\\\\<br>0&amp;0&amp;1&amp;1&amp;\\cdots&amp;0\\\\<br>\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\\\<br>0&amp;\\cdots&amp;\\cdots&amp;0&amp;1&amp;1\\\\<br>\\end{pmatrix}（n*{n\\over 2}）<br>$$<br>$$Matrix_{highfrequency}=<br>{1\\over \\sqrt{2}}<br>\\begin{pmatrix}<br>1&amp;-1&amp;0&amp;\\cdots&amp;\\cdots&amp;0\\\\<br>0&amp;0&amp;1&amp;-1&amp;\\cdots&amp;0\\\\<br>\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\\\<br>0&amp;\\cdots&amp;\\cdots&amp;0&amp;1&amp;-1\\\\<br>\\end{pmatrix}（n*{n\\over 2}）<br>$$<br>$$<br>Lowfrequency=Matrix_{lowfrequency}<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>Highfrequency=Matrix_{highfrequency}<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{roworcol}=<br>\\begin{pmatrix}<br>Lowfrequency\\\\<br>Highfrequency\\\\<br>\\end{pmatrix}<br>$$<br>由此分析，针对代码进行优化，将矩阵构造处理抽取出来作为一个函数<code>Create_haar_matrix</code>，这样便于以后根据图像分辨率进行构建矩阵，并且将$Matrix_{lowfrequency}$与$Matrix_{highfrequency}$合成为一个矩阵T,有以下的运算过程:<br>$$<br>T=<br>\\begin{pmatrix}<br>Matrix_{lowfrequency}\\\\<br>Matrix_{highfrequency}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{roworcol}=T<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>代码如下:</p>\n<pre><code class=\"python\">#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(length):\n    half_length=length//2\n    haar_wavelet_matrix=np.zeros((length,length),dtype=float)\n    for i in range(half_length):\n        haar_wavelet_matrix[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(haar_wavelet_matrix,row_or_col)\n    return Low_High_frequency\n</code></pre>\n<h3 id=\"二维处理\"><a href=\"#二维处理\" class=\"headerlink\" title=\"二维处理\"></a>二维处理</h3><p>观察上篇文章的代码,其中的二维变换代码<code>haar_dwt2D</code>，使用简单的循环处理方法，如下:</p>\n<pre><code class=\"python\">#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img</code></pre>\n<p>此处代码，分行列分别进行运算，由一维变换过程:<br>$$<br>img_{roworcol}=T<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>对此进行拓展得到：<br>$$<br>img=T\\cdot<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1n}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nn}\\\\<br>\\end{pmatrix}<br>$$<br>进而代码如下：</p>\n<pre><code class=\"python\">#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img</code></pre>\n<p>紧接着对代码的这个部分进行思考：</p>\n<pre><code class=\"python\">    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T</code></pre>\n<p>此部分的代码逻辑过程可描述为：<br>$$<br>img_{pic}=<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1n}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nn}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{row}=T \\cdot img_{pic}<br>$$<br>$$<br>img_{col}=T \\cdot (img_{row})^T<br>$$<br>$$<br>img_{pic}=(img_{col})^T<br>$$<br>即：<br>$$<br>img_{pic}= (T \\cdot (T \\cdot img_{pic})^T)^T=T\\cdot img_{pic} \\cdot T^T<br>$$<br>由此将代码进一步转化：</p>\n<pre><code class=\"python\">#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix,img),haar_wavelet_matrix.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img</code></pre>\n<h3 id=\"边界处理\"><a href=\"#边界处理\" class=\"headerlink\" title=\"边界处理\"></a>边界处理</h3><p>以上的处理基本解决了代码性能方面的不足，接着对代码的适用性进行考虑，此代码要求图片的分辨率必须为$2^x*2^x$，所以需要针对不是2的次方的图片进行扩展，思路：边界填充。</p>\n<blockquote>\n<p>边缘填充:</p>\n<ul>\n<li>复制法：复制最边缘的像素</li>\n<li>反射法：对称轴</li>\n<li>外包装法：</li>\n<li>常量法：用常量值填充四周</li>\n</ul>\n</blockquote>\n<p>本文选用其中的复制法，作为示例，在<code>python</code>中<code>OpenCV</code>提供了相关的方法<code>cv2.copyMakeBorder(src,top, bottom, left, right ,borderType,value)</code>。</p>\n<ul>\n<li>src : 需要填充的图像</li>\n<li>top : 图像上的填充边界长度</li>\n<li>bottom : 图像下面的填充边界长度</li>\n<li>left : 图像左边的填充边界长度</li>\n<li>right : 图像右边的填充边界长度</li>\n<li>borderType : 边界填充类型</li>\n<li>value : 填充边界的颜色，常用于常量法。</li>\n</ul>\n<p>本文针对图像的分辨率，对于宽和高不是2的倍数，则对应边界添加一行复制行，本文代码用于每压缩一次则填充边界一次（即每次只填充一行，将行或列增加至2的倍数），并不是将边界一次扩展到2的次方倍，所以<code>haar_dwt2D</code>代码如下：</p>\n<pre><code class=\"python\">def haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n</code></pre>\n<p>由于图片的行列不在是2的次方倍数，且行列数不尽相同，根据上文提及的矩阵运算的过程，此时的运算过程:<br>$$<br>img_{pic}=<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1m}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nm}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{row}=T_1 \\cdot img_{pic}<br>$$<br>$$<br>img_{col}=T_2 \\cdot (img_{row})^T<br>$$<br>$$<br>img_{pic}=(img_{col})^T<br>$$<br>即：<br>$$<br>img_{pic}= (T_2 \\cdot (T_1 \\cdot img_{pic})^T)^T=T_1\\cdot img_{pic} \\cdot T_2^T<br>$$<br>针对<code>Create_haar_matrix</code>和<code>haar_dwt</code>的代码要进行调整:</p>\n<pre><code class=\"python\">def Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency</code></pre>\n<h2 id=\"最终代码结果\"><a href=\"#最终代码结果\" class=\"headerlink\" title=\"最终代码结果\"></a>最终代码结果</h2><pre><code class=\"python\">import numpy as np\nimport cv2\nimport math\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == &#39;__main__&#39;:\n    img= cv2.imread(&quot;pic1.png&quot;,0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow(&#39;asd&#39;,img)\n    cv2.waitKey(0)</code></pre>\n<p>注意考虑到代码的适用性，本文的代码仅可以压缩一次。若需要连续压缩，需要将需要压缩的图片数据单独取出，重新输入，考虑到代码的适用性，以后再做更新。即以下的形式不正确：</p>\n<pre><code class=\"python\">if __name__ == &#39;__main__&#39;:\n    img= cv2.imread(&quot;pic.png&quot;,0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow(&#39;asd&#39;,img)\n    cv2.waitKey(0)\n    #!!!!!!!本文代码在此处不能照抄之前的运行代码，本文已经删除以下代码。\n    for i in range(0,img.shape[0]//2+1,img.shape[0]//2):\n        for j in range(0,img.shape[1]//2+1,img.shape[1]//2):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow(&#39;asd&#39;,img)\n    cv2.waitKey(0)  </code></pre>\n<h2 id=\"最后的思考\"><a href=\"#最后的思考\" class=\"headerlink\" title=\"最后的思考\"></a>最后的思考</h2><blockquote>\n<p> 本文采用haar wavelet对图像进行压缩，运算过程中将图像以行列作为区别，将二维图像转为一维矩阵运算，本质上应该还是属于一维的运算方法，但此方法感觉不应止于此。根据haar wavelet的计算原理，可否使用二维计算方法，即使用卷积计算。</p>\n<p>计算思路如下:</p>\n<p>压缩后的每一个图像像素点仅与压缩前的2x2矩阵中的信息相关，所以针对这一特性，我们只需要给出4个不同的卷积核，分别对应于$LL,LH,HL,HH,$这四个图像。本文针对Haar wavelet,给出以下四个卷积矩阵：<br>$$LL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;1\\\\<br>1&amp;1\\\\<br>\\end{pmatrix}<br>$$<br>$$HH= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;-1\\\\<br>-1&amp;1\\\\<br>\\end{pmatrix}<br>$$<br>$$HL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;-1\\\\<br>1&amp;-1\\\\<br>\\end{pmatrix}<br>$$<br>$$HL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;1\\\\<br>-1&amp;-1\\\\<br>\\end{pmatrix}<br>$$<br>其中HL和LH的顺序可能不对，尚未验证。通过给出的四个卷积核，通过对图像进行卷积运算得出四个矩阵，即使haar wavelet的压缩结果。</p>\n</blockquote>\n"},{"title":"Hello World","date":"2020-10-21T04:33:49.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/other/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2020-10-21 12:33:49\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"other/hello-world","published":1,"updated":"2021-04-22T06:46:12.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknsx2fqd0005scuo5ibqh7bi","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"SegNet","date":"2021-04-22T06:45:35.000Z","top":true,"cover":true,"author":"Fanrencli","_content":"\n## 深度学习之语义分割SegNet(2015)\n\n### what is SegNet?\n\nEmmmmm，从这篇文章开始应该会集中更新语义分割系列的算法模型，主要是科研的需求吧，应该会针对所有比较流行的语义分割的算法进行总结，以及讲解，针对各种算法的特点进行体现，而其中利用的主干特征提取的网络会在之前讲解过的特征提取网络中选择。总的来说，接下来一段时间会集中更新语义分割的相关系列算法，并对其中比较优秀的算法进行代码方面的实现。So，接下来就开始我们的第一次更新的内容吧——SegNet。\n\n想要了解`SegNet`，那我们首先要对语义分割这个概念进行了解。所谓的语义分割其实就是针对图像中的像素进行分类，判断每个像素所属的类别，这就是我们需要做的任务，其实从根本上来看，就是像素的多分类问题。\n\n![图1](http://39.105.26.229:4567/v2-c2bb4d18413382fccbc7455a1def8af6_1440w.jpg)\n\n语义分割在实际生活中的应用主要体现在医学影像和无人驾驶方面，在医学影像中主要用于对一些图像中的异常（如肿瘤）进行分割，辅助医生对病人的病情进行判断。在无人驾驶中，语义分割的作用就体现在对道路、车辆、行人、道路标识等一些物体的判断，如果语义分割能够对这些方面做得很好，那么对于社会的发展将是一个重要的推动力。\n\n而`SegNet`网络就是语义分割算法的一种，其网络结构符合语义分割算法的基本结构特征，主要包括编码和解码两个过程，根据最后的解码结果与真实值之间的比较训练模型参数。主要过程就是先通过特征提取进行降维，再进行上采样升维得到一个具有一定会长宽的特层。\n\n![SegNet网络结构](http://39.105.26.229:4567/20191108195650187.png)\n\n### 主干网络结构简介\n\n针对`SegNet`算法，其网络结构主要包括编码和解码两个部分。编码部分即特征提取部分，选择`ResNet50`作为特征提取的网络。在之前的文章中我们已经介绍过了`ResNet101`，相比于`ResNet101`的网络结构，`ResNet50`只在其中的`Identity`基础块的重复次数降低了，其余部分并没有过多的变化，其网络结构如下图：\n\n![ResNet50网络结构](http://39.105.26.229:4567/20191028224145980.png)\n\n`ResNet50`网络的主要流程：\n- 由于第一层7x7卷积，所以在卷积前加入`ZeroPadding2D`，然后如同图中所示，归一化接一层激活和池化\n- 第二层一次`Conv_block`、两次`identity_block`\n- 第三层一次`Conv_block`、三次`identity_block`\n- 第四层一次`Conv_block`、五次`identity_block`\n- 第五层一次`Conv_block`、两次`identity_block`\n\n代码如下：\n```python\ndef identity_block(input_tensor, kernel_size, filters, stage, block):\n\n    filters1, filters2, filters3 = filters\n\n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n    # 1x1压缩\n    x = Conv2D(filters1, (1, 1) , name=conv_name_base + '2a')(input_tensor)\n    x = BatchNormalization(name=bn_name_base + '2a')(x)\n    x = Activation('relu')(x)\n    # 3x3提取特征\n    x = Conv2D(filters2, kernel_size , data_format=IMAGE_ORDERING , padding='same', name=conv_name_base + '2b')(x)\n    x = BatchNormalization(name=bn_name_base + '2b')(x)\n    x = Activation('relu')(x)\n    # 1x1扩张特征\n    x = Conv2D(filters3 , (1, 1), name=conv_name_base + '2c')(x)\n    x = BatchNormalization(name=bn_name_base + '2c')(x)\n    # 残差网络\n    x = layers.add([x, input_tensor])\n    x = Activation('relu')(x)\n    return x\n\n# 与identity_block最大差距为，其可以减少wh，进行压缩\ndef conv_block(input_tensor, kernel_size, filters, stage, block, strides=(2, 2)):\n\n    filters1, filters2, filters3 = filters\n    \n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n    # 1x1压缩\n    x = Conv2D(filters1, (1, 1) , strides=strides, name=conv_name_base + '2a')(input_tensor)\n    x = BatchNormalization(name=bn_name_base + '2a')(x)\n    x = Activation('relu')(x)\n    # 3x3提取特征\n    x = Conv2D(filters2, kernel_size , padding='same', name=conv_name_base + '2b')(x)\n    x = BatchNormalization(name=bn_name_base + '2b')(x)\n    x = Activation('relu')(x)\n    # 1x1扩张特征\n    x = Conv2D(filters3, (1, 1) , name=conv_name_base + '2c')(x)\n    x = BatchNormalization(name=bn_name_base + '2c')(x)\n    # 1x1扩张特征\n    shortcut = Conv2D(filters3, (1, 1) , strides=strides, name=conv_name_base + '1')(input_tensor)\n    shortcut = BatchNormalization(name=bn_name_base + '1')(shortcut)\n    # add\n    x = layers.add([x, shortcut])\n    x = Activation('relu')(x)\n    return x\ndef get_resnet50_encoder(input_height=224 , input_width=224):\n\n    assert input_height%32 == 0\n    assert input_width%32 == 0\n\n    img_input = Input(shape=(input_height,input_width , 3 ))\n\n    x = ZeroPadding2D((3, 3))(img_input)\n    x = Conv2D(64, (7, 7), strides=(2, 2), name='conv1')(x)\n    # f1是hw方向压缩一次的结果\n    f1 = x\n    x = BatchNormalization(name='bn_conv1')(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D((3, 3) , strides=(2, 2))(x)\n    \n    \n    x = conv_block(x, 3, [64, 64, 256], stage=2, block='a', strides=(1, 1))\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block='b')\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block='c')\n    # f2是hw方向压缩两次的结果\n    f2 = x\n\n\n    x = conv_block(x, 3, [128, 128, 512], stage=3, block='a')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='b')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='c')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='d')\n    # f3是hw方向压缩三次的结果\n    f3 = x \n\n    x = conv_block(x, 3, [256, 256, 1024], stage=4, block='a')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='b')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='c')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='d')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='e')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='f')\n    # f4是hw方向压缩四次的结果\n    f4 = x \n\n    x = conv_block(x, 3, [512, 512, 2048], stage=5, block='a')\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block='b')\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block='c')\n    # f5是hw方向压缩五次的结果\n    f5 = x \n\n    x = AveragePooling2D((7, 7) , name='avg_pool')(x)\n    return img_input , [f1 , f2 , f3 , f4 , f5  ]\n```\n\n### 特征解码\n\n在特征解码部分，主要是针对前面编码部分提取出来的特征进行解码，然后为每个像素进行分类，获取loss值进行训练。其中解码部分主要就是对应于之前提取到的特征进行上采样，将特征纬度不断扩大。\n\n代码如下：\n```python\ndef segnet_decoder( f , n_classes, n_up=3 ):\n\n\tassert n_up >= 2\n\n\to = f\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D(512, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\t# 进行一次UpSampling2D，此时hw变为原来的1/8\n\to = UpSampling2D((2,2))(o)\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D( 256, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\t# 进行一次UpSampling2D，此时hw变为原来的1/4\n\tfor _ in range(n_up-2):\n\t\to = UpSampling2D((2,2))(o)\n\t\to = ZeroPadding2D((1,1))(o)\n\t\to = Conv2D( 128 , (3, 3), padding='valid')(o)\n\t\to = BatchNormalization()(o)\n\n\t# 进行一次UpSampling2D，此时hw变为原来的1/2\n\to = UpSampling2D((2,2) )(o)\n\to = ZeroPadding2D((1,1) )(o)\n\to = Conv2D( 64 , (3, 3), padding='valid' )(o)\n\to = BatchNormalization()(o)\n\n\t# 此时输出为h_input/2,w_input/2,nclasses\n\to = Conv2D(n_classes , (3, 3), padding='same')( o )\n\treturn o \ndef _segnet(n_classes , encoder, input_height=416, input_width=416 , encoder_level=3):\n\t# encoder通过主干网络\n\timg_input , levels = encoder( input_height=input_height ,  input_width=input_width )\n\t# 获取hw压缩四次后的结果\n\tfeat = levels[encoder_level]\n\t# 将特征传入segnet网络\n\to = segnet_decoder(feat, n_classes, n_up=3 )\n\t# 将结果进行reshape\n\to = Reshape((int(input_height/2)*int(input_width/2), -1))(o)\n\to = Softmax()(o)\n\tmodel = Model(img_input,o)\n\treturn model\n\ndef resnet50_segnet( n_classes ,  input_height=416, input_width=416 , encoder_level=3):\n\n\tmodel = _segnet( n_classes , get_resnet50_encoder ,  input_height=input_height, input_width=input_width , encoder_level=encoder_level)\n\treturn model\n```\n根据以上的代码，我们很容易看出，解码部分对应于编码的部分，通过不断的上采样将特征放大到原来图片的1/2的大小然后输出分类。\n至此，关于`SegNet`代码的所有内容就基本讲完了，下一张会讲解医学影像处理常用的语义分割网络`U-net`。\n\n##2021年4月23日再次更新\n\n在`SegNet`网络中，之前的代码在编码和解码的过程中没有考虑池化索引这个特点，直接通过池化和上采样层进行操作，没有添加池化索引。在实际的训练过程中，不添加池化索引这个特点有可能会导致loss值在训练过程中不太稳定，不过在运用过程中不会造成太大误差。不过在这里还是补上池化索引的功能，关于池化索引的相关特点可以百度一下。\n\n代码如下：\n```python\nfrom keras.engine import Layer\nimport keras.backend as K\n\nclass MaxPoolingWithArgmax2D(Layer):\n    def __init__(self, pool_size=(2, 2), strides=(2, 2), padding='same', **kwargs):\n        super(MaxPoolingWithArgmax2D, self).__init__(**kwargs)\n        self.padding = padding\n        self.pool_size = pool_size\n        self.strides = strides\n\n    def call(self, inputs, **kwargs):\n        padding = self.padding\n        pool_size = self.pool_size\n        strides = self.strides\n        if K.backend() == 'tensorflow':\n            ksize = [1, pool_size[0], pool_size[1], 1]\n            padding = padding.upper()\n            strides = [1, strides[0], strides[1], 1]\n            output, argmax = K.tf.nn.max_pool_with_argmax(inputs, ksize=ksize, strides=strides, padding=padding)\n        else:\n            errmsg = '{} backend is not supported for layer {}'.format(K.backend(), type(self).__name__)\n            raise NotImplementedError(errmsg)\n        argmax = K.cast(argmax, K.floatx())\n        return [output, argmax]\n\n    def compute_output_shape(self, input_shape):\n        ratio = (1, 2, 2, 1)\n        output_shape = [dim // ratio[idx] if dim is not None else None for idx, dim in enumerate(input_shape)]\n        output_shape = tuple(output_shape)\n        return [output_shape, output_shape]\n\n    def compute_mask(self, inputs, mask=None):\n        return 2 * [None]\n\n\nclass MaxUnpooling2D(Layer):\n    def __init__(self, up_size=(2, 2), **kwargs):\n        super(MaxUnpooling2D, self).__init__(**kwargs)\n        self.up_size = up_size\n\n    def call(self, inputs, output_shape=None):\n        updates, mask = inputs[0], inputs[1]\n        with K.tf.variable_scope(self.name):\n            mask = K.cast(mask, 'int32')\n            input_shape = K.tf.shape(updates, out_type='int32')\n            #  calculation new shape\n            if output_shape is None:\n                output_shape = (input_shape[0], input_shape[1] * self.up_size[0], input_shape[2] * self.up_size[1], input_shape[3])\n\n            # calculation indices for batch, height, width and feature maps\n            one_like_mask = K.ones_like(mask, dtype='int32')\n            batch_shape = K.concatenate([[input_shape[0]], [1], [1], [1]], axis=0)\n            batch_range = K.reshape(K.tf.range(output_shape[0], dtype='int32'), shape=batch_shape)\n            b = one_like_mask * batch_range\n            y = mask // (output_shape[2] * output_shape[3])\n            x = (mask // output_shape[3]) % output_shape[2]\n            feature_range = K.tf.range(output_shape[3], dtype='int32')\n            f = one_like_mask * feature_range\n\n            # transpose indices & reshape update values to one dimension\n            updates_size = K.tf.size(updates)\n            indices = K.transpose(K.reshape(K.stack([b, y, x, f]),[4, updates_size]))\n            values = K.reshape(updates, [updates_size])\n            ret = K.tf.scatter_nd(indices, values, output_shape)\n            return ret\n\n    def compute_output_shape(self, input_shape):\n        mask_shape = input_shape[1]\n        return (mask_shape[0], mask_shape[1] * self.up_size[0], mask_shape[2] * self.up_size[1], mask_shape[3])\n```\n在此处自定义了下采样代码和上采样的代码，在实际的运用中，需要将池化和上采样的代码替换为上文的代码。形如：\n\n```python\n    o = MaxPoolingWithArgmax2D()(input)\n    o2 = MaxUnpooling2D()(o)\n```\n\n其中`o`输出的是输出层和对应的`argmax`参数，对应的上采样层输入就是池化层的输出和索引参数。\n","source":"_posts/semantic_segmentation/segnet.md","raw":"---\ntitle: SegNet\ndate: 2021-04-22 14:45:35\ntop: true\ncover: true\ncategories:\n- Deep Learning\ntags:\n- semantic segmentation\n- SegNet\n- Fanrencli\nauthor: Fanrencli\n---\n\n## 深度学习之语义分割SegNet(2015)\n\n### what is SegNet?\n\nEmmmmm，从这篇文章开始应该会集中更新语义分割系列的算法模型，主要是科研的需求吧，应该会针对所有比较流行的语义分割的算法进行总结，以及讲解，针对各种算法的特点进行体现，而其中利用的主干特征提取的网络会在之前讲解过的特征提取网络中选择。总的来说，接下来一段时间会集中更新语义分割的相关系列算法，并对其中比较优秀的算法进行代码方面的实现。So，接下来就开始我们的第一次更新的内容吧——SegNet。\n\n想要了解`SegNet`，那我们首先要对语义分割这个概念进行了解。所谓的语义分割其实就是针对图像中的像素进行分类，判断每个像素所属的类别，这就是我们需要做的任务，其实从根本上来看，就是像素的多分类问题。\n\n![图1](http://39.105.26.229:4567/v2-c2bb4d18413382fccbc7455a1def8af6_1440w.jpg)\n\n语义分割在实际生活中的应用主要体现在医学影像和无人驾驶方面，在医学影像中主要用于对一些图像中的异常（如肿瘤）进行分割，辅助医生对病人的病情进行判断。在无人驾驶中，语义分割的作用就体现在对道路、车辆、行人、道路标识等一些物体的判断，如果语义分割能够对这些方面做得很好，那么对于社会的发展将是一个重要的推动力。\n\n而`SegNet`网络就是语义分割算法的一种，其网络结构符合语义分割算法的基本结构特征，主要包括编码和解码两个过程，根据最后的解码结果与真实值之间的比较训练模型参数。主要过程就是先通过特征提取进行降维，再进行上采样升维得到一个具有一定会长宽的特层。\n\n![SegNet网络结构](http://39.105.26.229:4567/20191108195650187.png)\n\n### 主干网络结构简介\n\n针对`SegNet`算法，其网络结构主要包括编码和解码两个部分。编码部分即特征提取部分，选择`ResNet50`作为特征提取的网络。在之前的文章中我们已经介绍过了`ResNet101`，相比于`ResNet101`的网络结构，`ResNet50`只在其中的`Identity`基础块的重复次数降低了，其余部分并没有过多的变化，其网络结构如下图：\n\n![ResNet50网络结构](http://39.105.26.229:4567/20191028224145980.png)\n\n`ResNet50`网络的主要流程：\n- 由于第一层7x7卷积，所以在卷积前加入`ZeroPadding2D`，然后如同图中所示，归一化接一层激活和池化\n- 第二层一次`Conv_block`、两次`identity_block`\n- 第三层一次`Conv_block`、三次`identity_block`\n- 第四层一次`Conv_block`、五次`identity_block`\n- 第五层一次`Conv_block`、两次`identity_block`\n\n代码如下：\n```python\ndef identity_block(input_tensor, kernel_size, filters, stage, block):\n\n    filters1, filters2, filters3 = filters\n\n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n    # 1x1压缩\n    x = Conv2D(filters1, (1, 1) , name=conv_name_base + '2a')(input_tensor)\n    x = BatchNormalization(name=bn_name_base + '2a')(x)\n    x = Activation('relu')(x)\n    # 3x3提取特征\n    x = Conv2D(filters2, kernel_size , data_format=IMAGE_ORDERING , padding='same', name=conv_name_base + '2b')(x)\n    x = BatchNormalization(name=bn_name_base + '2b')(x)\n    x = Activation('relu')(x)\n    # 1x1扩张特征\n    x = Conv2D(filters3 , (1, 1), name=conv_name_base + '2c')(x)\n    x = BatchNormalization(name=bn_name_base + '2c')(x)\n    # 残差网络\n    x = layers.add([x, input_tensor])\n    x = Activation('relu')(x)\n    return x\n\n# 与identity_block最大差距为，其可以减少wh，进行压缩\ndef conv_block(input_tensor, kernel_size, filters, stage, block, strides=(2, 2)):\n\n    filters1, filters2, filters3 = filters\n    \n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n    # 1x1压缩\n    x = Conv2D(filters1, (1, 1) , strides=strides, name=conv_name_base + '2a')(input_tensor)\n    x = BatchNormalization(name=bn_name_base + '2a')(x)\n    x = Activation('relu')(x)\n    # 3x3提取特征\n    x = Conv2D(filters2, kernel_size , padding='same', name=conv_name_base + '2b')(x)\n    x = BatchNormalization(name=bn_name_base + '2b')(x)\n    x = Activation('relu')(x)\n    # 1x1扩张特征\n    x = Conv2D(filters3, (1, 1) , name=conv_name_base + '2c')(x)\n    x = BatchNormalization(name=bn_name_base + '2c')(x)\n    # 1x1扩张特征\n    shortcut = Conv2D(filters3, (1, 1) , strides=strides, name=conv_name_base + '1')(input_tensor)\n    shortcut = BatchNormalization(name=bn_name_base + '1')(shortcut)\n    # add\n    x = layers.add([x, shortcut])\n    x = Activation('relu')(x)\n    return x\ndef get_resnet50_encoder(input_height=224 , input_width=224):\n\n    assert input_height%32 == 0\n    assert input_width%32 == 0\n\n    img_input = Input(shape=(input_height,input_width , 3 ))\n\n    x = ZeroPadding2D((3, 3))(img_input)\n    x = Conv2D(64, (7, 7), strides=(2, 2), name='conv1')(x)\n    # f1是hw方向压缩一次的结果\n    f1 = x\n    x = BatchNormalization(name='bn_conv1')(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D((3, 3) , strides=(2, 2))(x)\n    \n    \n    x = conv_block(x, 3, [64, 64, 256], stage=2, block='a', strides=(1, 1))\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block='b')\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block='c')\n    # f2是hw方向压缩两次的结果\n    f2 = x\n\n\n    x = conv_block(x, 3, [128, 128, 512], stage=3, block='a')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='b')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='c')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='d')\n    # f3是hw方向压缩三次的结果\n    f3 = x \n\n    x = conv_block(x, 3, [256, 256, 1024], stage=4, block='a')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='b')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='c')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='d')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='e')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='f')\n    # f4是hw方向压缩四次的结果\n    f4 = x \n\n    x = conv_block(x, 3, [512, 512, 2048], stage=5, block='a')\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block='b')\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block='c')\n    # f5是hw方向压缩五次的结果\n    f5 = x \n\n    x = AveragePooling2D((7, 7) , name='avg_pool')(x)\n    return img_input , [f1 , f2 , f3 , f4 , f5  ]\n```\n\n### 特征解码\n\n在特征解码部分，主要是针对前面编码部分提取出来的特征进行解码，然后为每个像素进行分类，获取loss值进行训练。其中解码部分主要就是对应于之前提取到的特征进行上采样，将特征纬度不断扩大。\n\n代码如下：\n```python\ndef segnet_decoder( f , n_classes, n_up=3 ):\n\n\tassert n_up >= 2\n\n\to = f\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D(512, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\t# 进行一次UpSampling2D，此时hw变为原来的1/8\n\to = UpSampling2D((2,2))(o)\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D( 256, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\t# 进行一次UpSampling2D，此时hw变为原来的1/4\n\tfor _ in range(n_up-2):\n\t\to = UpSampling2D((2,2))(o)\n\t\to = ZeroPadding2D((1,1))(o)\n\t\to = Conv2D( 128 , (3, 3), padding='valid')(o)\n\t\to = BatchNormalization()(o)\n\n\t# 进行一次UpSampling2D，此时hw变为原来的1/2\n\to = UpSampling2D((2,2) )(o)\n\to = ZeroPadding2D((1,1) )(o)\n\to = Conv2D( 64 , (3, 3), padding='valid' )(o)\n\to = BatchNormalization()(o)\n\n\t# 此时输出为h_input/2,w_input/2,nclasses\n\to = Conv2D(n_classes , (3, 3), padding='same')( o )\n\treturn o \ndef _segnet(n_classes , encoder, input_height=416, input_width=416 , encoder_level=3):\n\t# encoder通过主干网络\n\timg_input , levels = encoder( input_height=input_height ,  input_width=input_width )\n\t# 获取hw压缩四次后的结果\n\tfeat = levels[encoder_level]\n\t# 将特征传入segnet网络\n\to = segnet_decoder(feat, n_classes, n_up=3 )\n\t# 将结果进行reshape\n\to = Reshape((int(input_height/2)*int(input_width/2), -1))(o)\n\to = Softmax()(o)\n\tmodel = Model(img_input,o)\n\treturn model\n\ndef resnet50_segnet( n_classes ,  input_height=416, input_width=416 , encoder_level=3):\n\n\tmodel = _segnet( n_classes , get_resnet50_encoder ,  input_height=input_height, input_width=input_width , encoder_level=encoder_level)\n\treturn model\n```\n根据以上的代码，我们很容易看出，解码部分对应于编码的部分，通过不断的上采样将特征放大到原来图片的1/2的大小然后输出分类。\n至此，关于`SegNet`代码的所有内容就基本讲完了，下一张会讲解医学影像处理常用的语义分割网络`U-net`。\n\n##2021年4月23日再次更新\n\n在`SegNet`网络中，之前的代码在编码和解码的过程中没有考虑池化索引这个特点，直接通过池化和上采样层进行操作，没有添加池化索引。在实际的训练过程中，不添加池化索引这个特点有可能会导致loss值在训练过程中不太稳定，不过在运用过程中不会造成太大误差。不过在这里还是补上池化索引的功能，关于池化索引的相关特点可以百度一下。\n\n代码如下：\n```python\nfrom keras.engine import Layer\nimport keras.backend as K\n\nclass MaxPoolingWithArgmax2D(Layer):\n    def __init__(self, pool_size=(2, 2), strides=(2, 2), padding='same', **kwargs):\n        super(MaxPoolingWithArgmax2D, self).__init__(**kwargs)\n        self.padding = padding\n        self.pool_size = pool_size\n        self.strides = strides\n\n    def call(self, inputs, **kwargs):\n        padding = self.padding\n        pool_size = self.pool_size\n        strides = self.strides\n        if K.backend() == 'tensorflow':\n            ksize = [1, pool_size[0], pool_size[1], 1]\n            padding = padding.upper()\n            strides = [1, strides[0], strides[1], 1]\n            output, argmax = K.tf.nn.max_pool_with_argmax(inputs, ksize=ksize, strides=strides, padding=padding)\n        else:\n            errmsg = '{} backend is not supported for layer {}'.format(K.backend(), type(self).__name__)\n            raise NotImplementedError(errmsg)\n        argmax = K.cast(argmax, K.floatx())\n        return [output, argmax]\n\n    def compute_output_shape(self, input_shape):\n        ratio = (1, 2, 2, 1)\n        output_shape = [dim // ratio[idx] if dim is not None else None for idx, dim in enumerate(input_shape)]\n        output_shape = tuple(output_shape)\n        return [output_shape, output_shape]\n\n    def compute_mask(self, inputs, mask=None):\n        return 2 * [None]\n\n\nclass MaxUnpooling2D(Layer):\n    def __init__(self, up_size=(2, 2), **kwargs):\n        super(MaxUnpooling2D, self).__init__(**kwargs)\n        self.up_size = up_size\n\n    def call(self, inputs, output_shape=None):\n        updates, mask = inputs[0], inputs[1]\n        with K.tf.variable_scope(self.name):\n            mask = K.cast(mask, 'int32')\n            input_shape = K.tf.shape(updates, out_type='int32')\n            #  calculation new shape\n            if output_shape is None:\n                output_shape = (input_shape[0], input_shape[1] * self.up_size[0], input_shape[2] * self.up_size[1], input_shape[3])\n\n            # calculation indices for batch, height, width and feature maps\n            one_like_mask = K.ones_like(mask, dtype='int32')\n            batch_shape = K.concatenate([[input_shape[0]], [1], [1], [1]], axis=0)\n            batch_range = K.reshape(K.tf.range(output_shape[0], dtype='int32'), shape=batch_shape)\n            b = one_like_mask * batch_range\n            y = mask // (output_shape[2] * output_shape[3])\n            x = (mask // output_shape[3]) % output_shape[2]\n            feature_range = K.tf.range(output_shape[3], dtype='int32')\n            f = one_like_mask * feature_range\n\n            # transpose indices & reshape update values to one dimension\n            updates_size = K.tf.size(updates)\n            indices = K.transpose(K.reshape(K.stack([b, y, x, f]),[4, updates_size]))\n            values = K.reshape(updates, [updates_size])\n            ret = K.tf.scatter_nd(indices, values, output_shape)\n            return ret\n\n    def compute_output_shape(self, input_shape):\n        mask_shape = input_shape[1]\n        return (mask_shape[0], mask_shape[1] * self.up_size[0], mask_shape[2] * self.up_size[1], mask_shape[3])\n```\n在此处自定义了下采样代码和上采样的代码，在实际的运用中，需要将池化和上采样的代码替换为上文的代码。形如：\n\n```python\n    o = MaxPoolingWithArgmax2D()(input)\n    o2 = MaxUnpooling2D()(o)\n```\n\n其中`o`输出的是输出层和对应的`argmax`参数，对应的上采样层输入就是池化层的输出和索引参数。\n","slug":"semantic_segmentation/segnet","published":1,"updated":"2021-04-23T08:26:39.654Z","_id":"cknsx2fqf0008scuobzau6k2l","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习之语义分割SegNet-2015\"><a href=\"#深度学习之语义分割SegNet-2015\" class=\"headerlink\" title=\"深度学习之语义分割SegNet(2015)\"></a>深度学习之语义分割SegNet(2015)</h2><h3 id=\"what-is-SegNet\"><a href=\"#what-is-SegNet\" class=\"headerlink\" title=\"what is SegNet?\"></a>what is SegNet?</h3><p>Emmmmm，从这篇文章开始应该会集中更新语义分割系列的算法模型，主要是科研的需求吧，应该会针对所有比较流行的语义分割的算法进行总结，以及讲解，针对各种算法的特点进行体现，而其中利用的主干特征提取的网络会在之前讲解过的特征提取网络中选择。总的来说，接下来一段时间会集中更新语义分割的相关系列算法，并对其中比较优秀的算法进行代码方面的实现。So，接下来就开始我们的第一次更新的内容吧——SegNet。</p>\n<p>想要了解<code>SegNet</code>，那我们首先要对语义分割这个概念进行了解。所谓的语义分割其实就是针对图像中的像素进行分类，判断每个像素所属的类别，这就是我们需要做的任务，其实从根本上来看，就是像素的多分类问题。</p>\n<p><img src=\"http://39.105.26.229:4567/v2-c2bb4d18413382fccbc7455a1def8af6_1440w.jpg\" alt=\"图1\"></p>\n<p>语义分割在实际生活中的应用主要体现在医学影像和无人驾驶方面，在医学影像中主要用于对一些图像中的异常（如肿瘤）进行分割，辅助医生对病人的病情进行判断。在无人驾驶中，语义分割的作用就体现在对道路、车辆、行人、道路标识等一些物体的判断，如果语义分割能够对这些方面做得很好，那么对于社会的发展将是一个重要的推动力。</p>\n<p>而<code>SegNet</code>网络就是语义分割算法的一种，其网络结构符合语义分割算法的基本结构特征，主要包括编码和解码两个过程，根据最后的解码结果与真实值之间的比较训练模型参数。主要过程就是先通过特征提取进行降维，再进行上采样升维得到一个具有一定会长宽的特层。</p>\n<p><img src=\"http://39.105.26.229:4567/20191108195650187.png\" alt=\"SegNet网络结构\"></p>\n<h3 id=\"主干网络结构简介\"><a href=\"#主干网络结构简介\" class=\"headerlink\" title=\"主干网络结构简介\"></a>主干网络结构简介</h3><p>针对<code>SegNet</code>算法，其网络结构主要包括编码和解码两个部分。编码部分即特征提取部分，选择<code>ResNet50</code>作为特征提取的网络。在之前的文章中我们已经介绍过了<code>ResNet101</code>，相比于<code>ResNet101</code>的网络结构，<code>ResNet50</code>只在其中的<code>Identity</code>基础块的重复次数降低了，其余部分并没有过多的变化，其网络结构如下图：</p>\n<p><img src=\"http://39.105.26.229:4567/20191028224145980.png\" alt=\"ResNet50网络结构\"></p>\n<p><code>ResNet50</code>网络的主要流程：</p>\n<ul>\n<li>由于第一层7x7卷积，所以在卷积前加入<code>ZeroPadding2D</code>，然后如同图中所示，归一化接一层激活和池化</li>\n<li>第二层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n<li>第三层一次<code>Conv_block</code>、三次<code>identity_block</code></li>\n<li>第四层一次<code>Conv_block</code>、五次<code>identity_block</code></li>\n<li>第五层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n</ul>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">identity_block</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">,</span> kernel_size<span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">,</span> block<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    filters1<span class=\"token punctuation\">,</span> filters2<span class=\"token punctuation\">,</span> filters3 <span class=\"token operator\">=</span> filters\n\n    conv_name_base <span class=\"token operator\">=</span> <span class=\"token string\">'res'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block <span class=\"token operator\">+</span> <span class=\"token string\">'_branch'</span>\n    bn_name_base <span class=\"token operator\">=</span> <span class=\"token string\">'bn'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block <span class=\"token operator\">+</span> <span class=\"token string\">'_branch'</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 1x1压缩</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 3x3提取特征</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters2<span class=\"token punctuation\">,</span> kernel_size <span class=\"token punctuation\">,</span> data_format<span class=\"token operator\">=</span>IMAGE_ORDERING <span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 1x1扩张特征</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters3 <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 残差网络</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> input_tensor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x\n\n<span class=\"token comment\" spellcheck=\"true\"># 与identity_block最大差距为，其可以减少wh，进行压缩</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">conv_block</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">,</span> kernel_size<span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">,</span> block<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    filters1<span class=\"token punctuation\">,</span> filters2<span class=\"token punctuation\">,</span> filters3 <span class=\"token operator\">=</span> filters\n\n    conv_name_base <span class=\"token operator\">=</span> <span class=\"token string\">'res'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block <span class=\"token operator\">+</span> <span class=\"token string\">'_branch'</span>\n    bn_name_base <span class=\"token operator\">=</span> <span class=\"token string\">'bn'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block <span class=\"token operator\">+</span> <span class=\"token string\">'_branch'</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 1x1压缩</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 3x3提取特征</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters2<span class=\"token punctuation\">,</span> kernel_size <span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 1x1扩张特征</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 1x1扩张特征</span>\n    shortcut <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">)</span>\n    shortcut <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>shortcut<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># add</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> shortcut<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_resnet50_encoder</span><span class=\"token punctuation\">(</span>input_height<span class=\"token operator\">=</span><span class=\"token number\">224</span> <span class=\"token punctuation\">,</span> input_width<span class=\"token operator\">=</span><span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">assert</span> input_height<span class=\"token operator\">%</span><span class=\"token number\">32</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">assert</span> input_width<span class=\"token operator\">%</span><span class=\"token number\">32</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n\n    img_input <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>input_height<span class=\"token punctuation\">,</span>input_width <span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>img_input<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># f1是hw方向压缩一次的结果</span>\n    f1 <span class=\"token operator\">=</span> x\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'bn_conv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># f2是hw方向压缩两次的结果</span>\n    f2 <span class=\"token operator\">=</span> x\n\n\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># f3是hw方向压缩三次的结果</span>\n    f3 <span class=\"token operator\">=</span> x \n\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># f4是hw方向压缩四次的结果</span>\n    f4 <span class=\"token operator\">=</span> x \n\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># f5是hw方向压缩五次的结果</span>\n    f5 <span class=\"token operator\">=</span> x \n\n    x <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'avg_pool'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img_input <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>f1 <span class=\"token punctuation\">,</span> f2 <span class=\"token punctuation\">,</span> f3 <span class=\"token punctuation\">,</span> f4 <span class=\"token punctuation\">,</span> f5  <span class=\"token punctuation\">]</span></code></pre>\n<h3 id=\"特征解码\"><a href=\"#特征解码\" class=\"headerlink\" title=\"特征解码\"></a>特征解码</h3><p>在特征解码部分，主要是针对前面编码部分提取出来的特征进行解码，然后为每个像素进行分类，获取loss值进行训练。其中解码部分主要就是对应于之前提取到的特征进行上采样，将特征纬度不断扩大。</p>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">segnet_decoder</span><span class=\"token punctuation\">(</span> f <span class=\"token punctuation\">,</span> n_classes<span class=\"token punctuation\">,</span> n_up<span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">assert</span> n_up <span class=\"token operator\">>=</span> <span class=\"token number\">2</span>\n\n    o <span class=\"token operator\">=</span> f\n    o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 进行一次UpSampling2D，此时hw变为原来的1/8</span>\n    o <span class=\"token operator\">=</span> UpSampling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 进行一次UpSampling2D，此时hw变为原来的1/4</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n_up<span class=\"token number\">-2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        o <span class=\"token operator\">=</span> UpSampling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n        o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n        o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span> <span class=\"token number\">128</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n        o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 进行一次UpSampling2D，此时hw变为原来的1/2</span>\n    o <span class=\"token operator\">=</span> UpSampling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span> <span class=\"token number\">64</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 此时输出为h_input/2,w_input/2,nclasses</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>n_classes <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> o <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> o \n<span class=\"token keyword\">def</span> <span class=\"token function\">_segnet</span><span class=\"token punctuation\">(</span>n_classes <span class=\"token punctuation\">,</span> encoder<span class=\"token punctuation\">,</span> input_height<span class=\"token operator\">=</span><span class=\"token number\">416</span><span class=\"token punctuation\">,</span> input_width<span class=\"token operator\">=</span><span class=\"token number\">416</span> <span class=\"token punctuation\">,</span> encoder_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># encoder通过主干网络</span>\n    img_input <span class=\"token punctuation\">,</span> levels <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">(</span> input_height<span class=\"token operator\">=</span>input_height <span class=\"token punctuation\">,</span>  input_width<span class=\"token operator\">=</span>input_width <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 获取hw压缩四次后的结果</span>\n    feat <span class=\"token operator\">=</span> levels<span class=\"token punctuation\">[</span>encoder_level<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 将特征传入segnet网络</span>\n    o <span class=\"token operator\">=</span> segnet_decoder<span class=\"token punctuation\">(</span>feat<span class=\"token punctuation\">,</span> n_classes<span class=\"token punctuation\">,</span> n_up<span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 将结果进行reshape</span>\n    o <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>input_height<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>int<span class=\"token punctuation\">(</span>input_width<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> Softmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>img_input<span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">resnet50_segnet</span><span class=\"token punctuation\">(</span> n_classes <span class=\"token punctuation\">,</span>  input_height<span class=\"token operator\">=</span><span class=\"token number\">416</span><span class=\"token punctuation\">,</span> input_width<span class=\"token operator\">=</span><span class=\"token number\">416</span> <span class=\"token punctuation\">,</span> encoder_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    model <span class=\"token operator\">=</span> _segnet<span class=\"token punctuation\">(</span> n_classes <span class=\"token punctuation\">,</span> get_resnet50_encoder <span class=\"token punctuation\">,</span>  input_height<span class=\"token operator\">=</span>input_height<span class=\"token punctuation\">,</span> input_width<span class=\"token operator\">=</span>input_width <span class=\"token punctuation\">,</span> encoder_level<span class=\"token operator\">=</span>encoder_level<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model</code></pre>\n<p>根据以上的代码，我们很容易看出，解码部分对应于编码的部分，通过不断的上采样将特征放大到原来图片的1/2的大小然后输出分类。<br>至此，关于<code>SegNet</code>代码的所有内容就基本讲完了，下一张会讲解医学影像处理常用的语义分割网络<code>U-net</code>。</p>\n<p>##2021年4月23日再次更新</p>\n<p>在<code>SegNet</code>网络中，之前的代码在编码和解码的过程中没有考虑池化索引这个特点，直接通过池化和上采样层进行操作，没有添加池化索引。在实际的训练过程中，不添加池化索引这个特点有可能会导致loss值在训练过程中不太稳定，不过在运用过程中不会造成太大误差。不过在这里还是补上池化索引的功能，关于池化索引的相关特点可以百度一下。</p>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>engine <span class=\"token keyword\">import</span> Layer\n<span class=\"token keyword\">import</span> keras<span class=\"token punctuation\">.</span>backend <span class=\"token keyword\">as</span> K\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MaxPoolingWithArgmax2D</span><span class=\"token punctuation\">(</span>Layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>MaxPoolingWithArgmax2D<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>padding <span class=\"token operator\">=</span> padding\n        self<span class=\"token punctuation\">.</span>pool_size <span class=\"token operator\">=</span> pool_size\n        self<span class=\"token punctuation\">.</span>strides <span class=\"token operator\">=</span> strides\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        padding <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>padding\n        pool_size <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pool_size\n        strides <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>strides\n        <span class=\"token keyword\">if</span> K<span class=\"token punctuation\">.</span>backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'tensorflow'</span><span class=\"token punctuation\">:</span>\n            ksize <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pool_size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pool_size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            padding <span class=\"token operator\">=</span> padding<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            strides <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> strides<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> strides<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            output<span class=\"token punctuation\">,</span> argmax <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>tf<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>max_pool_with_argmax<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> ksize<span class=\"token operator\">=</span>ksize<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span>padding<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            errmsg <span class=\"token operator\">=</span> <span class=\"token string\">'{} backend is not supported for layer {}'</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">.</span>backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">raise</span> NotImplementedError<span class=\"token punctuation\">(</span>errmsg<span class=\"token punctuation\">)</span>\n        argmax <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>argmax<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">.</span>floatx<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>output<span class=\"token punctuation\">,</span> argmax<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">compute_output_shape</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        ratio <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dim <span class=\"token operator\">//</span> ratio<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> dim <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> None <span class=\"token keyword\">else</span> None <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> dim <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        output_shape <span class=\"token operator\">=</span> tuple<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>output_shape<span class=\"token punctuation\">,</span> output_shape<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">compute_mask</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> mask<span class=\"token operator\">=</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span>None<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MaxUnpooling2D</span><span class=\"token punctuation\">(</span>Layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> up_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>MaxUnpooling2D<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>up_size <span class=\"token operator\">=</span> up_size\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> output_shape<span class=\"token operator\">=</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        updates<span class=\"token punctuation\">,</span> mask <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">with</span> K<span class=\"token punctuation\">.</span>tf<span class=\"token punctuation\">.</span>variable_scope<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            mask <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>mask<span class=\"token punctuation\">,</span> <span class=\"token string\">'int32'</span><span class=\"token punctuation\">)</span>\n            input_shape <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>updates<span class=\"token punctuation\">,</span> out_type<span class=\"token operator\">=</span><span class=\"token string\">'int32'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\">#  calculation new shape</span>\n            <span class=\"token keyword\">if</span> output_shape <span class=\"token keyword\">is</span> None<span class=\"token punctuation\">:</span>\n                output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>up_size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>up_size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\" spellcheck=\"true\"># calculation indices for batch, height, width and feature maps</span>\n            one_like_mask <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>ones_like<span class=\"token punctuation\">(</span>mask<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token string\">'int32'</span><span class=\"token punctuation\">)</span>\n            batch_shape <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            batch_range <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">.</span>tf<span class=\"token punctuation\">.</span>range<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token string\">'int32'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> shape<span class=\"token operator\">=</span>batch_shape<span class=\"token punctuation\">)</span>\n            b <span class=\"token operator\">=</span> one_like_mask <span class=\"token operator\">*</span> batch_range\n            y <span class=\"token operator\">=</span> mask <span class=\"token operator\">//</span> <span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> output_shape<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mask <span class=\"token operator\">//</span> output_shape<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> output_shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n            feature_range <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>tf<span class=\"token punctuation\">.</span>range<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token string\">'int32'</span><span class=\"token punctuation\">)</span>\n            f <span class=\"token operator\">=</span> one_like_mask <span class=\"token operator\">*</span> feature_range\n\n            <span class=\"token comment\" spellcheck=\"true\"># transpose indices &amp; reshape update values to one dimension</span>\n            updates_size <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>tf<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span>updates<span class=\"token punctuation\">)</span>\n            indices <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> updates_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            values <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>updates<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>updates_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            ret <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>tf<span class=\"token punctuation\">.</span>scatter_nd<span class=\"token punctuation\">(</span>indices<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> output_shape<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> ret\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">compute_output_shape</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        mask_shape <span class=\"token operator\">=</span> input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mask_shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mask_shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>up_size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mask_shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>up_size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mask_shape<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>在此处自定义了下采样代码和上采样的代码，在实际的运用中，需要将池化和上采样的代码替换为上文的代码。形如：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    o <span class=\"token operator\">=</span> MaxPoolingWithArgmax2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n    o2 <span class=\"token operator\">=</span> MaxUnpooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span></code></pre>\n<p>其中<code>o</code>输出的是输出层和对应的<code>argmax</code>参数，对应的上采样层输入就是池化层的输出和索引参数。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习之语义分割SegNet-2015\"><a href=\"#深度学习之语义分割SegNet-2015\" class=\"headerlink\" title=\"深度学习之语义分割SegNet(2015)\"></a>深度学习之语义分割SegNet(2015)</h2><h3 id=\"what-is-SegNet\"><a href=\"#what-is-SegNet\" class=\"headerlink\" title=\"what is SegNet?\"></a>what is SegNet?</h3><p>Emmmmm，从这篇文章开始应该会集中更新语义分割系列的算法模型，主要是科研的需求吧，应该会针对所有比较流行的语义分割的算法进行总结，以及讲解，针对各种算法的特点进行体现，而其中利用的主干特征提取的网络会在之前讲解过的特征提取网络中选择。总的来说，接下来一段时间会集中更新语义分割的相关系列算法，并对其中比较优秀的算法进行代码方面的实现。So，接下来就开始我们的第一次更新的内容吧——SegNet。</p>\n<p>想要了解<code>SegNet</code>，那我们首先要对语义分割这个概念进行了解。所谓的语义分割其实就是针对图像中的像素进行分类，判断每个像素所属的类别，这就是我们需要做的任务，其实从根本上来看，就是像素的多分类问题。</p>\n<p><img src=\"http://39.105.26.229:4567/v2-c2bb4d18413382fccbc7455a1def8af6_1440w.jpg\" alt=\"图1\"></p>\n<p>语义分割在实际生活中的应用主要体现在医学影像和无人驾驶方面，在医学影像中主要用于对一些图像中的异常（如肿瘤）进行分割，辅助医生对病人的病情进行判断。在无人驾驶中，语义分割的作用就体现在对道路、车辆、行人、道路标识等一些物体的判断，如果语义分割能够对这些方面做得很好，那么对于社会的发展将是一个重要的推动力。</p>\n<p>而<code>SegNet</code>网络就是语义分割算法的一种，其网络结构符合语义分割算法的基本结构特征，主要包括编码和解码两个过程，根据最后的解码结果与真实值之间的比较训练模型参数。主要过程就是先通过特征提取进行降维，再进行上采样升维得到一个具有一定会长宽的特层。</p>\n<p><img src=\"http://39.105.26.229:4567/20191108195650187.png\" alt=\"SegNet网络结构\"></p>\n<h3 id=\"主干网络结构简介\"><a href=\"#主干网络结构简介\" class=\"headerlink\" title=\"主干网络结构简介\"></a>主干网络结构简介</h3><p>针对<code>SegNet</code>算法，其网络结构主要包括编码和解码两个部分。编码部分即特征提取部分，选择<code>ResNet50</code>作为特征提取的网络。在之前的文章中我们已经介绍过了<code>ResNet101</code>，相比于<code>ResNet101</code>的网络结构，<code>ResNet50</code>只在其中的<code>Identity</code>基础块的重复次数降低了，其余部分并没有过多的变化，其网络结构如下图：</p>\n<p><img src=\"http://39.105.26.229:4567/20191028224145980.png\" alt=\"ResNet50网络结构\"></p>\n<p><code>ResNet50</code>网络的主要流程：</p>\n<ul>\n<li>由于第一层7x7卷积，所以在卷积前加入<code>ZeroPadding2D</code>，然后如同图中所示，归一化接一层激活和池化</li>\n<li>第二层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n<li>第三层一次<code>Conv_block</code>、三次<code>identity_block</code></li>\n<li>第四层一次<code>Conv_block</code>、五次<code>identity_block</code></li>\n<li>第五层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n</ul>\n<p>代码如下：</p>\n<pre><code class=\"python\">def identity_block(input_tensor, kernel_size, filters, stage, block):\n\n    filters1, filters2, filters3 = filters\n\n    conv_name_base = &#39;res&#39; + str(stage) + block + &#39;_branch&#39;\n    bn_name_base = &#39;bn&#39; + str(stage) + block + &#39;_branch&#39;\n    # 1x1压缩\n    x = Conv2D(filters1, (1, 1) , name=conv_name_base + &#39;2a&#39;)(input_tensor)\n    x = BatchNormalization(name=bn_name_base + &#39;2a&#39;)(x)\n    x = Activation(&#39;relu&#39;)(x)\n    # 3x3提取特征\n    x = Conv2D(filters2, kernel_size , data_format=IMAGE_ORDERING , padding=&#39;same&#39;, name=conv_name_base + &#39;2b&#39;)(x)\n    x = BatchNormalization(name=bn_name_base + &#39;2b&#39;)(x)\n    x = Activation(&#39;relu&#39;)(x)\n    # 1x1扩张特征\n    x = Conv2D(filters3 , (1, 1), name=conv_name_base + &#39;2c&#39;)(x)\n    x = BatchNormalization(name=bn_name_base + &#39;2c&#39;)(x)\n    # 残差网络\n    x = layers.add([x, input_tensor])\n    x = Activation(&#39;relu&#39;)(x)\n    return x\n\n# 与identity_block最大差距为，其可以减少wh，进行压缩\ndef conv_block(input_tensor, kernel_size, filters, stage, block, strides=(2, 2)):\n\n    filters1, filters2, filters3 = filters\n\n    conv_name_base = &#39;res&#39; + str(stage) + block + &#39;_branch&#39;\n    bn_name_base = &#39;bn&#39; + str(stage) + block + &#39;_branch&#39;\n    # 1x1压缩\n    x = Conv2D(filters1, (1, 1) , strides=strides, name=conv_name_base + &#39;2a&#39;)(input_tensor)\n    x = BatchNormalization(name=bn_name_base + &#39;2a&#39;)(x)\n    x = Activation(&#39;relu&#39;)(x)\n    # 3x3提取特征\n    x = Conv2D(filters2, kernel_size , padding=&#39;same&#39;, name=conv_name_base + &#39;2b&#39;)(x)\n    x = BatchNormalization(name=bn_name_base + &#39;2b&#39;)(x)\n    x = Activation(&#39;relu&#39;)(x)\n    # 1x1扩张特征\n    x = Conv2D(filters3, (1, 1) , name=conv_name_base + &#39;2c&#39;)(x)\n    x = BatchNormalization(name=bn_name_base + &#39;2c&#39;)(x)\n    # 1x1扩张特征\n    shortcut = Conv2D(filters3, (1, 1) , strides=strides, name=conv_name_base + &#39;1&#39;)(input_tensor)\n    shortcut = BatchNormalization(name=bn_name_base + &#39;1&#39;)(shortcut)\n    # add\n    x = layers.add([x, shortcut])\n    x = Activation(&#39;relu&#39;)(x)\n    return x\ndef get_resnet50_encoder(input_height=224 , input_width=224):\n\n    assert input_height%32 == 0\n    assert input_width%32 == 0\n\n    img_input = Input(shape=(input_height,input_width , 3 ))\n\n    x = ZeroPadding2D((3, 3))(img_input)\n    x = Conv2D(64, (7, 7), strides=(2, 2), name=&#39;conv1&#39;)(x)\n    # f1是hw方向压缩一次的结果\n    f1 = x\n    x = BatchNormalization(name=&#39;bn_conv1&#39;)(x)\n    x = Activation(&#39;relu&#39;)(x)\n    x = MaxPooling2D((3, 3) , strides=(2, 2))(x)\n\n\n    x = conv_block(x, 3, [64, 64, 256], stage=2, block=&#39;a&#39;, strides=(1, 1))\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block=&#39;b&#39;)\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block=&#39;c&#39;)\n    # f2是hw方向压缩两次的结果\n    f2 = x\n\n\n    x = conv_block(x, 3, [128, 128, 512], stage=3, block=&#39;a&#39;)\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block=&#39;b&#39;)\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block=&#39;c&#39;)\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block=&#39;d&#39;)\n    # f3是hw方向压缩三次的结果\n    f3 = x \n\n    x = conv_block(x, 3, [256, 256, 1024], stage=4, block=&#39;a&#39;)\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block=&#39;b&#39;)\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block=&#39;c&#39;)\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block=&#39;d&#39;)\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block=&#39;e&#39;)\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block=&#39;f&#39;)\n    # f4是hw方向压缩四次的结果\n    f4 = x \n\n    x = conv_block(x, 3, [512, 512, 2048], stage=5, block=&#39;a&#39;)\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block=&#39;b&#39;)\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block=&#39;c&#39;)\n    # f5是hw方向压缩五次的结果\n    f5 = x \n\n    x = AveragePooling2D((7, 7) , name=&#39;avg_pool&#39;)(x)\n    return img_input , [f1 , f2 , f3 , f4 , f5  ]</code></pre>\n<h3 id=\"特征解码\"><a href=\"#特征解码\" class=\"headerlink\" title=\"特征解码\"></a>特征解码</h3><p>在特征解码部分，主要是针对前面编码部分提取出来的特征进行解码，然后为每个像素进行分类，获取loss值进行训练。其中解码部分主要就是对应于之前提取到的特征进行上采样，将特征纬度不断扩大。</p>\n<p>代码如下：</p>\n<pre><code class=\"python\">def segnet_decoder( f , n_classes, n_up=3 ):\n\n    assert n_up &gt;= 2\n\n    o = f\n    o = ZeroPadding2D((1,1))(o)\n    o = Conv2D(512, (3, 3), padding=&#39;valid&#39;)(o)\n    o = BatchNormalization()(o)\n    # 进行一次UpSampling2D，此时hw变为原来的1/8\n    o = UpSampling2D((2,2))(o)\n    o = ZeroPadding2D((1,1))(o)\n    o = Conv2D( 256, (3, 3), padding=&#39;valid&#39;)(o)\n    o = BatchNormalization()(o)\n\n    # 进行一次UpSampling2D，此时hw变为原来的1/4\n    for _ in range(n_up-2):\n        o = UpSampling2D((2,2))(o)\n        o = ZeroPadding2D((1,1))(o)\n        o = Conv2D( 128 , (3, 3), padding=&#39;valid&#39;)(o)\n        o = BatchNormalization()(o)\n\n    # 进行一次UpSampling2D，此时hw变为原来的1/2\n    o = UpSampling2D((2,2) )(o)\n    o = ZeroPadding2D((1,1) )(o)\n    o = Conv2D( 64 , (3, 3), padding=&#39;valid&#39; )(o)\n    o = BatchNormalization()(o)\n\n    # 此时输出为h_input/2,w_input/2,nclasses\n    o = Conv2D(n_classes , (3, 3), padding=&#39;same&#39;)( o )\n    return o \ndef _segnet(n_classes , encoder, input_height=416, input_width=416 , encoder_level=3):\n    # encoder通过主干网络\n    img_input , levels = encoder( input_height=input_height ,  input_width=input_width )\n    # 获取hw压缩四次后的结果\n    feat = levels[encoder_level]\n    # 将特征传入segnet网络\n    o = segnet_decoder(feat, n_classes, n_up=3 )\n    # 将结果进行reshape\n    o = Reshape((int(input_height/2)*int(input_width/2), -1))(o)\n    o = Softmax()(o)\n    model = Model(img_input,o)\n    return model\n\ndef resnet50_segnet( n_classes ,  input_height=416, input_width=416 , encoder_level=3):\n\n    model = _segnet( n_classes , get_resnet50_encoder ,  input_height=input_height, input_width=input_width , encoder_level=encoder_level)\n    return model</code></pre>\n<p>根据以上的代码，我们很容易看出，解码部分对应于编码的部分，通过不断的上采样将特征放大到原来图片的1/2的大小然后输出分类。<br>至此，关于<code>SegNet</code>代码的所有内容就基本讲完了，下一张会讲解医学影像处理常用的语义分割网络<code>U-net</code>。</p>\n<p>##2021年4月23日再次更新</p>\n<p>在<code>SegNet</code>网络中，之前的代码在编码和解码的过程中没有考虑池化索引这个特点，直接通过池化和上采样层进行操作，没有添加池化索引。在实际的训练过程中，不添加池化索引这个特点有可能会导致loss值在训练过程中不太稳定，不过在运用过程中不会造成太大误差。不过在这里还是补上池化索引的功能，关于池化索引的相关特点可以百度一下。</p>\n<p>代码如下：</p>\n<pre><code class=\"python\">from keras.engine import Layer\nimport keras.backend as K\n\nclass MaxPoolingWithArgmax2D(Layer):\n    def __init__(self, pool_size=(2, 2), strides=(2, 2), padding=&#39;same&#39;, **kwargs):\n        super(MaxPoolingWithArgmax2D, self).__init__(**kwargs)\n        self.padding = padding\n        self.pool_size = pool_size\n        self.strides = strides\n\n    def call(self, inputs, **kwargs):\n        padding = self.padding\n        pool_size = self.pool_size\n        strides = self.strides\n        if K.backend() == &#39;tensorflow&#39;:\n            ksize = [1, pool_size[0], pool_size[1], 1]\n            padding = padding.upper()\n            strides = [1, strides[0], strides[1], 1]\n            output, argmax = K.tf.nn.max_pool_with_argmax(inputs, ksize=ksize, strides=strides, padding=padding)\n        else:\n            errmsg = &#39;&#123;&#125; backend is not supported for layer &#123;&#125;&#39;.format(K.backend(), type(self).__name__)\n            raise NotImplementedError(errmsg)\n        argmax = K.cast(argmax, K.floatx())\n        return [output, argmax]\n\n    def compute_output_shape(self, input_shape):\n        ratio = (1, 2, 2, 1)\n        output_shape = [dim // ratio[idx] if dim is not None else None for idx, dim in enumerate(input_shape)]\n        output_shape = tuple(output_shape)\n        return [output_shape, output_shape]\n\n    def compute_mask(self, inputs, mask=None):\n        return 2 * [None]\n\n\nclass MaxUnpooling2D(Layer):\n    def __init__(self, up_size=(2, 2), **kwargs):\n        super(MaxUnpooling2D, self).__init__(**kwargs)\n        self.up_size = up_size\n\n    def call(self, inputs, output_shape=None):\n        updates, mask = inputs[0], inputs[1]\n        with K.tf.variable_scope(self.name):\n            mask = K.cast(mask, &#39;int32&#39;)\n            input_shape = K.tf.shape(updates, out_type=&#39;int32&#39;)\n            #  calculation new shape\n            if output_shape is None:\n                output_shape = (input_shape[0], input_shape[1] * self.up_size[0], input_shape[2] * self.up_size[1], input_shape[3])\n\n            # calculation indices for batch, height, width and feature maps\n            one_like_mask = K.ones_like(mask, dtype=&#39;int32&#39;)\n            batch_shape = K.concatenate([[input_shape[0]], [1], [1], [1]], axis=0)\n            batch_range = K.reshape(K.tf.range(output_shape[0], dtype=&#39;int32&#39;), shape=batch_shape)\n            b = one_like_mask * batch_range\n            y = mask // (output_shape[2] * output_shape[3])\n            x = (mask // output_shape[3]) % output_shape[2]\n            feature_range = K.tf.range(output_shape[3], dtype=&#39;int32&#39;)\n            f = one_like_mask * feature_range\n\n            # transpose indices &amp; reshape update values to one dimension\n            updates_size = K.tf.size(updates)\n            indices = K.transpose(K.reshape(K.stack([b, y, x, f]),[4, updates_size]))\n            values = K.reshape(updates, [updates_size])\n            ret = K.tf.scatter_nd(indices, values, output_shape)\n            return ret\n\n    def compute_output_shape(self, input_shape):\n        mask_shape = input_shape[1]\n        return (mask_shape[0], mask_shape[1] * self.up_size[0], mask_shape[2] * self.up_size[1], mask_shape[3])</code></pre>\n<p>在此处自定义了下采样代码和上采样的代码，在实际的运用中，需要将池化和上采样的代码替换为上文的代码。形如：</p>\n<pre><code class=\"python\">    o = MaxPoolingWithArgmax2D()(input)\n    o2 = MaxUnpooling2D()(o)</code></pre>\n<p>其中<code>o</code>输出的是输出层和对应的<code>argmax</code>参数，对应的上采样层输入就是池化层的输出和索引参数。</p>\n"},{"title":"U-net","date":"2021-04-23T02:48:06.000Z","top":true,"cover":true,"author":"Fanrencli","_content":"\n## 深度学习之语义分割U-net(2015)\n\n### what is U-net\n\n上篇文章我们介绍了`SegNet`网络的相关知识和网络的特点，这篇文章介绍2015年发表的另一篇比较经典的语义分割网络`U-net`，这篇网络与上篇的`SegNet`的网络差别不大，但是结构上还是有差别的，并且在`U-net`网络中运用了跳跃连接，这个特点和`SegNet`不同，也正是因为此处的不同，有的文章将这两个网络的池化索引和跳跃连接这两个特点进行结合进行网络构建。\n\n`U-net`网络结构与`SegNet`结构相似，都拥有编码和解码的过程，但是在有效特征层选取的时候，`U-net`选取了多个特征层进行特征融合，而`SegNet`网络值利用了最后一层特征。\n\n![U-net网络结构](http://39.105.26.229:4567/20191109101342389.png)\n\n### 主干网络结构简介\n\n针对`U-net`网络，我们选取`MobileNet`作为主干网络，在之前的文章中已经介绍过，且给出了相关代码，此处给出[链接](http://fanrencli.cn/2021/04/20/feature-extractor/mobilenet/)。\n\n### 特征解码\n\n特征解码过程与`SegNet`网络类似，针对编码过程中提取得到的有效特征层进行上采样解码，并与对应的有效特征层进行连接。\n\n代码如下：\n```python\n\nfrom keras.models import *\nfrom keras.layers import *\nfrom nets.mobilenet import get_mobilenet_encoder\nMERGE_AXIS = -1\n\ndef _unet( n_classes , encoder , l1_skip_conn=True,  input_height=416, input_width=608  ):\n\n\timg_input , levels = encoder( input_height=input_height ,  input_width=input_width )\n\t[f1 , f2 , f3 , f4 , f5 ] = levels \n\n\to = f4\n\t# 26,26,512\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D(512, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\t# 52,52,512\n\to = ( UpSampling2D((2,2)))(o)\n\t# 52,52,768\n\to =  concatenate([o, f3],axis=MERGE_AXIS )  \n\to = ZeroPadding2D((1,1))(o)\n\t# 52,52,256\n\to = Conv2D(256, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\t# 104,104,256\n\to = UpSampling2D( (2,2)))(o)\n\t# 104,104,384\n\to = concatenate([o,f2],axis=MERGE_AXIS ) )\n\to = ZeroPadding2D((1,1))(o)\n\t# 104,104,128\n\to = Conv2D(128 , (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\t# 208,208,128\n\to = UpSampling2D((2,2))(o)\n\t\n\tif l1_skip_conn:\n\t\to = concatenate([o,f1],axis=MERGE_AXIS )\n\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D( 64 , (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\to =  Conv2D(n_classes, (3, 3), padding='same')( o )\n\t\n\t# 将结果进行reshape\n\to = Reshape((int(input_height/2)*int(input_width/2), -1))(o)\n\to = Softmax()(o)\n\tmodel = Model(img_input,o)\n\treturn model\n\ndef mobilenet_unet( n_classes ,  input_height=224, input_width=224 , encoder_level=3):\n\tmodel =  _unet( n_classes , get_mobilenet_encoder ,  input_height=input_height, input_width=input_width  )\n\treturn model\n```\n\n至此，`U-net`相关的代码就介绍完成了，在后期会针对已经介绍的网络进行不断更新。\n\n\n","source":"_posts/semantic_segmentation/unet.md","raw":"---\ntitle: U-net\ndate: 2021-04-23 10:48:06\ntop: true\ncover: true\ncategories:\n- Deep Learning\ntags:\n- semantic segmentation\n- U-net\n- Fanrencli\nauthor: Fanrencli\n---\n\n## 深度学习之语义分割U-net(2015)\n\n### what is U-net\n\n上篇文章我们介绍了`SegNet`网络的相关知识和网络的特点，这篇文章介绍2015年发表的另一篇比较经典的语义分割网络`U-net`，这篇网络与上篇的`SegNet`的网络差别不大，但是结构上还是有差别的，并且在`U-net`网络中运用了跳跃连接，这个特点和`SegNet`不同，也正是因为此处的不同，有的文章将这两个网络的池化索引和跳跃连接这两个特点进行结合进行网络构建。\n\n`U-net`网络结构与`SegNet`结构相似，都拥有编码和解码的过程，但是在有效特征层选取的时候，`U-net`选取了多个特征层进行特征融合，而`SegNet`网络值利用了最后一层特征。\n\n![U-net网络结构](http://39.105.26.229:4567/20191109101342389.png)\n\n### 主干网络结构简介\n\n针对`U-net`网络，我们选取`MobileNet`作为主干网络，在之前的文章中已经介绍过，且给出了相关代码，此处给出[链接](http://fanrencli.cn/2021/04/20/feature-extractor/mobilenet/)。\n\n### 特征解码\n\n特征解码过程与`SegNet`网络类似，针对编码过程中提取得到的有效特征层进行上采样解码，并与对应的有效特征层进行连接。\n\n代码如下：\n```python\n\nfrom keras.models import *\nfrom keras.layers import *\nfrom nets.mobilenet import get_mobilenet_encoder\nMERGE_AXIS = -1\n\ndef _unet( n_classes , encoder , l1_skip_conn=True,  input_height=416, input_width=608  ):\n\n\timg_input , levels = encoder( input_height=input_height ,  input_width=input_width )\n\t[f1 , f2 , f3 , f4 , f5 ] = levels \n\n\to = f4\n\t# 26,26,512\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D(512, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\t# 52,52,512\n\to = ( UpSampling2D((2,2)))(o)\n\t# 52,52,768\n\to =  concatenate([o, f3],axis=MERGE_AXIS )  \n\to = ZeroPadding2D((1,1))(o)\n\t# 52,52,256\n\to = Conv2D(256, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\t# 104,104,256\n\to = UpSampling2D( (2,2)))(o)\n\t# 104,104,384\n\to = concatenate([o,f2],axis=MERGE_AXIS ) )\n\to = ZeroPadding2D((1,1))(o)\n\t# 104,104,128\n\to = Conv2D(128 , (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\t# 208,208,128\n\to = UpSampling2D((2,2))(o)\n\t\n\tif l1_skip_conn:\n\t\to = concatenate([o,f1],axis=MERGE_AXIS )\n\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D( 64 , (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\to =  Conv2D(n_classes, (3, 3), padding='same')( o )\n\t\n\t# 将结果进行reshape\n\to = Reshape((int(input_height/2)*int(input_width/2), -1))(o)\n\to = Softmax()(o)\n\tmodel = Model(img_input,o)\n\treturn model\n\ndef mobilenet_unet( n_classes ,  input_height=224, input_width=224 , encoder_level=3):\n\tmodel =  _unet( n_classes , get_mobilenet_encoder ,  input_height=input_height, input_width=input_width  )\n\treturn model\n```\n\n至此，`U-net`相关的代码就介绍完成了，在后期会针对已经介绍的网络进行不断更新。\n\n\n","slug":"semantic_segmentation/unet","published":1,"updated":"2021-04-23T09:54:45.367Z","_id":"cknu4ydno0000eouo6p7rh8t0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习之语义分割U-net-2015\"><a href=\"#深度学习之语义分割U-net-2015\" class=\"headerlink\" title=\"深度学习之语义分割U-net(2015)\"></a>深度学习之语义分割U-net(2015)</h2><h3 id=\"what-is-U-net\"><a href=\"#what-is-U-net\" class=\"headerlink\" title=\"what is U-net\"></a>what is U-net</h3><p>上篇文章我们介绍了<code>SegNet</code>网络的相关知识和网络的特点，这篇文章介绍2015年发表的另一篇比较经典的语义分割网络<code>U-net</code>，这篇网络与上篇的<code>SegNet</code>的网络差别不大，但是结构上还是有差别的，并且在<code>U-net</code>网络中运用了跳跃连接，这个特点和<code>SegNet</code>不同，也正是因为此处的不同，有的文章将这两个网络的池化索引和跳跃连接这两个特点进行结合进行网络构建。</p>\n<p><code>U-net</code>网络结构与<code>SegNet</code>结构相似，都拥有编码和解码的过程，但是在有效特征层选取的时候，<code>U-net</code>选取了多个特征层进行特征融合，而<code>SegNet</code>网络值利用了最后一层特征。</p>\n<p><img src=\"http://39.105.26.229:4567/20191109101342389.png\" alt=\"U-net网络结构\"></p>\n<h3 id=\"主干网络结构简介\"><a href=\"#主干网络结构简介\" class=\"headerlink\" title=\"主干网络结构简介\"></a>主干网络结构简介</h3><p>针对<code>U-net</code>网络，我们选取<code>MobileNet</code>作为主干网络，在之前的文章中已经介绍过，且给出了相关代码，此处给出<a href=\"http://fanrencli.cn/2021/04/20/feature-extractor/mobilenet/\">链接</a>。</p>\n<h3 id=\"特征解码\"><a href=\"#特征解码\" class=\"headerlink\" title=\"特征解码\"></a>特征解码</h3><p>特征解码过程与<code>SegNet</code>网络类似，针对编码过程中提取得到的有效特征层进行上采样解码，并与对应的有效特征层进行连接。</p>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>layers <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> nets<span class=\"token punctuation\">.</span>mobilenet <span class=\"token keyword\">import</span> get_mobilenet_encoder\nMERGE_AXIS <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_unet</span><span class=\"token punctuation\">(</span> n_classes <span class=\"token punctuation\">,</span> encoder <span class=\"token punctuation\">,</span> l1_skip_conn<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>  input_height<span class=\"token operator\">=</span><span class=\"token number\">416</span><span class=\"token punctuation\">,</span> input_width<span class=\"token operator\">=</span><span class=\"token number\">608</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    img_input <span class=\"token punctuation\">,</span> levels <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">(</span> input_height<span class=\"token operator\">=</span>input_height <span class=\"token punctuation\">,</span>  input_width<span class=\"token operator\">=</span>input_width <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">[</span>f1 <span class=\"token punctuation\">,</span> f2 <span class=\"token punctuation\">,</span> f3 <span class=\"token punctuation\">,</span> f4 <span class=\"token punctuation\">,</span> f5 <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> levels \n\n    o <span class=\"token operator\">=</span> f4\n    <span class=\"token comment\" spellcheck=\"true\"># 26,26,512</span>\n    o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 52,52,512</span>\n    o <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> UpSampling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 52,52,768</span>\n    o <span class=\"token operator\">=</span>  concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">,</span> f3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>axis<span class=\"token operator\">=</span>MERGE_AXIS <span class=\"token punctuation\">)</span>  \n    o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 52,52,256</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 104,104,256</span>\n    o <span class=\"token operator\">=</span> UpSampling2D<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 104,104,384</span>\n    o <span class=\"token operator\">=</span> concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">,</span>f2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>axis<span class=\"token operator\">=</span>MERGE_AXIS <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 104,104,128</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 208,208,128</span>\n    o <span class=\"token operator\">=</span> UpSampling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> l1_skip_conn<span class=\"token punctuation\">:</span>\n        o <span class=\"token operator\">=</span> concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">,</span>f1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>axis<span class=\"token operator\">=</span>MERGE_AXIS <span class=\"token punctuation\">)</span>\n\n    o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span> <span class=\"token number\">64</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\n    o <span class=\"token operator\">=</span>  Conv2D<span class=\"token punctuation\">(</span>n_classes<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> o <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 将结果进行reshape</span>\n    o <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>input_height<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>int<span class=\"token punctuation\">(</span>input_width<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> Softmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>img_input<span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">mobilenet_unet</span><span class=\"token punctuation\">(</span> n_classes <span class=\"token punctuation\">,</span>  input_height<span class=\"token operator\">=</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> input_width<span class=\"token operator\">=</span><span class=\"token number\">224</span> <span class=\"token punctuation\">,</span> encoder_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span>  _unet<span class=\"token punctuation\">(</span> n_classes <span class=\"token punctuation\">,</span> get_mobilenet_encoder <span class=\"token punctuation\">,</span>  input_height<span class=\"token operator\">=</span>input_height<span class=\"token punctuation\">,</span> input_width<span class=\"token operator\">=</span>input_width  <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model</code></pre>\n<p>至此，<code>U-net</code>相关的代码就介绍完成了，在后期会针对已经介绍的网络进行不断更新。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习之语义分割U-net-2015\"><a href=\"#深度学习之语义分割U-net-2015\" class=\"headerlink\" title=\"深度学习之语义分割U-net(2015)\"></a>深度学习之语义分割U-net(2015)</h2><h3 id=\"what-is-U-net\"><a href=\"#what-is-U-net\" class=\"headerlink\" title=\"what is U-net\"></a>what is U-net</h3><p>上篇文章我们介绍了<code>SegNet</code>网络的相关知识和网络的特点，这篇文章介绍2015年发表的另一篇比较经典的语义分割网络<code>U-net</code>，这篇网络与上篇的<code>SegNet</code>的网络差别不大，但是结构上还是有差别的，并且在<code>U-net</code>网络中运用了跳跃连接，这个特点和<code>SegNet</code>不同，也正是因为此处的不同，有的文章将这两个网络的池化索引和跳跃连接这两个特点进行结合进行网络构建。</p>\n<p><code>U-net</code>网络结构与<code>SegNet</code>结构相似，都拥有编码和解码的过程，但是在有效特征层选取的时候，<code>U-net</code>选取了多个特征层进行特征融合，而<code>SegNet</code>网络值利用了最后一层特征。</p>\n<p><img src=\"http://39.105.26.229:4567/20191109101342389.png\" alt=\"U-net网络结构\"></p>\n<h3 id=\"主干网络结构简介\"><a href=\"#主干网络结构简介\" class=\"headerlink\" title=\"主干网络结构简介\"></a>主干网络结构简介</h3><p>针对<code>U-net</code>网络，我们选取<code>MobileNet</code>作为主干网络，在之前的文章中已经介绍过，且给出了相关代码，此处给出<a href=\"http://fanrencli.cn/2021/04/20/feature-extractor/mobilenet/\">链接</a>。</p>\n<h3 id=\"特征解码\"><a href=\"#特征解码\" class=\"headerlink\" title=\"特征解码\"></a>特征解码</h3><p>特征解码过程与<code>SegNet</code>网络类似，针对编码过程中提取得到的有效特征层进行上采样解码，并与对应的有效特征层进行连接。</p>\n<p>代码如下：</p>\n<pre><code class=\"python\">\nfrom keras.models import *\nfrom keras.layers import *\nfrom nets.mobilenet import get_mobilenet_encoder\nMERGE_AXIS = -1\n\ndef _unet( n_classes , encoder , l1_skip_conn=True,  input_height=416, input_width=608  ):\n\n    img_input , levels = encoder( input_height=input_height ,  input_width=input_width )\n    [f1 , f2 , f3 , f4 , f5 ] = levels \n\n    o = f4\n    # 26,26,512\n    o = ZeroPadding2D((1,1))(o)\n    o = Conv2D(512, (3, 3), padding=&#39;valid&#39;)(o)\n    o = BatchNormalization()(o)\n\n    # 52,52,512\n    o = ( UpSampling2D((2,2)))(o)\n    # 52,52,768\n    o =  concatenate([o, f3],axis=MERGE_AXIS )  \n    o = ZeroPadding2D((1,1))(o)\n    # 52,52,256\n    o = Conv2D(256, (3, 3), padding=&#39;valid&#39;)(o)\n    o = BatchNormalization()(o)\n\n    # 104,104,256\n    o = UpSampling2D( (2,2)))(o)\n    # 104,104,384\n    o = concatenate([o,f2],axis=MERGE_AXIS ) )\n    o = ZeroPadding2D((1,1))(o)\n    # 104,104,128\n    o = Conv2D(128 , (3, 3), padding=&#39;valid&#39;)(o)\n    o = BatchNormalization()(o)\n    # 208,208,128\n    o = UpSampling2D((2,2))(o)\n\n    if l1_skip_conn:\n        o = concatenate([o,f1],axis=MERGE_AXIS )\n\n    o = ZeroPadding2D((1,1))(o)\n    o = Conv2D( 64 , (3, 3), padding=&#39;valid&#39;)(o)\n    o = BatchNormalization()(o)\n\n    o =  Conv2D(n_classes, (3, 3), padding=&#39;same&#39;)( o )\n\n    # 将结果进行reshape\n    o = Reshape((int(input_height/2)*int(input_width/2), -1))(o)\n    o = Softmax()(o)\n    model = Model(img_input,o)\n    return model\n\ndef mobilenet_unet( n_classes ,  input_height=224, input_width=224 , encoder_level=3):\n    model =  _unet( n_classes , get_mobilenet_encoder ,  input_height=input_height, input_width=input_width  )\n    return model</code></pre>\n<p>至此，<code>U-net</code>相关的代码就介绍完成了，在后期会针对已经介绍的网络进行不断更新。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckhr2kceb000p4guo4uevggqz","category_id":"ckhr2kcec000q4guoflmidn5y","_id":"ckhr2kcee000w4guobyadg7kq"},{"post_id":"ckhr3bkzw0000o8uo0g7f61uw","category_id":"ckhr2kcec000q4guoflmidn5y","_id":"ckhr3bl030003o8uo2drxg887"},{"post_id":"ckkf2tf280000x0uo4i61cefc","category_id":"ckkf2w5fh0000couodabsf9y5","_id":"ckkf2w5fj0003couo7vvg690c"},{"post_id":"cknmrfu4p000030uo6m1l2idg","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknmrfu4z000730uoga9z2sux"},{"post_id":"cknmrfu4x000330uo1d0s6556","category_id":"cknmrfu4y000430uo41byhm45","_id":"cknmrfu4z000830uoeqs61xru"},{"post_id":"cknmrh5ye0000v4uo97w11k7u","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknmrh5yo0002v4uodkqq29lk"},{"post_id":"cknms8g6d000060uo8adu5pch","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknms8g6m000260uo4ztd5ws9"},{"post_id":"ckno0pgzn0000kcuo0tqwfmi7","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"ckno0pgzx0002kcuodowd4gaf"},{"post_id":"cknq6gtow0000gwuo23tu1wuh","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknq6gtp30002gwuo4gdkgqo9"},{"post_id":"cknr69kyb0000pkuo4ouf0ff3","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknr69l0f0002pkuob4tsca9d"},{"post_id":"cknsx2fq40000scuo4t9adrdr","category_id":"ckicrxqcz0001vguo0k7c4969","_id":"cknsx2fqe0006scuo9cfs4old"},{"post_id":"cknsx2fq90001scuohzjcdqks","category_id":"ckhr2kce000044guoctlycazy","_id":"cknsx2fqg0009scuo2gt3f7gx"},{"post_id":"cknsx2fqb0003scuo2wsa59jg","category_id":"ckhr2kce000044guoctlycazy","_id":"cknsx2fqg000bscuoatezdf28"},{"post_id":"cknsx2fqf0008scuobzau6k2l","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknsx2fql000fscuo1io3f7ul"},{"post_id":"cknu4ydno0000eouo6p7rh8t0","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknu4ydnv0002eouobwgm3365"}],"PostTag":[{"post_id":"ckhr2kceb000p4guo4uevggqz","tag_id":"ckhr2kced000r4guo69vff6wz","_id":"ckhr2kcee000u4guo80mb3hcm"},{"post_id":"ckhr2kceb000p4guo4uevggqz","tag_id":"ckhr2kced000s4guoc9tp6dku","_id":"ckhr2kcee000v4guo9sdjhstn"},{"post_id":"ckhr2kceb000p4guo4uevggqz","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"ckhr2muv900012cuohkexdr4s"},{"post_id":"ckhr3bkzw0000o8uo0g7f61uw","tag_id":"ckhr2kced000r4guo69vff6wz","_id":"ckhr3bl030001o8uo0blhc9mw"},{"post_id":"ckhr3bkzw0000o8uo0g7f61uw","tag_id":"ckhr2kced000s4guoc9tp6dku","_id":"ckhr3bl030002o8uocrb142pa"},{"post_id":"ckhr3bkzw0000o8uo0g7f61uw","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"ckhr3bl030004o8uo86g74bn0"},{"post_id":"ckkf2tf280000x0uo4i61cefc","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"ckkf2tf2d0004x0uodvpgh9e8"},{"post_id":"ckkf2tf280000x0uo4i61cefc","tag_id":"ckkf2w5fi0001couog4elfbso","_id":"ckkf2w5fj0002couo7lgealvm"},{"post_id":"cknmrfu4p000030uo6m1l2idg","tag_id":"cknmrfu4w000230uo7l0gbd0i","_id":"cknmrfu4z000530uo0tewh6lm"},{"post_id":"cknmrfu4p000030uo6m1l2idg","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknmrfu4z000630uo3fbk2btd"},{"post_id":"cknmrh5ye0000v4uo97w11k7u","tag_id":"cknmrh5yk0001v4uob6jn6b9i","_id":"cknmrh5yo0003v4uocbwp9joj"},{"post_id":"cknmrh5ye0000v4uo97w11k7u","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknmrh5yo0004v4uo156nbc5i"},{"post_id":"cknms8g6d000060uo8adu5pch","tag_id":"cknms8g6j000160uoc4d8ehme","_id":"cknms8g6m000360uo51qz23yl"},{"post_id":"cknms8g6d000060uo8adu5pch","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknms8g6n000460uogu035lcr"},{"post_id":"ckno0pgzn0000kcuo0tqwfmi7","tag_id":"ckno0pgzu0001kcuo1uts92c5","_id":"ckno0pgzy0004kcuo3hkphs4m"},{"post_id":"ckno0pgzn0000kcuo0tqwfmi7","tag_id":"ckno0pgzy0003kcuodzo80gg2","_id":"ckno0pgzy0005kcuo3ekb16dh"},{"post_id":"ckno0pgzn0000kcuo0tqwfmi7","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"ckno0pgzy0006kcuogukr81az"},{"post_id":"cknq6gtow0000gwuo23tu1wuh","tag_id":"cknq6gtoz0001gwuodr5g3x79","_id":"cknq6gtp50005gwuogtg0flns"},{"post_id":"cknq6gtow0000gwuo23tu1wuh","tag_id":"cknq6gtp40003gwuoalkibv4o","_id":"cknq6gtp50006gwuoeacq6n2f"},{"post_id":"cknq6gtow0000gwuo23tu1wuh","tag_id":"cknq6gtp40004gwuo9cgc64wn","_id":"cknq6gtp50007gwuobuu1f22t"},{"post_id":"cknq6gtow0000gwuo23tu1wuh","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknq6gtp50008gwuob5vv52q2"},{"post_id":"cknr69kyb0000pkuo4ouf0ff3","tag_id":"cknr69l0a0001pkuo06a44oas","_id":"cknr69l0g0004pkuo976we9u6"},{"post_id":"cknr69kyb0000pkuo4ouf0ff3","tag_id":"cknr69l0g0003pkuo1jlpebr5","_id":"cknr69l0g0005pkuo56ujg0ar"},{"post_id":"cknr69kyb0000pkuo4ouf0ff3","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknr69l0g0006pkuocl76bby5"},{"post_id":"cknsx2fq40000scuo4t9adrdr","tag_id":"ckicrxqd00002vguo5x0phyqu","_id":"cknsx2fqb0002scuo3yydd0ux"},{"post_id":"cknsx2fq40000scuo4t9adrdr","tag_id":"ckicrxqd10003vguoeh2c3gnp","_id":"cknsx2fqd0004scuo0s2fa4ap"},{"post_id":"cknsx2fq40000scuo4t9adrdr","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknsx2fqf0007scuo217ofvhm"},{"post_id":"cknsx2fq90001scuohzjcdqks","tag_id":"ckhr2kce200054guoh9nfgkf6","_id":"cknsx2fqg000ascuoe6x7atte"},{"post_id":"cknsx2fq90001scuohzjcdqks","tag_id":"ckhr2kce5000b4guodlhycl9u","_id":"cknsx2fql000dscuod1rr5jtf"},{"post_id":"cknsx2fq90001scuohzjcdqks","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknsx2fql000escuocnls7ool"},{"post_id":"cknsx2fqb0003scuo2wsa59jg","tag_id":"ckhr2kce200054guoh9nfgkf6","_id":"cknsx2fql000gscuo6jom6mva"},{"post_id":"cknsx2fqb0003scuo2wsa59jg","tag_id":"ckhr2kce5000b4guodlhycl9u","_id":"cknsx2fqm000iscuogtrz9v4y"},{"post_id":"cknsx2fqb0003scuo2wsa59jg","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknsx2fqm000jscuofatufubm"},{"post_id":"cknsx2fqf0008scuobzau6k2l","tag_id":"cknsx2fqg000cscuofsji970l","_id":"cknsx2fqm000kscuofyc7h8ef"},{"post_id":"cknsx2fqf0008scuobzau6k2l","tag_id":"cknsx2fqm000hscuo4foecs03","_id":"cknsx2fqm000lscuo18ed3o0l"},{"post_id":"cknsx2fqf0008scuobzau6k2l","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknsx2fqm000mscuo4pjk2b4m"},{"post_id":"cknu4ydno0000eouo6p7rh8t0","tag_id":"cknsx2fqg000cscuofsji970l","_id":"cknu4ydnw0003eouoho865jat"},{"post_id":"cknu4ydno0000eouo6p7rh8t0","tag_id":"cknu4ydnq0001eouogc507hb2","_id":"cknu4ydnw0004eouo7j0d9ue5"},{"post_id":"cknu4ydno0000eouo6p7rh8t0","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknu4ydnw0005eouodlihe837"}],"Tag":[{"name":"Haar Wavelet","_id":"ckhr2kce200054guoh9nfgkf6"},{"name":"Python","_id":"ckhr2kce5000b4guodlhycl9u"},{"name":"python","_id":"ckhr2kce9000i4guo9aswepfj"},{"name":"C++","_id":"ckhr2kced000r4guo69vff6wz"},{"name":"Binary Search","_id":"ckhr2kced000s4guoc9tp6dku"},{"name":"Fanrencli","_id":"ckhr2muv700002cuoeyk5dr8j"},{"name":"Orbbec_OpenNI","_id":"ckicrxqd00002vguo5x0phyqu"},{"name":"OpenCV","_id":"ckicrxqd10003vguoeh2c3gnp"},{"name":"Assembly Language","_id":"ckkf2tf2b0001x0uo06g45yzz"},{"name":"8086","_id":"ckkf2w5fi0001couog4elfbso"},{"name":"Jsis3d","_id":"cknmrfu4w000230uo7l0gbd0i"},{"name":"ResNet101","_id":"cknmrh5yk0001v4uob6jn6b9i"},{"name":"VGG16","_id":"cknms8g6j000160uoc4d8ehme"},{"name":"object detection","_id":"ckno0pgzu0001kcuo1uts92c5"},{"name":"SSD","_id":"ckno0pgzy0003kcuodzo80gg2"},{"name":"MobileNetv1","_id":"cknq6gtoz0001gwuodr5g3x79"},{"name":"MobileNetv2","_id":"cknq6gtp40003gwuoalkibv4o"},{"name":"MobileNetv3","_id":"cknq6gtp40004gwuo9cgc64wn"},{"name":"Inceptionv3","_id":"cknr69l0a0001pkuo06a44oas"},{"name":"Xception","_id":"cknr69l0g0003pkuo1jlpebr5"},{"name":"semantic segmentation","_id":"cknsx2fqg000cscuofsji970l"},{"name":"SegNet","_id":"cknsx2fqm000hscuo4foecs03"},{"name":"U-net","_id":"cknu4ydnq0001eouogc507hb2"}]}}