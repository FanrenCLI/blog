{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"9b4beaffc6e876cc9bc9443471003650213e6a60","modified":1603262361436},{"_id":"source/_data/friends.json","hash":"8b454e8017b9fe5f257c8c75c5a39666198bf99d","modified":1603262361437},{"_id":"source/_posts/haar_wavelet_optimization.md","hash":"5c7e50e410762daa1c9d5e1e7b0a85f99f54f454","modified":1618921540983},{"_id":"source/_posts/haar_wavelet.md","hash":"893c63ddf38de111002e551d3ab8cd01e3289c7f","modified":1618921547523},{"_id":"source/_posts/hello-world.md","hash":"9ec7f57234f91ec1e9a7a044eb2db41184707df1","modified":1605927533041},{"_id":"source/about/index.md","hash":"5c0877fc438a3be6aec079546f245a140c59e3df","modified":1603262361438},{"_id":"source/categories/index.md","hash":"a82064f42e7d9429cf1c2b718cfe4354adb24ffc","modified":1603262361439},{"_id":"source/contact/index.md","hash":"1e41a09c02c43a8a27b1828e767b119aa3c2b668","modified":1603262361439},{"_id":"source/friends/index.md","hash":"3ddf8b788c81987563344a1ac4a03263286e1395","modified":1603262361440},{"_id":"source/tags/index.md","hash":"33209013ac3e6bb71566d294b5a0503e91b8b04f","modified":1603262361440},{"_id":"source/_posts/Algorithm/Binary Search/Binary Search.md","hash":"bb7875ab4d903088000b16ec16014fd506659fd8","modified":1612612253883},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1618751271694},{"_id":"themes/hexo-theme-matery/README.md","hash":"bbc201f264ea3fca4ec3738728d4236626cd698a","modified":1618751271695},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1618751271695},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"938e40cfb109501bf487c808e5670db3011431b9","modified":1618751271696},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"a98713b60a4f03ff43fbeefd20d40d231890d976","modified":1619172643770},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"9baf9370d0d7494e8575934e4bd0fa6d24484052","modified":1618751271698},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"13ce732a54ce08b0ca01f14fd09cbe8fc418de21","modified":1618751271698},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"162136ceca6c95928c90a1adef8fabc2161d5c0e","modified":1618751271699},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1618751271719},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"88e23163aae5dff7a2e7050f55c3754f0e76ae68","modified":1618751271719},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1618751271719},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1618751271720},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"72fb5af3fc2f8955e2eb10926bbe4532a04ccd1b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"e9716a948172e6ad46c18cc7e78770cdc46f1857","modified":1618751271721},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"e6e6ab8624081e0f5e2d459427ca5069d7435c19","modified":1618751271721},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"27302b61fd4277507c41c28de5cc176e8deb8fb1","modified":1618751271722},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3783bb4d7807e3a3701d67499a878c69a0a872d6","modified":1618751271722},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1618751271722},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1618751271723},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1618751271699},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"6b4341fbba291c53de91babb2a0d69940a8d6547","modified":1618751271700},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1618751271700},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1618751271701},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"58a7a07f8ab81ecc19a78d897955ca1ad73defb3","modified":1618751271701},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1618751271702},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1618751271702},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"78228c5e91fc2e6fed6949d971bf78a1f5081812","modified":1618751271703},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1618751271703},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1618751271704},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1618751271704},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1618751271704},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"baf823506b71f257a42b44adaa52d42344b9cb65","modified":1618751271705},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1618751271705},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"624d9cb78a5507895ab50d20f3f0c497a5025d08","modified":1618751271705},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1618751271706},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"e1264587db510ae1885405aed433592291ae74c4","modified":1618751271706},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"8ce2974b19765e1f05d935a4f18abf7c84a980da","modified":1618751271706},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1618751271707},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"5a2179a9a3de6f56b0aaa154a11919b8f34fcbf9","modified":1618751271707},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1618751271708},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"96d0769e4ee87162da8d28e0e5abe3dd7e142aa6","modified":1618751271708},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"8ad8a7ec3f6438af496c51fd6bef1684e158a9ef","modified":1618751271708},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1618751271709},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1618751271710},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1618751271710},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1618751271711},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"5a0a056d642f89dc45d22cbcf0b210e69e58cf57","modified":1618751271711},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1618751271711},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1618751271712},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"ef335be75e3f26580583af8699b8497f350ae200","modified":1618751271712},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1602914090000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1618751271713},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1618751271713},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1618751271714},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8fc0e6172abbed7084b06e3ed637ad37e2752c48","modified":1618751271714},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1618751271715},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1618751271716},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1618751271715},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1618751271716},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1618751271717},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1618751271717},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1618751271717},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1618751271718},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"6eaab5fccff9ad69d1d877a0f0585e2fcb89ba52","modified":1618751271718},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1618751271723},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1618751271724},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"f8bcbcb4c2a3aebb3a2e7bf282ec99b4589cd5db","modified":1618751271724},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"b3c32b573a4a9ef3dfeffbd544a9c3f451e67a54","modified":1618751271725},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"ddfef10e80a09b8efb48c52ede773e71d5890c78","modified":1618751271726},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"d725d161733c0044c2c4b17389bfdd897a14c09e","modified":1618751271726},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1618751271727},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1618751271728},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1618751271728},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1618751271729},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1618751271730},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1618751271760},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1618751271761},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1618751271763},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1618751271764},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1618751271764},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1618751271765},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1618751271766},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1618751271767},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1618751271775},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1618751271777},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1618751271779},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1618751271780},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1618751271780},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1618751271788},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"005185ce5c8250503a75c370a9eb8f044f016c78","modified":1618751271792},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9783581bec83e6bd6cd279f0af23a2862f46a587","modified":1618751271799},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1618751271783},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1618751271787},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1618751271795},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1618751271798},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1618751271799},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1618751271768},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1618751271778},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1618751271781},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1618751271801},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"b27e97ec8ae77d040d328f7dcfc092405386faa5","modified":1603262361443},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"a52ac7807df520e59d0cacf1b38a97ccf8ff6bdf","modified":1603262361444},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1618751271731},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1618751271776},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1618751271792},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1618751271802},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1603269901310},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1603269901312},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1603800277587},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1603269901308},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1618751271773},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1602914090000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1602914090000},{"_id":"public/search.xml","hash":"ed819e5ffdd9136ed1700faf957c8828cafb0eab","modified":1640960469870},{"_id":"public/404.html","hash":"31e0a5608c453b007ec8ac8f1507077c476e8d7a","modified":1640960469870},{"_id":"public/about/index.html","hash":"5d024fe6e3c560721189933b6be57825b130b53a","modified":1640960469870},{"_id":"public/categories/index.html","hash":"93d529631aeefbea5cf1861bfa4fe067fea611a0","modified":1640960469870},{"_id":"public/contact/index.html","hash":"53242efcb1fceaa9e1a5c6302b0563a0edcb7ee2","modified":1640960469870},{"_id":"public/friends/index.html","hash":"facb790a2e0cbcd963bf096bc800d6e673103fe6","modified":1640960469870},{"_id":"public/tags/index.html","hash":"98710a4c7184559b9ddad22de3d486c7135b3a54","modified":1640960469870},{"_id":"public/2020/11/03/haar-wavelet-optimization/index.html","hash":"138995dd4a649696d838bb4352f81c503e4a328d","modified":1605927086340},{"_id":"public/2020/10/27/haar-wavelet/index.html","hash":"811fc11cc903c4f19fa68f977e4c1e6e9797fdda","modified":1605926713885},{"_id":"public/2020/10/21/algorithm/binary-search/binary-search/index.html","hash":"ae7b2f900c965f3e90e3f21f4c496f4637d46fff","modified":1605926713885},{"_id":"public/2020/10/21/hello-world/index.html","hash":"34ecc9e04a0683f53adee6ff360adb3130b831ac","modified":1618992375816},{"_id":"public/archives/index.html","hash":"9e6a21f642c8577571404048579ebc9ebc1e0750","modified":1640960469870},{"_id":"public/archives/2020/index.html","hash":"b75d20dbc6c5ab4d62bea24bc38e2a35753c1ead","modified":1640960469870},{"_id":"public/archives/2020/10/index.html","hash":"72e54edc079b23994eaef6132c248dfb2d7cfd9a","modified":1640960469870},{"_id":"public/archives/2020/11/index.html","hash":"b29f90e96fe61e346a3492391a9613970c106ab4","modified":1640960469870},{"_id":"public/categories/小波变换/index.html","hash":"13b71461188fc5ff5d50c4382f6d12928367f651","modified":1640960469870},{"_id":"public/categories/小波变换/Fanrencli/index.html","hash":"76fd78a58191ed94243ac5d0f86177533da2a16b","modified":1605925475244},{"_id":"public/categories/Algorithm/index.html","hash":"307583266e43f7895544a9ab370bb14b1373c478","modified":1640960469870},{"_id":"public/categories/Algorithm/Fanrencli/index.html","hash":"4de28809580a1bfc589acd5adcd89a8e8dc7d977","modified":1605925475244},{"_id":"public/index.html","hash":"b2bb4fa5a114ac1a7bcfe87318ba632239e118f8","modified":1640960469870},{"_id":"public/tags/Haar-Wavelet/index.html","hash":"9dc2e37b072d0c51668366d7625fa8b29d2fe2d2","modified":1640960469870},{"_id":"public/tags/Python/index.html","hash":"8defb9c93ea14d98fa3f802374989efb787e27c7","modified":1640960469870},{"_id":"public/tags/python/index.html","hash":"712978069390df06d56f4a4b221fa18657adc40f","modified":1640960469870},{"_id":"public/tags/C/index.html","hash":"98546cac731cf608868a8efd2dd50d09fc326d33","modified":1640960469870},{"_id":"public/tags/Binary-Search/index.html","hash":"b3d0e16a54b340fcd861f6927e2cceff998f059e","modified":1640960469870},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1618751375755},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1618751375755},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1618751375755},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1618751375755},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1618751375755},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1618751375755},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1618751375755},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1618751375755},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1618751375755},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1618751375755},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1618751375755},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1618751375755},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1618751375755},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1618751375755},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1618751375755},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1618751375755},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1618751375755},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1618751375755},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1618751375755},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1618751375755},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1618751375755},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1618751375755},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1618751375755},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1618751375755},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1618751375755},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1618751375755},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1618751375755},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1618751375755},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1618751375755},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1618751375755},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1618751375755},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1618751375755},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1618751375755},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1618751375755},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1618751375755},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1618751375755},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1618751375755},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1618751375755},{"_id":"public/medias/reward/alipay.jpg","hash":"b27e97ec8ae77d040d328f7dcfc092405386faa5","modified":1618751375755},{"_id":"public/medias/reward/wechat.png","hash":"a52ac7807df520e59d0cacf1b38a97ccf8ff6bdf","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1618751375755},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1618751375755},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1618751375755},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1618751375755},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1618751375755},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1618751375755},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1618751375755},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1618751375755},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1618751375755},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1618751375755},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1618751375755},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1618751375755},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1618751375755},{"_id":"public/js/search.js","hash":"d559d402b4d4a0931821fe6e22a8831fc43a953d","modified":1618751375755},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1618751375755},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1618751375755},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1618751375755},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1618751375755},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1618751375755},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1618751375755},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1618751375755},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1618751375755},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1618751375755},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1618751375755},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1618751375755},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1618751375755},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1618751375755},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1618751375755},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1618751375755},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1618751375755},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1618751375755},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1618751375755},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1618751375755},{"_id":"public/medias/banner/4.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1618751375755},{"_id":"public/medias/banner/5.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1618751375755},{"_id":"public/medias/banner/6.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1618751375755},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1618751375755},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1618751375755},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1618751375755},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1618751375755},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1618751375755},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1618751375755},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1618751375755},{"_id":"public/css/matery.css","hash":"b53f4b6b7b2d992c904a9bf98b504fba247b220e","modified":1618751375755},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1618751375755},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1618751375755},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1618751375755},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1618751375755},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1618751375755},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1618751375755},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1618751375755},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1618751375755},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1618751375755},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1618751375755},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1618751375755},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1618751375755},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1618751375755},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1618751375755},{"_id":"public/medias/banner/3.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1618751375755},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1618751375755},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1618751375755},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1618751375755},{"_id":"public/tags/Fanrencli/index.html","hash":"2310b08e5d0648654c550a5fcca6bb2d2c77ffd1","modified":1640960469870},{"_id":"source/_posts/Algorithm/129.sum-root-to-leaf-numbers.md","hash":"7e4c12f6271dc0531a54ef4e78242e45d6436cb0","modified":1605926707636},{"_id":"public/2020/11/21/algorithm/129.sum-root-to-leaf-numbers/index.html","hash":"8799ac99906540abb92e0fdf6565679d91ddc3c5","modified":1605926713885},{"_id":"source/_posts/Algorithm/Binary Search/129.sum-root-to-leaf-numbers.md","hash":"cc0fa331939229bece2ebc0efb9b1ab6aa4da516","modified":1607237990298},{"_id":"public/2020/11/21/algorithm/binary-search/129.sum-root-to-leaf-numbers/index.html","hash":"120eb330d7e6728ad2f2c080c6686e844ca9ceba","modified":1640960469870},{"_id":"public/2020/11/21/algorithm/binary-search/binary-search/index.html","hash":"c2aea03d3d78123f395eab5680579803115ab7ab","modified":1640960469870},{"_id":"public/2020/10/23/haar-wavelet-optimization/index.html","hash":"fa4f70213fff2bc5d8cd5e009d1ab43f2b3aba43","modified":1618992375816},{"_id":"public/2020/10/23/haar-wavelet/index.html","hash":"7303a7107fe252ec5d549498fe7c8b8016ae9cdf","modified":1618992375816},{"_id":"source/_posts/OpenNI2-OpenCV.md","hash":"c6f10f6cbacdbbf2cb467e3a2f4e8109cd479e54","modified":1611730725353},{"_id":"public/2020/12/06/openni2-opencv/index.html","hash":"ef150b0f6a08beff62fdb9e3988e0860d16c5177","modified":1618992375816},{"_id":"public/archives/2020/12/index.html","hash":"3ccaf0fc6f6aa0f419abc977ce373fe7d60665be","modified":1640960469870},{"_id":"public/categories/环境配置/index.html","hash":"cd974c8f0d95ad94284796f1d673352424773f28","modified":1640960469870},{"_id":"public/tags/Orbbec-OpenNI/index.html","hash":"360c42d400e3b614557f02054fc870066b875325","modified":1640960469870},{"_id":"public/tags/OpenCV/index.html","hash":"bacea9593db821f31a54bdc8603a14477f8b145b","modified":1640960469870},{"_id":"source/_posts/8086/8086.md","hash":"a4ce09ffd2fb74585e237244b84b3d527a507f24","modified":1619146192403},{"_id":"public/2021/01/27/8086/8086/index.html","hash":"eb2b7f8e29e7a6d495da402948279da82edc0bd9","modified":1640960469870},{"_id":"public/archives/2021/index.html","hash":"8d5986c854e9c9838743e721a140df0998ce27c0","modified":1640960469870},{"_id":"public/archives/2021/01/index.html","hash":"b8fad2c244c112dbe71738c82e76144746431904","modified":1640960469870},{"_id":"public/tags/Assembly-Language/index.html","hash":"1422ddc8b833d9e96a0c9a61e85cf09f01a53d85","modified":1611730651588},{"_id":"public/categories/Assembly-Language/index.html","hash":"58060f3cead7860c80b0b79ece27edf844be808c","modified":1640960469870},{"_id":"public/tags/8086/index.html","hash":"0826e7f253d043996e998acf1fe8c1cdc8709b7a","modified":1640960469870},{"_id":"source/_posts/feature_extractor/resnet.md","hash":"8ab362626d8cbe24698207e5d82a21c97e3e2811","modified":1626164183276},{"_id":"source/_posts/jsis3d/jsis3d.md","hash":"38c2394f7e129ac838b61d9bd2365b5c33c609d0","modified":1618921508783},{"_id":"source/_posts/lifeknow/lifeknow.md","hash":"7164db8b849827a81d9ad970a5b5eadfaba9004e","modified":1621148437663},{"_id":"public/2021/02/06/jsis3d/jsis3d/index.html","hash":"6f960a6e7800b8398083c8a2fb25f9b3eb78a842","modified":1621259816391},{"_id":"public/2020/12/24/lifeknow/lifeknow/index.html","hash":"b8634a437a24a8e684baca293991f8304ecafe89","modified":1640960469870},{"_id":"public/categories/Deep-Learning/index.html","hash":"deba993fc4f52d601a9a45ae5c29462818123ec8","modified":1640960469870},{"_id":"public/categories/Life-Know/index.html","hash":"f836433c99984ce8a1e7446e7ddfe41429b43761","modified":1640960469870},{"_id":"public/tags/Jsis3d/index.html","hash":"41322286ca5b442db5d33447e0d4ed8c099bf55b","modified":1640960469870},{"_id":"public/archives/2021/02/index.html","hash":"db65ce94531da00583d15398e31f3effb32bd1cc","modified":1640960469870},{"_id":"public/2021/04/18/feature-extractor/resnet/index.html","hash":"733f0ca593c3d22d85326f9b715a5ae2e8f7ed4a","modified":1640960469870},{"_id":"public/archives/2021/04/index.html","hash":"981ebec89f333335d4577d0b3ff4e7800dde436b","modified":1640960469870},{"_id":"public/tags/ResNet101/index.html","hash":"40738a6f33a029d67c653be2cc867fa62dbff5fd","modified":1640960469870},{"_id":"source/_posts/feature_extractor/VGG.md","hash":"0a2d724fd48b0aa6b1430aedd640894570b7c084","modified":1626164170388},{"_id":"public/2021/04/18/feature-extractor/vgg/index.html","hash":"215af41bd89ec43a7a644c5ab946dc82437270e4","modified":1640960469870},{"_id":"public/tags/VGG16/index.html","hash":"cdeecc6a4e11b9b02f55a623a3deaa839e1dd485","modified":1640960469870},{"_id":"source/_posts/object_detector/SSD.md","hash":"ddcaba04d0472c61a164a15efebd89cf3d0d58a9","modified":1626164178307},{"_id":"public/2021/04/19/object-detector/ssd/index.html","hash":"9839919b73b58e452f5c8314c2e177c3707611b6","modified":1640960469870},{"_id":"public/tags/object-detection/index.html","hash":"bf329576a2491a177da52b2b2036801bc1b9399e","modified":1640960469870},{"_id":"public/tags/SSD/index.html","hash":"9767deceb00fdae63893bd3492b6dc28a32f6a02","modified":1640960469870},{"_id":"source/_posts/feature_extractor/mobilenet.md","hash":"f216120094c26667deb4fe15b83204218bd85c56","modified":1626164184710},{"_id":"public/2021/04/20/feature-extractor/mobilenet/index.html","hash":"e42273041a648b93ebb91ba884813a7b14e62a60","modified":1640960469870},{"_id":"public/archives/page/2/index.html","hash":"8c147c661b2f7d55cd7df5ba79957ac4009b3bc9","modified":1640960469870},{"_id":"public/page/2/index.html","hash":"1e18795abbdcf647372c3702049beae4489c26d0","modified":1640960469870},{"_id":"public/tags/MobileNetv1/index.html","hash":"1eea5af613d7ad04d3ee1f028af480a535aa0917","modified":1640960469870},{"_id":"public/tags/MobileNetv3/index.html","hash":"ecfa8545154d52a22d03980f0df6186143aee8c8","modified":1640960469870},{"_id":"public/tags/MobileNetv2/index.html","hash":"3a9d59b141a9b7d915af6232ce390df9314def38","modified":1640960469870},{"_id":"source/_posts/feature_extractor/Inception.md","hash":"2c67f1c18781b337f8317ac55c6c18d51cb295af","modified":1626164185769},{"_id":"public/2021/04/20/feature-extractor/inception/index.html","hash":"2ac1ee2ed83c51a66f06becc99c496fbc5d561d5","modified":1640960469870},{"_id":"public/tags/Inceptionv3/index.html","hash":"8674575c6a10d7f0cc86e06d68896011c7e51632","modified":1640960469870},{"_id":"public/tags/Xception/index.html","hash":"74d6cb2d2a23215b1c13d9bb0ea84732ed0cd677","modified":1640960469870},{"_id":"source/_posts/other/OpenNI2-OpenCV.md","hash":"c6f10f6cbacdbbf2cb467e3a2f4e8109cd479e54","modified":1619073972426},{"_id":"source/_posts/other/haar_wavelet.md","hash":"4b5283330cc7379de1d70822647f30b16805f87b","modified":1626164177356},{"_id":"source/_posts/other/haar_wavelet_optimization.md","hash":"5c7e50e410762daa1c9d5e1e7b0a85f99f54f454","modified":1619073972281},{"_id":"source/_posts/other/hello-world.md","hash":"9ec7f57234f91ec1e9a7a044eb2db41184707df1","modified":1619073972393},{"_id":"source/_posts/semantic_segmentation/segnet.md","hash":"52328c74e0945862a2b3e61d8c63c243b86438d6","modified":1626164165792},{"_id":"public/2021/04/22/semantic-segmentation/segnet/index.html","hash":"7ae5cd1a2345a934fa0adb6b2d2826ab4102eb3b","modified":1640960469870},{"_id":"public/2020/12/06/other/openni2-opencv/index.html","hash":"39ed20079b0b11a7ea0572a864bf367e5f517ed5","modified":1640960469870},{"_id":"public/2020/10/23/other/haar-wavelet/index.html","hash":"2655b5de1ce58ec155db183244ba944080018fbb","modified":1640960469870},{"_id":"public/2020/10/23/other/haar-wavelet-optimization/index.html","hash":"9980743e9e0f82790e2c70d52d6cc2c873dad37b","modified":1640960469870},{"_id":"public/2020/10/21/other/hello-world/index.html","hash":"6a8ef4a015841637b82daa0e7c7d11b73da21f3a","modified":1640960469870},{"_id":"public/tags/Fanrencli/page/2/index.html","hash":"646fae148ccffd621fdf493ce4a1e7254ab29096","modified":1620811342909},{"_id":"public/tags/semantic-segmentation/index.html","hash":"5a64a10e0038e5187e344fbff20303be10496085","modified":1640960469870},{"_id":"public/tags/SegNet/index.html","hash":"18491491a04cebde179f94c1af216b78fc6e9f62","modified":1640960469870},{"_id":"source/_posts/semantic_segmentation/unet.md","hash":"8bca9716d9b339717cf0e2e09978bd65ef16fee5","modified":1626164163204},{"_id":"public/2021/04/23/semantic-segmentation/unet/index.html","hash":"250f47742343d3a989a416a141bb89d61ee5e92f","modified":1640960469870},{"_id":"public/tags/U-net/index.html","hash":"29f512bdad716aa668eadee1aab7aa99205fc0b8","modified":1640960469870},{"_id":"source/_posts/feature_extractor/VGG&ResNet.md","hash":"9362c6cbed1f52fb25e7283212957d7983699928","modified":1621582382366},{"_id":"public/2021/05/06/feature-extractor/vgg-resnet/index.html","hash":"aa20e143055c6edcbbe5173e9c50564a39b6aace","modified":1640960469870},{"_id":"public/archives/2021/05/index.html","hash":"a0faf64cf62237745e3f6d027b21774e5319fefb","modified":1640960469870},{"_id":"public/tags/Pytorch/index.html","hash":"24083e2432ecf1bea0aecea0b4b7d81864eb38bc","modified":1640960639049},{"_id":"source/_posts/feature_extractor/mobilnet(pytorch).md","hash":"f7944d59ed08f20377795caf8aba897cbc388501","modified":1621582404009},{"_id":"public/2021/05/08/feature-extractor/mobilnet-pytorch/index.html","hash":"8358fd8e3d7d8eaf3a998f5242cac21bca05f32a","modified":1640960469870},{"_id":"public/tags/MobileNet/index.html","hash":"cc1799feb935572454332d09c6c8085b76913c8e","modified":1640960469870},{"_id":"source/_posts/feature_extractor/Inception(pytorch).md","hash":"3f21f818320ee71309d1936df0553904be247b97","modified":1621582428669},{"_id":"public/2021/05/09/feature-extractor/inception-pytorch/index.html","hash":"df8720acdcb40df3f6286e9065d4be20e59603c5","modified":1640960469870},{"_id":"public/tags/pytorch/index.html","hash":"d9b61ebaaf5645f0d91d9f7c24377044e4a4db68","modified":1620616494532},{"_id":"source/_posts/semantic_segmentation/PSPNet.md","hash":"e9c8fb022f3d878703a8196566f4bec7d259470f","modified":1626164166810},{"_id":"source/_posts/semantic_segmentation/FCN.md","hash":"06d92ff5267fc855faaced94dacfc5282933b653","modified":1626164167750},{"_id":"public/2021/05/11/semantic-segmentation/pspnet/index.html","hash":"a400e9442d8dabf8e536d8787c4e0fa7841e9fce","modified":1640960469870},{"_id":"public/2021/05/10/semantic-segmentation/fcn/index.html","hash":"e93b91b9d2ae4c33d07b56f5c8ae6d1699793114","modified":1640960469870},{"_id":"public/archives/2021/page/2/index.html","hash":"89ad59d5e8c3673915a7ba91ad8a017c5e09c3a5","modified":1640960469870},{"_id":"public/categories/Deep-Learning/page/2/index.html","hash":"961c4f5fb54fec0c1a4f8104917739ee0d20166f","modified":1640960469870},{"_id":"public/tags/FCN/index.html","hash":"f2a74b4f56253283e31d9a0e50051aa0ea9af339","modified":1640960469870},{"_id":"public/tags/PSPNet/index.html","hash":"afd92c64110d9007dce54a923be2cf3c269efb22","modified":1640960469870},{"_id":"source/_posts/feature_extractor/DenseNet.md","hash":"4d5e0a05a134ad018bbe322e3f89f305388ca81c","modified":1626164186683},{"_id":"public/2021/05/13/feature-extractor/densenet/index.html","hash":"83d5cf0b2b9e90b6a66f87b615d579e417ba03cf","modified":1640960469870},{"_id":"public/tags/DenseNet/index.html","hash":"b60b818a7e1f9b0d095a31d7cf9def85fc0142b4","modified":1640960469870},{"_id":"source/_posts/feature_extractor/shuffleNet.md","hash":"a2cfc707f065ae7c1181695aaf5ece5912d0d80b","modified":1626164172423},{"_id":"source/_posts/lifeknow/lifeknow1.md","hash":"69b8069b5e816aac7e908760c1cda4f0b7bd10a4","modified":1640960443363},{"_id":"public/2021/05/16/lifeknow/lifeknow1/index.html","hash":"e33dbe31afb1ca2ac3e6a73fb2a837add16b205b","modified":1640960469870},{"_id":"public/2021/05/15/feature-extractor/shufflenet/index.html","hash":"ba39e1933ab925d397a997506b06585516b3ebac","modified":1640960469870},{"_id":"public/tags/ShuffleNetV2/index.html","hash":"01f21b7b50658d66efbff5e05163d043283bfeae","modified":1640960469870},{"_id":"source/_posts/other/jsis3d.md","hash":"9112d5054aec8a51260b559f24794648b6c7daed","modified":1626164176444},{"_id":"source/_posts/pytorch/pytorch-data.md","hash":"5c861bf4e8f953c64c339bbabce12196ead4f171","modified":1621582183968},{"_id":"source/_posts/semantic_segmentation/DeepLabV3.md","hash":"3b3588200cc7b8417b657841c30c8a78babe633c","modified":1626164174348},{"_id":"public/2021/05/20/pytorch/pytorch-data/index.html","hash":"8ed7bb9a64aa85db1e266708ea748791d0e72a9f","modified":1640960469870},{"_id":"public/2021/05/18/semantic-segmentation/deeplabv3/index.html","hash":"1d0dffa858091be40e2db3dfbd1699d5fad8fc98","modified":1640960469870},{"_id":"public/2021/02/06/other/jsis3d/index.html","hash":"e654c7a2ea92d27227f3bdc904bbb431d3e8f969","modified":1640960469870},{"_id":"public/archives/page/3/index.html","hash":"a75b6eb5c044af844b7dc562ba2950aed1a12225","modified":1640960469870},{"_id":"public/tags/Training-Methods/index.html","hash":"ecfff74840858e0f007ede05700112df0ba27560","modified":1640960469870},{"_id":"public/page/3/index.html","hash":"70347956297ea1f59e8ed188654c5cbfd5345cd6","modified":1640960469870},{"_id":"public/tags/DeepLabv3/index.html","hash":"837e81fa756e17d299e0d997961530271059d3bd","modified":1640960469870},{"_id":"source/_posts/JAVA/Collections.md","hash":"c2406ac999cd1428f23d9b19c111bd8ee86a0f38","modified":1639992290464},{"_id":"source/_posts/JAVA/Docker.md","hash":"b9efce9ae0a6a2f3b3d882966f817fb6d751af81","modified":1640657617769},{"_id":"source/_posts/JAVA/GC.md","hash":"5ea4a47f71897af96bf54ffe17283ab3c30a405b","modified":1640183405363},{"_id":"source/_posts/JAVA/IO.md","hash":"09dff806a6a787137a84feaf1b4a8c593230905d","modified":1639742126294},{"_id":"source/_posts/JAVA/Lock.md","hash":"dd4b990d5f6182b8427594cccb3780ee91893cfc","modified":1640243348680},{"_id":"source/_posts/JAVA/Netty.md","hash":"7ef666a479c188956e4f8df76f82139acb697fda","modified":1640416450806},{"_id":"source/_posts/JAVA/SocketIO.md","hash":"a41b2a18899565c6f8bddd71bd848fc42f961cc9","modified":1639742230754},{"_id":"source/_posts/JAVA/Spring.md","hash":"6bd6e6be31e7aa8c3699d04b1f1349b9b26f9554","modified":1640417876180},{"_id":"source/_posts/JAVA/date.md","hash":"14fd53ebbcd4bccd699b8ea7801c9df32622b98e","modified":1639742336083},{"_id":"source/_posts/JAVA/reflect.md","hash":"54ed0860aa58888aee19e42a42feadc36fa50ef7","modified":1639742176372},{"_id":"source/_posts/JAVA/regex.md","hash":"91751db85e7108bc8d0ed7317ce324e9fba0bb14","modified":1639742211242},{"_id":"source/_posts/JAVA/some-Knowledge-point.md","hash":"36328231ca2a2546f382afd11c862acce7308ef6","modified":1640922117573},{"_id":"source/_posts/JAVA/thread.md","hash":"cae1079f504fb509516765442150245094e3bc2a","modified":1640232324166},{"_id":"source/_posts/Algorithm/ML/K-means.md","hash":"55723aab772313be923a7ac6037ff1fc7d80c62a","modified":1634398659070},{"_id":"source/_posts/JAVA/ClassLoad.md","hash":"d34d4ab31334cc6ce6505cfa5ae25387dacdf048","modified":1640179796036},{"_id":"public/2021/12/26/java/docker/index.html","hash":"506bd8ca216207d29808ffa49052ef0eefe9d251","modified":1640960469870},{"_id":"public/2021/12/25/java/netty/index.html","hash":"29e4abbd08bd598f06c84c1e1fb36fe8d8aaf49b","modified":1640960469870},{"_id":"public/2021/12/23/java/spring/index.html","hash":"b785d4bf088f9e7792e0da0623a90b93452a361e","modified":1640960469870},{"_id":"public/2021/12/20/java/gc/index.html","hash":"f8dc5b9d54601c40939df3da354363a84b8f4b08","modified":1640960469870},{"_id":"public/2021/12/20/java/classload/index.html","hash":"99e2f8f1c383a43eabe42fcb1417824c8ddfec25","modified":1640960469870},{"_id":"public/2021/12/20/java/lock/index.html","hash":"f4b9b92c40fb47a1ee3867fb6161f0ef6a15615b","modified":1640960469870},{"_id":"public/2021/12/17/java/collections/index.html","hash":"a4c389e132316e5e888995d7523c41921f78c1e5","modified":1640960469870},{"_id":"public/2021/12/17/java/some-knowledge-point/index.html","hash":"4daaf94c893606a019ed81d4e6b78e41a42e20cb","modified":1640960469870},{"_id":"public/2021/12/17/java/socketio/index.html","hash":"261a31fb715c6d964ccd490a6d5a05fafe41eab4","modified":1640960469870},{"_id":"public/2021/12/15/java/io/index.html","hash":"e71e3fd6a4e9a9b01425b6eb87355108f949068c","modified":1640960469870},{"_id":"public/2021/12/15/java/thread/index.html","hash":"1bf556e3eb04156987f807c0a18a4724986d7881","modified":1640960469870},{"_id":"public/2021/12/15/java/reflect/index.html","hash":"d6a5eb4425d07f1c7827150c52e28c1afecba52a","modified":1640960469870},{"_id":"public/2021/12/15/java/date/index.html","hash":"595998d9b4fcfbeb65e94bf021ce56af84854491","modified":1640960469870},{"_id":"public/2021/12/15/java/regex/index.html","hash":"d968cf124f723fc223e44e6c493eede9e5e041ef","modified":1640960469870},{"_id":"public/2021/10/16/algorithm/ml/k-means/index.html","hash":"4aa805a76dcc0993ddc6ded31becce5490b8562a","modified":1640960469870},{"_id":"public/archives/page/4/index.html","hash":"51a70f480b193b45e908a0ad5238ec955a20abe4","modified":1640960469870},{"_id":"public/archives/2021/page/3/index.html","hash":"935322c389b60095949b44c57614c9aee0c68754","modified":1640960469870},{"_id":"public/archives/2021/10/index.html","hash":"c23349a5876181cf484fc70cbcbee1d40f69fdfa","modified":1640960469870},{"_id":"public/archives/2021/12/index.html","hash":"74033d2803bf0cbbc560ddee7662b095b7149510","modified":1640960469870},{"_id":"public/archives/2021/12/page/2/index.html","hash":"5907f6ecfcfb481fb1a7383f9540bac26383e638","modified":1640960469870},{"_id":"public/categories/JAVA/index.html","hash":"1e6982a3d6da1e3a1b37665e5e44383f02bba4f3","modified":1640960469870},{"_id":"public/categories/JAVA/page/2/index.html","hash":"d597de1cf1cde2856d1362fe6bdbd3866463ff47","modified":1640960469870},{"_id":"public/categories/JAVA/Netty/index.html","hash":"570c28d33a1c3e5f2495f27609bdb82fe57f760e","modified":1640960469870},{"_id":"public/categories/JAVA/BIO/index.html","hash":"1a78e24c6ba926fd08337a50cca399955b4195b6","modified":1640960469870},{"_id":"public/categories/JAVA/Spring/index.html","hash":"64f51a55796ffe2e221c6d8654935e98a408a661","modified":1640960469870},{"_id":"public/categories/JAVA/BIO/NIO/index.html","hash":"77ae059dc8850cfe5bbc2a902a379d0c0a21898d","modified":1640960469870},{"_id":"public/page/4/index.html","hash":"661761e8fa5f964f22df19239c31dd35afc66486","modified":1640960469870},{"_id":"public/tags/Class-loader/index.html","hash":"0f7b82cfa1f26ea2d0bb2fe58cee57c84244050b","modified":1640960469870},{"_id":"public/tags/Collections/index.html","hash":"402f61d7dae4d869e67e139d8fe71576a00d07c5","modified":1640960469870},{"_id":"public/tags/Docker/index.html","hash":"96b687d6fc08dfd016d4784357834931475bf599","modified":1640960469870},{"_id":"public/tags/GC/index.html","hash":"ee3a59a7d622f31b05c93b7ab026db4f1346e216","modified":1640960469870},{"_id":"public/tags/IO/index.html","hash":"16d18b3cbfc915724f15ffd8931f5d75d13efd50","modified":1640960469870},{"_id":"public/tags/Lock/index.html","hash":"fe333f2670e0c92ae5a35904ace6a53f9d691604","modified":1640960469870},{"_id":"public/tags/pipeline/index.html","hash":"a379f87c862e158d589a0a104e9f0be3bf346237","modified":1640960469870},{"_id":"public/tags/Socket/index.html","hash":"edf4c7ca3a0d1491776f0a76d4ab1b323e10da41","modified":1640960469870},{"_id":"public/tags/ServerSocket/index.html","hash":"10bad3b1d83b1893a47021f8cec637ac894b288c","modified":1640960469870},{"_id":"public/tags/Channel/index.html","hash":"44e85a3780de3e7ec326cfc61aa141bc3d6dcbe5","modified":1640960469870},{"_id":"public/tags/Selector/index.html","hash":"743b863f04f44683f9b7c4e5727ad55a07c1aa39","modified":1640960469870},{"_id":"public/tags/Buffer/index.html","hash":"0e5b98afe79e88f7ff97000d1c1fe0409a61b844","modified":1640960469870},{"_id":"public/tags/AOP/index.html","hash":"3928e06b5072c3c5595ec354f16d12db0063a6c2","modified":1640960469870},{"_id":"public/tags/IOC/index.html","hash":"6a0e62329fc3292fbe49764b1036985e1507e787","modified":1640960469870},{"_id":"public/tags/MVC/index.html","hash":"7627ac45c671dfe75516571f751dfb8cd4678c39","modified":1640960469870},{"_id":"public/tags/Date/index.html","hash":"50107b3276262ab304add76dfe53196e605e8c8b","modified":1640960469870},{"_id":"public/tags/SimpleDateFormat/index.html","hash":"7f794dade07a5143c775157deba9f9d1a1cf41ac","modified":1640960469870},{"_id":"public/tags/Calendar/index.html","hash":"43bf587c362fab33772ded1df9c021e17dd4db9a","modified":1640960469870},{"_id":"public/tags/reflect/index.html","hash":"4e30667ea4b6464bd01af5f7efe5612d91e4a117","modified":1640960469870},{"_id":"public/tags/Regex/index.html","hash":"d385002d94b0abaaead3aa97656d862467ddcfdd","modified":1640960469870},{"_id":"public/tags/Serializable/index.html","hash":"65e7cf121b45eff17bad29ba8f6c0d0fafd28e25","modified":1640960469870},{"_id":"public/tags/Cloneable/index.html","hash":"c704088ac0d5016ebf86033da18ef767cb28e453","modified":1640960469870},{"_id":"public/tags/Comparable/index.html","hash":"664b7ff2edc554812a217f5ddbc2add7784424b2","modified":1640960469870},{"_id":"public/tags/Comparator/index.html","hash":"105bc88343945b6c2d9663352a400637b3d20a2c","modified":1640960469870},{"_id":"public/tags/Thread/index.html","hash":"36ccb7a8db327fc92e69999ffb1801dc0a520e70","modified":1640960469870},{"_id":"public/tags/Cluster/index.html","hash":"f957a392871aa75803e3feaec309143aa19657e3","modified":1640960469870}],"Category":[{"name":"小波变换","_id":"ckhr2kce000044guoctlycazy"},{"name":"Fanrencli","parent":"ckhr2kce000044guoctlycazy","_id":"ckhr2kce7000d4guoenhq4jlc"},{"name":"Algorithm","_id":"ckhr2kcec000q4guoflmidn5y"},{"name":"Fanrencli","parent":"ckhr2kcec000q4guoflmidn5y","_id":"ckhr2kced000t4guo3re70x9w"},{"name":"环境配置","_id":"ckicrxqcz0001vguo0k7c4969"},{"name":"Assembly Language","_id":"ckkf2w5fh0000couodabsf9y5"},{"name":"Deep Learning","_id":"cknmrfu4t000130uohxfa3zyq"},{"name":"Life Know","_id":"cknmrfu4y000430uo41byhm45"},{"name":"JAVA","_id":"ckxuhigb200028suo0fpg30d0"},{"name":"Netty","parent":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigbm000k8suo9mw73ls7"},{"name":"BIO","parent":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigbq000r8suo8utuet7f"},{"name":"Spring","parent":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigbu000y8suo8w7i9mfo"},{"name":"NIO","parent":"ckxuhigbq000r8suo8utuet7f","_id":"ckxuhigbx00148suoclsg0yi8"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"404","date":"2018-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---","updated":"2020-10-21T06:39:21.436Z","path":"404.html","comments":1,"_id":"ckhr2kcdr00004guo0pwi8w5l","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-10-21T04:36:49.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-10-21 12:36:49\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2020-10-21T06:39:21.438Z","path":"about/index.html","comments":1,"_id":"ckhr2kcdx00024guo4i18htvj","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2020-10-21T04:33:49.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-10-21 12:33:49\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2020-10-21T06:39:21.439Z","path":"categories/index.html","comments":1,"_id":"ckhr2kce200064guo9eu69jri","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"contact","date":"2020-10-21T04:37:08.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-10-21 12:37:08\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2020-10-21T06:39:21.439Z","path":"contact/index.html","comments":1,"_id":"ckhr2kce400084guo51jabyb5","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2020-10-21T04:37:27.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-10-21 12:37:27\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2020-10-21T06:39:21.440Z","path":"friends/index.html","comments":1,"_id":"ckhr2kce500094guo0dbzeds3","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2020-10-21T04:35:14.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-10-21 12:35:14\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-10-21T06:39:21.440Z","path":"tags/index.html","comments":1,"_id":"ckhr2kce7000c4guogsd3ct5c","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"算法","date":"2020-11-21T04:33:49.000Z","author":"Fanrencli","_content":"> 二叉树专题（`Binary Search`）\n> 二叉树作为算法经典题型，应用范围广，需要及其重视。\n\n## 前序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void pre_order(TreeNode* root){\n        if (root==nullptr) return;\n        cout << root->val << endl;\n        pre_order(root->left);\n        pre_order(root->right);\n    }\n};\n```\n## 中序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void middle_order(TreeNode* root){\n        if (root==nullptr) return;\n        middle_order(root->left);\n        cout << root->val << endl;\n        middle_order(root->right);\n    }\n};\n```\n## 后序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void post_order(TreeNode* root){\n        if (root==nullptr) return;\n        post_order(root->left);\n        post_order(root->right);\n        cout << root->val << endl;\n    }\n};\n```","source":"_posts/Algorithm/Binary Search/Binary Search.md","raw":"---\ntitle: 算法\ndate: 2020-11-21 12:33:49\ncategories:\n  - Algorithm\ntags:\n  - C++\n  - Binary Search\n  - Fanrencli\nauthor: Fanrencli\n---\n> 二叉树专题（`Binary Search`）\n> 二叉树作为算法经典题型，应用范围广，需要及其重视。\n\n## 前序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void pre_order(TreeNode* root){\n        if (root==nullptr) return;\n        cout << root->val << endl;\n        pre_order(root->left);\n        pre_order(root->right);\n    }\n};\n```\n## 中序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void middle_order(TreeNode* root){\n        if (root==nullptr) return;\n        middle_order(root->left);\n        cout << root->val << endl;\n        middle_order(root->right);\n    }\n};\n```\n## 后序遍历\n```cpp\nclass Solution {\npublic:\n    void Search(TreeNode* root) {\n        fun(root);\n    }\n    void post_order(TreeNode* root){\n        if (root==nullptr) return;\n        post_order(root->left);\n        post_order(root->right);\n        cout << root->val << endl;\n    }\n};\n```","slug":"Algorithm/Binary Search/Binary Search","published":1,"updated":"2021-02-06T11:50:53.883Z","_id":"ckhr2kceb000p4guo4uevggqz","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>二叉树专题（<code>Binary Search</code>）<br>二叉树作为算法经典题型，应用范围广，需要及其重视。</p>\n</blockquote>\n<h2 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h2><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">pre_order</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-</span><span class=\"token operator\">></span>val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">pre_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">pre_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h2><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">middle_order</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">middle_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-</span><span class=\"token operator\">></span>val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">middle_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h2><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">post_order</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">post_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">post_order</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-</span><span class=\"token operator\">></span>val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>二叉树专题（<code>Binary Search</code>）<br>二叉树作为算法经典题型，应用范围广，需要及其重视。</p>\n</blockquote>\n<h2 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h2><pre><code class=\"cpp\">class Solution &#123;\npublic:\n    void Search(TreeNode* root) &#123;\n        fun(root);\n    &#125;\n    void pre_order(TreeNode* root)&#123;\n        if (root==nullptr) return;\n        cout &lt;&lt; root-&gt;val &lt;&lt; endl;\n        pre_order(root-&gt;left);\n        pre_order(root-&gt;right);\n    &#125;\n&#125;;</code></pre>\n<h2 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h2><pre><code class=\"cpp\">class Solution &#123;\npublic:\n    void Search(TreeNode* root) &#123;\n        fun(root);\n    &#125;\n    void middle_order(TreeNode* root)&#123;\n        if (root==nullptr) return;\n        middle_order(root-&gt;left);\n        cout &lt;&lt; root-&gt;val &lt;&lt; endl;\n        middle_order(root-&gt;right);\n    &#125;\n&#125;;</code></pre>\n<h2 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h2><pre><code class=\"cpp\">class Solution &#123;\npublic:\n    void Search(TreeNode* root) &#123;\n        fun(root);\n    &#125;\n    void post_order(TreeNode* root)&#123;\n        if (root==nullptr) return;\n        post_order(root-&gt;left);\n        post_order(root-&gt;right);\n        cout &lt;&lt; root-&gt;val &lt;&lt; endl;\n    &#125;\n&#125;;</code></pre>\n"},{"title":"LeetCode_129","date":"2020-11-21T04:33:49.000Z","author":"Fanrencli","_content":"## 算法描述\nGiven a binary tree containing digits from `0-9` only, each root-to-leaf path could represent a number.\n\nAn example is the root-to-leaf path `1->2->3` which represents the number `123`.\n\nFind the total sum of all root-to-leaf numbers.\n\nNote: A leaf is a node with no children.\n\n## 示例\n\n### Example1:\n```\nInput: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n```\n### Example2\n```\nInput: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n```\n## 个人代码\n```cpp\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int chain = 0;\n        fun(root,chain,sum);\n        return sum;\n    }\n    int fun(TreeNode* root,int chain,int &sum){\n        if (root==nullptr) return 1;\n        chain=chain*10+root->val;\n        if(fun(root->left,chain,sum)==1 &fun(root->right,chain,sum)==1){\n            sum=sum+chain;\n        }\n        return 2;\n    }\n};\n```\n## 结果\n- Accept\n- 110/110 cases passed (0 ms)\n- Your runtime beats 100 % of cpp submissions\n- Your memory usage beats 54.85 % of cpp submissions (12.7 MB)","source":"_posts/Algorithm/Binary Search/129.sum-root-to-leaf-numbers.md","raw":"---\ntitle: LeetCode_129\ndate: 2020-11-21 12:33:49\ncategories:\n  - Algorithm\ntags:\n  - C++\n  - Binary Search\n  - Fanrencli\nauthor: Fanrencli\n---\n## 算法描述\nGiven a binary tree containing digits from `0-9` only, each root-to-leaf path could represent a number.\n\nAn example is the root-to-leaf path `1->2->3` which represents the number `123`.\n\nFind the total sum of all root-to-leaf numbers.\n\nNote: A leaf is a node with no children.\n\n## 示例\n\n### Example1:\n```\nInput: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n```\n### Example2\n```\nInput: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n```\n## 个人代码\n```cpp\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int chain = 0;\n        fun(root,chain,sum);\n        return sum;\n    }\n    int fun(TreeNode* root,int chain,int &sum){\n        if (root==nullptr) return 1;\n        chain=chain*10+root->val;\n        if(fun(root->left,chain,sum)==1 &fun(root->right,chain,sum)==1){\n            sum=sum+chain;\n        }\n        return 2;\n    }\n};\n```\n## 结果\n- Accept\n- 110/110 cases passed (0 ms)\n- Your runtime beats 100 % of cpp submissions\n- Your memory usage beats 54.85 % of cpp submissions (12.7 MB)","slug":"Algorithm/Binary Search/129.sum-root-to-leaf-numbers","published":1,"updated":"2020-12-06T06:59:50.298Z","_id":"ckhr3bkzw0000o8uo0g7f61uw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p>\n<p>An example is the root-to-leaf path <code>1-&gt;2-&gt;3</code> which represents the number <code>123</code>.</p>\n<p>Find the total sum of all root-to-leaf numbers.</p>\n<p>Note: A leaf is a node with no children.</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"Example1\"><a href=\"#Example1\" class=\"headerlink\" title=\"Example1:\"></a>Example1:</h3><pre><code>Input: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1-&gt;2 represents the number 12.\nThe root-to-leaf path 1-&gt;3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.</code></pre>\n<h3 id=\"Example2\"><a href=\"#Example2\" class=\"headerlink\" title=\"Example2\"></a>Example2</h3><pre><code>Input: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4-&gt;9-&gt;5 represents the number 495.\nThe root-to-leaf path 4-&gt;9-&gt;1 represents the number 491.\nThe root-to-leaf path 4-&gt;0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.</code></pre>\n<h2 id=\"个人代码\"><a href=\"#个人代码\" class=\"headerlink\" title=\"个人代码\"></a>个人代码</h2><pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">sumNumbers</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> chain <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>chain<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> chain<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        chain<span class=\"token operator\">=</span>chain<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">,</span>chain<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">,</span>chain<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            sum<span class=\"token operator\">=</span>sum<span class=\"token operator\">+</span>chain<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><ul>\n<li>Accept</li>\n<li>110/110 cases passed (0 ms)</li>\n<li>Your runtime beats 100 % of cpp submissions</li>\n<li>Your memory usage beats 54.85 % of cpp submissions (12.7 MB)</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p>\n<p>An example is the root-to-leaf path <code>1-&gt;2-&gt;3</code> which represents the number <code>123</code>.</p>\n<p>Find the total sum of all root-to-leaf numbers.</p>\n<p>Note: A leaf is a node with no children.</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"Example1\"><a href=\"#Example1\" class=\"headerlink\" title=\"Example1:\"></a>Example1:</h3><pre><code>Input: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1-&gt;2 represents the number 12.\nThe root-to-leaf path 1-&gt;3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.</code></pre>\n<h3 id=\"Example2\"><a href=\"#Example2\" class=\"headerlink\" title=\"Example2\"></a>Example2</h3><pre><code>Input: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4-&gt;9-&gt;5 represents the number 495.\nThe root-to-leaf path 4-&gt;9-&gt;1 represents the number 491.\nThe root-to-leaf path 4-&gt;0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.</code></pre>\n<h2 id=\"个人代码\"><a href=\"#个人代码\" class=\"headerlink\" title=\"个人代码\"></a>个人代码</h2><pre><code class=\"cpp\">/**\n * Definition for a binary tree node.\n * struct TreeNode &#123;\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;\n * &#125;;\n */\nclass Solution &#123;\npublic:\n    int sumNumbers(TreeNode* root) &#123;\n        int sum = 0;\n        int chain = 0;\n        fun(root,chain,sum);\n        return sum;\n    &#125;\n    int fun(TreeNode* root,int chain,int &amp;sum)&#123;\n        if (root==nullptr) return 1;\n        chain=chain*10+root-&gt;val;\n        if(fun(root-&gt;left,chain,sum)==1 &amp;fun(root-&gt;right,chain,sum)==1)&#123;\n            sum=sum+chain;\n        &#125;\n        return 2;\n    &#125;\n&#125;;</code></pre>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><ul>\n<li>Accept</li>\n<li>110/110 cases passed (0 ms)</li>\n<li>Your runtime beats 100 % of cpp submissions</li>\n<li>Your memory usage beats 54.85 % of cpp submissions (12.7 MB)</li>\n</ul>\n"},{"title":"8086","date":"2021-01-27T05:51:20.000Z","author":"Fanrencli","_content":"## 寄存器简介\n\n| 寄存器名称 | 功能 |操作 |\n|---|---|---|\n| ax | 累加寄存器 | 经常使用，可以作为存储器看待 |\n| bx | 基础寄存器 | 经常使用，访问内存时`[]`中只可以使用`bx`/`bp`/`si`/`di`和数字索引，默认使用的段寄存器为`ds` |\n| cx | 循环寄存器 | 在使用`loop`做循环处理时，根据`cx`的值判断还有几次循环 |\n| dx | 备用寄存器 | 在做除法时，对32位被除数存储时，高位放在dx中 |\n| sp | 栈顶指针 | 在出栈、入栈时结合ss，对ss:sp处的内存进行操作 |\n| bp | 指针寄存器 | 在未指明段寄存器的情况下，使用`[bp]`默认段寄存器为`ss` |\n| si | 变址寄存器 | 在未指明段寄存器的情况下，使用`[si]`默认段寄存器为`ds` |\n| di | 变址寄存器 | 在未指明段寄存器的情况下，使用`[di]`默认段寄存器为`ds` |\n| ds | 段地址寄存器 | 通常指向初始化程序的内存代码段地址，在ds地址之后是psp程序前缀，大小为10H——16个字节，之后是程序运行的第一条指令地址，ds通常用于操作内存的段地址寄存器 |\n| es | 段地址寄存器 | 可以用于存放段地址，可以作为备用段地址 |\n| ss | 指针基址寄存器 | 可以用于存放指针段地址，通常与sp共同使用|\n| cs | 指令地址寄存器 | 可以用于存放下一个运行指令的地址，cs:ip |\n| ip | 指令偏移寄存器 | cs:ip |\n\n## 实验案例1\n已有数据：\n```\ndb '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\n以上是21年的字符串\n\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\n以上是21年公司的收入\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\n以上是21年公司雇佣的人数\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n\n```\n通过编程将data中的数据写入到table中，并计算21年的人均收入(取整)\n汇编实现:\n```asm\nassume cs:codesg\nstack segment\ndb '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\nstack ends\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n\ncodesg segment\n  start:\n    mov ax,stack\n    mov ss,ax\n    mov sp,0H\n    mov ax,table\n    mov ds,ax\n    mov cx,21\n    mov bx,0\n  s:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s\n\n  mov cx,21\n  mov bx,5\n  s0:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s0\n\n  mov cx,21\n  mov bx,10\n  s1:\n    pop ax\n    mov ds:[bx],ax\n    add bx,16\n  loop s1\n\n  mov cx,21\n  mov bx,0\n  s2:\n    mov ax,ds:[bx+5]\n    mov dx,ds:[bx+7]\n    div word ptr ds:[bx+10]\n    mov ds:[bx+13],ax\n    add bx,16\n  loop s2\n\n  mov ax,4c00h\n  int 21h\ncodesg ends\nend start\n```\n## 实验案例2\n在DOS窗口中显示字符，其中`B8000H`~`BFFFFH`共`32KB`的空间，这是一个缓冲区，向此缓冲区写入数据，写入的内容将立即出现在显示器上。其中奇数位地址为显示的字符内容，偶数位地址为显示的颜色（RGB，前景色，背景色）\n代码实现：其中在向寄存器中写入`B800H`时，由于十六进制不可以以字母开头，所有在`B800H`前加上一个`0`\n```asm\nassume cs:code\ndata segment\ndb 'conversation'\ndata ends\ncode segment\nstart:\n    mov ax,0b800h\n    mov ds,ax\n    mov bx,0\n    mov byte ptr [bx],41h\n    mov byte ptr [bx].1h,02h\n    mov byte ptr [bx].2h,42h\n    mov byte ptr [bx].3h,02h\n    mov byte ptr [bx].4h,43h\n    mov byte ptr [bx].5h,02h\n    mov byte ptr [bx].6h,44h\n    mov byte ptr [bx].7h,02h\n    mov ax,4c00h\n    int 21h\ncode ends\nend start\n```","source":"_posts/8086/8086.md","raw":"---\ntitle: 8086\ndate: 2021-01-27 13:51:20\ncategories:\n  - Assembly Language\ntags:\n  - 8086\n  - Fanrencli\nauthor: Fanrencli\n---\n## 寄存器简介\n\n| 寄存器名称 | 功能 |操作 |\n|---|---|---|\n| ax | 累加寄存器 | 经常使用，可以作为存储器看待 |\n| bx | 基础寄存器 | 经常使用，访问内存时`[]`中只可以使用`bx`/`bp`/`si`/`di`和数字索引，默认使用的段寄存器为`ds` |\n| cx | 循环寄存器 | 在使用`loop`做循环处理时，根据`cx`的值判断还有几次循环 |\n| dx | 备用寄存器 | 在做除法时，对32位被除数存储时，高位放在dx中 |\n| sp | 栈顶指针 | 在出栈、入栈时结合ss，对ss:sp处的内存进行操作 |\n| bp | 指针寄存器 | 在未指明段寄存器的情况下，使用`[bp]`默认段寄存器为`ss` |\n| si | 变址寄存器 | 在未指明段寄存器的情况下，使用`[si]`默认段寄存器为`ds` |\n| di | 变址寄存器 | 在未指明段寄存器的情况下，使用`[di]`默认段寄存器为`ds` |\n| ds | 段地址寄存器 | 通常指向初始化程序的内存代码段地址，在ds地址之后是psp程序前缀，大小为10H——16个字节，之后是程序运行的第一条指令地址，ds通常用于操作内存的段地址寄存器 |\n| es | 段地址寄存器 | 可以用于存放段地址，可以作为备用段地址 |\n| ss | 指针基址寄存器 | 可以用于存放指针段地址，通常与sp共同使用|\n| cs | 指令地址寄存器 | 可以用于存放下一个运行指令的地址，cs:ip |\n| ip | 指令偏移寄存器 | cs:ip |\n\n## 实验案例1\n已有数据：\n```\ndb '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\n以上是21年的字符串\n\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\n以上是21年公司的收入\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\n以上是21年公司雇佣的人数\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n\n```\n通过编程将data中的数据写入到table中，并计算21年的人均收入(取整)\n汇编实现:\n```asm\nassume cs:codesg\nstack segment\ndb '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\nstack ends\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n\ncodesg segment\n  start:\n    mov ax,stack\n    mov ss,ax\n    mov sp,0H\n    mov ax,table\n    mov ds,ax\n    mov cx,21\n    mov bx,0\n  s:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s\n\n  mov cx,21\n  mov bx,5\n  s0:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s0\n\n  mov cx,21\n  mov bx,10\n  s1:\n    pop ax\n    mov ds:[bx],ax\n    add bx,16\n  loop s1\n\n  mov cx,21\n  mov bx,0\n  s2:\n    mov ax,ds:[bx+5]\n    mov dx,ds:[bx+7]\n    div word ptr ds:[bx+10]\n    mov ds:[bx+13],ax\n    add bx,16\n  loop s2\n\n  mov ax,4c00h\n  int 21h\ncodesg ends\nend start\n```\n## 实验案例2\n在DOS窗口中显示字符，其中`B8000H`~`BFFFFH`共`32KB`的空间，这是一个缓冲区，向此缓冲区写入数据，写入的内容将立即出现在显示器上。其中奇数位地址为显示的字符内容，偶数位地址为显示的颜色（RGB，前景色，背景色）\n代码实现：其中在向寄存器中写入`B800H`时，由于十六进制不可以以字母开头，所有在`B800H`前加上一个`0`\n```asm\nassume cs:code\ndata segment\ndb 'conversation'\ndata ends\ncode segment\nstart:\n    mov ax,0b800h\n    mov ds,ax\n    mov bx,0\n    mov byte ptr [bx],41h\n    mov byte ptr [bx].1h,02h\n    mov byte ptr [bx].2h,42h\n    mov byte ptr [bx].3h,02h\n    mov byte ptr [bx].4h,43h\n    mov byte ptr [bx].5h,02h\n    mov byte ptr [bx].6h,44h\n    mov byte ptr [bx].7h,02h\n    mov ax,4c00h\n    int 21h\ncode ends\nend start\n```","slug":"8086/8086","published":1,"updated":"2021-04-23T02:49:52.403Z","_id":"ckkf2tf280000x0uo4i61cefc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"寄存器简介\"><a href=\"#寄存器简介\" class=\"headerlink\" title=\"寄存器简介\"></a>寄存器简介</h2><table>\n<thead>\n<tr>\n<th>寄存器名称</th>\n<th>功能</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ax</td>\n<td>累加寄存器</td>\n<td>经常使用，可以作为存储器看待</td>\n</tr>\n<tr>\n<td>bx</td>\n<td>基础寄存器</td>\n<td>经常使用，访问内存时<code>[]</code>中只可以使用<code>bx</code>/<code>bp</code>/<code>si</code>/<code>di</code>和数字索引，默认使用的段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>cx</td>\n<td>循环寄存器</td>\n<td>在使用<code>loop</code>做循环处理时，根据<code>cx</code>的值判断还有几次循环</td>\n</tr>\n<tr>\n<td>dx</td>\n<td>备用寄存器</td>\n<td>在做除法时，对32位被除数存储时，高位放在dx中</td>\n</tr>\n<tr>\n<td>sp</td>\n<td>栈顶指针</td>\n<td>在出栈、入栈时结合ss，对ss:sp处的内存进行操作</td>\n</tr>\n<tr>\n<td>bp</td>\n<td>指针寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[bp]</code>默认段寄存器为<code>ss</code></td>\n</tr>\n<tr>\n<td>si</td>\n<td>变址寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[si]</code>默认段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>di</td>\n<td>变址寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[di]</code>默认段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>ds</td>\n<td>段地址寄存器</td>\n<td>通常指向初始化程序的内存代码段地址，在ds地址之后是psp程序前缀，大小为10H——16个字节，之后是程序运行的第一条指令地址，ds通常用于操作内存的段地址寄存器</td>\n</tr>\n<tr>\n<td>es</td>\n<td>段地址寄存器</td>\n<td>可以用于存放段地址，可以作为备用段地址</td>\n</tr>\n<tr>\n<td>ss</td>\n<td>指针基址寄存器</td>\n<td>可以用于存放指针段地址，通常与sp共同使用</td>\n</tr>\n<tr>\n<td>cs</td>\n<td>指令地址寄存器</td>\n<td>可以用于存放下一个运行指令的地址，cs:ip</td>\n</tr>\n<tr>\n<td>ip</td>\n<td>指令偏移寄存器</td>\n<td>cs:ip</td>\n</tr>\n</tbody></table>\n<h2 id=\"实验案例1\"><a href=\"#实验案例1\" class=\"headerlink\" title=\"实验案例1\"></a>实验案例1</h2><p>已有数据：</p>\n<pre><code>db '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\n以上是21年的字符串\n\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\n以上是21年公司的收入\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\n以上是21年公司雇佣的人数\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n</code></pre>\n<p>通过编程将data中的数据写入到table中，并计算21年的人均收入(取整)<br>汇编实现:</p>\n<pre class=\" language-asm\"><code class=\"language-asm\">assume cs:codesg\nstack segment\ndb '1975','1976','1977','1978','1979','1980','1981','1982','1983','1984','1985','1986','1987'\ndb '1988','1989','1990','1991','1992','1993','1994','1995'\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\nstack ends\n\ntable segment\ndb 21 dup('year summ ne ?? ')\ntable ends\n\ncodesg segment\n  start:\n    mov ax,stack\n    mov ss,ax\n    mov sp,0H\n    mov ax,table\n    mov ds,ax\n    mov cx,21\n    mov bx,0\n  s:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s\n\n  mov cx,21\n  mov bx,5\n  s0:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s0\n\n  mov cx,21\n  mov bx,10\n  s1:\n    pop ax\n    mov ds:[bx],ax\n    add bx,16\n  loop s1\n\n  mov cx,21\n  mov bx,0\n  s2:\n    mov ax,ds:[bx+5]\n    mov dx,ds:[bx+7]\n    div word ptr ds:[bx+10]\n    mov ds:[bx+13],ax\n    add bx,16\n  loop s2\n\n  mov ax,4c00h\n  int 21h\ncodesg ends\nend start</code></pre>\n<h2 id=\"实验案例2\"><a href=\"#实验案例2\" class=\"headerlink\" title=\"实验案例2\"></a>实验案例2</h2><p>在DOS窗口中显示字符，其中<code>B8000H</code>~<code>BFFFFH</code>共<code>32KB</code>的空间，这是一个缓冲区，向此缓冲区写入数据，写入的内容将立即出现在显示器上。其中奇数位地址为显示的字符内容，偶数位地址为显示的颜色（RGB，前景色，背景色）<br>代码实现：其中在向寄存器中写入<code>B800H</code>时，由于十六进制不可以以字母开头，所有在<code>B800H</code>前加上一个<code>0</code></p>\n<pre class=\" language-asm\"><code class=\"language-asm\">assume cs:code\ndata segment\ndb 'conversation'\ndata ends\ncode segment\nstart:\n    mov ax,0b800h\n    mov ds,ax\n    mov bx,0\n    mov byte ptr [bx],41h\n    mov byte ptr [bx].1h,02h\n    mov byte ptr [bx].2h,42h\n    mov byte ptr [bx].3h,02h\n    mov byte ptr [bx].4h,43h\n    mov byte ptr [bx].5h,02h\n    mov byte ptr [bx].6h,44h\n    mov byte ptr [bx].7h,02h\n    mov ax,4c00h\n    int 21h\ncode ends\nend start</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"寄存器简介\"><a href=\"#寄存器简介\" class=\"headerlink\" title=\"寄存器简介\"></a>寄存器简介</h2><table>\n<thead>\n<tr>\n<th>寄存器名称</th>\n<th>功能</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ax</td>\n<td>累加寄存器</td>\n<td>经常使用，可以作为存储器看待</td>\n</tr>\n<tr>\n<td>bx</td>\n<td>基础寄存器</td>\n<td>经常使用，访问内存时<code>[]</code>中只可以使用<code>bx</code>/<code>bp</code>/<code>si</code>/<code>di</code>和数字索引，默认使用的段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>cx</td>\n<td>循环寄存器</td>\n<td>在使用<code>loop</code>做循环处理时，根据<code>cx</code>的值判断还有几次循环</td>\n</tr>\n<tr>\n<td>dx</td>\n<td>备用寄存器</td>\n<td>在做除法时，对32位被除数存储时，高位放在dx中</td>\n</tr>\n<tr>\n<td>sp</td>\n<td>栈顶指针</td>\n<td>在出栈、入栈时结合ss，对ss:sp处的内存进行操作</td>\n</tr>\n<tr>\n<td>bp</td>\n<td>指针寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[bp]</code>默认段寄存器为<code>ss</code></td>\n</tr>\n<tr>\n<td>si</td>\n<td>变址寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[si]</code>默认段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>di</td>\n<td>变址寄存器</td>\n<td>在未指明段寄存器的情况下，使用<code>[di]</code>默认段寄存器为<code>ds</code></td>\n</tr>\n<tr>\n<td>ds</td>\n<td>段地址寄存器</td>\n<td>通常指向初始化程序的内存代码段地址，在ds地址之后是psp程序前缀，大小为10H——16个字节，之后是程序运行的第一条指令地址，ds通常用于操作内存的段地址寄存器</td>\n</tr>\n<tr>\n<td>es</td>\n<td>段地址寄存器</td>\n<td>可以用于存放段地址，可以作为备用段地址</td>\n</tr>\n<tr>\n<td>ss</td>\n<td>指针基址寄存器</td>\n<td>可以用于存放指针段地址，通常与sp共同使用</td>\n</tr>\n<tr>\n<td>cs</td>\n<td>指令地址寄存器</td>\n<td>可以用于存放下一个运行指令的地址，cs:ip</td>\n</tr>\n<tr>\n<td>ip</td>\n<td>指令偏移寄存器</td>\n<td>cs:ip</td>\n</tr>\n</tbody></table>\n<h2 id=\"实验案例1\"><a href=\"#实验案例1\" class=\"headerlink\" title=\"实验案例1\"></a>实验案例1</h2><p>已有数据：</p>\n<pre><code>db &#39;1975&#39;,&#39;1976&#39;,&#39;1977&#39;,&#39;1978&#39;,&#39;1979&#39;,&#39;1980&#39;,&#39;1981&#39;,&#39;1982&#39;,&#39;1983&#39;,&#39;1984&#39;,&#39;1985&#39;,&#39;1986&#39;,&#39;1987&#39;\ndb &#39;1988&#39;,&#39;1989&#39;,&#39;1990&#39;,&#39;1991&#39;,&#39;1992&#39;,&#39;1993&#39;,&#39;1994&#39;,&#39;1995&#39;\n以上是21年的字符串\n\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\n以上是21年公司的收入\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\n以上是21年公司雇佣的人数\n\ntable segment\ndb 21 dup(&#39;year summ ne ?? &#39;)\ntable ends\n</code></pre>\n<p>通过编程将data中的数据写入到table中，并计算21年的人均收入(取整)<br>汇编实现:</p>\n<pre><code class=\"asm\">assume cs:codesg\nstack segment\ndb &#39;1975&#39;,&#39;1976&#39;,&#39;1977&#39;,&#39;1978&#39;,&#39;1979&#39;,&#39;1980&#39;,&#39;1981&#39;,&#39;1982&#39;,&#39;1983&#39;,&#39;1984&#39;,&#39;1985&#39;,&#39;1986&#39;,&#39;1987&#39;\ndb &#39;1988&#39;,&#39;1989&#39;,&#39;1990&#39;,&#39;1991&#39;,&#39;1992&#39;,&#39;1993&#39;,&#39;1994&#39;,&#39;1995&#39;\ndd 16,22,382,1356,2390,8000,16000,2486,50065,97479,140417,197514,345980,590827,803530\ndd 1183000,1843000,2759000,3753000,4649000,5937000\ndw 3,7,9,13,28,38,130,220,476,778,101,1442,2258,2793,4037,5635,8826,11542,14430,15257,17800\nstack ends\n\ntable segment\ndb 21 dup(&#39;year summ ne ?? &#39;)\ntable ends\n\ncodesg segment\n  start:\n    mov ax,stack\n    mov ss,ax\n    mov sp,0H\n    mov ax,table\n    mov ds,ax\n    mov cx,21\n    mov bx,0\n  s:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s\n\n  mov cx,21\n  mov bx,5\n  s0:\n    pop ax\n    mov ds:[bx],ax\n    pop ax\n    mov ds:[bx+2],ax\n    add bx,16\n  loop s0\n\n  mov cx,21\n  mov bx,10\n  s1:\n    pop ax\n    mov ds:[bx],ax\n    add bx,16\n  loop s1\n\n  mov cx,21\n  mov bx,0\n  s2:\n    mov ax,ds:[bx+5]\n    mov dx,ds:[bx+7]\n    div word ptr ds:[bx+10]\n    mov ds:[bx+13],ax\n    add bx,16\n  loop s2\n\n  mov ax,4c00h\n  int 21h\ncodesg ends\nend start</code></pre>\n<h2 id=\"实验案例2\"><a href=\"#实验案例2\" class=\"headerlink\" title=\"实验案例2\"></a>实验案例2</h2><p>在DOS窗口中显示字符，其中<code>B8000H</code>~<code>BFFFFH</code>共<code>32KB</code>的空间，这是一个缓冲区，向此缓冲区写入数据，写入的内容将立即出现在显示器上。其中奇数位地址为显示的字符内容，偶数位地址为显示的颜色（RGB，前景色，背景色）<br>代码实现：其中在向寄存器中写入<code>B800H</code>时，由于十六进制不可以以字母开头，所有在<code>B800H</code>前加上一个<code>0</code></p>\n<pre><code class=\"asm\">assume cs:code\ndata segment\ndb &#39;conversation&#39;\ndata ends\ncode segment\nstart:\n    mov ax,0b800h\n    mov ds,ax\n    mov bx,0\n    mov byte ptr [bx],41h\n    mov byte ptr [bx].1h,02h\n    mov byte ptr [bx].2h,42h\n    mov byte ptr [bx].3h,02h\n    mov byte ptr [bx].4h,43h\n    mov byte ptr [bx].5h,02h\n    mov byte ptr [bx].6h,44h\n    mov byte ptr [bx].7h,02h\n    mov ax,4c00h\n    int 21h\ncode ends\nend start</code></pre>\n"},{"title":"Life Know","date":"2020-12-24T03:11:56.000Z","_content":"### Life, you know what?\n<p style=\"text-indent:2em\">\n2020年12月31日\n\n</p> \n<p style=\"text-indent:2em\">\n一年飞快的逝去，去年往事历历在目。稍微回想了一下过去的一年，似乎发生了很多事，但是仔细回想起来却也没有什么值得去保存。去年的今天，似乎刚刚考完研，内心对于这次考研的经历没有太多的波澜。整体看来，考试整个过程似乎没有太出乎意料。虽然过程有点意外，但是总算是有惊无险。本想在去年总结一下考研的经历，但最后还是没有进行，也可能是考虑到还没有上岸吧。\n</p> \n<p style=\"text-indent:2em\">\n现在似乎是一个绝佳的时刻，总结考研准备过程，到考试，最后到面试，以及上岸后到学校报道的一些见闻。考研的过程没有很迷茫的时刻，时时刻刻都谨记着自己的初心和目标。从2019年三月份开始，就开始陆陆续续地准备数学的学习，因为一开始的目标比较难，所以也下了很大的决心要把数学搞好。为了学好数学二，从一开始循序渐进，先学习本科的高数课本开始，将整本书从头到尾全部看一遍，并将课后习题一题一题地过。这是第一遍针对高数部分的学习，当看完整本高数之后，开始看同济大学的高数课本，课后习题也是一题一题地过。期间开始刷英语真题，一句一句地看，力求仔细认真。一直到暑假，基本将高数课本结束，英语正常进度推进。当然在这期间并没有全部时间都在复习，因为还有课程以及课外自己的计划，比如当时向写一篇核心论文，尝试做一个自己想法的app，在学习深度学习相关的知识。暑假之前，论文写完，并发给了老师。至于app部分，解决了app的核心问题——深度学习识别验证码。这个经历还是让我感觉很不错的，因为从数据的获取，处理，构建简单的网络，最后得出模型。这个过程中问题曾出不穷，在解决问题的过程中对人工智能有了一点思考和想法，对深度学习的构建流程基本了解。解决了验证码识别的问题，之后将模型集成到app中之后就完成了app的登陆功能，也是最艰难的功能-_-!。能将这个问题解决还是让我感觉很兴奋的，因为这是为第一次从零开始，接触深度学习，代码全部是自己一个一个敲出来的。嘿嘿黑。。。。做完这个登陆功能之后就是后段代码的编写以及前端小程序的编写。在做这个让我比较重视的项目中，我也在不断的思考，不论是代码书写的规范，程序的适用性，是否可以优化，解决并发问题等等，对我来说，提高确实很大，很少有时间就这么纯粹的按照自己的想法，做一件对于自己来说很好，对别人来说也很有贡献的事情（这个app做完是免费开放给本校学生使用的，这是我的想法哈哈哈哈）。在暑假开始之前基本app完成了一半，后续只是代码编写和调试的劳动密集型工作。基本上感觉距离成功不远了，不过最后却没有完成，这也是让我非常遗憾的事情。因为做的是一个学校网站的信息爬取app，没想到学校换系统了。emmmmmm，始料未及，我感觉学校不讲武德，啥时候换不好，偏偏就在我要做好的时候换，偷袭我这个20多岁的小青年。不过回头一想，可能不完美才是真正的完美，有遗憾才是青春，那就这样结束吧。\n</p>\n<p style=\"text-indent:2em\">\n暑假开始之前，我就了解这个暑假将是考研过程中蜕变的关键期，一定要把握好暑假，把握住了暑假，基本成功一半。暑假开始，买了地学考研中心的复习资料，开始疯狂的背诵，日复一日，直到考研前一天。GIS的专业课，似乎背诵是最好的解决方式。而数学则是买了李永乐的红书，要保证滚瓜烂熟，一遍不行就两遍，真题认真作。关于线性代数部分也如同高数一般，先刷书再做课后习题。然后再看李永乐的红书部分的线性代数。政治的话，暑假就是附带着刷1000题。英语背诵单词和写作，持续进行。就这样暑假再高温和疯狂背诵之中结束。没有太多的回忆，不过温度确实很高，哈哈哈哈，整个考研教室开着空调完全感受不到冷气，我滴乖乖，活活热死。还好没有住校，因为学校宿舍没有空调，在外面租房子，说到租房子，是在贝壳找房上租的。房子很不错，和舍友一起，四个人，但是最后只有三个人住进来emmmmm。不过值得一提的是，初入社会没有经验，没想到租房找中介，中介的收费会这么贵，emmmmmm，好像要房租的一半还是一个月的房租，忘记了，不过我们租了两个月，但是需要付三个月的钱，最后也是中介人比较好，看在学生的份上，打了折扣。租房的地方叫天空之城，距离学校还是挺远的，所以就借了学弟的电瓶车作为来回的工具。其中一个舍友，就在租房里面复习，没有去学校，但是我还是建议每天都去学校的。这样要求自己比较好点。就这样，暑假似乎也过得很快，没有过多的停留，时间飞逝地来到开学，虽说是开学，但是对于我们来说没有任何变化，还是不停地刷题，可能也就是复习计划进入到下一阶段，暑假结束，基本考研的准备已经接近80%。接下来就是题海战术了，以及一成不变的疯狂背诵。到11月政治肖四肖八背诵无需多说。在漫长的背诵刷题过程中，人的精神是很难保持高度集中的，总是需要一些娱乐。接近后期考研准备基本完成的时候，就是不断的巩固之前的背诵，不能忘记，很是无聊。于是emmmmm，嘿嘿我就开始看LOL的全球总决赛，记得当时是S9,我还是很喜欢接触游戏，虽然每个游戏在我这只能保持很短的新鲜感，但是看游戏还是我的爱好的。于是在考研过程中，时常会在无聊，心态不好的时候回到宿舍看直播，不过很可惜，作为IG的粉丝，IG在s9没有夺冠，这可能也是应了那句话，“人的巅峰是一时的，而失败才是常态”。面对失败，如何处理是一个人最重要的品质，这决定着你的最后成就。除了游戏，在这个过程中，最让人放松的是，在室内三五成群的背书，最后变成茶话会，哈哈哈哈，还是很喜欢和一群考研人谈天说地，而且不知不觉就过去了很长时间而不自知。\n</p> \n\n<p style=\"text-indent:2em\">\n就这样复习的时间就这样飞逝，转眼便已经考完，走在去食堂的路上，还偶遇胡哥和女生在一起交谈甚欢。嘿嘿黑，果然人在社会还是需要另一半啊，哈哈哈哈。。。考研结束之后，迎接的就是即将毕业的事宜，首先是实习，然后是毕业论文。放假之前老师安排我们去新兴华安实习，然后给一个月时间面试准备，最后写毕业论文。本以为就可以这样结束大学生涯，没想到还是老天爷玩的花，突如其来的疫情，打乱了所有的计划，只能蜗居家中写论文。也许社会的无常与人生是相通的，没有人能知道下一刻会发生什么，所以人生才有动力去拼搏。在家中的时间是无聊的，也只能和老王打游戏。当然，还有一件心心念念的事，考研成绩就要出了。哈哈哈哈，出成绩的那一天，似乎格外难熬。没想到武汉作为疫情的重灾区也正是我的目标大学-武汉大学所在地。别人成绩都出了，而我还在等待。难熬，这可能是让我记忆犹新的原因。不过再托，成绩也有公布的时候，我记得当时是晚上，虽有对成绩早有估计，但是心中还是不能放心。打开成绩的一刹那，我捂住了眼睛，如果旭旭宝宝增幅装备一般，但是我的感受绝对比他更强烈。生死就是一瞬，根据量子力学的思想，只要我不看，我的成绩就有一万种可能。啪地一下，我睁开了眼睛，很快啊，上来就是一个左钩拳emmmmm串戏了不好意思。我的成绩居然是#%%，emmmmm心里有点失望，因为我估计应该360+至少，如果没有那么应该就是专业课的问题了，因为专业课不好估计。也正是这样，专业课今年有点难，普遍没有几个超过100的人，我也不例外，但是心里还抱着一丝侥幸，希望武汉大学能扩招，哈哈哈哈。不过基本上是要调剂了，这可能就是——失败是人生的常态吧。不过还好，知道成绩之后就是每天谢谢毕业论文，打打游戏，等待开学了，虽然还遥遥无期。\n</p> \n\n<p style=\"text-indent:2em\">\n等待开学也是难熬的，因为在家里啥事没有，让人疯狂。最后等来了4月18号开学的消息，接下来就是返校了。\n返校之后，是一段空白期，因为需要调剂，所以需要等待第一批结束后才开始，而调剂开始的时间，让我记忆犹新，因为是5月20号，这个特殊的日子，让恋人开心，也让单身的考研狗开心，因为即将尘埃落定。相较于往年，今年是网络面试，没有太多变化的面试准备，机缘巧合下遇到了一个比较合乎我的想法的老师，调剂了985，我是幸运的，也许这就是命运吧，我终将走向北京，遇见新的朋友，新的同学，新的老师，新的挑战，以及新的目标。不断的前进，向上，这就是多数人都想要的。这样，我的考研的一年，准确的讲，是一年多，从三月到接近下一年的六月，就这样结束了。现在看来，考研对我来说没有什么困难之处，每一步都在按计划进行，没有过多的改变，就是不断的前行。似乎过于简单，以至于我现在还没有感觉到考研的困难所在。对于现在的我们，考研抑或工作是一种选择，并非一种压力，以后读博抑或工作也是如此。只要我们愿意，那么就可以，关键取决于你是否愿意，以及能否为自己的想法作出所有的努力。\n至于接下来的研究生生活，似乎不太值得关注，等过年的时候，总结这个学期吧。新年再见！！！\n\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/lifeknow/lifeknow.md","raw":"---\ntitle: Life Know\ndate: 2020-12-24 11:11:56\ncategories:\n    - Life Know\n---\n### Life, you know what?\n<p style=\"text-indent:2em\">\n2020年12月31日\n\n</p> \n<p style=\"text-indent:2em\">\n一年飞快的逝去，去年往事历历在目。稍微回想了一下过去的一年，似乎发生了很多事，但是仔细回想起来却也没有什么值得去保存。去年的今天，似乎刚刚考完研，内心对于这次考研的经历没有太多的波澜。整体看来，考试整个过程似乎没有太出乎意料。虽然过程有点意外，但是总算是有惊无险。本想在去年总结一下考研的经历，但最后还是没有进行，也可能是考虑到还没有上岸吧。\n</p> \n<p style=\"text-indent:2em\">\n现在似乎是一个绝佳的时刻，总结考研准备过程，到考试，最后到面试，以及上岸后到学校报道的一些见闻。考研的过程没有很迷茫的时刻，时时刻刻都谨记着自己的初心和目标。从2019年三月份开始，就开始陆陆续续地准备数学的学习，因为一开始的目标比较难，所以也下了很大的决心要把数学搞好。为了学好数学二，从一开始循序渐进，先学习本科的高数课本开始，将整本书从头到尾全部看一遍，并将课后习题一题一题地过。这是第一遍针对高数部分的学习，当看完整本高数之后，开始看同济大学的高数课本，课后习题也是一题一题地过。期间开始刷英语真题，一句一句地看，力求仔细认真。一直到暑假，基本将高数课本结束，英语正常进度推进。当然在这期间并没有全部时间都在复习，因为还有课程以及课外自己的计划，比如当时向写一篇核心论文，尝试做一个自己想法的app，在学习深度学习相关的知识。暑假之前，论文写完，并发给了老师。至于app部分，解决了app的核心问题——深度学习识别验证码。这个经历还是让我感觉很不错的，因为从数据的获取，处理，构建简单的网络，最后得出模型。这个过程中问题曾出不穷，在解决问题的过程中对人工智能有了一点思考和想法，对深度学习的构建流程基本了解。解决了验证码识别的问题，之后将模型集成到app中之后就完成了app的登陆功能，也是最艰难的功能-_-!。能将这个问题解决还是让我感觉很兴奋的，因为这是为第一次从零开始，接触深度学习，代码全部是自己一个一个敲出来的。嘿嘿黑。。。。做完这个登陆功能之后就是后段代码的编写以及前端小程序的编写。在做这个让我比较重视的项目中，我也在不断的思考，不论是代码书写的规范，程序的适用性，是否可以优化，解决并发问题等等，对我来说，提高确实很大，很少有时间就这么纯粹的按照自己的想法，做一件对于自己来说很好，对别人来说也很有贡献的事情（这个app做完是免费开放给本校学生使用的，这是我的想法哈哈哈哈）。在暑假开始之前基本app完成了一半，后续只是代码编写和调试的劳动密集型工作。基本上感觉距离成功不远了，不过最后却没有完成，这也是让我非常遗憾的事情。因为做的是一个学校网站的信息爬取app，没想到学校换系统了。emmmmmm，始料未及，我感觉学校不讲武德，啥时候换不好，偏偏就在我要做好的时候换，偷袭我这个20多岁的小青年。不过回头一想，可能不完美才是真正的完美，有遗憾才是青春，那就这样结束吧。\n</p>\n<p style=\"text-indent:2em\">\n暑假开始之前，我就了解这个暑假将是考研过程中蜕变的关键期，一定要把握好暑假，把握住了暑假，基本成功一半。暑假开始，买了地学考研中心的复习资料，开始疯狂的背诵，日复一日，直到考研前一天。GIS的专业课，似乎背诵是最好的解决方式。而数学则是买了李永乐的红书，要保证滚瓜烂熟，一遍不行就两遍，真题认真作。关于线性代数部分也如同高数一般，先刷书再做课后习题。然后再看李永乐的红书部分的线性代数。政治的话，暑假就是附带着刷1000题。英语背诵单词和写作，持续进行。就这样暑假再高温和疯狂背诵之中结束。没有太多的回忆，不过温度确实很高，哈哈哈哈，整个考研教室开着空调完全感受不到冷气，我滴乖乖，活活热死。还好没有住校，因为学校宿舍没有空调，在外面租房子，说到租房子，是在贝壳找房上租的。房子很不错，和舍友一起，四个人，但是最后只有三个人住进来emmmmm。不过值得一提的是，初入社会没有经验，没想到租房找中介，中介的收费会这么贵，emmmmmm，好像要房租的一半还是一个月的房租，忘记了，不过我们租了两个月，但是需要付三个月的钱，最后也是中介人比较好，看在学生的份上，打了折扣。租房的地方叫天空之城，距离学校还是挺远的，所以就借了学弟的电瓶车作为来回的工具。其中一个舍友，就在租房里面复习，没有去学校，但是我还是建议每天都去学校的。这样要求自己比较好点。就这样，暑假似乎也过得很快，没有过多的停留，时间飞逝地来到开学，虽说是开学，但是对于我们来说没有任何变化，还是不停地刷题，可能也就是复习计划进入到下一阶段，暑假结束，基本考研的准备已经接近80%。接下来就是题海战术了，以及一成不变的疯狂背诵。到11月政治肖四肖八背诵无需多说。在漫长的背诵刷题过程中，人的精神是很难保持高度集中的，总是需要一些娱乐。接近后期考研准备基本完成的时候，就是不断的巩固之前的背诵，不能忘记，很是无聊。于是emmmmm，嘿嘿我就开始看LOL的全球总决赛，记得当时是S9,我还是很喜欢接触游戏，虽然每个游戏在我这只能保持很短的新鲜感，但是看游戏还是我的爱好的。于是在考研过程中，时常会在无聊，心态不好的时候回到宿舍看直播，不过很可惜，作为IG的粉丝，IG在s9没有夺冠，这可能也是应了那句话，“人的巅峰是一时的，而失败才是常态”。面对失败，如何处理是一个人最重要的品质，这决定着你的最后成就。除了游戏，在这个过程中，最让人放松的是，在室内三五成群的背书，最后变成茶话会，哈哈哈哈，还是很喜欢和一群考研人谈天说地，而且不知不觉就过去了很长时间而不自知。\n</p> \n\n<p style=\"text-indent:2em\">\n就这样复习的时间就这样飞逝，转眼便已经考完，走在去食堂的路上，还偶遇胡哥和女生在一起交谈甚欢。嘿嘿黑，果然人在社会还是需要另一半啊，哈哈哈哈。。。考研结束之后，迎接的就是即将毕业的事宜，首先是实习，然后是毕业论文。放假之前老师安排我们去新兴华安实习，然后给一个月时间面试准备，最后写毕业论文。本以为就可以这样结束大学生涯，没想到还是老天爷玩的花，突如其来的疫情，打乱了所有的计划，只能蜗居家中写论文。也许社会的无常与人生是相通的，没有人能知道下一刻会发生什么，所以人生才有动力去拼搏。在家中的时间是无聊的，也只能和老王打游戏。当然，还有一件心心念念的事，考研成绩就要出了。哈哈哈哈，出成绩的那一天，似乎格外难熬。没想到武汉作为疫情的重灾区也正是我的目标大学-武汉大学所在地。别人成绩都出了，而我还在等待。难熬，这可能是让我记忆犹新的原因。不过再托，成绩也有公布的时候，我记得当时是晚上，虽有对成绩早有估计，但是心中还是不能放心。打开成绩的一刹那，我捂住了眼睛，如果旭旭宝宝增幅装备一般，但是我的感受绝对比他更强烈。生死就是一瞬，根据量子力学的思想，只要我不看，我的成绩就有一万种可能。啪地一下，我睁开了眼睛，很快啊，上来就是一个左钩拳emmmmm串戏了不好意思。我的成绩居然是#%%，emmmmm心里有点失望，因为我估计应该360+至少，如果没有那么应该就是专业课的问题了，因为专业课不好估计。也正是这样，专业课今年有点难，普遍没有几个超过100的人，我也不例外，但是心里还抱着一丝侥幸，希望武汉大学能扩招，哈哈哈哈。不过基本上是要调剂了，这可能就是——失败是人生的常态吧。不过还好，知道成绩之后就是每天谢谢毕业论文，打打游戏，等待开学了，虽然还遥遥无期。\n</p> \n\n<p style=\"text-indent:2em\">\n等待开学也是难熬的，因为在家里啥事没有，让人疯狂。最后等来了4月18号开学的消息，接下来就是返校了。\n返校之后，是一段空白期，因为需要调剂，所以需要等待第一批结束后才开始，而调剂开始的时间，让我记忆犹新，因为是5月20号，这个特殊的日子，让恋人开心，也让单身的考研狗开心，因为即将尘埃落定。相较于往年，今年是网络面试，没有太多变化的面试准备，机缘巧合下遇到了一个比较合乎我的想法的老师，调剂了985，我是幸运的，也许这就是命运吧，我终将走向北京，遇见新的朋友，新的同学，新的老师，新的挑战，以及新的目标。不断的前进，向上，这就是多数人都想要的。这样，我的考研的一年，准确的讲，是一年多，从三月到接近下一年的六月，就这样结束了。现在看来，考研对我来说没有什么困难之处，每一步都在按计划进行，没有过多的改变，就是不断的前行。似乎过于简单，以至于我现在还没有感觉到考研的困难所在。对于现在的我们，考研抑或工作是一种选择，并非一种压力，以后读博抑或工作也是如此。只要我们愿意，那么就可以，关键取决于你是否愿意，以及能否为自己的想法作出所有的努力。\n至于接下来的研究生生活，似乎不太值得关注，等过年的时候，总结这个学期吧。新年再见！！！\n\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"lifeknow/lifeknow","published":1,"updated":"2021-05-16T07:00:37.663Z","_id":"cknmrfu4x000330uo1d0s6556","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Life-you-know-what\"><a href=\"#Life-you-know-what\" class=\"headerlink\" title=\"Life, you know what?\"></a>Life, you know what?</h3><p style=\"text-indent:2em\">\n2020年12月31日\n\n</p> \n<p style=\"text-indent:2em\">\n一年飞快的逝去，去年往事历历在目。稍微回想了一下过去的一年，似乎发生了很多事，但是仔细回想起来却也没有什么值得去保存。去年的今天，似乎刚刚考完研，内心对于这次考研的经历没有太多的波澜。整体看来，考试整个过程似乎没有太出乎意料。虽然过程有点意外，但是总算是有惊无险。本想在去年总结一下考研的经历，但最后还是没有进行，也可能是考虑到还没有上岸吧。\n</p> \n<p style=\"text-indent:2em\">\n现在似乎是一个绝佳的时刻，总结考研准备过程，到考试，最后到面试，以及上岸后到学校报道的一些见闻。考研的过程没有很迷茫的时刻，时时刻刻都谨记着自己的初心和目标。从2019年三月份开始，就开始陆陆续续地准备数学的学习，因为一开始的目标比较难，所以也下了很大的决心要把数学搞好。为了学好数学二，从一开始循序渐进，先学习本科的高数课本开始，将整本书从头到尾全部看一遍，并将课后习题一题一题地过。这是第一遍针对高数部分的学习，当看完整本高数之后，开始看同济大学的高数课本，课后习题也是一题一题地过。期间开始刷英语真题，一句一句地看，力求仔细认真。一直到暑假，基本将高数课本结束，英语正常进度推进。当然在这期间并没有全部时间都在复习，因为还有课程以及课外自己的计划，比如当时向写一篇核心论文，尝试做一个自己想法的app，在学习深度学习相关的知识。暑假之前，论文写完，并发给了老师。至于app部分，解决了app的核心问题——深度学习识别验证码。这个经历还是让我感觉很不错的，因为从数据的获取，处理，构建简单的网络，最后得出模型。这个过程中问题曾出不穷，在解决问题的过程中对人工智能有了一点思考和想法，对深度学习的构建流程基本了解。解决了验证码识别的问题，之后将模型集成到app中之后就完成了app的登陆功能，也是最艰难的功能-_-!。能将这个问题解决还是让我感觉很兴奋的，因为这是为第一次从零开始，接触深度学习，代码全部是自己一个一个敲出来的。嘿嘿黑。。。。做完这个登陆功能之后就是后段代码的编写以及前端小程序的编写。在做这个让我比较重视的项目中，我也在不断的思考，不论是代码书写的规范，程序的适用性，是否可以优化，解决并发问题等等，对我来说，提高确实很大，很少有时间就这么纯粹的按照自己的想法，做一件对于自己来说很好，对别人来说也很有贡献的事情（这个app做完是免费开放给本校学生使用的，这是我的想法哈哈哈哈）。在暑假开始之前基本app完成了一半，后续只是代码编写和调试的劳动密集型工作。基本上感觉距离成功不远了，不过最后却没有完成，这也是让我非常遗憾的事情。因为做的是一个学校网站的信息爬取app，没想到学校换系统了。emmmmmm，始料未及，我感觉学校不讲武德，啥时候换不好，偏偏就在我要做好的时候换，偷袭我这个20多岁的小青年。不过回头一想，可能不完美才是真正的完美，有遗憾才是青春，那就这样结束吧。\n</p>\n<p style=\"text-indent:2em\">\n暑假开始之前，我就了解这个暑假将是考研过程中蜕变的关键期，一定要把握好暑假，把握住了暑假，基本成功一半。暑假开始，买了地学考研中心的复习资料，开始疯狂的背诵，日复一日，直到考研前一天。GIS的专业课，似乎背诵是最好的解决方式。而数学则是买了李永乐的红书，要保证滚瓜烂熟，一遍不行就两遍，真题认真作。关于线性代数部分也如同高数一般，先刷书再做课后习题。然后再看李永乐的红书部分的线性代数。政治的话，暑假就是附带着刷1000题。英语背诵单词和写作，持续进行。就这样暑假再高温和疯狂背诵之中结束。没有太多的回忆，不过温度确实很高，哈哈哈哈，整个考研教室开着空调完全感受不到冷气，我滴乖乖，活活热死。还好没有住校，因为学校宿舍没有空调，在外面租房子，说到租房子，是在贝壳找房上租的。房子很不错，和舍友一起，四个人，但是最后只有三个人住进来emmmmm。不过值得一提的是，初入社会没有经验，没想到租房找中介，中介的收费会这么贵，emmmmmm，好像要房租的一半还是一个月的房租，忘记了，不过我们租了两个月，但是需要付三个月的钱，最后也是中介人比较好，看在学生的份上，打了折扣。租房的地方叫天空之城，距离学校还是挺远的，所以就借了学弟的电瓶车作为来回的工具。其中一个舍友，就在租房里面复习，没有去学校，但是我还是建议每天都去学校的。这样要求自己比较好点。就这样，暑假似乎也过得很快，没有过多的停留，时间飞逝地来到开学，虽说是开学，但是对于我们来说没有任何变化，还是不停地刷题，可能也就是复习计划进入到下一阶段，暑假结束，基本考研的准备已经接近80%。接下来就是题海战术了，以及一成不变的疯狂背诵。到11月政治肖四肖八背诵无需多说。在漫长的背诵刷题过程中，人的精神是很难保持高度集中的，总是需要一些娱乐。接近后期考研准备基本完成的时候，就是不断的巩固之前的背诵，不能忘记，很是无聊。于是emmmmm，嘿嘿我就开始看LOL的全球总决赛，记得当时是S9,我还是很喜欢接触游戏，虽然每个游戏在我这只能保持很短的新鲜感，但是看游戏还是我的爱好的。于是在考研过程中，时常会在无聊，心态不好的时候回到宿舍看直播，不过很可惜，作为IG的粉丝，IG在s9没有夺冠，这可能也是应了那句话，“人的巅峰是一时的，而失败才是常态”。面对失败，如何处理是一个人最重要的品质，这决定着你的最后成就。除了游戏，在这个过程中，最让人放松的是，在室内三五成群的背书，最后变成茶话会，哈哈哈哈，还是很喜欢和一群考研人谈天说地，而且不知不觉就过去了很长时间而不自知。\n</p> \n\n<p style=\"text-indent:2em\">\n就这样复习的时间就这样飞逝，转眼便已经考完，走在去食堂的路上，还偶遇胡哥和女生在一起交谈甚欢。嘿嘿黑，果然人在社会还是需要另一半啊，哈哈哈哈。。。考研结束之后，迎接的就是即将毕业的事宜，首先是实习，然后是毕业论文。放假之前老师安排我们去新兴华安实习，然后给一个月时间面试准备，最后写毕业论文。本以为就可以这样结束大学生涯，没想到还是老天爷玩的花，突如其来的疫情，打乱了所有的计划，只能蜗居家中写论文。也许社会的无常与人生是相通的，没有人能知道下一刻会发生什么，所以人生才有动力去拼搏。在家中的时间是无聊的，也只能和老王打游戏。当然，还有一件心心念念的事，考研成绩就要出了。哈哈哈哈，出成绩的那一天，似乎格外难熬。没想到武汉作为疫情的重灾区也正是我的目标大学-武汉大学所在地。别人成绩都出了，而我还在等待。难熬，这可能是让我记忆犹新的原因。不过再托，成绩也有公布的时候，我记得当时是晚上，虽有对成绩早有估计，但是心中还是不能放心。打开成绩的一刹那，我捂住了眼睛，如果旭旭宝宝增幅装备一般，但是我的感受绝对比他更强烈。生死就是一瞬，根据量子力学的思想，只要我不看，我的成绩就有一万种可能。啪地一下，我睁开了眼睛，很快啊，上来就是一个左钩拳emmmmm串戏了不好意思。我的成绩居然是#%%，emmmmm心里有点失望，因为我估计应该360+至少，如果没有那么应该就是专业课的问题了，因为专业课不好估计。也正是这样，专业课今年有点难，普遍没有几个超过100的人，我也不例外，但是心里还抱着一丝侥幸，希望武汉大学能扩招，哈哈哈哈。不过基本上是要调剂了，这可能就是——失败是人生的常态吧。不过还好，知道成绩之后就是每天谢谢毕业论文，打打游戏，等待开学了，虽然还遥遥无期。\n</p> \n\n<p style=\"text-indent:2em\">\n等待开学也是难熬的，因为在家里啥事没有，让人疯狂。最后等来了4月18号开学的消息，接下来就是返校了。\n返校之后，是一段空白期，因为需要调剂，所以需要等待第一批结束后才开始，而调剂开始的时间，让我记忆犹新，因为是5月20号，这个特殊的日子，让恋人开心，也让单身的考研狗开心，因为即将尘埃落定。相较于往年，今年是网络面试，没有太多变化的面试准备，机缘巧合下遇到了一个比较合乎我的想法的老师，调剂了985，我是幸运的，也许这就是命运吧，我终将走向北京，遇见新的朋友，新的同学，新的老师，新的挑战，以及新的目标。不断的前进，向上，这就是多数人都想要的。这样，我的考研的一年，准确的讲，是一年多，从三月到接近下一年的六月，就这样结束了。现在看来，考研对我来说没有什么困难之处，每一步都在按计划进行，没有过多的改变，就是不断的前行。似乎过于简单，以至于我现在还没有感觉到考研的困难所在。对于现在的我们，考研抑或工作是一种选择，并非一种压力，以后读博抑或工作也是如此。只要我们愿意，那么就可以，关键取决于你是否愿意，以及能否为自己的想法作出所有的努力。\n至于接下来的研究生生活，似乎不太值得关注，等过年的时候，总结这个学期吧。新年再见！！！\n\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"Life-you-know-what\"><a href=\"#Life-you-know-what\" class=\"headerlink\" title=\"Life, you know what?\"></a>Life, you know what?</h3><p style=\"text-indent:2em\">\n2020年12月31日\n\n</p> \n<p style=\"text-indent:2em\">\n一年飞快的逝去，去年往事历历在目。稍微回想了一下过去的一年，似乎发生了很多事，但是仔细回想起来却也没有什么值得去保存。去年的今天，似乎刚刚考完研，内心对于这次考研的经历没有太多的波澜。整体看来，考试整个过程似乎没有太出乎意料。虽然过程有点意外，但是总算是有惊无险。本想在去年总结一下考研的经历，但最后还是没有进行，也可能是考虑到还没有上岸吧。\n</p> \n<p style=\"text-indent:2em\">\n现在似乎是一个绝佳的时刻，总结考研准备过程，到考试，最后到面试，以及上岸后到学校报道的一些见闻。考研的过程没有很迷茫的时刻，时时刻刻都谨记着自己的初心和目标。从2019年三月份开始，就开始陆陆续续地准备数学的学习，因为一开始的目标比较难，所以也下了很大的决心要把数学搞好。为了学好数学二，从一开始循序渐进，先学习本科的高数课本开始，将整本书从头到尾全部看一遍，并将课后习题一题一题地过。这是第一遍针对高数部分的学习，当看完整本高数之后，开始看同济大学的高数课本，课后习题也是一题一题地过。期间开始刷英语真题，一句一句地看，力求仔细认真。一直到暑假，基本将高数课本结束，英语正常进度推进。当然在这期间并没有全部时间都在复习，因为还有课程以及课外自己的计划，比如当时向写一篇核心论文，尝试做一个自己想法的app，在学习深度学习相关的知识。暑假之前，论文写完，并发给了老师。至于app部分，解决了app的核心问题——深度学习识别验证码。这个经历还是让我感觉很不错的，因为从数据的获取，处理，构建简单的网络，最后得出模型。这个过程中问题曾出不穷，在解决问题的过程中对人工智能有了一点思考和想法，对深度学习的构建流程基本了解。解决了验证码识别的问题，之后将模型集成到app中之后就完成了app的登陆功能，也是最艰难的功能-_-!。能将这个问题解决还是让我感觉很兴奋的，因为这是为第一次从零开始，接触深度学习，代码全部是自己一个一个敲出来的。嘿嘿黑。。。。做完这个登陆功能之后就是后段代码的编写以及前端小程序的编写。在做这个让我比较重视的项目中，我也在不断的思考，不论是代码书写的规范，程序的适用性，是否可以优化，解决并发问题等等，对我来说，提高确实很大，很少有时间就这么纯粹的按照自己的想法，做一件对于自己来说很好，对别人来说也很有贡献的事情（这个app做完是免费开放给本校学生使用的，这是我的想法哈哈哈哈）。在暑假开始之前基本app完成了一半，后续只是代码编写和调试的劳动密集型工作。基本上感觉距离成功不远了，不过最后却没有完成，这也是让我非常遗憾的事情。因为做的是一个学校网站的信息爬取app，没想到学校换系统了。emmmmmm，始料未及，我感觉学校不讲武德，啥时候换不好，偏偏就在我要做好的时候换，偷袭我这个20多岁的小青年。不过回头一想，可能不完美才是真正的完美，有遗憾才是青春，那就这样结束吧。\n</p>\n<p style=\"text-indent:2em\">\n暑假开始之前，我就了解这个暑假将是考研过程中蜕变的关键期，一定要把握好暑假，把握住了暑假，基本成功一半。暑假开始，买了地学考研中心的复习资料，开始疯狂的背诵，日复一日，直到考研前一天。GIS的专业课，似乎背诵是最好的解决方式。而数学则是买了李永乐的红书，要保证滚瓜烂熟，一遍不行就两遍，真题认真作。关于线性代数部分也如同高数一般，先刷书再做课后习题。然后再看李永乐的红书部分的线性代数。政治的话，暑假就是附带着刷1000题。英语背诵单词和写作，持续进行。就这样暑假再高温和疯狂背诵之中结束。没有太多的回忆，不过温度确实很高，哈哈哈哈，整个考研教室开着空调完全感受不到冷气，我滴乖乖，活活热死。还好没有住校，因为学校宿舍没有空调，在外面租房子，说到租房子，是在贝壳找房上租的。房子很不错，和舍友一起，四个人，但是最后只有三个人住进来emmmmm。不过值得一提的是，初入社会没有经验，没想到租房找中介，中介的收费会这么贵，emmmmmm，好像要房租的一半还是一个月的房租，忘记了，不过我们租了两个月，但是需要付三个月的钱，最后也是中介人比较好，看在学生的份上，打了折扣。租房的地方叫天空之城，距离学校还是挺远的，所以就借了学弟的电瓶车作为来回的工具。其中一个舍友，就在租房里面复习，没有去学校，但是我还是建议每天都去学校的。这样要求自己比较好点。就这样，暑假似乎也过得很快，没有过多的停留，时间飞逝地来到开学，虽说是开学，但是对于我们来说没有任何变化，还是不停地刷题，可能也就是复习计划进入到下一阶段，暑假结束，基本考研的准备已经接近80%。接下来就是题海战术了，以及一成不变的疯狂背诵。到11月政治肖四肖八背诵无需多说。在漫长的背诵刷题过程中，人的精神是很难保持高度集中的，总是需要一些娱乐。接近后期考研准备基本完成的时候，就是不断的巩固之前的背诵，不能忘记，很是无聊。于是emmmmm，嘿嘿我就开始看LOL的全球总决赛，记得当时是S9,我还是很喜欢接触游戏，虽然每个游戏在我这只能保持很短的新鲜感，但是看游戏还是我的爱好的。于是在考研过程中，时常会在无聊，心态不好的时候回到宿舍看直播，不过很可惜，作为IG的粉丝，IG在s9没有夺冠，这可能也是应了那句话，“人的巅峰是一时的，而失败才是常态”。面对失败，如何处理是一个人最重要的品质，这决定着你的最后成就。除了游戏，在这个过程中，最让人放松的是，在室内三五成群的背书，最后变成茶话会，哈哈哈哈，还是很喜欢和一群考研人谈天说地，而且不知不觉就过去了很长时间而不自知。\n</p> \n\n<p style=\"text-indent:2em\">\n就这样复习的时间就这样飞逝，转眼便已经考完，走在去食堂的路上，还偶遇胡哥和女生在一起交谈甚欢。嘿嘿黑，果然人在社会还是需要另一半啊，哈哈哈哈。。。考研结束之后，迎接的就是即将毕业的事宜，首先是实习，然后是毕业论文。放假之前老师安排我们去新兴华安实习，然后给一个月时间面试准备，最后写毕业论文。本以为就可以这样结束大学生涯，没想到还是老天爷玩的花，突如其来的疫情，打乱了所有的计划，只能蜗居家中写论文。也许社会的无常与人生是相通的，没有人能知道下一刻会发生什么，所以人生才有动力去拼搏。在家中的时间是无聊的，也只能和老王打游戏。当然，还有一件心心念念的事，考研成绩就要出了。哈哈哈哈，出成绩的那一天，似乎格外难熬。没想到武汉作为疫情的重灾区也正是我的目标大学-武汉大学所在地。别人成绩都出了，而我还在等待。难熬，这可能是让我记忆犹新的原因。不过再托，成绩也有公布的时候，我记得当时是晚上，虽有对成绩早有估计，但是心中还是不能放心。打开成绩的一刹那，我捂住了眼睛，如果旭旭宝宝增幅装备一般，但是我的感受绝对比他更强烈。生死就是一瞬，根据量子力学的思想，只要我不看，我的成绩就有一万种可能。啪地一下，我睁开了眼睛，很快啊，上来就是一个左钩拳emmmmm串戏了不好意思。我的成绩居然是#%%，emmmmm心里有点失望，因为我估计应该360+至少，如果没有那么应该就是专业课的问题了，因为专业课不好估计。也正是这样，专业课今年有点难，普遍没有几个超过100的人，我也不例外，但是心里还抱着一丝侥幸，希望武汉大学能扩招，哈哈哈哈。不过基本上是要调剂了，这可能就是——失败是人生的常态吧。不过还好，知道成绩之后就是每天谢谢毕业论文，打打游戏，等待开学了，虽然还遥遥无期。\n</p> \n\n<p style=\"text-indent:2em\">\n等待开学也是难熬的，因为在家里啥事没有，让人疯狂。最后等来了4月18号开学的消息，接下来就是返校了。\n返校之后，是一段空白期，因为需要调剂，所以需要等待第一批结束后才开始，而调剂开始的时间，让我记忆犹新，因为是5月20号，这个特殊的日子，让恋人开心，也让单身的考研狗开心，因为即将尘埃落定。相较于往年，今年是网络面试，没有太多变化的面试准备，机缘巧合下遇到了一个比较合乎我的想法的老师，调剂了985，我是幸运的，也许这就是命运吧，我终将走向北京，遇见新的朋友，新的同学，新的老师，新的挑战，以及新的目标。不断的前进，向上，这就是多数人都想要的。这样，我的考研的一年，准确的讲，是一年多，从三月到接近下一年的六月，就这样结束了。现在看来，考研对我来说没有什么困难之处，每一步都在按计划进行，没有过多的改变，就是不断的前行。似乎过于简单，以至于我现在还没有感觉到考研的困难所在。对于现在的我们，考研抑或工作是一种选择，并非一种压力，以后读博抑或工作也是如此。只要我们愿意，那么就可以，关键取决于你是否愿意，以及能否为自己的想法作出所有的努力。\n至于接下来的研究生生活，似乎不太值得关注，等过年的时候，总结这个学期吧。新年再见！！！\n\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"ResNet","date":"2021-04-18T05:19:58.000Z","author":"Fanrencli","_content":"## 深度学习神经网络特征提取（一）\n\n### 网络结构\n\n要构建`ResNet`特征提取网络，我们只需要了解两个方面：\n\n- ResNet网络层数：Resnet50,ResNet101,ResNet152\n- ResNet网络基础组成：Conv_Block,Identity_Block\n\n在本文中，根据实际的项目要求，构建了RseNet101网络。\n![ResNet网络结构](http://39.106.34.39:4567/20180114205444652.png)\n![ResNet基础Backbone](http://39.106.34.39:4567/20180114184946861.png)\n\n### 构建Conv_Block模块\n针对`Conv_Block`模块，我们首先要了解这个模块的具体结构，`Conv_Block`从输入开始分两支分别进行特征提取，以一次卷积、一次归一化、一次`ReLu`激活函数的形式连接三次，并在第一次的卷积层步长为2进行降维，另一分支只进行一次步长为2的卷积、一次归一化，然后将两个分支进行连接，再一次激活函数层完成一次`Conv_Block`，结构如下图：\n![Conv_Block](http://39.106.34.39:4567/20191113094201415.png)\n```python\n    def Conv_block(input_feature,kernel_size,filters,strides = (2,2)):\n        filter1,filter2,filter3 = filters\n        #first line conv\n        x = layers.Conv2D(filter1,(1,1),strides = strides, use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size),padding = 'same', use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        #parallel conv\n        shortcut = layers.Conv2D(filter3,(1,1), strides = strides, use_bias=True)(input_feature)\n        shortcut = layers.BatchNormalization()(shortcut)\n\n        # add the parallel conv\n\n        x = layers.Add()([x,shortcut])\n        x = layers.Activation('relu')(x)\n        return x\n```\n\n### 构建Identity_Block模块\n\n`Identity_Block`模块不同于`Conv_Block`模块，`Identity_Block`模块只对特征进行提取，即只进行深度的堆叠不行进降维，所以在结构上与`Conv_Block`相似——同样是双分支结构，在另一分支上不进行操作，只是将输入与另一分支的结果进行叠加，具体结构如下：\n\n![Identity_Block](http://39.106.34.39:4567/20191113094135752.png)\n\n代码如下：\n```python\n    def identity_block(input_feature,kernel_size,filters):\n        filter1,filter2,filter3 = filters\n\n        x = layers.Conv2D(filter1,(1,1), use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size), padding = 'same', use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        x = layers.Add()([x,input_feature])\n        x = layers.Activation('relu')(x)\n        return x\n```\n\n### 构建ResNet101网络\n\n构建ResNet101网络的具体形式如上图所示。\n- 由于第一层7x7卷积，所以在卷积前加入`ZeroPadding2D`，然后如同图中所示，归一化接一层激活和池化\n- 第二层一次`Conv_block`、两次`identity_block`\n- 第三层一次`Conv_block`、三次`identity_block`\n- 第四层一次`Conv_block`、22次`identity_block`\n- 第五层一次`Conv_block`、两次`identity_block`\n\n在第五层之后本文接上一层全局池化以及两层全连接进行分类，但是ResNset网络在第五层基本就结束了，后续根据个人的需求进行修改即可，本文只是做了一个图片的分类的实例，接上后续的全连接分类。\n代码如下：\n```python\n    def get_resnet_model(input_shape,classes):\n        input_image = Input(shape = input_shape)\n        x = layers.ZeroPadding2D((3,3))(input_image)\n        x = layers.Conv2D(64,(7,7),strides=(2,2),  use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n        c1 = x = layers.MaxPooling2D((3,3),strides=(2, 2), padding='same')(x)\n\n        x = Conv_block(x, 3, [64,64,256], strides=(1,1))\n        x = identity_block(x,3,[64,64,256])\n        c2 = x = identity_block(x,3,[64,64,256])\n        x = Conv_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        c3 = x =identity_block(x,3,[128,128,512])\n        x = Conv_block(x,3,[256,256,1024])\n        for i in range(22):\n            x = identity_block(x,3,[256,256,1024])\n        c4 = x\n        x = Conv_block(x,3,[512,512,2048])\n        x = identity_block(x,3,[512,512,2048])\n        c5 = x = identity_block(x,3,[512,512,2048])\n        x = layers.GlobalAveragePooling2D()(x)\n        x = layers.Dropout(0.5)(x)\n        x = layers.Dense(1024,activation = 'relu')(x)\n        x = layers.Dropout(0.5)(x)\n        output = layers.Dense(classes,activation = 'softmax')(x)\n        model = models.Model(input_image,output)\n        return model\n```\n","source":"_posts/feature_extractor/resnet.md","raw":"---\ntitle: ResNet\ndate: 2021-04-18 13:19:58\ncategories:\n    - Deep Learning\ntags:\n    - ResNet101\n    - Fanrencli\nauthor: Fanrencli\n---\n## 深度学习神经网络特征提取（一）\n\n### 网络结构\n\n要构建`ResNet`特征提取网络，我们只需要了解两个方面：\n\n- ResNet网络层数：Resnet50,ResNet101,ResNet152\n- ResNet网络基础组成：Conv_Block,Identity_Block\n\n在本文中，根据实际的项目要求，构建了RseNet101网络。\n![ResNet网络结构](http://39.106.34.39:4567/20180114205444652.png)\n![ResNet基础Backbone](http://39.106.34.39:4567/20180114184946861.png)\n\n### 构建Conv_Block模块\n针对`Conv_Block`模块，我们首先要了解这个模块的具体结构，`Conv_Block`从输入开始分两支分别进行特征提取，以一次卷积、一次归一化、一次`ReLu`激活函数的形式连接三次，并在第一次的卷积层步长为2进行降维，另一分支只进行一次步长为2的卷积、一次归一化，然后将两个分支进行连接，再一次激活函数层完成一次`Conv_Block`，结构如下图：\n![Conv_Block](http://39.106.34.39:4567/20191113094201415.png)\n```python\n    def Conv_block(input_feature,kernel_size,filters,strides = (2,2)):\n        filter1,filter2,filter3 = filters\n        #first line conv\n        x = layers.Conv2D(filter1,(1,1),strides = strides, use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size),padding = 'same', use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        #parallel conv\n        shortcut = layers.Conv2D(filter3,(1,1), strides = strides, use_bias=True)(input_feature)\n        shortcut = layers.BatchNormalization()(shortcut)\n\n        # add the parallel conv\n\n        x = layers.Add()([x,shortcut])\n        x = layers.Activation('relu')(x)\n        return x\n```\n\n### 构建Identity_Block模块\n\n`Identity_Block`模块不同于`Conv_Block`模块，`Identity_Block`模块只对特征进行提取，即只进行深度的堆叠不行进降维，所以在结构上与`Conv_Block`相似——同样是双分支结构，在另一分支上不进行操作，只是将输入与另一分支的结果进行叠加，具体结构如下：\n\n![Identity_Block](http://39.106.34.39:4567/20191113094135752.png)\n\n代码如下：\n```python\n    def identity_block(input_feature,kernel_size,filters):\n        filter1,filter2,filter3 = filters\n\n        x = layers.Conv2D(filter1,(1,1), use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size), padding = 'same', use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        x = layers.Add()([x,input_feature])\n        x = layers.Activation('relu')(x)\n        return x\n```\n\n### 构建ResNet101网络\n\n构建ResNet101网络的具体形式如上图所示。\n- 由于第一层7x7卷积，所以在卷积前加入`ZeroPadding2D`，然后如同图中所示，归一化接一层激活和池化\n- 第二层一次`Conv_block`、两次`identity_block`\n- 第三层一次`Conv_block`、三次`identity_block`\n- 第四层一次`Conv_block`、22次`identity_block`\n- 第五层一次`Conv_block`、两次`identity_block`\n\n在第五层之后本文接上一层全局池化以及两层全连接进行分类，但是ResNset网络在第五层基本就结束了，后续根据个人的需求进行修改即可，本文只是做了一个图片的分类的实例，接上后续的全连接分类。\n代码如下：\n```python\n    def get_resnet_model(input_shape,classes):\n        input_image = Input(shape = input_shape)\n        x = layers.ZeroPadding2D((3,3))(input_image)\n        x = layers.Conv2D(64,(7,7),strides=(2,2),  use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation('relu')(x)\n        c1 = x = layers.MaxPooling2D((3,3),strides=(2, 2), padding='same')(x)\n\n        x = Conv_block(x, 3, [64,64,256], strides=(1,1))\n        x = identity_block(x,3,[64,64,256])\n        c2 = x = identity_block(x,3,[64,64,256])\n        x = Conv_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        c3 = x =identity_block(x,3,[128,128,512])\n        x = Conv_block(x,3,[256,256,1024])\n        for i in range(22):\n            x = identity_block(x,3,[256,256,1024])\n        c4 = x\n        x = Conv_block(x,3,[512,512,2048])\n        x = identity_block(x,3,[512,512,2048])\n        c5 = x = identity_block(x,3,[512,512,2048])\n        x = layers.GlobalAveragePooling2D()(x)\n        x = layers.Dropout(0.5)(x)\n        x = layers.Dense(1024,activation = 'relu')(x)\n        x = layers.Dropout(0.5)(x)\n        output = layers.Dense(classes,activation = 'softmax')(x)\n        model = models.Model(input_image,output)\n        return model\n```\n","slug":"feature_extractor/resnet","published":1,"updated":"2021-07-13T08:16:23.276Z","_id":"cknmrh5ye0000v4uo97w11k7u","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习神经网络特征提取（一）\"><a href=\"#深度学习神经网络特征提取（一）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（一）\"></a>深度学习神经网络特征提取（一）</h2><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p>要构建<code>ResNet</code>特征提取网络，我们只需要了解两个方面：</p>\n<ul>\n<li>ResNet网络层数：Resnet50,ResNet101,ResNet152</li>\n<li>ResNet网络基础组成：Conv_Block,Identity_Block</li>\n</ul>\n<p>在本文中，根据实际的项目要求，构建了RseNet101网络。<br><img src=\"http://39.106.34.39:4567/20180114205444652.png\" alt=\"ResNet网络结构\"><br><img src=\"http://39.106.34.39:4567/20180114184946861.png\" alt=\"ResNet基础Backbone\"></p>\n<h3 id=\"构建Conv-Block模块\"><a href=\"#构建Conv-Block模块\" class=\"headerlink\" title=\"构建Conv_Block模块\"></a>构建Conv_Block模块</h3><p>针对<code>Conv_Block</code>模块，我们首先要了解这个模块的具体结构，<code>Conv_Block</code>从输入开始分两支分别进行特征提取，以一次卷积、一次归一化、一次<code>ReLu</code>激活函数的形式连接三次，并在第一次的卷积层步长为2进行降维，另一分支只进行一次步长为2的卷积、一次归一化，然后将两个分支进行连接，再一次激活函数层完成一次<code>Conv_Block</code>，结构如下图：<br><img src=\"http://39.106.34.39:4567/20191113094201415.png\" alt=\"Conv_Block\"></p>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">Conv_block</span><span class=\"token punctuation\">(</span>input_feature<span class=\"token punctuation\">,</span>kernel_size<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        filter1<span class=\"token punctuation\">,</span>filter2<span class=\"token punctuation\">,</span>filter3 <span class=\"token operator\">=</span> filters\n        <span class=\"token comment\" spellcheck=\"true\">#first line conv</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span> strides<span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_feature<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>kernel_size<span class=\"token punctuation\">,</span>kernel_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">#parallel conv</span>\n        shortcut <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides <span class=\"token operator\">=</span> strides<span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_feature<span class=\"token punctuation\">)</span>\n        shortcut <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>shortcut<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># add the parallel conv</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span>shortcut<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<h3 id=\"构建Identity-Block模块\"><a href=\"#构建Identity-Block模块\" class=\"headerlink\" title=\"构建Identity_Block模块\"></a>构建Identity_Block模块</h3><p><code>Identity_Block</code>模块不同于<code>Conv_Block</code>模块，<code>Identity_Block</code>模块只对特征进行提取，即只进行深度的堆叠不行进降维，所以在结构上与<code>Conv_Block</code>相似——同样是双分支结构，在另一分支上不进行操作，只是将输入与另一分支的结果进行叠加，具体结构如下：</p>\n<p><img src=\"http://39.106.34.39:4567/20191113094135752.png\" alt=\"Identity_Block\"></p>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">identity_block</span><span class=\"token punctuation\">(</span>input_feature<span class=\"token punctuation\">,</span>kernel_size<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        filter1<span class=\"token punctuation\">,</span>filter2<span class=\"token punctuation\">,</span>filter3 <span class=\"token operator\">=</span> filters\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_feature<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>kernel_size<span class=\"token punctuation\">,</span>kernel_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span>filter3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span>input_feature<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<h3 id=\"构建ResNet101网络\"><a href=\"#构建ResNet101网络\" class=\"headerlink\" title=\"构建ResNet101网络\"></a>构建ResNet101网络</h3><p>构建ResNet101网络的具体形式如上图所示。</p>\n<ul>\n<li>由于第一层7x7卷积，所以在卷积前加入<code>ZeroPadding2D</code>，然后如同图中所示，归一化接一层激活和池化</li>\n<li>第二层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n<li>第三层一次<code>Conv_block</code>、三次<code>identity_block</code></li>\n<li>第四层一次<code>Conv_block</code>、22次<code>identity_block</code></li>\n<li>第五层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n</ul>\n<p>在第五层之后本文接上一层全局池化以及两层全连接进行分类，但是ResNset网络在第五层基本就结束了，后续根据个人的需求进行修改即可，本文只是做了一个图片的分类的实例，接上后续的全连接分类。<br>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">get_resnet_model</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">,</span>classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        input_image <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape <span class=\"token operator\">=</span> input_shape<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_image<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        c1 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> Conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        c2 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> Conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        c3 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span>identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> Conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        c4 <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> Conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        c5 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>GlobalAveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        output <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span>activation <span class=\"token operator\">=</span> <span class=\"token string\">'softmax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        model <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">(</span>input_image<span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> model</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习神经网络特征提取（一）\"><a href=\"#深度学习神经网络特征提取（一）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（一）\"></a>深度学习神经网络特征提取（一）</h2><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p>要构建<code>ResNet</code>特征提取网络，我们只需要了解两个方面：</p>\n<ul>\n<li>ResNet网络层数：Resnet50,ResNet101,ResNet152</li>\n<li>ResNet网络基础组成：Conv_Block,Identity_Block</li>\n</ul>\n<p>在本文中，根据实际的项目要求，构建了RseNet101网络。<br><img src=\"http://39.106.34.39:4567/20180114205444652.png\" alt=\"ResNet网络结构\"><br><img src=\"http://39.106.34.39:4567/20180114184946861.png\" alt=\"ResNet基础Backbone\"></p>\n<h3 id=\"构建Conv-Block模块\"><a href=\"#构建Conv-Block模块\" class=\"headerlink\" title=\"构建Conv_Block模块\"></a>构建Conv_Block模块</h3><p>针对<code>Conv_Block</code>模块，我们首先要了解这个模块的具体结构，<code>Conv_Block</code>从输入开始分两支分别进行特征提取，以一次卷积、一次归一化、一次<code>ReLu</code>激活函数的形式连接三次，并在第一次的卷积层步长为2进行降维，另一分支只进行一次步长为2的卷积、一次归一化，然后将两个分支进行连接，再一次激活函数层完成一次<code>Conv_Block</code>，结构如下图：<br><img src=\"http://39.106.34.39:4567/20191113094201415.png\" alt=\"Conv_Block\"></p>\n<pre><code class=\"python\">    def Conv_block(input_feature,kernel_size,filters,strides = (2,2)):\n        filter1,filter2,filter3 = filters\n        #first line conv\n        x = layers.Conv2D(filter1,(1,1),strides = strides, use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation(&#39;relu&#39;)(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size),padding = &#39;same&#39;, use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation(&#39;relu&#39;)(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        #parallel conv\n        shortcut = layers.Conv2D(filter3,(1,1), strides = strides, use_bias=True)(input_feature)\n        shortcut = layers.BatchNormalization()(shortcut)\n\n        # add the parallel conv\n\n        x = layers.Add()([x,shortcut])\n        x = layers.Activation(&#39;relu&#39;)(x)\n        return x</code></pre>\n<h3 id=\"构建Identity-Block模块\"><a href=\"#构建Identity-Block模块\" class=\"headerlink\" title=\"构建Identity_Block模块\"></a>构建Identity_Block模块</h3><p><code>Identity_Block</code>模块不同于<code>Conv_Block</code>模块，<code>Identity_Block</code>模块只对特征进行提取，即只进行深度的堆叠不行进降维，所以在结构上与<code>Conv_Block</code>相似——同样是双分支结构，在另一分支上不进行操作，只是将输入与另一分支的结果进行叠加，具体结构如下：</p>\n<p><img src=\"http://39.106.34.39:4567/20191113094135752.png\" alt=\"Identity_Block\"></p>\n<p>代码如下：</p>\n<pre><code class=\"python\">    def identity_block(input_feature,kernel_size,filters):\n        filter1,filter2,filter3 = filters\n\n        x = layers.Conv2D(filter1,(1,1), use_bias=True)(input_feature)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation(&#39;relu&#39;)(x)\n\n        x = layers.Conv2D(filter2,(kernel_size,kernel_size), padding = &#39;same&#39;, use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation(&#39;relu&#39;)(x)\n\n        x = layers.Conv2D(filter3,(1,1), use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n\n        x = layers.Add()([x,input_feature])\n        x = layers.Activation(&#39;relu&#39;)(x)\n        return x</code></pre>\n<h3 id=\"构建ResNet101网络\"><a href=\"#构建ResNet101网络\" class=\"headerlink\" title=\"构建ResNet101网络\"></a>构建ResNet101网络</h3><p>构建ResNet101网络的具体形式如上图所示。</p>\n<ul>\n<li>由于第一层7x7卷积，所以在卷积前加入<code>ZeroPadding2D</code>，然后如同图中所示，归一化接一层激活和池化</li>\n<li>第二层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n<li>第三层一次<code>Conv_block</code>、三次<code>identity_block</code></li>\n<li>第四层一次<code>Conv_block</code>、22次<code>identity_block</code></li>\n<li>第五层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n</ul>\n<p>在第五层之后本文接上一层全局池化以及两层全连接进行分类，但是ResNset网络在第五层基本就结束了，后续根据个人的需求进行修改即可，本文只是做了一个图片的分类的实例，接上后续的全连接分类。<br>代码如下：</p>\n<pre><code class=\"python\">    def get_resnet_model(input_shape,classes):\n        input_image = Input(shape = input_shape)\n        x = layers.ZeroPadding2D((3,3))(input_image)\n        x = layers.Conv2D(64,(7,7),strides=(2,2),  use_bias=True)(x)\n        x = layers.BatchNormalization()(x)\n        x = layers.Activation(&#39;relu&#39;)(x)\n        c1 = x = layers.MaxPooling2D((3,3),strides=(2, 2), padding=&#39;same&#39;)(x)\n\n        x = Conv_block(x, 3, [64,64,256], strides=(1,1))\n        x = identity_block(x,3,[64,64,256])\n        c2 = x = identity_block(x,3,[64,64,256])\n        x = Conv_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        x = identity_block(x,3,[128,128,512])\n        c3 = x =identity_block(x,3,[128,128,512])\n        x = Conv_block(x,3,[256,256,1024])\n        for i in range(22):\n            x = identity_block(x,3,[256,256,1024])\n        c4 = x\n        x = Conv_block(x,3,[512,512,2048])\n        x = identity_block(x,3,[512,512,2048])\n        c5 = x = identity_block(x,3,[512,512,2048])\n        x = layers.GlobalAveragePooling2D()(x)\n        x = layers.Dropout(0.5)(x)\n        x = layers.Dense(1024,activation = &#39;relu&#39;)(x)\n        x = layers.Dropout(0.5)(x)\n        output = layers.Dense(classes,activation = &#39;softmax&#39;)(x)\n        model = models.Model(input_image,output)\n        return model</code></pre>\n"},{"title":"VGG","date":"2021-04-18T06:06:34.000Z","author":"Fanrencli","_content":"## 深度学习神经网络特征提取（二）\n\n### 网络结构\n\n要构建`VGG16`特征提取网络，我们只需要了解：\n\n- VGG16网络层数：VGG16,VGG19\n\n在本文中，根据实际的项目要求，构建了VGG16网络，相对于ResNet网络较为简单，整个网络只是一个线性的结构，没有分支，所以在VGG的学习中只需要掌握基础的深度学习原理就可以构建出来VGG网络。\n![VGG网络结构](http://39.106.34.39:4567/v2-ea924e733676e0da534f677a97c98653_720w.jpg)\n![VGG16网络结构](http://39.106.34.39:4567/2019101614532169.png)\n\n### 构建VGG16网络结构\n\nVGG16的网络有三种不同的层构成，分别是卷积、池化和全连接，具体的运行方式：\n- 输入一张尺寸为（224，224，3）的图片\n- 两次(3,3)卷积，层数64，输出为(224,224,64)，(2，2)最大池化，输出(112,112,64)。\n- 两次(3,3)卷积，层数128，输出为(112,112,128)，(2，2)最大池化，输出(56,56,64)。\n- 三次(3,3)卷积，层数256，输出为(56,56,64)，(2，2)最大池化，输出(28,28,64)。\n- 三次(3,3)卷积，层数512，输出为(28,28,64)，(2，2)最大池化，输出(14,14,64)。\n- 三次(3,3)卷积，层数512，输出为(14,14,64)，(2，2)最大池化，输出(7,7,64)。\n- 对结果进行平铺，接上两层4096的全连接层\n- 最后全连接进行分类\n\n代码如下：\n```python\n    def get_VGG16_model(input_shape,classes):\n        image_input = Input(shape = input_shape)\n\n        x = layers.Conv2D(64,(3,3),padding = 'same', activation = 'relu')(image_input)\n        x = layers.Conv2D(64,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(128,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(128,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Flatten()(x)\n        x = layers.Dense(4096,activation = 'relu')(x)\n        x = layers.Dense(4096,activation = 'relu')(x)\n        x = layers.Dense(classes, activation = 'softmax')(x) \n        model = models.Model(image_input,x)\n        return model\n```\n\n最后，根据VGG16的网络结构，大家可以自行尝试构建VGG19的网络结构。","source":"_posts/feature_extractor/VGG.md","raw":"---\ntitle: VGG\ndate: 2021-04-18 14:06:34\ncategories:\n- Deep Learning\ntags:\n- VGG16\n- Fanrencli\nauthor: Fanrencli\n---\n## 深度学习神经网络特征提取（二）\n\n### 网络结构\n\n要构建`VGG16`特征提取网络，我们只需要了解：\n\n- VGG16网络层数：VGG16,VGG19\n\n在本文中，根据实际的项目要求，构建了VGG16网络，相对于ResNet网络较为简单，整个网络只是一个线性的结构，没有分支，所以在VGG的学习中只需要掌握基础的深度学习原理就可以构建出来VGG网络。\n![VGG网络结构](http://39.106.34.39:4567/v2-ea924e733676e0da534f677a97c98653_720w.jpg)\n![VGG16网络结构](http://39.106.34.39:4567/2019101614532169.png)\n\n### 构建VGG16网络结构\n\nVGG16的网络有三种不同的层构成，分别是卷积、池化和全连接，具体的运行方式：\n- 输入一张尺寸为（224，224，3）的图片\n- 两次(3,3)卷积，层数64，输出为(224,224,64)，(2，2)最大池化，输出(112,112,64)。\n- 两次(3,3)卷积，层数128，输出为(112,112,128)，(2，2)最大池化，输出(56,56,64)。\n- 三次(3,3)卷积，层数256，输出为(56,56,64)，(2，2)最大池化，输出(28,28,64)。\n- 三次(3,3)卷积，层数512，输出为(28,28,64)，(2，2)最大池化，输出(14,14,64)。\n- 三次(3,3)卷积，层数512，输出为(14,14,64)，(2，2)最大池化，输出(7,7,64)。\n- 对结果进行平铺，接上两层4096的全连接层\n- 最后全连接进行分类\n\n代码如下：\n```python\n    def get_VGG16_model(input_shape,classes):\n        image_input = Input(shape = input_shape)\n\n        x = layers.Conv2D(64,(3,3),padding = 'same', activation = 'relu')(image_input)\n        x = layers.Conv2D(64,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(128,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(128,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(256,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.Conv2D(512,(3,3),padding = 'same', activation = 'relu')(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Flatten()(x)\n        x = layers.Dense(4096,activation = 'relu')(x)\n        x = layers.Dense(4096,activation = 'relu')(x)\n        x = layers.Dense(classes, activation = 'softmax')(x) \n        model = models.Model(image_input,x)\n        return model\n```\n\n最后，根据VGG16的网络结构，大家可以自行尝试构建VGG19的网络结构。","slug":"feature_extractor/VGG","published":1,"updated":"2021-07-13T08:16:10.388Z","_id":"cknms8g6d000060uo8adu5pch","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习神经网络特征提取（二）\"><a href=\"#深度学习神经网络特征提取（二）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（二）\"></a>深度学习神经网络特征提取（二）</h2><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p>要构建<code>VGG16</code>特征提取网络，我们只需要了解：</p>\n<ul>\n<li>VGG16网络层数：VGG16,VGG19</li>\n</ul>\n<p>在本文中，根据实际的项目要求，构建了VGG16网络，相对于ResNet网络较为简单，整个网络只是一个线性的结构，没有分支，所以在VGG的学习中只需要掌握基础的深度学习原理就可以构建出来VGG网络。<br><img src=\"http://39.106.34.39:4567/v2-ea924e733676e0da534f677a97c98653_720w.jpg\" alt=\"VGG网络结构\"><br><img src=\"http://39.106.34.39:4567/2019101614532169.png\" alt=\"VGG16网络结构\"></p>\n<h3 id=\"构建VGG16网络结构\"><a href=\"#构建VGG16网络结构\" class=\"headerlink\" title=\"构建VGG16网络结构\"></a>构建VGG16网络结构</h3><p>VGG16的网络有三种不同的层构成，分别是卷积、池化和全连接，具体的运行方式：</p>\n<ul>\n<li>输入一张尺寸为（224，224，3）的图片</li>\n<li>两次(3,3)卷积，层数64，输出为(224,224,64)，(2，2)最大池化，输出(112,112,64)。</li>\n<li>两次(3,3)卷积，层数128，输出为(112,112,128)，(2，2)最大池化，输出(56,56,64)。</li>\n<li>三次(3,3)卷积，层数256，输出为(56,56,64)，(2，2)最大池化，输出(28,28,64)。</li>\n<li>三次(3,3)卷积，层数512，输出为(28,28,64)，(2，2)最大池化，输出(14,14,64)。</li>\n<li>三次(3,3)卷积，层数512，输出为(14,14,64)，(2，2)最大池化，输出(7,7,64)。</li>\n<li>对结果进行平铺，接上两层4096的全连接层</li>\n<li>最后全连接进行分类</li>\n</ul>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">get_VGG16_model</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">,</span>classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        image_input <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape <span class=\"token operator\">=</span> input_shape<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>image_input<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>strides <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>activation <span class=\"token operator\">=</span> <span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> <span class=\"token string\">'softmax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> \n        model <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">(</span>image_input<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> model</code></pre>\n<p>最后，根据VGG16的网络结构，大家可以自行尝试构建VGG19的网络结构。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习神经网络特征提取（二）\"><a href=\"#深度学习神经网络特征提取（二）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（二）\"></a>深度学习神经网络特征提取（二）</h2><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p>要构建<code>VGG16</code>特征提取网络，我们只需要了解：</p>\n<ul>\n<li>VGG16网络层数：VGG16,VGG19</li>\n</ul>\n<p>在本文中，根据实际的项目要求，构建了VGG16网络，相对于ResNet网络较为简单，整个网络只是一个线性的结构，没有分支，所以在VGG的学习中只需要掌握基础的深度学习原理就可以构建出来VGG网络。<br><img src=\"http://39.106.34.39:4567/v2-ea924e733676e0da534f677a97c98653_720w.jpg\" alt=\"VGG网络结构\"><br><img src=\"http://39.106.34.39:4567/2019101614532169.png\" alt=\"VGG16网络结构\"></p>\n<h3 id=\"构建VGG16网络结构\"><a href=\"#构建VGG16网络结构\" class=\"headerlink\" title=\"构建VGG16网络结构\"></a>构建VGG16网络结构</h3><p>VGG16的网络有三种不同的层构成，分别是卷积、池化和全连接，具体的运行方式：</p>\n<ul>\n<li>输入一张尺寸为（224，224，3）的图片</li>\n<li>两次(3,3)卷积，层数64，输出为(224,224,64)，(2，2)最大池化，输出(112,112,64)。</li>\n<li>两次(3,3)卷积，层数128，输出为(112,112,128)，(2，2)最大池化，输出(56,56,64)。</li>\n<li>三次(3,3)卷积，层数256，输出为(56,56,64)，(2，2)最大池化，输出(28,28,64)。</li>\n<li>三次(3,3)卷积，层数512，输出为(28,28,64)，(2，2)最大池化，输出(14,14,64)。</li>\n<li>三次(3,3)卷积，层数512，输出为(14,14,64)，(2，2)最大池化，输出(7,7,64)。</li>\n<li>对结果进行平铺，接上两层4096的全连接层</li>\n<li>最后全连接进行分类</li>\n</ul>\n<p>代码如下：</p>\n<pre><code class=\"python\">    def get_VGG16_model(input_shape,classes):\n        image_input = Input(shape = input_shape)\n\n        x = layers.Conv2D(64,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(image_input)\n        x = layers.Conv2D(64,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(128,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(128,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(256,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(256,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(256,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.Conv2D(512,(3,3),padding = &#39;same&#39;, activation = &#39;relu&#39;)(x)\n        x = layers.MaxPooling2D((2,2),strides =(2,2))(x)\n\n        x = layers.Flatten()(x)\n        x = layers.Dense(4096,activation = &#39;relu&#39;)(x)\n        x = layers.Dense(4096,activation = &#39;relu&#39;)(x)\n        x = layers.Dense(classes, activation = &#39;softmax&#39;)(x) \n        model = models.Model(image_input,x)\n        return model</code></pre>\n<p>最后，根据VGG16的网络结构，大家可以自行尝试构建VGG19的网络结构。</p>\n"},{"title":"SSD","date":"2021-04-19T01:42:12.000Z","top":true,"cover":true,"author":"Fanrencli","_content":" \n## 深度学习之目标检测SSD\n\n### What is SSD?\n\n关于目标检测算法，当下已经有很多优秀的开源算法，其中算法主要分为两类：one-stage 和 two-stage。本次介绍的SSD算法就是one-stage算法的一种。主要的工作流程就是在利用主流的特征提取网络提取特征后，根据特征维度在图片上的不同位置进行密集采样，每个采样点都包含不同尺度和长宽比的`先验框`，然后对不同的先验框中的物体种类进行预测和相对于预测框位置进行回归，速度较快。\n但是针对密集采样，由于采样点较多，且可能多数点都不存在目标，所以容易导致正负样本不平衡，从而使得训练难度上升。\n\n### 主干网络结构简介\n\n针对SSD算法，其中主要利用的是`VGG16`作为主干特征提取网络，并且将`VGG16`中的`FC6`和`FC7`两层转换为卷积层，去掉所有的丢弃层和`FC8`层，并增加`Conv8`和`Conv9`。由于之前文章中已经介绍过`VGG16`，所以此处不再重复介绍。\n本文此次以`SSD300`为例，介绍`SSD`算法，网络结构如下：\n![SSD网络结构](http://39.106.34.39:4567/20190427212254620.png)\n![SSD网络结构](http://39.106.34.39:4567/20190427212220602.png)\n\n网络处理流程：\n- 输入图片首先resize到300x300大小的图片\n- 2次（3，3）卷积，1次（2，2）池化\n- 2次（3，3）卷积，1次（2，2）池化\n- 3次（3，3）卷积，1次（2，2）池化\n- 3次（3，3）卷积，1次（2，2）池化\n- 3次（3，3）卷积，1次（2，2）池化\n- 1次（3，3）卷积，1次（1，1）卷积\n- 1次（1，1）卷积，1次（3，3）卷积，步长2\n- 1次（1，1）卷积，1次（3，3）卷积，步长2\n- 1次（1，1）卷积，1次（3，3）卷积，padding = vaild\n- 1次（1，1）卷积，1次（3，3）卷积，padding = vaild\n\n代码如下：\n```python\ndef VGG16(input_tensor):\n    net = {} \n    # Block 1\n    net['input'] = input_tensor\n    # 300,300,3 -> 150,150,64\n    net['conv1_1'] = Conv2D(64, kernel_size=(3,3), activation='relu', padding='same', name='conv1_1')(net['input'])\n    net['conv1_2'] = Conv2D(64, kernel_size=(3,3), activation='relu', padding='same', name='conv1_2')(net['conv1_1'])\n    net['pool1'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool1')(net['conv1_2'])\n    # Block 2\n    # 150,150,64 -> 75,75,128\n    net['conv2_1'] = Conv2D(128, kernel_size=(3,3), activation='relu', padding='same', name='conv2_1')(net['pool1'])\n    net['conv2_2'] = Conv2D(128, kernel_size=(3,3), activation='relu', padding='same', name='conv2_2')(net['conv2_1'])\n    net['pool2'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool2')(net['conv2_2'])\n    # Block 3\n    # 75,75,128 -> 38,38,256\n    net['conv3_1'] = Conv2D(256, kernel_size=(3,3), activation='relu', padding='same', name='conv3_1')(net['pool2'])\n    net['conv3_2'] = Conv2D(256, kernel_size=(3,3), activation='relu', padding='same', name='conv3_2')(net['conv3_1'])\n    net['conv3_3'] = Conv2D(256, kernel_size=(3,3), activation='relu', padding='same', name='conv3_3')(net['conv3_2'])\n    net['pool3'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool3')(net['conv3_3'])\n    # Block 4\n    # 38,38,256 -> 19,19,512\n    net['conv4_1'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv4_1')(net['pool3'])\n    net['conv4_2'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv4_2')(net['conv4_1'])\n    net['conv4_3'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv4_3')(net['conv4_2'])\n    net['pool4'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool4')(net['conv4_3'])\n    # Block 5\n    # 19,19,512 -> 19,19,512\n    net['conv5_1'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv5_1')(net['pool4'])\n    net['conv5_2'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv5_2')(net['conv5_1'])\n    net['conv5_3'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv5_3')(net['conv5_2'])\n    net['pool5'] = MaxPooling2D((3, 3), strides=(1, 1), padding='same', name='pool5')(net['conv5_3'])\n    # FC6\n    # 19,19,512 -> 19,19,1024\n    net['fc6'] = Conv2D(1024, kernel_size=(3,3), dilation_rate=(6, 6), activation='relu', padding='same', name='fc6')(net['pool5'])\n\n    # x = Dropout(0.5, name='drop6')(x)\n    # FC7\n    # 19,19,1024 -> 19,19,1024\n    net['fc7'] = Conv2D(1024, kernel_size=(1,1), activation='relu', padding='same', name='fc7')(net['fc6'])\n\n    # x = Dropout(0.5, name='drop7')(x)\n    # Block 6\n    # 19,19,512 -> 10,10,512\n    net['conv6_1'] = Conv2D(256, kernel_size=(1,1), activation='relu', padding='same', name='conv6_1')(net['fc7'])\n    net['conv6_2'] = ZeroPadding2D(padding=((1, 1), (1, 1)), name='conv6_padding')(net['conv6_1'])\n    net['conv6_2'] = Conv2D(512, kernel_size=(3,3), strides=(2, 2), activation='relu', name='conv6_2')(net['conv6_2'])\n\n    # Block 7\n    # 10,10,512 -> 5,5,256\n    net['conv7_1'] = Conv2D(128, kernel_size=(1,1), activation='relu', padding='same',  name='conv7_1')(net['conv6_2'])\n    net['conv7_2'] = ZeroPadding2D(padding=((1, 1), (1, 1)), name='conv7_padding')(net['conv7_1'])\n    net['conv7_2'] = Conv2D(256, kernel_size=(3,3), strides=(2, 2), activation='relu', padding='valid', name='conv7_2')(net['conv7_2'])\n    # Block 8\n    # 5,5,256 -> 3,3,256\n    net['conv8_1'] = Conv2D(128, kernel_size=(1,1), activation='relu', padding='same', name='conv8_1')(net['conv7_2'])\n    net['conv8_2'] = Conv2D(256, kernel_size=(3,3), strides=(1, 1), activation='relu', padding='valid', name='conv8_2')(net['conv8_1'])\n\n    # Block 9\n    # 3,3,256 -> 1,1,256\n    net['conv9_1'] = Conv2D(128, kernel_size=(1,1), activation='relu', padding='same', name='conv9_1')(net['conv8_2'])\n    net['conv9_2'] = Conv2D(256, kernel_size=(3,3), strides=(1, 1), activation='relu', padding='valid', name='conv9_2')(net['conv9_1'])\n    return net\n\n```\n\n### 构建预测值\n\nSSD网络的最后预测值主要包含三个部分：\n- net{'mbox_loc'}：先验框的预期位置——包含目标的先验框相对于其匹配的真实框的中心xy位移和长宽缩放比\n- net{'mbox_conf'}：先验框中的目标类别——one-hot编码后softmax进行分类\n- net{'mbox_priorbox'}：先验框的原始位置以及variances（用于预测框解码或编码）——这部分不进行训练，只作为预测结果的辅助使用\n其中按照SSD300的输入大小，先验框的数量为`8732`个。\n代码如下：\n```python\ndef SSD300(input_shape, num_classes=21):\n    # 300,300,3\n    input_tensor = Input(shape=input_shape)\n    img_size = (input_shape[1], input_shape[0])\n\n    # SSD结构,net字典\n    net = VGG16(input_tensor)\n    #-----------------------将提取到的主干特征进行处理---------------------------#\n    # 对conv4_3进行处理 38,38,512\n    net['conv4_3_norm'] = Normalize(20, name='conv4_3_norm')(net['conv4_3'])\n    num_priors = 4\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    net['conv4_3_norm_mbox_loc'] = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same', name='conv4_3_norm_mbox_loc')(net['conv4_3_norm'])\n    net['conv4_3_norm_mbox_loc_flat'] = Flatten(name='conv4_3_norm_mbox_loc_flat')(net['conv4_3_norm_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    net['conv4_3_norm_mbox_conf'] = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv4_3_norm_mbox_conf')(net['conv4_3_norm'])\n    net['conv4_3_norm_mbox_conf_flat'] = Flatten(name='conv4_3_norm_mbox_conf_flat')(net['conv4_3_norm_mbox_conf'])\n    priorbox = PriorBox(img_size, 30.0,max_size = 60.0, aspect_ratios=[2],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv4_3_norm_mbox_priorbox')\n    net['conv4_3_norm_mbox_priorbox'] = priorbox(net['conv4_3_norm'])\n    \n    # 对fc7层进行处理 \n    num_priors = 6\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    net['fc7_mbox_loc'] = Conv2D(num_priors * 4, kernel_size=(3,3),padding='same',name='fc7_mbox_loc')(net['fc7'])\n    net['fc7_mbox_loc_flat'] = Flatten(name='fc7_mbox_loc_flat')(net['fc7_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    net['fc7_mbox_conf'] = Conv2D(num_priors * num_classes, kernel_size=(3,3),padding='same',name='fc7_mbox_conf')(net['fc7'])\n    net['fc7_mbox_conf_flat'] = Flatten(name='fc7_mbox_conf_flat')(net['fc7_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 60.0, max_size=111.0, aspect_ratios=[2, 3],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='fc7_mbox_priorbox')\n    net['fc7_mbox_priorbox'] = priorbox(net['fc7'])\n\n    # 对conv6_2进行处理\n    num_priors = 6\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv6_2_mbox_loc')(net['conv6_2'])\n    net['conv6_2_mbox_loc'] = x\n    net['conv6_2_mbox_loc_flat'] = Flatten(name='conv6_2_mbox_loc_flat')(net['conv6_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv6_2_mbox_conf')(net['conv6_2'])\n    net['conv6_2_mbox_conf'] = x\n    net['conv6_2_mbox_conf_flat'] = Flatten(name='conv6_2_mbox_conf_flat')(net['conv6_2_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 111.0, max_size=162.0, aspect_ratios=[2, 3],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv6_2_mbox_priorbox')\n    net['conv6_2_mbox_priorbox'] = priorbox(net['conv6_2'])\n\n    # 对conv7_2进行处理\n    num_priors = 6\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv7_2_mbox_loc')(net['conv7_2'])\n    net['conv7_2_mbox_loc'] = x\n    net['conv7_2_mbox_loc_flat'] = Flatten(name='conv7_2_mbox_loc_flat')(net['conv7_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv7_2_mbox_conf')(net['conv7_2'])\n    net['conv7_2_mbox_conf'] = x\n    net['conv7_2_mbox_conf_flat'] = Flatten(name='conv7_2_mbox_conf_flat')(net['conv7_2_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 162.0, max_size=213.0, aspect_ratios=[2, 3],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv7_2_mbox_priorbox')\n    net['conv7_2_mbox_priorbox'] = priorbox(net['conv7_2'])\n\n    # 对conv8_2进行处理\n    num_priors = 4\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv8_2_mbox_loc')(net['conv8_2'])\n    net['conv8_2_mbox_loc'] = x\n    net['conv8_2_mbox_loc_flat'] = Flatten(name='conv8_2_mbox_loc_flat')(net['conv8_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv8_2_mbox_conf')(net['conv8_2'])\n    net['conv8_2_mbox_conf'] = x\n    net['conv8_2_mbox_conf_flat'] = Flatten(name='conv8_2_mbox_conf_flat')(net['conv8_2_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 213.0, max_size=264.0, aspect_ratios=[2],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv8_2_mbox_priorbox')\n    net['conv8_2_mbox_priorbox'] = priorbox(net['conv8_2'])\n\n    # 对conv9_2进行处理\n    num_priors = 4\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv9_2_mbox_loc')(net['conv9_2'])\n    net['conv9_2_mbox_loc'] = x\n    net['conv9_2_mbox_loc_flat'] = Flatten(name='conv9_2_mbox_loc_flat')(net['conv9_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv9_2_mbox_conf')(net['conv9_2'])\n    net['conv9_2_mbox_conf'] = x\n    net['conv9_2_mbox_conf_flat'] = Flatten(name='conv9_2_mbox_conf_flat')(net['conv9_2_mbox_conf'])\n    \n    priorbox = PriorBox(img_size, 264.0, max_size=315.0, aspect_ratios=[2],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv9_2_mbox_priorbox')\n\n    net['conv9_2_mbox_priorbox'] = priorbox(net['conv9_2'])\n\n    # 将所有结果进行堆叠\n    net['mbox_loc'] = concatenate([net['conv4_3_norm_mbox_loc_flat'],\n                             net['fc7_mbox_loc_flat'],\n                             net['conv6_2_mbox_loc_flat'],\n                             net['conv7_2_mbox_loc_flat'],\n                             net['conv8_2_mbox_loc_flat'],\n                             net['conv9_2_mbox_loc_flat']],\n                            axis=1, name='mbox_loc')\n    net['mbox_conf'] = concatenate([net['conv4_3_norm_mbox_conf_flat'],\n                              net['fc7_mbox_conf_flat'],\n                              net['conv6_2_mbox_conf_flat'],\n                              net['conv7_2_mbox_conf_flat'],\n                              net['conv8_2_mbox_conf_flat'],\n                              net['conv9_2_mbox_conf_flat']],\n                             axis=1, name='mbox_conf')\n    # 先验框的位置和辅助变量\n    net['mbox_priorbox'] = concatenate([net['conv4_3_norm_mbox_priorbox'],\n                                  net['fc7_mbox_priorbox'],\n                                  net['conv6_2_mbox_priorbox'],\n                                  net['conv7_2_mbox_priorbox'],\n                                  net['conv8_2_mbox_priorbox'],\n                                  net['conv9_2_mbox_priorbox']],\n                                  axis=1, name='mbox_priorbox')\n\n    if hasattr(net['mbox_loc'], '_keras_shape'):\n        num_boxes = net['mbox_loc']._keras_shape[-1] // 4\n    elif hasattr(net['mbox_loc'], 'int_shape'):\n        num_boxes = K.int_shape(net['mbox_loc'])[-1] // 4\n    # 预期位置\n    net['mbox_loc'] = Reshape((num_boxes, 4),name='mbox_loc_final')(net['mbox_loc'])\n    # 分类结果\n    net['mbox_conf'] = Reshape((num_boxes, num_classes),name='mbox_conf_logits')(net['mbox_conf'])\n    net['mbox_conf'] = Activation('softmax',name='mbox_conf_final')(net['mbox_conf'])\n\n    net['predictions'] = concatenate([net['mbox_loc'],\n                               net['mbox_conf'],\n                               net['mbox_priorbox']],\n                               axis=2, name='predictions')\n    print(net['predictions'])\n    model = Model(net['input'], net['predictions'])\n    return model\n```\n\n### 先验框编码与解码\n\n针对先验框的编码过程，即计算net{'mbox_loc'}——先验框的预期位置。\n- 找到与真实框重合度高于某个阈值（如0.5）的所有先验框\n- 根据先验框匹配的真实框进行编码得到预期位置\n- 然后根据one-hot编码，将目标类别进行编码\n- 最后的先验框原始位置和variances值不需要进行提取，只添加一个是否包含物体的判断值即可，用于loss计算\n\n```python\n    def encode_box(self, box, return_iou=True):\n        iou = self.iou(box)\n        encoded_box = np.zeros((self.num_priors, 4 + return_iou))\n\n        # 找到每一个真实框，重合程度较高的先验框\n        assign_mask = iou > self.overlap_threshold\n        if not assign_mask.any():\n            assign_mask[iou.argmax()] = True\n        if return_iou:\n            encoded_box[:, -1][assign_mask] = iou[assign_mask]\n        \n        # 找到对应的先验框\n        assigned_priors = self.priors[assign_mask]\n        # 逆向编码，将真实框转化为ssd预测结果的格式\n\n        # 先计算真实框的中心与长宽\n        box_center = 0.5 * (box[:2] + box[2:])\n        box_wh = box[2:] - box[:2]\n        # 再计算重合度较高的先验框的中心与长宽\n        assigned_priors_center = 0.5 * (assigned_priors[:, :2] +\n                                        assigned_priors[:, 2:4])\n        assigned_priors_wh = (assigned_priors[:, 2:4] -\n                                assigned_priors[:, :2])\n        \n        # 逆向求取ssd应该有的预测结果\n        encoded_box[:, :2][assign_mask] = box_center - assigned_priors_center\n        encoded_box[:, :2][assign_mask] /= assigned_priors_wh\n        # 除以0.1\n        encoded_box[:, :2][assign_mask] /= assigned_priors[:, -4:-2]\n\n        encoded_box[:, 2:4][assign_mask] = np.log(box_wh / assigned_priors_wh)\n        # 除以0.2\n        encoded_box[:, 2:4][assign_mask] /= assigned_priors[:, -2:]\n        return encoded_box.ravel()\n    def assign_boxes(self, boxes):\n        #---------------------------------------------------#\n        #   assignment分为3个部分\n        #   :4      的内容为网络应该有的回归预测结果\n        #   4:-8    的内容为先验框所对应的种类，默认为背景\n        #   -8      的内容为当前先验框是否包含目标\n        #   -7:     无意义\n        #---------------------------------------------------#\n        assignment = np.zeros((self.num_priors, 4 + self.num_classes + 8))\n        assignment[:, 4] = 1.0\n        if len(boxes) == 0:\n            return assignment\n\n        # 对每一个真实框都进行iou计算\n        encoded_boxes = np.apply_along_axis(self.encode_box, 1, boxes[:, :4])\n        #---------------------------------------------------#\n        #   在reshape后，获得的encoded_boxes的shape为：\n        #   [num_true_box, num_priors, 4+1]\n        #   4是编码后的结果，1为iou\n        #---------------------------------------------------#\n        encoded_boxes = encoded_boxes.reshape(-1, self.num_priors, 5)\n        \n        #---------------------------------------------------#\n        #   [num_priors]求取每一个先验框重合度最大的真实框\n        #---------------------------------------------------#\n        best_iou = encoded_boxes[:, :, -1].max(axis=0)\n        best_iou_idx = encoded_boxes[:, :, -1].argmax(axis=0)\n        best_iou_mask = best_iou > 0\n        best_iou_idx = best_iou_idx[best_iou_mask]\n        \n        #---------------------------------------------------#\n        #   计算一共有多少先验框满足需求\n        #---------------------------------------------------#\n        assign_num = len(best_iou_idx)\n\n        # 将编码后的真实框取出\n        encoded_boxes = encoded_boxes[:, best_iou_mask, :]\n        assignment[:, :4][best_iou_mask] = encoded_boxes[best_iou_idx,np.arange(assign_num),:4]\n        #----------------------------------------------------------#\n        #   4代表为背景的概率，设定为0，因为这些先验框有对应的物体\n        #----------------------------------------------------------#\n        assignment[:, 4][best_iou_mask] = 0\n        assignment[:, 5:-8][best_iou_mask] = boxes[best_iou_idx, 4:]\n        #----------------------------------------------------------#\n        #   -8表示先验框是否有对应的物体\n        #----------------------------------------------------------#\n        assignment[:, -8][best_iou_mask] = 1\n        # 通过assign_boxes我们就获得了，输入进来的这张图片，应该有的预测结果是什么样子的\n        return assignment\n```\n\n### loss计算\n\n在loss计算过程中，由于SSD可能导致正负样本的不平衡而增加的训练难度，所以一般在计算loss时，通常取1：3的正负样本比例，同意注意:预测值的前四位是预期位置信息，第五位到倒数第八位是类别信息，后面是先验框的原始位置信息。\n```python\nclass MultiboxLoss(object):\n    def __init__(self, num_classes, alpha=1.0, neg_pos_ratio=3.0,\n                 background_label_id=0, negatives_for_hard=100.0):\n        self.num_classes = num_classes\n        self.alpha = alpha\n        self.neg_pos_ratio = neg_pos_ratio\n        if background_label_id != 0:\n            raise Exception('Only 0 as background label id is supported')\n        self.background_label_id = background_label_id\n        self.negatives_for_hard = negatives_for_hard\n\n    def _l1_smooth_loss(self, y_true, y_pred):\n        abs_loss = tf.abs(y_true - y_pred)\n        sq_loss = 0.5 * (y_true - y_pred)**2\n        l1_loss = tf.where(tf.less(abs_loss, 1.0), sq_loss, abs_loss - 0.5)\n        return tf.reduce_sum(l1_loss, -1)\n\n    def _softmax_loss(self, y_true, y_pred):\n        y_pred = tf.maximum(tf.minimum(y_pred, 1 - 1e-15), 1e-15)\n        softmax_loss = -tf.reduce_sum(y_true * tf.log(y_pred),\n                                      axis=-1)\n        return softmax_loss\n\n    def compute_loss(self, y_true, y_pred):\n        batch_size = tf.shape(y_true)[0]\n        num_boxes = tf.to_float(tf.shape(y_true)[1])\n\n        # 计算所有的loss\n        # 分类的loss\n        # batch_size,8732,21 -> batch_size,8732\n        conf_loss = self._softmax_loss(y_true[:, :, 4:-8],\n                                       y_pred[:, :, 4:-8])\n        # 框的位置的loss\n        # batch_size,8732,4 -> batch_size,8732\n        loc_loss = self._l1_smooth_loss(y_true[:, :, :4],\n                                        y_pred[:, :, :4])\n\n        # 获取所有的正标签的loss\n        # 每一张图的pos的个数\n        num_pos = tf.reduce_sum(y_true[:, :, -8], axis=-1)\n        # 每一张图的pos_loc_loss\n        pos_loc_loss = tf.reduce_sum(loc_loss * y_true[:, :, -8],\n                                     axis=1)\n        # 每一张图的pos_conf_loss\n        pos_conf_loss = tf.reduce_sum(conf_loss * y_true[:, :, -8],\n                                      axis=1)\n\n        # 获取一定的负样本\n        num_neg = tf.minimum(self.neg_pos_ratio * num_pos,\n                             num_boxes - num_pos)\n\n        # 找到了哪些值是大于0的\n        pos_num_neg_mask = tf.greater(num_neg, 0)\n        # 获得一个1.0\n        has_min = tf.to_float(tf.reduce_any(pos_num_neg_mask))\n        num_neg = tf.concat( axis=0,values=[num_neg,\n                                [(1 - has_min) * self.negatives_for_hard]])\n        # 求平均每个图片要取多少个负样本\n        num_neg_batch = tf.reduce_mean(tf.boolean_mask(num_neg,\n                                                      tf.greater(num_neg, 0)))\n        num_neg_batch = tf.to_int32(num_neg_batch)\n\n        # conf的起始\n        confs_start = 4 + self.background_label_id + 1\n        # conf的结束\n        confs_end = confs_start + self.num_classes - 1\n\n        # 找到实际上在该位置不应该有预测结果的框，求他们最大的置信度。\n        max_confs = tf.reduce_max(y_pred[:, :, confs_start:confs_end],\n                                  axis=2)\n        \n        # 取top_k个置信度，作为负样本\n        _, indices = tf.nn.top_k(max_confs * (1 - y_true[:, :, -8]),\n                                 k=num_neg_batch)\n\n        # 找到其在1维上的索引\n        batch_idx = tf.expand_dims(tf.range(0, batch_size), 1)\n        batch_idx = tf.tile(batch_idx, (1, num_neg_batch))\n        full_indices = (tf.reshape(batch_idx, [-1]) * tf.to_int32(num_boxes) +\n                        tf.reshape(indices, [-1]))\n        \n\n        neg_conf_loss = tf.gather(tf.reshape(conf_loss, [-1]),\n                                  full_indices)\n        neg_conf_loss = tf.reshape(neg_conf_loss,\n                                   [batch_size, num_neg_batch])\n        neg_conf_loss = tf.reduce_sum(neg_conf_loss, axis=1)\n\n        # 求loss总和\n        total_loss = K.sum(pos_conf_loss + neg_conf_loss)/K.cast(batch_size,K.dtype(pos_conf_loss))\n\n        total_loss +=  K.sum(self.alpha * pos_loc_loss)/K.cast(batch_size,K.dtype(pos_loc_loss))\n        return total_loss\n\n```\n\n至此，所有关于SSD的关键部分就讲解完了，后续会陆续更新其他算法。","source":"_posts/object_detector/SSD.md","raw":"---\ntitle: SSD\ndate: 2021-04-19 09:42:12\ntop: true\ncover: true\ncategories:\n- Deep Learning\ntags:\n- object detection\n- SSD\n- Fanrencli\nauthor: Fanrencli\n---\n \n## 深度学习之目标检测SSD\n\n### What is SSD?\n\n关于目标检测算法，当下已经有很多优秀的开源算法，其中算法主要分为两类：one-stage 和 two-stage。本次介绍的SSD算法就是one-stage算法的一种。主要的工作流程就是在利用主流的特征提取网络提取特征后，根据特征维度在图片上的不同位置进行密集采样，每个采样点都包含不同尺度和长宽比的`先验框`，然后对不同的先验框中的物体种类进行预测和相对于预测框位置进行回归，速度较快。\n但是针对密集采样，由于采样点较多，且可能多数点都不存在目标，所以容易导致正负样本不平衡，从而使得训练难度上升。\n\n### 主干网络结构简介\n\n针对SSD算法，其中主要利用的是`VGG16`作为主干特征提取网络，并且将`VGG16`中的`FC6`和`FC7`两层转换为卷积层，去掉所有的丢弃层和`FC8`层，并增加`Conv8`和`Conv9`。由于之前文章中已经介绍过`VGG16`，所以此处不再重复介绍。\n本文此次以`SSD300`为例，介绍`SSD`算法，网络结构如下：\n![SSD网络结构](http://39.106.34.39:4567/20190427212254620.png)\n![SSD网络结构](http://39.106.34.39:4567/20190427212220602.png)\n\n网络处理流程：\n- 输入图片首先resize到300x300大小的图片\n- 2次（3，3）卷积，1次（2，2）池化\n- 2次（3，3）卷积，1次（2，2）池化\n- 3次（3，3）卷积，1次（2，2）池化\n- 3次（3，3）卷积，1次（2，2）池化\n- 3次（3，3）卷积，1次（2，2）池化\n- 1次（3，3）卷积，1次（1，1）卷积\n- 1次（1，1）卷积，1次（3，3）卷积，步长2\n- 1次（1，1）卷积，1次（3，3）卷积，步长2\n- 1次（1，1）卷积，1次（3，3）卷积，padding = vaild\n- 1次（1，1）卷积，1次（3，3）卷积，padding = vaild\n\n代码如下：\n```python\ndef VGG16(input_tensor):\n    net = {} \n    # Block 1\n    net['input'] = input_tensor\n    # 300,300,3 -> 150,150,64\n    net['conv1_1'] = Conv2D(64, kernel_size=(3,3), activation='relu', padding='same', name='conv1_1')(net['input'])\n    net['conv1_2'] = Conv2D(64, kernel_size=(3,3), activation='relu', padding='same', name='conv1_2')(net['conv1_1'])\n    net['pool1'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool1')(net['conv1_2'])\n    # Block 2\n    # 150,150,64 -> 75,75,128\n    net['conv2_1'] = Conv2D(128, kernel_size=(3,3), activation='relu', padding='same', name='conv2_1')(net['pool1'])\n    net['conv2_2'] = Conv2D(128, kernel_size=(3,3), activation='relu', padding='same', name='conv2_2')(net['conv2_1'])\n    net['pool2'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool2')(net['conv2_2'])\n    # Block 3\n    # 75,75,128 -> 38,38,256\n    net['conv3_1'] = Conv2D(256, kernel_size=(3,3), activation='relu', padding='same', name='conv3_1')(net['pool2'])\n    net['conv3_2'] = Conv2D(256, kernel_size=(3,3), activation='relu', padding='same', name='conv3_2')(net['conv3_1'])\n    net['conv3_3'] = Conv2D(256, kernel_size=(3,3), activation='relu', padding='same', name='conv3_3')(net['conv3_2'])\n    net['pool3'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool3')(net['conv3_3'])\n    # Block 4\n    # 38,38,256 -> 19,19,512\n    net['conv4_1'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv4_1')(net['pool3'])\n    net['conv4_2'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv4_2')(net['conv4_1'])\n    net['conv4_3'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv4_3')(net['conv4_2'])\n    net['pool4'] = MaxPooling2D((2, 2), strides=(2, 2), padding='same', name='pool4')(net['conv4_3'])\n    # Block 5\n    # 19,19,512 -> 19,19,512\n    net['conv5_1'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv5_1')(net['pool4'])\n    net['conv5_2'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv5_2')(net['conv5_1'])\n    net['conv5_3'] = Conv2D(512, kernel_size=(3,3), activation='relu', padding='same', name='conv5_3')(net['conv5_2'])\n    net['pool5'] = MaxPooling2D((3, 3), strides=(1, 1), padding='same', name='pool5')(net['conv5_3'])\n    # FC6\n    # 19,19,512 -> 19,19,1024\n    net['fc6'] = Conv2D(1024, kernel_size=(3,3), dilation_rate=(6, 6), activation='relu', padding='same', name='fc6')(net['pool5'])\n\n    # x = Dropout(0.5, name='drop6')(x)\n    # FC7\n    # 19,19,1024 -> 19,19,1024\n    net['fc7'] = Conv2D(1024, kernel_size=(1,1), activation='relu', padding='same', name='fc7')(net['fc6'])\n\n    # x = Dropout(0.5, name='drop7')(x)\n    # Block 6\n    # 19,19,512 -> 10,10,512\n    net['conv6_1'] = Conv2D(256, kernel_size=(1,1), activation='relu', padding='same', name='conv6_1')(net['fc7'])\n    net['conv6_2'] = ZeroPadding2D(padding=((1, 1), (1, 1)), name='conv6_padding')(net['conv6_1'])\n    net['conv6_2'] = Conv2D(512, kernel_size=(3,3), strides=(2, 2), activation='relu', name='conv6_2')(net['conv6_2'])\n\n    # Block 7\n    # 10,10,512 -> 5,5,256\n    net['conv7_1'] = Conv2D(128, kernel_size=(1,1), activation='relu', padding='same',  name='conv7_1')(net['conv6_2'])\n    net['conv7_2'] = ZeroPadding2D(padding=((1, 1), (1, 1)), name='conv7_padding')(net['conv7_1'])\n    net['conv7_2'] = Conv2D(256, kernel_size=(3,3), strides=(2, 2), activation='relu', padding='valid', name='conv7_2')(net['conv7_2'])\n    # Block 8\n    # 5,5,256 -> 3,3,256\n    net['conv8_1'] = Conv2D(128, kernel_size=(1,1), activation='relu', padding='same', name='conv8_1')(net['conv7_2'])\n    net['conv8_2'] = Conv2D(256, kernel_size=(3,3), strides=(1, 1), activation='relu', padding='valid', name='conv8_2')(net['conv8_1'])\n\n    # Block 9\n    # 3,3,256 -> 1,1,256\n    net['conv9_1'] = Conv2D(128, kernel_size=(1,1), activation='relu', padding='same', name='conv9_1')(net['conv8_2'])\n    net['conv9_2'] = Conv2D(256, kernel_size=(3,3), strides=(1, 1), activation='relu', padding='valid', name='conv9_2')(net['conv9_1'])\n    return net\n\n```\n\n### 构建预测值\n\nSSD网络的最后预测值主要包含三个部分：\n- net{'mbox_loc'}：先验框的预期位置——包含目标的先验框相对于其匹配的真实框的中心xy位移和长宽缩放比\n- net{'mbox_conf'}：先验框中的目标类别——one-hot编码后softmax进行分类\n- net{'mbox_priorbox'}：先验框的原始位置以及variances（用于预测框解码或编码）——这部分不进行训练，只作为预测结果的辅助使用\n其中按照SSD300的输入大小，先验框的数量为`8732`个。\n代码如下：\n```python\ndef SSD300(input_shape, num_classes=21):\n    # 300,300,3\n    input_tensor = Input(shape=input_shape)\n    img_size = (input_shape[1], input_shape[0])\n\n    # SSD结构,net字典\n    net = VGG16(input_tensor)\n    #-----------------------将提取到的主干特征进行处理---------------------------#\n    # 对conv4_3进行处理 38,38,512\n    net['conv4_3_norm'] = Normalize(20, name='conv4_3_norm')(net['conv4_3'])\n    num_priors = 4\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    net['conv4_3_norm_mbox_loc'] = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same', name='conv4_3_norm_mbox_loc')(net['conv4_3_norm'])\n    net['conv4_3_norm_mbox_loc_flat'] = Flatten(name='conv4_3_norm_mbox_loc_flat')(net['conv4_3_norm_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    net['conv4_3_norm_mbox_conf'] = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv4_3_norm_mbox_conf')(net['conv4_3_norm'])\n    net['conv4_3_norm_mbox_conf_flat'] = Flatten(name='conv4_3_norm_mbox_conf_flat')(net['conv4_3_norm_mbox_conf'])\n    priorbox = PriorBox(img_size, 30.0,max_size = 60.0, aspect_ratios=[2],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv4_3_norm_mbox_priorbox')\n    net['conv4_3_norm_mbox_priorbox'] = priorbox(net['conv4_3_norm'])\n    \n    # 对fc7层进行处理 \n    num_priors = 6\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    net['fc7_mbox_loc'] = Conv2D(num_priors * 4, kernel_size=(3,3),padding='same',name='fc7_mbox_loc')(net['fc7'])\n    net['fc7_mbox_loc_flat'] = Flatten(name='fc7_mbox_loc_flat')(net['fc7_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    net['fc7_mbox_conf'] = Conv2D(num_priors * num_classes, kernel_size=(3,3),padding='same',name='fc7_mbox_conf')(net['fc7'])\n    net['fc7_mbox_conf_flat'] = Flatten(name='fc7_mbox_conf_flat')(net['fc7_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 60.0, max_size=111.0, aspect_ratios=[2, 3],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='fc7_mbox_priorbox')\n    net['fc7_mbox_priorbox'] = priorbox(net['fc7'])\n\n    # 对conv6_2进行处理\n    num_priors = 6\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv6_2_mbox_loc')(net['conv6_2'])\n    net['conv6_2_mbox_loc'] = x\n    net['conv6_2_mbox_loc_flat'] = Flatten(name='conv6_2_mbox_loc_flat')(net['conv6_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv6_2_mbox_conf')(net['conv6_2'])\n    net['conv6_2_mbox_conf'] = x\n    net['conv6_2_mbox_conf_flat'] = Flatten(name='conv6_2_mbox_conf_flat')(net['conv6_2_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 111.0, max_size=162.0, aspect_ratios=[2, 3],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv6_2_mbox_priorbox')\n    net['conv6_2_mbox_priorbox'] = priorbox(net['conv6_2'])\n\n    # 对conv7_2进行处理\n    num_priors = 6\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv7_2_mbox_loc')(net['conv7_2'])\n    net['conv7_2_mbox_loc'] = x\n    net['conv7_2_mbox_loc_flat'] = Flatten(name='conv7_2_mbox_loc_flat')(net['conv7_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv7_2_mbox_conf')(net['conv7_2'])\n    net['conv7_2_mbox_conf'] = x\n    net['conv7_2_mbox_conf_flat'] = Flatten(name='conv7_2_mbox_conf_flat')(net['conv7_2_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 162.0, max_size=213.0, aspect_ratios=[2, 3],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv7_2_mbox_priorbox')\n    net['conv7_2_mbox_priorbox'] = priorbox(net['conv7_2'])\n\n    # 对conv8_2进行处理\n    num_priors = 4\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv8_2_mbox_loc')(net['conv8_2'])\n    net['conv8_2_mbox_loc'] = x\n    net['conv8_2_mbox_loc_flat'] = Flatten(name='conv8_2_mbox_loc_flat')(net['conv8_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv8_2_mbox_conf')(net['conv8_2'])\n    net['conv8_2_mbox_conf'] = x\n    net['conv8_2_mbox_conf_flat'] = Flatten(name='conv8_2_mbox_conf_flat')(net['conv8_2_mbox_conf'])\n\n    priorbox = PriorBox(img_size, 213.0, max_size=264.0, aspect_ratios=[2],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv8_2_mbox_priorbox')\n    net['conv8_2_mbox_priorbox'] = priorbox(net['conv8_2'])\n\n    # 对conv9_2进行处理\n    num_priors = 4\n    # 预测框的处理\n    # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n    x = Conv2D(num_priors * 4, kernel_size=(3,3), padding='same',name='conv9_2_mbox_loc')(net['conv9_2'])\n    net['conv9_2_mbox_loc'] = x\n    net['conv9_2_mbox_loc_flat'] = Flatten(name='conv9_2_mbox_loc_flat')(net['conv9_2_mbox_loc'])\n    # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n    x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding='same',name='conv9_2_mbox_conf')(net['conv9_2'])\n    net['conv9_2_mbox_conf'] = x\n    net['conv9_2_mbox_conf_flat'] = Flatten(name='conv9_2_mbox_conf_flat')(net['conv9_2_mbox_conf'])\n    \n    priorbox = PriorBox(img_size, 264.0, max_size=315.0, aspect_ratios=[2],\n                        variances=[0.1, 0.1, 0.2, 0.2],\n                        name='conv9_2_mbox_priorbox')\n\n    net['conv9_2_mbox_priorbox'] = priorbox(net['conv9_2'])\n\n    # 将所有结果进行堆叠\n    net['mbox_loc'] = concatenate([net['conv4_3_norm_mbox_loc_flat'],\n                             net['fc7_mbox_loc_flat'],\n                             net['conv6_2_mbox_loc_flat'],\n                             net['conv7_2_mbox_loc_flat'],\n                             net['conv8_2_mbox_loc_flat'],\n                             net['conv9_2_mbox_loc_flat']],\n                            axis=1, name='mbox_loc')\n    net['mbox_conf'] = concatenate([net['conv4_3_norm_mbox_conf_flat'],\n                              net['fc7_mbox_conf_flat'],\n                              net['conv6_2_mbox_conf_flat'],\n                              net['conv7_2_mbox_conf_flat'],\n                              net['conv8_2_mbox_conf_flat'],\n                              net['conv9_2_mbox_conf_flat']],\n                             axis=1, name='mbox_conf')\n    # 先验框的位置和辅助变量\n    net['mbox_priorbox'] = concatenate([net['conv4_3_norm_mbox_priorbox'],\n                                  net['fc7_mbox_priorbox'],\n                                  net['conv6_2_mbox_priorbox'],\n                                  net['conv7_2_mbox_priorbox'],\n                                  net['conv8_2_mbox_priorbox'],\n                                  net['conv9_2_mbox_priorbox']],\n                                  axis=1, name='mbox_priorbox')\n\n    if hasattr(net['mbox_loc'], '_keras_shape'):\n        num_boxes = net['mbox_loc']._keras_shape[-1] // 4\n    elif hasattr(net['mbox_loc'], 'int_shape'):\n        num_boxes = K.int_shape(net['mbox_loc'])[-1] // 4\n    # 预期位置\n    net['mbox_loc'] = Reshape((num_boxes, 4),name='mbox_loc_final')(net['mbox_loc'])\n    # 分类结果\n    net['mbox_conf'] = Reshape((num_boxes, num_classes),name='mbox_conf_logits')(net['mbox_conf'])\n    net['mbox_conf'] = Activation('softmax',name='mbox_conf_final')(net['mbox_conf'])\n\n    net['predictions'] = concatenate([net['mbox_loc'],\n                               net['mbox_conf'],\n                               net['mbox_priorbox']],\n                               axis=2, name='predictions')\n    print(net['predictions'])\n    model = Model(net['input'], net['predictions'])\n    return model\n```\n\n### 先验框编码与解码\n\n针对先验框的编码过程，即计算net{'mbox_loc'}——先验框的预期位置。\n- 找到与真实框重合度高于某个阈值（如0.5）的所有先验框\n- 根据先验框匹配的真实框进行编码得到预期位置\n- 然后根据one-hot编码，将目标类别进行编码\n- 最后的先验框原始位置和variances值不需要进行提取，只添加一个是否包含物体的判断值即可，用于loss计算\n\n```python\n    def encode_box(self, box, return_iou=True):\n        iou = self.iou(box)\n        encoded_box = np.zeros((self.num_priors, 4 + return_iou))\n\n        # 找到每一个真实框，重合程度较高的先验框\n        assign_mask = iou > self.overlap_threshold\n        if not assign_mask.any():\n            assign_mask[iou.argmax()] = True\n        if return_iou:\n            encoded_box[:, -1][assign_mask] = iou[assign_mask]\n        \n        # 找到对应的先验框\n        assigned_priors = self.priors[assign_mask]\n        # 逆向编码，将真实框转化为ssd预测结果的格式\n\n        # 先计算真实框的中心与长宽\n        box_center = 0.5 * (box[:2] + box[2:])\n        box_wh = box[2:] - box[:2]\n        # 再计算重合度较高的先验框的中心与长宽\n        assigned_priors_center = 0.5 * (assigned_priors[:, :2] +\n                                        assigned_priors[:, 2:4])\n        assigned_priors_wh = (assigned_priors[:, 2:4] -\n                                assigned_priors[:, :2])\n        \n        # 逆向求取ssd应该有的预测结果\n        encoded_box[:, :2][assign_mask] = box_center - assigned_priors_center\n        encoded_box[:, :2][assign_mask] /= assigned_priors_wh\n        # 除以0.1\n        encoded_box[:, :2][assign_mask] /= assigned_priors[:, -4:-2]\n\n        encoded_box[:, 2:4][assign_mask] = np.log(box_wh / assigned_priors_wh)\n        # 除以0.2\n        encoded_box[:, 2:4][assign_mask] /= assigned_priors[:, -2:]\n        return encoded_box.ravel()\n    def assign_boxes(self, boxes):\n        #---------------------------------------------------#\n        #   assignment分为3个部分\n        #   :4      的内容为网络应该有的回归预测结果\n        #   4:-8    的内容为先验框所对应的种类，默认为背景\n        #   -8      的内容为当前先验框是否包含目标\n        #   -7:     无意义\n        #---------------------------------------------------#\n        assignment = np.zeros((self.num_priors, 4 + self.num_classes + 8))\n        assignment[:, 4] = 1.0\n        if len(boxes) == 0:\n            return assignment\n\n        # 对每一个真实框都进行iou计算\n        encoded_boxes = np.apply_along_axis(self.encode_box, 1, boxes[:, :4])\n        #---------------------------------------------------#\n        #   在reshape后，获得的encoded_boxes的shape为：\n        #   [num_true_box, num_priors, 4+1]\n        #   4是编码后的结果，1为iou\n        #---------------------------------------------------#\n        encoded_boxes = encoded_boxes.reshape(-1, self.num_priors, 5)\n        \n        #---------------------------------------------------#\n        #   [num_priors]求取每一个先验框重合度最大的真实框\n        #---------------------------------------------------#\n        best_iou = encoded_boxes[:, :, -1].max(axis=0)\n        best_iou_idx = encoded_boxes[:, :, -1].argmax(axis=0)\n        best_iou_mask = best_iou > 0\n        best_iou_idx = best_iou_idx[best_iou_mask]\n        \n        #---------------------------------------------------#\n        #   计算一共有多少先验框满足需求\n        #---------------------------------------------------#\n        assign_num = len(best_iou_idx)\n\n        # 将编码后的真实框取出\n        encoded_boxes = encoded_boxes[:, best_iou_mask, :]\n        assignment[:, :4][best_iou_mask] = encoded_boxes[best_iou_idx,np.arange(assign_num),:4]\n        #----------------------------------------------------------#\n        #   4代表为背景的概率，设定为0，因为这些先验框有对应的物体\n        #----------------------------------------------------------#\n        assignment[:, 4][best_iou_mask] = 0\n        assignment[:, 5:-8][best_iou_mask] = boxes[best_iou_idx, 4:]\n        #----------------------------------------------------------#\n        #   -8表示先验框是否有对应的物体\n        #----------------------------------------------------------#\n        assignment[:, -8][best_iou_mask] = 1\n        # 通过assign_boxes我们就获得了，输入进来的这张图片，应该有的预测结果是什么样子的\n        return assignment\n```\n\n### loss计算\n\n在loss计算过程中，由于SSD可能导致正负样本的不平衡而增加的训练难度，所以一般在计算loss时，通常取1：3的正负样本比例，同意注意:预测值的前四位是预期位置信息，第五位到倒数第八位是类别信息，后面是先验框的原始位置信息。\n```python\nclass MultiboxLoss(object):\n    def __init__(self, num_classes, alpha=1.0, neg_pos_ratio=3.0,\n                 background_label_id=0, negatives_for_hard=100.0):\n        self.num_classes = num_classes\n        self.alpha = alpha\n        self.neg_pos_ratio = neg_pos_ratio\n        if background_label_id != 0:\n            raise Exception('Only 0 as background label id is supported')\n        self.background_label_id = background_label_id\n        self.negatives_for_hard = negatives_for_hard\n\n    def _l1_smooth_loss(self, y_true, y_pred):\n        abs_loss = tf.abs(y_true - y_pred)\n        sq_loss = 0.5 * (y_true - y_pred)**2\n        l1_loss = tf.where(tf.less(abs_loss, 1.0), sq_loss, abs_loss - 0.5)\n        return tf.reduce_sum(l1_loss, -1)\n\n    def _softmax_loss(self, y_true, y_pred):\n        y_pred = tf.maximum(tf.minimum(y_pred, 1 - 1e-15), 1e-15)\n        softmax_loss = -tf.reduce_sum(y_true * tf.log(y_pred),\n                                      axis=-1)\n        return softmax_loss\n\n    def compute_loss(self, y_true, y_pred):\n        batch_size = tf.shape(y_true)[0]\n        num_boxes = tf.to_float(tf.shape(y_true)[1])\n\n        # 计算所有的loss\n        # 分类的loss\n        # batch_size,8732,21 -> batch_size,8732\n        conf_loss = self._softmax_loss(y_true[:, :, 4:-8],\n                                       y_pred[:, :, 4:-8])\n        # 框的位置的loss\n        # batch_size,8732,4 -> batch_size,8732\n        loc_loss = self._l1_smooth_loss(y_true[:, :, :4],\n                                        y_pred[:, :, :4])\n\n        # 获取所有的正标签的loss\n        # 每一张图的pos的个数\n        num_pos = tf.reduce_sum(y_true[:, :, -8], axis=-1)\n        # 每一张图的pos_loc_loss\n        pos_loc_loss = tf.reduce_sum(loc_loss * y_true[:, :, -8],\n                                     axis=1)\n        # 每一张图的pos_conf_loss\n        pos_conf_loss = tf.reduce_sum(conf_loss * y_true[:, :, -8],\n                                      axis=1)\n\n        # 获取一定的负样本\n        num_neg = tf.minimum(self.neg_pos_ratio * num_pos,\n                             num_boxes - num_pos)\n\n        # 找到了哪些值是大于0的\n        pos_num_neg_mask = tf.greater(num_neg, 0)\n        # 获得一个1.0\n        has_min = tf.to_float(tf.reduce_any(pos_num_neg_mask))\n        num_neg = tf.concat( axis=0,values=[num_neg,\n                                [(1 - has_min) * self.negatives_for_hard]])\n        # 求平均每个图片要取多少个负样本\n        num_neg_batch = tf.reduce_mean(tf.boolean_mask(num_neg,\n                                                      tf.greater(num_neg, 0)))\n        num_neg_batch = tf.to_int32(num_neg_batch)\n\n        # conf的起始\n        confs_start = 4 + self.background_label_id + 1\n        # conf的结束\n        confs_end = confs_start + self.num_classes - 1\n\n        # 找到实际上在该位置不应该有预测结果的框，求他们最大的置信度。\n        max_confs = tf.reduce_max(y_pred[:, :, confs_start:confs_end],\n                                  axis=2)\n        \n        # 取top_k个置信度，作为负样本\n        _, indices = tf.nn.top_k(max_confs * (1 - y_true[:, :, -8]),\n                                 k=num_neg_batch)\n\n        # 找到其在1维上的索引\n        batch_idx = tf.expand_dims(tf.range(0, batch_size), 1)\n        batch_idx = tf.tile(batch_idx, (1, num_neg_batch))\n        full_indices = (tf.reshape(batch_idx, [-1]) * tf.to_int32(num_boxes) +\n                        tf.reshape(indices, [-1]))\n        \n\n        neg_conf_loss = tf.gather(tf.reshape(conf_loss, [-1]),\n                                  full_indices)\n        neg_conf_loss = tf.reshape(neg_conf_loss,\n                                   [batch_size, num_neg_batch])\n        neg_conf_loss = tf.reduce_sum(neg_conf_loss, axis=1)\n\n        # 求loss总和\n        total_loss = K.sum(pos_conf_loss + neg_conf_loss)/K.cast(batch_size,K.dtype(pos_conf_loss))\n\n        total_loss +=  K.sum(self.alpha * pos_loc_loss)/K.cast(batch_size,K.dtype(pos_loc_loss))\n        return total_loss\n\n```\n\n至此，所有关于SSD的关键部分就讲解完了，后续会陆续更新其他算法。","slug":"object_detector/SSD","published":1,"updated":"2021-07-13T08:16:18.307Z","_id":"ckno0pgzn0000kcuo0tqwfmi7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习之目标检测SSD\"><a href=\"#深度学习之目标检测SSD\" class=\"headerlink\" title=\"深度学习之目标检测SSD\"></a>深度学习之目标检测SSD</h2><h3 id=\"What-is-SSD\"><a href=\"#What-is-SSD\" class=\"headerlink\" title=\"What is SSD?\"></a>What is SSD?</h3><p>关于目标检测算法，当下已经有很多优秀的开源算法，其中算法主要分为两类：one-stage 和 two-stage。本次介绍的SSD算法就是one-stage算法的一种。主要的工作流程就是在利用主流的特征提取网络提取特征后，根据特征维度在图片上的不同位置进行密集采样，每个采样点都包含不同尺度和长宽比的<code>先验框</code>，然后对不同的先验框中的物体种类进行预测和相对于预测框位置进行回归，速度较快。<br>但是针对密集采样，由于采样点较多，且可能多数点都不存在目标，所以容易导致正负样本不平衡，从而使得训练难度上升。</p>\n<h3 id=\"主干网络结构简介\"><a href=\"#主干网络结构简介\" class=\"headerlink\" title=\"主干网络结构简介\"></a>主干网络结构简介</h3><p>针对SSD算法，其中主要利用的是<code>VGG16</code>作为主干特征提取网络，并且将<code>VGG16</code>中的<code>FC6</code>和<code>FC7</code>两层转换为卷积层，去掉所有的丢弃层和<code>FC8</code>层，并增加<code>Conv8</code>和<code>Conv9</code>。由于之前文章中已经介绍过<code>VGG16</code>，所以此处不再重复介绍。<br>本文此次以<code>SSD300</code>为例，介绍<code>SSD</code>算法，网络结构如下：<br><img src=\"http://39.106.34.39:4567/20190427212254620.png\" alt=\"SSD网络结构\"><br><img src=\"http://39.106.34.39:4567/20190427212220602.png\" alt=\"SSD网络结构\"></p>\n<p>网络处理流程：</p>\n<ul>\n<li>输入图片首先resize到300x300大小的图片</li>\n<li>2次（3，3）卷积，1次（2，2）池化</li>\n<li>2次（3，3）卷积，1次（2，2）池化</li>\n<li>3次（3，3）卷积，1次（2，2）池化</li>\n<li>3次（3，3）卷积，1次（2，2）池化</li>\n<li>3次（3，3）卷积，1次（2，2）池化</li>\n<li>1次（3，3）卷积，1次（1，1）卷积</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，步长2</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，步长2</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，padding = vaild</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，padding = vaild</li>\n</ul>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">VGG16</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    net <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \n    <span class=\"token comment\" spellcheck=\"true\"># Block 1</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input_tensor\n    <span class=\"token comment\" spellcheck=\"true\"># 300,300,3 -> 150,150,64</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv1_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv1_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv1_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv1_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv1_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'pool1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv1_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block 2</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 150,150,64 -> 75,75,128</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv2_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv2_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv2_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv2_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv2_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'pool2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv2_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block 3</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 75,75,128 -> 38,38,256</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv3_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv3_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv3_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv3_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv3_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv3_3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv3_3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv3_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'pool3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv3_3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block 4</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 38,38,256 -> 19,19,512</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool4'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'pool4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block 5</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 19,19,512 -> 19,19,512</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv5_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv5_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool4'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv5_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv5_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv5_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv5_3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv5_3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv5_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool5'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'pool5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv5_3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># FC6</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 19,19,512 -> 19,19,1024</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc6'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dilation_rate<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'fc6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'pool5'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># x = Dropout(0.5, name='drop6')(x)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># FC7</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 19,19,1024 -> 19,19,1024</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'fc7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc6'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># x = Dropout(0.5, name='drop7')(x)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block 6</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 19,19,512 -> 10,10,512</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_padding'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block 7</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 10,10,512 -> 5,5,256</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>  name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_padding'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block 8</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 5,5,256 -> 3,3,256</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv8_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv8_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block 9</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 3,3,256 -> 1,1,256</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv9_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv9_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> net\n</code></pre>\n<h3 id=\"构建预测值\"><a href=\"#构建预测值\" class=\"headerlink\" title=\"构建预测值\"></a>构建预测值</h3><p>SSD网络的最后预测值主要包含三个部分：</p>\n<ul>\n<li><p>net{‘mbox_loc’}：先验框的预期位置——包含目标的先验框相对于其匹配的真实框的中心xy位移和长宽缩放比</p>\n</li>\n<li><p>net{‘mbox_conf’}：先验框中的目标类别——one-hot编码后softmax进行分类</p>\n</li>\n<li><p>net{‘mbox_priorbox’}：先验框的原始位置以及variances（用于预测框解码或编码）——这部分不进行训练，只作为预测结果的辅助使用<br>其中按照SSD300的输入大小，先验框的数量为<code>8732</code>个。<br>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">SSD300</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">,</span> num_classes<span class=\"token operator\">=</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 300,300,3</span>\n  input_tensor <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span>input_shape<span class=\"token punctuation\">)</span>\n  img_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\"># SSD结构,net字典</span>\n  net <span class=\"token operator\">=</span> VGG16<span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\">#-----------------------将提取到的主干特征进行处理---------------------------#</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 对conv4_3进行处理 38,38,512</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Normalize<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_3_norm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  num_priors <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 预测框的处理</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_3_norm_mbox_loc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_loc_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_3_norm_mbox_loc_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，num_classes是所分的类</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> num_classes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_3_norm_mbox_conf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_conf_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_3_norm_mbox_conf_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  priorbox <span class=\"token operator\">=</span> PriorBox<span class=\"token punctuation\">(</span>img_size<span class=\"token punctuation\">,</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">,</span>max_size <span class=\"token operator\">=</span> <span class=\"token number\">60.0</span><span class=\"token punctuation\">,</span> aspect_ratios<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      variances<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">=</span><span class=\"token string\">'conv4_3_norm_mbox_priorbox'</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_priorbox'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> priorbox<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\"># 对fc7层进行处理 </span>\n  num_priors <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 预测框的处理</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'fc7_mbox_loc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_loc_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'fc7_mbox_loc_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，num_classes是所分的类</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> num_classes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'fc7_mbox_conf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_conf_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'fc7_mbox_conf_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  priorbox <span class=\"token operator\">=</span> PriorBox<span class=\"token punctuation\">(</span>img_size<span class=\"token punctuation\">,</span> <span class=\"token number\">60.0</span><span class=\"token punctuation\">,</span> max_size<span class=\"token operator\">=</span><span class=\"token number\">111.0</span><span class=\"token punctuation\">,</span> aspect_ratios<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      variances<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">=</span><span class=\"token string\">'fc7_mbox_priorbox'</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_priorbox'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> priorbox<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\"># 对conv6_2进行处理</span>\n  num_priors <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 预测框的处理</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_2_mbox_loc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_2_mbox_loc_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，num_classes是所分的类</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> num_classes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_2_mbox_conf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_2_mbox_conf_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  priorbox <span class=\"token operator\">=</span> PriorBox<span class=\"token punctuation\">(</span>img_size<span class=\"token punctuation\">,</span> <span class=\"token number\">111.0</span><span class=\"token punctuation\">,</span> max_size<span class=\"token operator\">=</span><span class=\"token number\">162.0</span><span class=\"token punctuation\">,</span> aspect_ratios<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      variances<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">=</span><span class=\"token string\">'conv6_2_mbox_priorbox'</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> priorbox<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\"># 对conv7_2进行处理</span>\n  num_priors <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 预测框的处理</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_2_mbox_loc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_2_mbox_loc_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，num_classes是所分的类</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> num_classes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_2_mbox_conf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_2_mbox_conf_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  priorbox <span class=\"token operator\">=</span> PriorBox<span class=\"token punctuation\">(</span>img_size<span class=\"token punctuation\">,</span> <span class=\"token number\">162.0</span><span class=\"token punctuation\">,</span> max_size<span class=\"token operator\">=</span><span class=\"token number\">213.0</span><span class=\"token punctuation\">,</span> aspect_ratios<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      variances<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">=</span><span class=\"token string\">'conv7_2_mbox_priorbox'</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> priorbox<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\"># 对conv8_2进行处理</span>\n  num_priors <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 预测框的处理</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv8_2_mbox_loc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv8_2_mbox_loc_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，num_classes是所分的类</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> num_classes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv8_2_mbox_conf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv8_2_mbox_conf_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  priorbox <span class=\"token operator\">=</span> PriorBox<span class=\"token punctuation\">(</span>img_size<span class=\"token punctuation\">,</span> <span class=\"token number\">213.0</span><span class=\"token punctuation\">,</span> max_size<span class=\"token operator\">=</span><span class=\"token number\">264.0</span><span class=\"token punctuation\">,</span> aspect_ratios<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      variances<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">=</span><span class=\"token string\">'conv8_2_mbox_priorbox'</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> priorbox<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\"># 对conv9_2进行处理</span>\n  num_priors <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 预测框的处理</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv9_2_mbox_loc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv9_2_mbox_loc_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># num_priors表示每个网格点先验框的数量，num_classes是所分的类</span>\n  x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>num_priors <span class=\"token operator\">*</span> num_classes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv9_2_mbox_conf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Flatten<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv9_2_mbox_conf_flat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  priorbox <span class=\"token operator\">=</span> PriorBox<span class=\"token punctuation\">(</span>img_size<span class=\"token punctuation\">,</span> <span class=\"token number\">264.0</span><span class=\"token punctuation\">,</span> max_size<span class=\"token operator\">=</span><span class=\"token number\">315.0</span><span class=\"token punctuation\">,</span> aspect_ratios<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      variances<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      name<span class=\"token operator\">=</span><span class=\"token string\">'conv9_2_mbox_priorbox'</span><span class=\"token punctuation\">)</span>\n\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> priorbox<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\"># 将所有结果进行堆叠</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_loc_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                           net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_loc_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                           net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                           net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                           net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                           net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_loc_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                          axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_conf_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_conf_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                            net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_conf_flat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                           axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mbox_conf'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 先验框的位置和辅助变量</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_priorbox'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv4_3_norm_mbox_priorbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                net<span class=\"token punctuation\">[</span><span class=\"token string\">'fc7_mbox_priorbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv6_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv7_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv8_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                net<span class=\"token punctuation\">[</span><span class=\"token string\">'conv9_2_mbox_priorbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mbox_priorbox'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> hasattr<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_keras_shape'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      num_boxes <span class=\"token operator\">=</span> net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>_keras_shape<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">//</span> <span class=\"token number\">4</span>\n  <span class=\"token keyword\">elif</span> hasattr<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int_shape'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      num_boxes <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>int_shape<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">//</span> <span class=\"token number\">4</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 预期位置</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num_boxes<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'mbox_loc_final'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\"># 分类结果</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num_boxes<span class=\"token punctuation\">,</span> num_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'mbox_conf_logits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_conf'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'mbox_conf_final'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  net<span class=\"token punctuation\">[</span><span class=\"token string\">'predictions'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_loc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                             net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_conf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                             net<span class=\"token punctuation\">[</span><span class=\"token string\">'mbox_priorbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                             axis<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'predictions'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'predictions'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">[</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> net<span class=\"token punctuation\">[</span><span class=\"token string\">'predictions'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> model</code></pre>\n</li>\n</ul>\n<h3 id=\"先验框编码与解码\"><a href=\"#先验框编码与解码\" class=\"headerlink\" title=\"先验框编码与解码\"></a>先验框编码与解码</h3><p>针对先验框的编码过程，即计算net{‘mbox_loc’}——先验框的预期位置。</p>\n<ul>\n<li>找到与真实框重合度高于某个阈值（如0.5）的所有先验框</li>\n<li>根据先验框匹配的真实框进行编码得到预期位置</li>\n<li>然后根据one-hot编码，将目标类别进行编码</li>\n<li>最后的先验框原始位置和variances值不需要进行提取，只添加一个是否包含物体的判断值即可，用于loss计算</li>\n</ul>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">encode_box</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">,</span> return_iou<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        iou <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>iou<span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">)</span>\n        encoded_box <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>num_priors<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> return_iou<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 找到每一个真实框，重合程度较高的先验框</span>\n        assign_mask <span class=\"token operator\">=</span> iou <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>overlap_threshold\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> assign_mask<span class=\"token punctuation\">.</span>any<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            assign_mask<span class=\"token punctuation\">[</span>iou<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">if</span> return_iou<span class=\"token punctuation\">:</span>\n            encoded_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> iou<span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 找到对应的先验框</span>\n        assigned_priors <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>priors<span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 逆向编码，将真实框转化为ssd预测结果的格式</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 先计算真实框的中心与长宽</span>\n        box_center <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> box<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        box_wh <span class=\"token operator\">=</span> box<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 再计算重合度较高的先验框的中心与长宽</span>\n        assigned_priors_center <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>assigned_priors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span>\n                                        assigned_priors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        assigned_priors_wh <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>assigned_priors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span>\n                                assigned_priors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 逆向求取ssd应该有的预测结果</span>\n        encoded_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> box_center <span class=\"token operator\">-</span> assigned_priors_center\n        encoded_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">/=</span> assigned_priors_wh\n        <span class=\"token comment\" spellcheck=\"true\"># 除以0.1</span>\n        encoded_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">/=</span> assigned_priors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n        encoded_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>box_wh <span class=\"token operator\">/</span> assigned_priors_wh<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 除以0.2</span>\n        encoded_box<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>assign_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">/=</span> assigned_priors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> encoded_box<span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">assign_boxes</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> boxes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   assignment分为3个部分</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   :4      的内容为网络应该有的回归预测结果</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   4:-8    的内容为先验框所对应的种类，默认为背景</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   -8      的内容为当前先验框是否包含目标</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   -7:     无意义</span>\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        assignment <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>num_priors<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>num_classes <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        assignment<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>\n        <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> assignment\n\n        <span class=\"token comment\" spellcheck=\"true\"># 对每一个真实框都进行iou计算</span>\n        encoded_boxes <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>apply_along_axis<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>encode_box<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> boxes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   在reshape后，获得的encoded_boxes的shape为：</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   [num_true_box, num_priors, 4+1]</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   4是编码后的结果，1为iou</span>\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        encoded_boxes <span class=\"token operator\">=</span> encoded_boxes<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>num_priors<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   [num_priors]求取每一个先验框重合度最大的真实框</span>\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        best_iou <span class=\"token operator\">=</span> encoded_boxes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        best_iou_idx <span class=\"token operator\">=</span> encoded_boxes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        best_iou_mask <span class=\"token operator\">=</span> best_iou <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n        best_iou_idx <span class=\"token operator\">=</span> best_iou_idx<span class=\"token punctuation\">[</span>best_iou_mask<span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   计算一共有多少先验框满足需求</span>\n        <span class=\"token comment\" spellcheck=\"true\">#---------------------------------------------------#</span>\n        assign_num <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>best_iou_idx<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 将编码后的真实框取出</span>\n        encoded_boxes <span class=\"token operator\">=</span> encoded_boxes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> best_iou_mask<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        assignment<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>best_iou_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> encoded_boxes<span class=\"token punctuation\">[</span>best_iou_idx<span class=\"token punctuation\">,</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>assign_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\" spellcheck=\"true\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   4代表为背景的概率，设定为0，因为这些先验框有对应的物体</span>\n        <span class=\"token comment\" spellcheck=\"true\">#----------------------------------------------------------#</span>\n        assignment<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>best_iou_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        assignment<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>best_iou_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> boxes<span class=\"token punctuation\">[</span>best_iou_idx<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\" spellcheck=\"true\">#----------------------------------------------------------#</span>\n        <span class=\"token comment\" spellcheck=\"true\">#   -8表示先验框是否有对应的物体</span>\n        <span class=\"token comment\" spellcheck=\"true\">#----------------------------------------------------------#</span>\n        assignment<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>best_iou_mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 通过assign_boxes我们就获得了，输入进来的这张图片，应该有的预测结果是什么样子的</span>\n        <span class=\"token keyword\">return</span> assignment</code></pre>\n<h3 id=\"loss计算\"><a href=\"#loss计算\" class=\"headerlink\" title=\"loss计算\"></a>loss计算</h3><p>在loss计算过程中，由于SSD可能导致正负样本的不平衡而增加的训练难度，所以一般在计算loss时，通常取1：3的正负样本比例，同意注意:预测值的前四位是预期位置信息，第五位到倒数第八位是类别信息，后面是先验框的原始位置信息。</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MultiboxLoss</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num_classes<span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> neg_pos_ratio<span class=\"token operator\">=</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span>\n                 background_label_id<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> negatives_for_hard<span class=\"token operator\">=</span><span class=\"token number\">100.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>num_classes <span class=\"token operator\">=</span> num_classes\n        self<span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">=</span> alpha\n        self<span class=\"token punctuation\">.</span>neg_pos_ratio <span class=\"token operator\">=</span> neg_pos_ratio\n        <span class=\"token keyword\">if</span> background_label_id <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">'Only 0 as background label id is supported'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>background_label_id <span class=\"token operator\">=</span> background_label_id\n        self<span class=\"token punctuation\">.</span>negatives_for_hard <span class=\"token operator\">=</span> negatives_for_hard\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_l1_smooth_loss</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> y_true<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        abs_loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>abs<span class=\"token punctuation\">(</span>y_true <span class=\"token operator\">-</span> y_pred<span class=\"token punctuation\">)</span>\n        sq_loss <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y_true <span class=\"token operator\">-</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token operator\">**</span><span class=\"token number\">2</span>\n        l1_loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>less<span class=\"token punctuation\">(</span>abs_loss<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sq_loss<span class=\"token punctuation\">,</span> abs_loss <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> tf<span class=\"token punctuation\">.</span>reduce_sum<span class=\"token punctuation\">(</span>l1_loss<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_softmax_loss</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> y_true<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        y_pred <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">(</span>y_pred<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n        softmax_loss <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>tf<span class=\"token punctuation\">.</span>reduce_sum<span class=\"token punctuation\">(</span>y_true <span class=\"token operator\">*</span> tf<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                      axis<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> softmax_loss\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">compute_loss</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> y_true<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        batch_size <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>y_true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        num_boxes <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>to_float<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>y_true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 计算所有的loss</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 分类的loss</span>\n        <span class=\"token comment\" spellcheck=\"true\"># batch_size,8732,21 -> batch_size,8732</span>\n        conf_loss <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_softmax_loss<span class=\"token punctuation\">(</span>y_true<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                       y_pred<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 框的位置的loss</span>\n        <span class=\"token comment\" spellcheck=\"true\"># batch_size,8732,4 -> batch_size,8732</span>\n        loc_loss <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_l1_smooth_loss<span class=\"token punctuation\">(</span>y_true<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                        y_pred<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 获取所有的正标签的loss</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 每一张图的pos的个数</span>\n        num_pos <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_sum<span class=\"token punctuation\">(</span>y_true<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 每一张图的pos_loc_loss</span>\n        pos_loc_loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_sum<span class=\"token punctuation\">(</span>loc_loss <span class=\"token operator\">*</span> y_true<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                     axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 每一张图的pos_conf_loss</span>\n        pos_conf_loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_sum<span class=\"token punctuation\">(</span>conf_loss <span class=\"token operator\">*</span> y_true<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                      axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 获取一定的负样本</span>\n        num_neg <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>neg_pos_ratio <span class=\"token operator\">*</span> num_pos<span class=\"token punctuation\">,</span>\n                             num_boxes <span class=\"token operator\">-</span> num_pos<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 找到了哪些值是大于0的</span>\n        pos_num_neg_mask <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>greater<span class=\"token punctuation\">(</span>num_neg<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 获得一个1.0</span>\n        has_min <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>to_float<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>reduce_any<span class=\"token punctuation\">(</span>pos_num_neg_mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        num_neg <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>values<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>num_neg<span class=\"token punctuation\">,</span>\n                                <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> has_min<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>negatives_for_hard<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 求平均每个图片要取多少个负样本</span>\n        num_neg_batch <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_mean<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>boolean_mask<span class=\"token punctuation\">(</span>num_neg<span class=\"token punctuation\">,</span>\n                                                      tf<span class=\"token punctuation\">.</span>greater<span class=\"token punctuation\">(</span>num_neg<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        num_neg_batch <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>to_int32<span class=\"token punctuation\">(</span>num_neg_batch<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># conf的起始</span>\n        confs_start <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>background_label_id <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\" spellcheck=\"true\"># conf的结束</span>\n        confs_end <span class=\"token operator\">=</span> confs_start <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>num_classes <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 找到实际上在该位置不应该有预测结果的框，求他们最大的置信度。</span>\n        max_confs <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_max<span class=\"token punctuation\">(</span>y_pred<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> confs_start<span class=\"token punctuation\">:</span>confs_end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                  axis<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 取top_k个置信度，作为负样本</span>\n        _<span class=\"token punctuation\">,</span> indices <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>top_k<span class=\"token punctuation\">(</span>max_confs <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> y_true<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                 k<span class=\"token operator\">=</span>num_neg_batch<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 找到其在1维上的索引</span>\n        batch_idx <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>expand_dims<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> batch_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        batch_idx <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>tile<span class=\"token punctuation\">(</span>batch_idx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num_neg_batch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        full_indices <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>batch_idx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> tf<span class=\"token punctuation\">.</span>to_int32<span class=\"token punctuation\">(</span>num_boxes<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                        tf<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>indices<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n        neg_conf_loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>conf_loss<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                  full_indices<span class=\"token punctuation\">)</span>\n        neg_conf_loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>neg_conf_loss<span class=\"token punctuation\">,</span>\n                                   <span class=\"token punctuation\">[</span>batch_size<span class=\"token punctuation\">,</span> num_neg_batch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        neg_conf_loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_sum<span class=\"token punctuation\">(</span>neg_conf_loss<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 求loss总和</span>\n        total_loss <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>pos_conf_loss <span class=\"token operator\">+</span> neg_conf_loss<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>K<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">(</span>pos_conf_loss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        total_loss <span class=\"token operator\">+=</span>  K<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">*</span> pos_loc_loss<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>K<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">,</span>K<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">(</span>pos_loc_loss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> total_loss\n</code></pre>\n<p>至此，所有关于SSD的关键部分就讲解完了，后续会陆续更新其他算法。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习之目标检测SSD\"><a href=\"#深度学习之目标检测SSD\" class=\"headerlink\" title=\"深度学习之目标检测SSD\"></a>深度学习之目标检测SSD</h2><h3 id=\"What-is-SSD\"><a href=\"#What-is-SSD\" class=\"headerlink\" title=\"What is SSD?\"></a>What is SSD?</h3><p>关于目标检测算法，当下已经有很多优秀的开源算法，其中算法主要分为两类：one-stage 和 two-stage。本次介绍的SSD算法就是one-stage算法的一种。主要的工作流程就是在利用主流的特征提取网络提取特征后，根据特征维度在图片上的不同位置进行密集采样，每个采样点都包含不同尺度和长宽比的<code>先验框</code>，然后对不同的先验框中的物体种类进行预测和相对于预测框位置进行回归，速度较快。<br>但是针对密集采样，由于采样点较多，且可能多数点都不存在目标，所以容易导致正负样本不平衡，从而使得训练难度上升。</p>\n<h3 id=\"主干网络结构简介\"><a href=\"#主干网络结构简介\" class=\"headerlink\" title=\"主干网络结构简介\"></a>主干网络结构简介</h3><p>针对SSD算法，其中主要利用的是<code>VGG16</code>作为主干特征提取网络，并且将<code>VGG16</code>中的<code>FC6</code>和<code>FC7</code>两层转换为卷积层，去掉所有的丢弃层和<code>FC8</code>层，并增加<code>Conv8</code>和<code>Conv9</code>。由于之前文章中已经介绍过<code>VGG16</code>，所以此处不再重复介绍。<br>本文此次以<code>SSD300</code>为例，介绍<code>SSD</code>算法，网络结构如下：<br><img src=\"http://39.106.34.39:4567/20190427212254620.png\" alt=\"SSD网络结构\"><br><img src=\"http://39.106.34.39:4567/20190427212220602.png\" alt=\"SSD网络结构\"></p>\n<p>网络处理流程：</p>\n<ul>\n<li>输入图片首先resize到300x300大小的图片</li>\n<li>2次（3，3）卷积，1次（2，2）池化</li>\n<li>2次（3，3）卷积，1次（2，2）池化</li>\n<li>3次（3，3）卷积，1次（2，2）池化</li>\n<li>3次（3，3）卷积，1次（2，2）池化</li>\n<li>3次（3，3）卷积，1次（2，2）池化</li>\n<li>1次（3，3）卷积，1次（1，1）卷积</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，步长2</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，步长2</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，padding = vaild</li>\n<li>1次（1，1）卷积，1次（3，3）卷积，padding = vaild</li>\n</ul>\n<p>代码如下：</p>\n<pre><code class=\"python\">def VGG16(input_tensor):\n    net = &#123;&#125; \n    # Block 1\n    net[&#39;input&#39;] = input_tensor\n    # 300,300,3 -&gt; 150,150,64\n    net[&#39;conv1_1&#39;] = Conv2D(64, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv1_1&#39;)(net[&#39;input&#39;])\n    net[&#39;conv1_2&#39;] = Conv2D(64, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv1_2&#39;)(net[&#39;conv1_1&#39;])\n    net[&#39;pool1&#39;] = MaxPooling2D((2, 2), strides=(2, 2), padding=&#39;same&#39;, name=&#39;pool1&#39;)(net[&#39;conv1_2&#39;])\n    # Block 2\n    # 150,150,64 -&gt; 75,75,128\n    net[&#39;conv2_1&#39;] = Conv2D(128, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv2_1&#39;)(net[&#39;pool1&#39;])\n    net[&#39;conv2_2&#39;] = Conv2D(128, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv2_2&#39;)(net[&#39;conv2_1&#39;])\n    net[&#39;pool2&#39;] = MaxPooling2D((2, 2), strides=(2, 2), padding=&#39;same&#39;, name=&#39;pool2&#39;)(net[&#39;conv2_2&#39;])\n    # Block 3\n    # 75,75,128 -&gt; 38,38,256\n    net[&#39;conv3_1&#39;] = Conv2D(256, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv3_1&#39;)(net[&#39;pool2&#39;])\n    net[&#39;conv3_2&#39;] = Conv2D(256, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv3_2&#39;)(net[&#39;conv3_1&#39;])\n    net[&#39;conv3_3&#39;] = Conv2D(256, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv3_3&#39;)(net[&#39;conv3_2&#39;])\n    net[&#39;pool3&#39;] = MaxPooling2D((2, 2), strides=(2, 2), padding=&#39;same&#39;, name=&#39;pool3&#39;)(net[&#39;conv3_3&#39;])\n    # Block 4\n    # 38,38,256 -&gt; 19,19,512\n    net[&#39;conv4_1&#39;] = Conv2D(512, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv4_1&#39;)(net[&#39;pool3&#39;])\n    net[&#39;conv4_2&#39;] = Conv2D(512, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv4_2&#39;)(net[&#39;conv4_1&#39;])\n    net[&#39;conv4_3&#39;] = Conv2D(512, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv4_3&#39;)(net[&#39;conv4_2&#39;])\n    net[&#39;pool4&#39;] = MaxPooling2D((2, 2), strides=(2, 2), padding=&#39;same&#39;, name=&#39;pool4&#39;)(net[&#39;conv4_3&#39;])\n    # Block 5\n    # 19,19,512 -&gt; 19,19,512\n    net[&#39;conv5_1&#39;] = Conv2D(512, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv5_1&#39;)(net[&#39;pool4&#39;])\n    net[&#39;conv5_2&#39;] = Conv2D(512, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv5_2&#39;)(net[&#39;conv5_1&#39;])\n    net[&#39;conv5_3&#39;] = Conv2D(512, kernel_size=(3,3), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv5_3&#39;)(net[&#39;conv5_2&#39;])\n    net[&#39;pool5&#39;] = MaxPooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;, name=&#39;pool5&#39;)(net[&#39;conv5_3&#39;])\n    # FC6\n    # 19,19,512 -&gt; 19,19,1024\n    net[&#39;fc6&#39;] = Conv2D(1024, kernel_size=(3,3), dilation_rate=(6, 6), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;fc6&#39;)(net[&#39;pool5&#39;])\n\n    # x = Dropout(0.5, name=&#39;drop6&#39;)(x)\n    # FC7\n    # 19,19,1024 -&gt; 19,19,1024\n    net[&#39;fc7&#39;] = Conv2D(1024, kernel_size=(1,1), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;fc7&#39;)(net[&#39;fc6&#39;])\n\n    # x = Dropout(0.5, name=&#39;drop7&#39;)(x)\n    # Block 6\n    # 19,19,512 -&gt; 10,10,512\n    net[&#39;conv6_1&#39;] = Conv2D(256, kernel_size=(1,1), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv6_1&#39;)(net[&#39;fc7&#39;])\n    net[&#39;conv6_2&#39;] = ZeroPadding2D(padding=((1, 1), (1, 1)), name=&#39;conv6_padding&#39;)(net[&#39;conv6_1&#39;])\n    net[&#39;conv6_2&#39;] = Conv2D(512, kernel_size=(3,3), strides=(2, 2), activation=&#39;relu&#39;, name=&#39;conv6_2&#39;)(net[&#39;conv6_2&#39;])\n\n    # Block 7\n    # 10,10,512 -&gt; 5,5,256\n    net[&#39;conv7_1&#39;] = Conv2D(128, kernel_size=(1,1), activation=&#39;relu&#39;, padding=&#39;same&#39;,  name=&#39;conv7_1&#39;)(net[&#39;conv6_2&#39;])\n    net[&#39;conv7_2&#39;] = ZeroPadding2D(padding=((1, 1), (1, 1)), name=&#39;conv7_padding&#39;)(net[&#39;conv7_1&#39;])\n    net[&#39;conv7_2&#39;] = Conv2D(256, kernel_size=(3,3), strides=(2, 2), activation=&#39;relu&#39;, padding=&#39;valid&#39;, name=&#39;conv7_2&#39;)(net[&#39;conv7_2&#39;])\n    # Block 8\n    # 5,5,256 -&gt; 3,3,256\n    net[&#39;conv8_1&#39;] = Conv2D(128, kernel_size=(1,1), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv8_1&#39;)(net[&#39;conv7_2&#39;])\n    net[&#39;conv8_2&#39;] = Conv2D(256, kernel_size=(3,3), strides=(1, 1), activation=&#39;relu&#39;, padding=&#39;valid&#39;, name=&#39;conv8_2&#39;)(net[&#39;conv8_1&#39;])\n\n    # Block 9\n    # 3,3,256 -&gt; 1,1,256\n    net[&#39;conv9_1&#39;] = Conv2D(128, kernel_size=(1,1), activation=&#39;relu&#39;, padding=&#39;same&#39;, name=&#39;conv9_1&#39;)(net[&#39;conv8_2&#39;])\n    net[&#39;conv9_2&#39;] = Conv2D(256, kernel_size=(3,3), strides=(1, 1), activation=&#39;relu&#39;, padding=&#39;valid&#39;, name=&#39;conv9_2&#39;)(net[&#39;conv9_1&#39;])\n    return net\n</code></pre>\n<h3 id=\"构建预测值\"><a href=\"#构建预测值\" class=\"headerlink\" title=\"构建预测值\"></a>构建预测值</h3><p>SSD网络的最后预测值主要包含三个部分：</p>\n<ul>\n<li><p>net{‘mbox_loc’}：先验框的预期位置——包含目标的先验框相对于其匹配的真实框的中心xy位移和长宽缩放比</p>\n</li>\n<li><p>net{‘mbox_conf’}：先验框中的目标类别——one-hot编码后softmax进行分类</p>\n</li>\n<li><p>net{‘mbox_priorbox’}：先验框的原始位置以及variances（用于预测框解码或编码）——这部分不进行训练，只作为预测结果的辅助使用<br>其中按照SSD300的输入大小，先验框的数量为<code>8732</code>个。<br>代码如下：</p>\n<pre><code class=\"python\">def SSD300(input_shape, num_classes=21):\n  # 300,300,3\n  input_tensor = Input(shape=input_shape)\n  img_size = (input_shape[1], input_shape[0])\n\n  # SSD结构,net字典\n  net = VGG16(input_tensor)\n  #-----------------------将提取到的主干特征进行处理---------------------------#\n  # 对conv4_3进行处理 38,38,512\n  net[&#39;conv4_3_norm&#39;] = Normalize(20, name=&#39;conv4_3_norm&#39;)(net[&#39;conv4_3&#39;])\n  num_priors = 4\n  # 预测框的处理\n  # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n  net[&#39;conv4_3_norm_mbox_loc&#39;] = Conv2D(num_priors * 4, kernel_size=(3,3), padding=&#39;same&#39;, name=&#39;conv4_3_norm_mbox_loc&#39;)(net[&#39;conv4_3_norm&#39;])\n  net[&#39;conv4_3_norm_mbox_loc_flat&#39;] = Flatten(name=&#39;conv4_3_norm_mbox_loc_flat&#39;)(net[&#39;conv4_3_norm_mbox_loc&#39;])\n  # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n  net[&#39;conv4_3_norm_mbox_conf&#39;] = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv4_3_norm_mbox_conf&#39;)(net[&#39;conv4_3_norm&#39;])\n  net[&#39;conv4_3_norm_mbox_conf_flat&#39;] = Flatten(name=&#39;conv4_3_norm_mbox_conf_flat&#39;)(net[&#39;conv4_3_norm_mbox_conf&#39;])\n  priorbox = PriorBox(img_size, 30.0,max_size = 60.0, aspect_ratios=[2],\n                      variances=[0.1, 0.1, 0.2, 0.2],\n                      name=&#39;conv4_3_norm_mbox_priorbox&#39;)\n  net[&#39;conv4_3_norm_mbox_priorbox&#39;] = priorbox(net[&#39;conv4_3_norm&#39;])\n\n  # 对fc7层进行处理 \n  num_priors = 6\n  # 预测框的处理\n  # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n  net[&#39;fc7_mbox_loc&#39;] = Conv2D(num_priors * 4, kernel_size=(3,3),padding=&#39;same&#39;,name=&#39;fc7_mbox_loc&#39;)(net[&#39;fc7&#39;])\n  net[&#39;fc7_mbox_loc_flat&#39;] = Flatten(name=&#39;fc7_mbox_loc_flat&#39;)(net[&#39;fc7_mbox_loc&#39;])\n  # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n  net[&#39;fc7_mbox_conf&#39;] = Conv2D(num_priors * num_classes, kernel_size=(3,3),padding=&#39;same&#39;,name=&#39;fc7_mbox_conf&#39;)(net[&#39;fc7&#39;])\n  net[&#39;fc7_mbox_conf_flat&#39;] = Flatten(name=&#39;fc7_mbox_conf_flat&#39;)(net[&#39;fc7_mbox_conf&#39;])\n\n  priorbox = PriorBox(img_size, 60.0, max_size=111.0, aspect_ratios=[2, 3],\n                      variances=[0.1, 0.1, 0.2, 0.2],\n                      name=&#39;fc7_mbox_priorbox&#39;)\n  net[&#39;fc7_mbox_priorbox&#39;] = priorbox(net[&#39;fc7&#39;])\n\n  # 对conv6_2进行处理\n  num_priors = 6\n  # 预测框的处理\n  # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n  x = Conv2D(num_priors * 4, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv6_2_mbox_loc&#39;)(net[&#39;conv6_2&#39;])\n  net[&#39;conv6_2_mbox_loc&#39;] = x\n  net[&#39;conv6_2_mbox_loc_flat&#39;] = Flatten(name=&#39;conv6_2_mbox_loc_flat&#39;)(net[&#39;conv6_2_mbox_loc&#39;])\n  # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n  x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv6_2_mbox_conf&#39;)(net[&#39;conv6_2&#39;])\n  net[&#39;conv6_2_mbox_conf&#39;] = x\n  net[&#39;conv6_2_mbox_conf_flat&#39;] = Flatten(name=&#39;conv6_2_mbox_conf_flat&#39;)(net[&#39;conv6_2_mbox_conf&#39;])\n\n  priorbox = PriorBox(img_size, 111.0, max_size=162.0, aspect_ratios=[2, 3],\n                      variances=[0.1, 0.1, 0.2, 0.2],\n                      name=&#39;conv6_2_mbox_priorbox&#39;)\n  net[&#39;conv6_2_mbox_priorbox&#39;] = priorbox(net[&#39;conv6_2&#39;])\n\n  # 对conv7_2进行处理\n  num_priors = 6\n  # 预测框的处理\n  # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n  x = Conv2D(num_priors * 4, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv7_2_mbox_loc&#39;)(net[&#39;conv7_2&#39;])\n  net[&#39;conv7_2_mbox_loc&#39;] = x\n  net[&#39;conv7_2_mbox_loc_flat&#39;] = Flatten(name=&#39;conv7_2_mbox_loc_flat&#39;)(net[&#39;conv7_2_mbox_loc&#39;])\n  # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n  x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv7_2_mbox_conf&#39;)(net[&#39;conv7_2&#39;])\n  net[&#39;conv7_2_mbox_conf&#39;] = x\n  net[&#39;conv7_2_mbox_conf_flat&#39;] = Flatten(name=&#39;conv7_2_mbox_conf_flat&#39;)(net[&#39;conv7_2_mbox_conf&#39;])\n\n  priorbox = PriorBox(img_size, 162.0, max_size=213.0, aspect_ratios=[2, 3],\n                      variances=[0.1, 0.1, 0.2, 0.2],\n                      name=&#39;conv7_2_mbox_priorbox&#39;)\n  net[&#39;conv7_2_mbox_priorbox&#39;] = priorbox(net[&#39;conv7_2&#39;])\n\n  # 对conv8_2进行处理\n  num_priors = 4\n  # 预测框的处理\n  # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n  x = Conv2D(num_priors * 4, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv8_2_mbox_loc&#39;)(net[&#39;conv8_2&#39;])\n  net[&#39;conv8_2_mbox_loc&#39;] = x\n  net[&#39;conv8_2_mbox_loc_flat&#39;] = Flatten(name=&#39;conv8_2_mbox_loc_flat&#39;)(net[&#39;conv8_2_mbox_loc&#39;])\n  # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n  x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv8_2_mbox_conf&#39;)(net[&#39;conv8_2&#39;])\n  net[&#39;conv8_2_mbox_conf&#39;] = x\n  net[&#39;conv8_2_mbox_conf_flat&#39;] = Flatten(name=&#39;conv8_2_mbox_conf_flat&#39;)(net[&#39;conv8_2_mbox_conf&#39;])\n\n  priorbox = PriorBox(img_size, 213.0, max_size=264.0, aspect_ratios=[2],\n                      variances=[0.1, 0.1, 0.2, 0.2],\n                      name=&#39;conv8_2_mbox_priorbox&#39;)\n  net[&#39;conv8_2_mbox_priorbox&#39;] = priorbox(net[&#39;conv8_2&#39;])\n\n  # 对conv9_2进行处理\n  num_priors = 4\n  # 预测框的处理\n  # num_priors表示每个网格点先验框的数量，4是x,y,h,w的调整\n  x = Conv2D(num_priors * 4, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv9_2_mbox_loc&#39;)(net[&#39;conv9_2&#39;])\n  net[&#39;conv9_2_mbox_loc&#39;] = x\n  net[&#39;conv9_2_mbox_loc_flat&#39;] = Flatten(name=&#39;conv9_2_mbox_loc_flat&#39;)(net[&#39;conv9_2_mbox_loc&#39;])\n  # num_priors表示每个网格点先验框的数量，num_classes是所分的类\n  x = Conv2D(num_priors * num_classes, kernel_size=(3,3), padding=&#39;same&#39;,name=&#39;conv9_2_mbox_conf&#39;)(net[&#39;conv9_2&#39;])\n  net[&#39;conv9_2_mbox_conf&#39;] = x\n  net[&#39;conv9_2_mbox_conf_flat&#39;] = Flatten(name=&#39;conv9_2_mbox_conf_flat&#39;)(net[&#39;conv9_2_mbox_conf&#39;])\n\n  priorbox = PriorBox(img_size, 264.0, max_size=315.0, aspect_ratios=[2],\n                      variances=[0.1, 0.1, 0.2, 0.2],\n                      name=&#39;conv9_2_mbox_priorbox&#39;)\n\n  net[&#39;conv9_2_mbox_priorbox&#39;] = priorbox(net[&#39;conv9_2&#39;])\n\n  # 将所有结果进行堆叠\n  net[&#39;mbox_loc&#39;] = concatenate([net[&#39;conv4_3_norm_mbox_loc_flat&#39;],\n                           net[&#39;fc7_mbox_loc_flat&#39;],\n                           net[&#39;conv6_2_mbox_loc_flat&#39;],\n                           net[&#39;conv7_2_mbox_loc_flat&#39;],\n                           net[&#39;conv8_2_mbox_loc_flat&#39;],\n                           net[&#39;conv9_2_mbox_loc_flat&#39;]],\n                          axis=1, name=&#39;mbox_loc&#39;)\n  net[&#39;mbox_conf&#39;] = concatenate([net[&#39;conv4_3_norm_mbox_conf_flat&#39;],\n                            net[&#39;fc7_mbox_conf_flat&#39;],\n                            net[&#39;conv6_2_mbox_conf_flat&#39;],\n                            net[&#39;conv7_2_mbox_conf_flat&#39;],\n                            net[&#39;conv8_2_mbox_conf_flat&#39;],\n                            net[&#39;conv9_2_mbox_conf_flat&#39;]],\n                           axis=1, name=&#39;mbox_conf&#39;)\n  # 先验框的位置和辅助变量\n  net[&#39;mbox_priorbox&#39;] = concatenate([net[&#39;conv4_3_norm_mbox_priorbox&#39;],\n                                net[&#39;fc7_mbox_priorbox&#39;],\n                                net[&#39;conv6_2_mbox_priorbox&#39;],\n                                net[&#39;conv7_2_mbox_priorbox&#39;],\n                                net[&#39;conv8_2_mbox_priorbox&#39;],\n                                net[&#39;conv9_2_mbox_priorbox&#39;]],\n                                axis=1, name=&#39;mbox_priorbox&#39;)\n\n  if hasattr(net[&#39;mbox_loc&#39;], &#39;_keras_shape&#39;):\n      num_boxes = net[&#39;mbox_loc&#39;]._keras_shape[-1] // 4\n  elif hasattr(net[&#39;mbox_loc&#39;], &#39;int_shape&#39;):\n      num_boxes = K.int_shape(net[&#39;mbox_loc&#39;])[-1] // 4\n  # 预期位置\n  net[&#39;mbox_loc&#39;] = Reshape((num_boxes, 4),name=&#39;mbox_loc_final&#39;)(net[&#39;mbox_loc&#39;])\n  # 分类结果\n  net[&#39;mbox_conf&#39;] = Reshape((num_boxes, num_classes),name=&#39;mbox_conf_logits&#39;)(net[&#39;mbox_conf&#39;])\n  net[&#39;mbox_conf&#39;] = Activation(&#39;softmax&#39;,name=&#39;mbox_conf_final&#39;)(net[&#39;mbox_conf&#39;])\n\n  net[&#39;predictions&#39;] = concatenate([net[&#39;mbox_loc&#39;],\n                             net[&#39;mbox_conf&#39;],\n                             net[&#39;mbox_priorbox&#39;]],\n                             axis=2, name=&#39;predictions&#39;)\n  print(net[&#39;predictions&#39;])\n  model = Model(net[&#39;input&#39;], net[&#39;predictions&#39;])\n  return model</code></pre>\n</li>\n</ul>\n<h3 id=\"先验框编码与解码\"><a href=\"#先验框编码与解码\" class=\"headerlink\" title=\"先验框编码与解码\"></a>先验框编码与解码</h3><p>针对先验框的编码过程，即计算net{‘mbox_loc’}——先验框的预期位置。</p>\n<ul>\n<li>找到与真实框重合度高于某个阈值（如0.5）的所有先验框</li>\n<li>根据先验框匹配的真实框进行编码得到预期位置</li>\n<li>然后根据one-hot编码，将目标类别进行编码</li>\n<li>最后的先验框原始位置和variances值不需要进行提取，只添加一个是否包含物体的判断值即可，用于loss计算</li>\n</ul>\n<pre><code class=\"python\">    def encode_box(self, box, return_iou=True):\n        iou = self.iou(box)\n        encoded_box = np.zeros((self.num_priors, 4 + return_iou))\n\n        # 找到每一个真实框，重合程度较高的先验框\n        assign_mask = iou &gt; self.overlap_threshold\n        if not assign_mask.any():\n            assign_mask[iou.argmax()] = True\n        if return_iou:\n            encoded_box[:, -1][assign_mask] = iou[assign_mask]\n\n        # 找到对应的先验框\n        assigned_priors = self.priors[assign_mask]\n        # 逆向编码，将真实框转化为ssd预测结果的格式\n\n        # 先计算真实框的中心与长宽\n        box_center = 0.5 * (box[:2] + box[2:])\n        box_wh = box[2:] - box[:2]\n        # 再计算重合度较高的先验框的中心与长宽\n        assigned_priors_center = 0.5 * (assigned_priors[:, :2] +\n                                        assigned_priors[:, 2:4])\n        assigned_priors_wh = (assigned_priors[:, 2:4] -\n                                assigned_priors[:, :2])\n\n        # 逆向求取ssd应该有的预测结果\n        encoded_box[:, :2][assign_mask] = box_center - assigned_priors_center\n        encoded_box[:, :2][assign_mask] /= assigned_priors_wh\n        # 除以0.1\n        encoded_box[:, :2][assign_mask] /= assigned_priors[:, -4:-2]\n\n        encoded_box[:, 2:4][assign_mask] = np.log(box_wh / assigned_priors_wh)\n        # 除以0.2\n        encoded_box[:, 2:4][assign_mask] /= assigned_priors[:, -2:]\n        return encoded_box.ravel()\n    def assign_boxes(self, boxes):\n        #---------------------------------------------------#\n        #   assignment分为3个部分\n        #   :4      的内容为网络应该有的回归预测结果\n        #   4:-8    的内容为先验框所对应的种类，默认为背景\n        #   -8      的内容为当前先验框是否包含目标\n        #   -7:     无意义\n        #---------------------------------------------------#\n        assignment = np.zeros((self.num_priors, 4 + self.num_classes + 8))\n        assignment[:, 4] = 1.0\n        if len(boxes) == 0:\n            return assignment\n\n        # 对每一个真实框都进行iou计算\n        encoded_boxes = np.apply_along_axis(self.encode_box, 1, boxes[:, :4])\n        #---------------------------------------------------#\n        #   在reshape后，获得的encoded_boxes的shape为：\n        #   [num_true_box, num_priors, 4+1]\n        #   4是编码后的结果，1为iou\n        #---------------------------------------------------#\n        encoded_boxes = encoded_boxes.reshape(-1, self.num_priors, 5)\n\n        #---------------------------------------------------#\n        #   [num_priors]求取每一个先验框重合度最大的真实框\n        #---------------------------------------------------#\n        best_iou = encoded_boxes[:, :, -1].max(axis=0)\n        best_iou_idx = encoded_boxes[:, :, -1].argmax(axis=0)\n        best_iou_mask = best_iou &gt; 0\n        best_iou_idx = best_iou_idx[best_iou_mask]\n\n        #---------------------------------------------------#\n        #   计算一共有多少先验框满足需求\n        #---------------------------------------------------#\n        assign_num = len(best_iou_idx)\n\n        # 将编码后的真实框取出\n        encoded_boxes = encoded_boxes[:, best_iou_mask, :]\n        assignment[:, :4][best_iou_mask] = encoded_boxes[best_iou_idx,np.arange(assign_num),:4]\n        #----------------------------------------------------------#\n        #   4代表为背景的概率，设定为0，因为这些先验框有对应的物体\n        #----------------------------------------------------------#\n        assignment[:, 4][best_iou_mask] = 0\n        assignment[:, 5:-8][best_iou_mask] = boxes[best_iou_idx, 4:]\n        #----------------------------------------------------------#\n        #   -8表示先验框是否有对应的物体\n        #----------------------------------------------------------#\n        assignment[:, -8][best_iou_mask] = 1\n        # 通过assign_boxes我们就获得了，输入进来的这张图片，应该有的预测结果是什么样子的\n        return assignment</code></pre>\n<h3 id=\"loss计算\"><a href=\"#loss计算\" class=\"headerlink\" title=\"loss计算\"></a>loss计算</h3><p>在loss计算过程中，由于SSD可能导致正负样本的不平衡而增加的训练难度，所以一般在计算loss时，通常取1：3的正负样本比例，同意注意:预测值的前四位是预期位置信息，第五位到倒数第八位是类别信息，后面是先验框的原始位置信息。</p>\n<pre><code class=\"python\">class MultiboxLoss(object):\n    def __init__(self, num_classes, alpha=1.0, neg_pos_ratio=3.0,\n                 background_label_id=0, negatives_for_hard=100.0):\n        self.num_classes = num_classes\n        self.alpha = alpha\n        self.neg_pos_ratio = neg_pos_ratio\n        if background_label_id != 0:\n            raise Exception(&#39;Only 0 as background label id is supported&#39;)\n        self.background_label_id = background_label_id\n        self.negatives_for_hard = negatives_for_hard\n\n    def _l1_smooth_loss(self, y_true, y_pred):\n        abs_loss = tf.abs(y_true - y_pred)\n        sq_loss = 0.5 * (y_true - y_pred)**2\n        l1_loss = tf.where(tf.less(abs_loss, 1.0), sq_loss, abs_loss - 0.5)\n        return tf.reduce_sum(l1_loss, -1)\n\n    def _softmax_loss(self, y_true, y_pred):\n        y_pred = tf.maximum(tf.minimum(y_pred, 1 - 1e-15), 1e-15)\n        softmax_loss = -tf.reduce_sum(y_true * tf.log(y_pred),\n                                      axis=-1)\n        return softmax_loss\n\n    def compute_loss(self, y_true, y_pred):\n        batch_size = tf.shape(y_true)[0]\n        num_boxes = tf.to_float(tf.shape(y_true)[1])\n\n        # 计算所有的loss\n        # 分类的loss\n        # batch_size,8732,21 -&gt; batch_size,8732\n        conf_loss = self._softmax_loss(y_true[:, :, 4:-8],\n                                       y_pred[:, :, 4:-8])\n        # 框的位置的loss\n        # batch_size,8732,4 -&gt; batch_size,8732\n        loc_loss = self._l1_smooth_loss(y_true[:, :, :4],\n                                        y_pred[:, :, :4])\n\n        # 获取所有的正标签的loss\n        # 每一张图的pos的个数\n        num_pos = tf.reduce_sum(y_true[:, :, -8], axis=-1)\n        # 每一张图的pos_loc_loss\n        pos_loc_loss = tf.reduce_sum(loc_loss * y_true[:, :, -8],\n                                     axis=1)\n        # 每一张图的pos_conf_loss\n        pos_conf_loss = tf.reduce_sum(conf_loss * y_true[:, :, -8],\n                                      axis=1)\n\n        # 获取一定的负样本\n        num_neg = tf.minimum(self.neg_pos_ratio * num_pos,\n                             num_boxes - num_pos)\n\n        # 找到了哪些值是大于0的\n        pos_num_neg_mask = tf.greater(num_neg, 0)\n        # 获得一个1.0\n        has_min = tf.to_float(tf.reduce_any(pos_num_neg_mask))\n        num_neg = tf.concat( axis=0,values=[num_neg,\n                                [(1 - has_min) * self.negatives_for_hard]])\n        # 求平均每个图片要取多少个负样本\n        num_neg_batch = tf.reduce_mean(tf.boolean_mask(num_neg,\n                                                      tf.greater(num_neg, 0)))\n        num_neg_batch = tf.to_int32(num_neg_batch)\n\n        # conf的起始\n        confs_start = 4 + self.background_label_id + 1\n        # conf的结束\n        confs_end = confs_start + self.num_classes - 1\n\n        # 找到实际上在该位置不应该有预测结果的框，求他们最大的置信度。\n        max_confs = tf.reduce_max(y_pred[:, :, confs_start:confs_end],\n                                  axis=2)\n\n        # 取top_k个置信度，作为负样本\n        _, indices = tf.nn.top_k(max_confs * (1 - y_true[:, :, -8]),\n                                 k=num_neg_batch)\n\n        # 找到其在1维上的索引\n        batch_idx = tf.expand_dims(tf.range(0, batch_size), 1)\n        batch_idx = tf.tile(batch_idx, (1, num_neg_batch))\n        full_indices = (tf.reshape(batch_idx, [-1]) * tf.to_int32(num_boxes) +\n                        tf.reshape(indices, [-1]))\n\n\n        neg_conf_loss = tf.gather(tf.reshape(conf_loss, [-1]),\n                                  full_indices)\n        neg_conf_loss = tf.reshape(neg_conf_loss,\n                                   [batch_size, num_neg_batch])\n        neg_conf_loss = tf.reduce_sum(neg_conf_loss, axis=1)\n\n        # 求loss总和\n        total_loss = K.sum(pos_conf_loss + neg_conf_loss)/K.cast(batch_size,K.dtype(pos_conf_loss))\n\n        total_loss +=  K.sum(self.alpha * pos_loc_loss)/K.cast(batch_size,K.dtype(pos_loc_loss))\n        return total_loss\n</code></pre>\n<p>至此，所有关于SSD的关键部分就讲解完了，后续会陆续更新其他算法。</p>\n"},{"title":"MobileNet","date":"2021-04-20T12:17:00.000Z","_content":"\n## 深度学习神经网络特征提取（三）\n\n### MobileNet简介\n\n在之前的文章中已经介绍了`VGG`和`ResNet`相关的网络结构，随着深度学习的发展，都在追求精度和准确性，因此也导致了网络层数的加深抑或网络的扩展。然而随着网络的不断加深和扩展，参数的数量也在急剧上升，从而导致性能的下降。`MobileNet`的出现也正是为了解决这种情况。\n\n### MobileNetv1\n\n`MobileNetv1`网络特点主要集中于提出的深度可分离卷积，其网络结构部分只是线性连接，如下图所示。\n\n![MobileNetv1](http://39.106.34.39:4567/20191030153845940.png)\n\n#### 深度可分离卷积\n\n介绍深度可分离卷积，那我们不得不与常规的卷积进行对比，常规的卷积操作如下图。\n\n![常规卷积](http://39.106.34.39:4567/v2-617b082492f5c1c31bde1c6e2d994bc0_720w.jpg)\n\n对于一张通道数为3，长宽为5的输入图像，经过3x3的卷积核，且输出层数为4的卷积时，其卷积核的真实情况如上图，在此种情况下参数量为：4x3x3x3=108。\n而在深度可分离卷积中，我们进行同样的3x3的卷积核，且输出层数为4的卷积时，其操作情况如下两张图片。\n\n![图1](http://39.106.34.39:4567/v2-a20824492e3e8778a959ca3731dfeea3_720w.jpg)\n![图2](http://39.106.34.39:4567/v2-2cdae9b3ad2f1d07e2c738331dac6d8b_720w.jpg)\n\n在深度可分离卷积中，首先通过N个3x3的卷积核（其中N为输入的层数，在图一中N为3）与输入层数一一对应进行特征提取，然后再通过M个1xN的卷积进行层数的缩放（图2）。在这种情况下，参数量为：3x3x3+1x1x3x4=39。相较于常规卷积操作，深度可分离卷积的参数量下降了很多，大大提高了模型的运行性能，并且对最终的结果的精确度影响并不是很高。\n\n#### MobileNetv1的网络结构\n\n在上图中，我们给出了`MobileNetv1`的网络结构，主要处理流程为：\n- （步长为2的卷积和归一化）x 1\n- （步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化，步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 3\n- （步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化）x 5\n- （步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 2\n- 一次7x7平均池化，一层全连接层\n- 最后softmax层\n\n代码如下：\n```python\n#-------------------------------------------------------------#\n#   MobileNet的网络部分\n#-------------------------------------------------------------#\ndef MobileNet(input_shape=[224,224,3], depth_multiplier=1, dropout=1e-3, classes=1000):\n    img_input = Input(shape=input_shape)\n\n    # 224,224,3 -> 112,112,32\n    x = _conv_block(img_input, 32, strides=(2, 2))\n\n    # 112,112,32 -> 112,112,64\n    x = _depthwise_conv_block(x, 64, depth_multiplier, block_id=1)\n\n    # 112,112,64 -> 56,56,128\n    x = _depthwise_conv_block(x, 128, depth_multiplier, strides=(2, 2), block_id=2)\n    # 56,56,128 -> 56,56,128\n    x = _depthwise_conv_block(x, 128, depth_multiplier, block_id=3)\n\n    # 56,56,128 -> 28,28,256\n    x = _depthwise_conv_block(x, 256, depth_multiplier, strides=(2, 2), block_id=4)\n    \n    # 28,28,256 -> 28,28,256\n    x = _depthwise_conv_block(x, 256, depth_multiplier, block_id=5)\n\n    # 28,28,256 -> 14,14,512\n    x = _depthwise_conv_block(x, 512, depth_multiplier, strides=(2, 2), block_id=6)\n    \n    # 14,14,512 -> 14,14,512\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=7)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=8)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=9)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=10)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=11)\n\n    # 14,14,512 -> 7,7,1024\n    x = _depthwise_conv_block(x, 1024, depth_multiplier, strides=(2, 2), block_id=12)\n    x = _depthwise_conv_block(x, 1024, depth_multiplier, block_id=13)\n\n    # 7,7,1024 -> 1,1,1024\n    x = GlobalAveragePooling2D()(x)\n    x = Reshape((1, 1, 1024), name='reshape_1')(x)\n    x = Dropout(dropout, name='dropout')(x)\n    x = Conv2D(classes, (1, 1),padding='same', name='conv_preds')(x)\n    x = Activation('softmax', name='act_softmax')(x)\n    x = Reshape((classes,), name='reshape_2')(x)\n\n    inputs = img_input\n\n    model = Model(inputs, x, name='mobilenet_1_0_224_tf')\n    return model\n\ndef _conv_block(inputs, filters, kernel=(3, 3), strides=(1, 1)):\n    x = Conv2D(filters, kernel, padding='same', use_bias=False, strides=strides, name='conv1')(inputs)\n    x = BatchNormalization(name='conv1_bn')(x)\n    return Activation(relu6, name='conv1_relu')(x)\n\n\ndef _depthwise_conv_block(inputs, pointwise_conv_filters, depth_multiplier=1, strides=(1, 1), block_id=1):\n\n    x = DepthwiseConv2D((3, 3), padding='same', depth_multiplier=depth_multiplier, strides=strides, use_bias=False, name='conv_dw_%d' % block_id)(inputs)\n\n    x = BatchNormalization(name='conv_dw_%d_bn' % block_id)(x)\n    x = Activation(relu6, name='conv_dw_%d_relu' % block_id)(x)\n\n    x = Conv2D(pointwise_conv_filters, (1, 1), padding='same', use_bias=False, strides=(1, 1), name='conv_pw_%d' % block_id)(x)\n    x = BatchNormalization(name='conv_pw_%d_bn' % block_id)(x)\n    return Activation(relu6, name='conv_pw_%d_relu' % block_id)(x)\n\ndef relu6(x):\n    return K.relu(x, max_value=6)\n```\n\n### MobileNetv2\n\n`MobileNetv2`网络特点相较于`MobileNetv1`提出了反残差结构和线性瓶颈结构，总体网络结构如下图所示。\n\n![MobileNetv2](http://39.106.34.39:4567/20191101094224444.png)\n\n#### 反残差结构和线性瓶颈结构\n\n反残差结构是相对于ResNet50而言的，此外MobileNetv2的基础结构和ResNet的基础结构一样，同样是双分支残差连接：\n\n![结构对比](http://39.106.34.39:4567/201911131056046.png)\n![基础结构](http://39.106.34.39:4567/v2-38bcaaee3e9e28611ecc984727e6d598_720w.png)\n\n其中ResNet50中先卷积降维，然后进行3x3卷积提取特征，然后在进行升维，这样做在实际中部证明是比直接3x3卷积效果更好的。而在`MobileNetv2`中，反向进行操作。\n而所谓的线性瓶颈结构则是在卷积降维之后不再进行`ReLu6`层激活，保证提取得到的特征不被破坏，直接与输入相加。\n\n#### MobileNetv2的网络结构\n\n在上图中，我们给出了`MobileNetv2`的网络结构，主要处理流程为：\n- 步长为2的卷积层 x 1\n- 步长为1的瓶颈层 x 1\n- 步长为2的瓶颈层 x 3\n- 步长为1的瓶颈层 x 1\n- 步长为2的瓶颈层 x 1\n- 步长为1的瓶颈层 x 1\n- 步长为1的卷积层 x 1\n- 7x7 平均池化层 x 1\n- 全连接层softmax分类\n\n代码如下：\n```python\n#-------------------------------------------------------------#\n#   MobileNetV2的网络部分\n#-------------------------------------------------------------#\n# relu6！\ndef relu6(x):\n    return K.relu(x, max_value=6)\n\n\ndef MobileNetV2(input_shape=[224,224,3], classes=1000):\n\n    img_input = Input(shape=input_shape)\n\n    # 224,224,3 -> 112,112,32\n    x = ZeroPadding2D(padding=(1, 1), name='Conv1_pad')(img_input)\n    x = Conv2D(32, kernel_size=3, strides=(2, 2), padding='valid', use_bias=False, name='Conv1')(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name='bn_Conv1')(x)\n    x = Activation(relu6, name='Conv1_relu')(x)\n\n    # 112,112,32 -> 112,112,16\n    x = _inverted_res_block(x, filters=16, stride=1,expansion=1, block_id=0)\n\n    # 112,112,16 -> 56,56,24\n    x = _inverted_res_block(x, filters=24, stride=2, expansion=6, block_id=1)\n    x = _inverted_res_block(x, filters=24, stride=1, expansion=6, block_id=2)\n\n    # 56,56,24 -> 28,28,32\n    x = _inverted_res_block(x, filters=32, stride=2, expansion=6, block_id=3)\n    x = _inverted_res_block(x, filters=32, stride=1, expansion=6, block_id=4)\n    x = _inverted_res_block(x, filters=32, stride=1, expansion=6, block_id=5)\n\n    # 28,28,32 -> 14,14,64\n    x = _inverted_res_block(x, filters=64, stride=2, expansion=6, block_id=6)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=7)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=8)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=9)\n\n    # 14,14,64 -> 14,14,96\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=10)\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=11)\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=12)\n    # 14,14,96 -> 7,7,160\n    x = _inverted_res_block(x, filters=160, stride=2, expansion=6, block_id=13)\n    x = _inverted_res_block(x, filters=160, stride=1, expansion=6, block_id=14)\n    x = _inverted_res_block(x, filters=160, stride=1, expansion=6, block_id=15)\n\n    # 7,7,160 -> 7,7,320\n    x = _inverted_res_block(x, filters=320, stride=1, expansion=6, block_id=16)\n\n    # 7,7,320 -> 7,7,1280\n    x = Conv2D(1280, kernel_size=1, use_bias=False, name='Conv_1')(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name='Conv_1_bn')(x)\n    x = Activation(relu6, name='out_relu')(x)\n\n    x = GlobalAveragePooling2D()(x)\n    x = Dense(classes, activation='softmax', use_bias=True, name='Logits')(x)\n\n    inputs = img_input\n\n    model = Model(inputs, x)\n\n    return model\n\n\ndef _inverted_res_block(inputs, expansion, stride, pointwise_filters, block_id):\n    in_channels = backend.int_shape(inputs)[-1]\n    x = inputs\n    prefix = 'block_{}_'.format(block_id)\n\n    # part1 数据扩张\n    if block_id:\n        # Expand\n        x = Conv2D(expansion * in_channels, kernel_size=1, padding='same', use_bias=False, activation=None, name=prefix + 'expand')(x)\n        x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + 'expand_BN')(x)\n        x = Activation(relu6, name=prefix + 'expand_relu')(x)\n    else:\n        prefix = 'expanded_conv_'\n\n    if stride == 2:\n        x = ZeroPadding2D(padding=(1,1), name=prefix + 'pad')(x)\n    \n    # part2 可分离卷积\n    x = DepthwiseConv2D(kernel_size=3, strides=stride, activation=None, use_bias=False, padding='same' if stride == 1 else 'valid', name=prefix + 'depthwise')(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + 'depthwise_BN')(x)\n\n    x = Activation(relu6, name=prefix + 'depthwise_relu')(x)\n\n    # part3压缩特征，而且不使用relu函数，保证特征不被破坏\n    x = Conv2D(pointwise_filters, kernel_size=1, padding='same', use_bias=False, activation=None, name=prefix + 'project')(x)\n\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + 'project_BN')(x)\n\n    if in_channels == pointwise_filters and stride == 1:\n        return Add(name=prefix + 'add')([inputs, x])\n    return x\n```\n\n### MobileNetv3\n\n`MobileNetv3`网络特点相较于`MobileNetv2`主要添加了以下特点：\n\n- 轻量级的注意力机制\n- 利用h-swish代替swish函数\n\n主要网络结构有两种，一种large，一种small，主要区别在于通道数和基础块的次数，本文介绍small类型，网络结构如下：\n\n![MobileNetv3](http://39.106.34.39:4567/20200122140810351.png)\n\n#### 轻量级注意力机制引入\n\n在`MobileNetv3`中，由于轻量级注意力机制的引入，使得原来的基础块结构产生了一些变化，新的结构如图所示:\n\n![MobileNetv3 block](http://39.106.34.39:4567/20200122110008244.png)\n\n从上图我们可以直观的感受到，轻量级注意力机制的引入主要用于改变各个特征层之间的权重系数。\n相信通过前面代码的学习你对特征提取的网络已经有了一定的了解，那么下面的代码就很容易理解了。\n代码如下：\n```python\nalpha = 1\ndef relu6(x):\n    # relu函数\n    return K.relu(x, max_value=6.0)\n\ndef hard_swish(x):\n    # 利用relu函数乘上x模拟sigmoid\n    return x * K.relu(x + 3.0, max_value=6.0) / 6.0\n\ndef return_activation(x, nl):\n    # 用于判断使用哪个激活函数\n    if nl == 'HS':\n        x = Activation(hard_swish)(x)\n    if nl == 'RE':\n        x = Activation(relu6)(x)\n\n    return x\n\ndef conv_block(inputs, filters, kernel, strides, nl):\n    # 一个卷积单元，也就是conv2d + batchnormalization + activation\n    channel_axis = 1 if K.image_data_format() == 'channels_first' else -1\n\n    x = Conv2D(filters, kernel, padding='same', strides=strides)(inputs)\n    x = BatchNormalization(axis=channel_axis)(x)\n\n    return return_activation(x, nl)\n\ndef squeeze(inputs):\n    # 注意力机制单元\n    input_channels = int(inputs.shape[-1])\n\n    x = GlobalAveragePooling2D()(inputs)\n    x = Dense(int(input_channels/4))(x)\n    x = Activation(relu6)(x)\n    x = Dense(input_channels)(x)\n    x = Activation(hard_swish)(x)\n    x = Reshape((1, 1, input_channels))(x)\n    x = Multiply()([inputs, x])\n\n    return x\n\ndef bottleneck(inputs, filters, kernel, up_dim, stride, sq, nl):\n    channel_axis = 1 if K.image_data_format() == 'channels_first' else -1\n\n    input_shape = K.int_shape(inputs)\n\n    tchannel = int(up_dim)\n    cchannel = int(alpha * filters)\n\n    r = stride == 1 and input_shape[3] == filters\n    # 1x1卷积调整通道数，通道数上升\n    x = conv_block(inputs, tchannel, (1, 1), (1, 1), nl)\n    # 进行3x3深度可分离卷积\n    x = DepthwiseConv2D(kernel, strides=(stride, stride), depth_multiplier=1, padding='same')(x)\n    x = BatchNormalization(axis=channel_axis)(x)\n    x = return_activation(x, nl)\n    # 引入注意力机制\n    if sq:\n        x = squeeze(x)\n    # 下降通道数\n    x = Conv2D(cchannel, (1, 1), strides=(1, 1), padding='same')(x)\n    x = BatchNormalization(axis=channel_axis)(x)\n\n\n    if r:\n        x = Add()([x, inputs])\n\n    return x\n\ndef MobileNetv3_small(shape = (224,224,3),n_class = 1000):\n    inputs = Input(shape)\n    # 224,224,3 -> 112,112,16\n    x = conv_block(inputs, 16, (3, 3), strides=(2, 2), nl='HS')\n\n    # 112,112,16 -> 56,56,16\n    x = bottleneck(x, 16, (3, 3), up_dim=16, stride=2, sq=True, nl='RE')\n\n    # 56,56,16 -> 28,28,24\n    x = bottleneck(x, 24, (3, 3), up_dim=72, stride=2, sq=False, nl='RE')\n    x = bottleneck(x, 24, (3, 3), up_dim=88, stride=1, sq=False, nl='RE')\n    \n    # 28,28,24 -> 14,14,40\n    x = bottleneck(x, 40, (5, 5), up_dim=96, stride=2, sq=True, nl='HS')\n    x = bottleneck(x, 40, (5, 5), up_dim=240, stride=1, sq=True, nl='HS')\n    x = bottleneck(x, 40, (5, 5), up_dim=240, stride=1, sq=True, nl='HS')\n    # 14,14,40 -> 14,14,48\n    x = bottleneck(x, 48, (5, 5), up_dim=120, stride=1, sq=True, nl='HS')\n    x = bottleneck(x, 48, (5, 5), up_dim=144, stride=1, sq=True, nl='HS')\n\n    # 14,14,48 -> 7,7,96\n    x = bottleneck(x, 96, (5, 5), up_dim=288, stride=2, sq=True, nl='HS')\n    x = bottleneck(x, 96, (5, 5), up_dim=576, stride=1, sq=True, nl='HS')\n    x = bottleneck(x, 96, (5, 5), up_dim=576, stride=1, sq=True, nl='HS')\n\n    x = conv_block(x, 576, (1, 1), strides=(1, 1), nl='HS')\n    x = GlobalAveragePooling2D()(x)\n    x = Reshape((1, 1, 576))(x)\n\n    x = Conv2D(1024, (1, 1), padding='same')(x)\n    x = return_activation(x, 'HS')\n\n    x = Conv2D(n_class, (1, 1), padding='same', activation='softmax')(x)\n    x = Reshape((n_class,))(x)\n\n    model = Model(inputs, x)\n\n    return model\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/feature_extractor/mobilenet.md","raw":"---\ntitle: MobileNet\ndate: 2021-04-20 20:17:00\ncategories:\n- Deep Learning\ntags:\n- MobileNetv1\n- MobileNetv2\n- MobileNetv3\n- Fanrencli\n---\n\n## 深度学习神经网络特征提取（三）\n\n### MobileNet简介\n\n在之前的文章中已经介绍了`VGG`和`ResNet`相关的网络结构，随着深度学习的发展，都在追求精度和准确性，因此也导致了网络层数的加深抑或网络的扩展。然而随着网络的不断加深和扩展，参数的数量也在急剧上升，从而导致性能的下降。`MobileNet`的出现也正是为了解决这种情况。\n\n### MobileNetv1\n\n`MobileNetv1`网络特点主要集中于提出的深度可分离卷积，其网络结构部分只是线性连接，如下图所示。\n\n![MobileNetv1](http://39.106.34.39:4567/20191030153845940.png)\n\n#### 深度可分离卷积\n\n介绍深度可分离卷积，那我们不得不与常规的卷积进行对比，常规的卷积操作如下图。\n\n![常规卷积](http://39.106.34.39:4567/v2-617b082492f5c1c31bde1c6e2d994bc0_720w.jpg)\n\n对于一张通道数为3，长宽为5的输入图像，经过3x3的卷积核，且输出层数为4的卷积时，其卷积核的真实情况如上图，在此种情况下参数量为：4x3x3x3=108。\n而在深度可分离卷积中，我们进行同样的3x3的卷积核，且输出层数为4的卷积时，其操作情况如下两张图片。\n\n![图1](http://39.106.34.39:4567/v2-a20824492e3e8778a959ca3731dfeea3_720w.jpg)\n![图2](http://39.106.34.39:4567/v2-2cdae9b3ad2f1d07e2c738331dac6d8b_720w.jpg)\n\n在深度可分离卷积中，首先通过N个3x3的卷积核（其中N为输入的层数，在图一中N为3）与输入层数一一对应进行特征提取，然后再通过M个1xN的卷积进行层数的缩放（图2）。在这种情况下，参数量为：3x3x3+1x1x3x4=39。相较于常规卷积操作，深度可分离卷积的参数量下降了很多，大大提高了模型的运行性能，并且对最终的结果的精确度影响并不是很高。\n\n#### MobileNetv1的网络结构\n\n在上图中，我们给出了`MobileNetv1`的网络结构，主要处理流程为：\n- （步长为2的卷积和归一化）x 1\n- （步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化，步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 3\n- （步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化）x 5\n- （步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 2\n- 一次7x7平均池化，一层全连接层\n- 最后softmax层\n\n代码如下：\n```python\n#-------------------------------------------------------------#\n#   MobileNet的网络部分\n#-------------------------------------------------------------#\ndef MobileNet(input_shape=[224,224,3], depth_multiplier=1, dropout=1e-3, classes=1000):\n    img_input = Input(shape=input_shape)\n\n    # 224,224,3 -> 112,112,32\n    x = _conv_block(img_input, 32, strides=(2, 2))\n\n    # 112,112,32 -> 112,112,64\n    x = _depthwise_conv_block(x, 64, depth_multiplier, block_id=1)\n\n    # 112,112,64 -> 56,56,128\n    x = _depthwise_conv_block(x, 128, depth_multiplier, strides=(2, 2), block_id=2)\n    # 56,56,128 -> 56,56,128\n    x = _depthwise_conv_block(x, 128, depth_multiplier, block_id=3)\n\n    # 56,56,128 -> 28,28,256\n    x = _depthwise_conv_block(x, 256, depth_multiplier, strides=(2, 2), block_id=4)\n    \n    # 28,28,256 -> 28,28,256\n    x = _depthwise_conv_block(x, 256, depth_multiplier, block_id=5)\n\n    # 28,28,256 -> 14,14,512\n    x = _depthwise_conv_block(x, 512, depth_multiplier, strides=(2, 2), block_id=6)\n    \n    # 14,14,512 -> 14,14,512\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=7)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=8)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=9)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=10)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=11)\n\n    # 14,14,512 -> 7,7,1024\n    x = _depthwise_conv_block(x, 1024, depth_multiplier, strides=(2, 2), block_id=12)\n    x = _depthwise_conv_block(x, 1024, depth_multiplier, block_id=13)\n\n    # 7,7,1024 -> 1,1,1024\n    x = GlobalAveragePooling2D()(x)\n    x = Reshape((1, 1, 1024), name='reshape_1')(x)\n    x = Dropout(dropout, name='dropout')(x)\n    x = Conv2D(classes, (1, 1),padding='same', name='conv_preds')(x)\n    x = Activation('softmax', name='act_softmax')(x)\n    x = Reshape((classes,), name='reshape_2')(x)\n\n    inputs = img_input\n\n    model = Model(inputs, x, name='mobilenet_1_0_224_tf')\n    return model\n\ndef _conv_block(inputs, filters, kernel=(3, 3), strides=(1, 1)):\n    x = Conv2D(filters, kernel, padding='same', use_bias=False, strides=strides, name='conv1')(inputs)\n    x = BatchNormalization(name='conv1_bn')(x)\n    return Activation(relu6, name='conv1_relu')(x)\n\n\ndef _depthwise_conv_block(inputs, pointwise_conv_filters, depth_multiplier=1, strides=(1, 1), block_id=1):\n\n    x = DepthwiseConv2D((3, 3), padding='same', depth_multiplier=depth_multiplier, strides=strides, use_bias=False, name='conv_dw_%d' % block_id)(inputs)\n\n    x = BatchNormalization(name='conv_dw_%d_bn' % block_id)(x)\n    x = Activation(relu6, name='conv_dw_%d_relu' % block_id)(x)\n\n    x = Conv2D(pointwise_conv_filters, (1, 1), padding='same', use_bias=False, strides=(1, 1), name='conv_pw_%d' % block_id)(x)\n    x = BatchNormalization(name='conv_pw_%d_bn' % block_id)(x)\n    return Activation(relu6, name='conv_pw_%d_relu' % block_id)(x)\n\ndef relu6(x):\n    return K.relu(x, max_value=6)\n```\n\n### MobileNetv2\n\n`MobileNetv2`网络特点相较于`MobileNetv1`提出了反残差结构和线性瓶颈结构，总体网络结构如下图所示。\n\n![MobileNetv2](http://39.106.34.39:4567/20191101094224444.png)\n\n#### 反残差结构和线性瓶颈结构\n\n反残差结构是相对于ResNet50而言的，此外MobileNetv2的基础结构和ResNet的基础结构一样，同样是双分支残差连接：\n\n![结构对比](http://39.106.34.39:4567/201911131056046.png)\n![基础结构](http://39.106.34.39:4567/v2-38bcaaee3e9e28611ecc984727e6d598_720w.png)\n\n其中ResNet50中先卷积降维，然后进行3x3卷积提取特征，然后在进行升维，这样做在实际中部证明是比直接3x3卷积效果更好的。而在`MobileNetv2`中，反向进行操作。\n而所谓的线性瓶颈结构则是在卷积降维之后不再进行`ReLu6`层激活，保证提取得到的特征不被破坏，直接与输入相加。\n\n#### MobileNetv2的网络结构\n\n在上图中，我们给出了`MobileNetv2`的网络结构，主要处理流程为：\n- 步长为2的卷积层 x 1\n- 步长为1的瓶颈层 x 1\n- 步长为2的瓶颈层 x 3\n- 步长为1的瓶颈层 x 1\n- 步长为2的瓶颈层 x 1\n- 步长为1的瓶颈层 x 1\n- 步长为1的卷积层 x 1\n- 7x7 平均池化层 x 1\n- 全连接层softmax分类\n\n代码如下：\n```python\n#-------------------------------------------------------------#\n#   MobileNetV2的网络部分\n#-------------------------------------------------------------#\n# relu6！\ndef relu6(x):\n    return K.relu(x, max_value=6)\n\n\ndef MobileNetV2(input_shape=[224,224,3], classes=1000):\n\n    img_input = Input(shape=input_shape)\n\n    # 224,224,3 -> 112,112,32\n    x = ZeroPadding2D(padding=(1, 1), name='Conv1_pad')(img_input)\n    x = Conv2D(32, kernel_size=3, strides=(2, 2), padding='valid', use_bias=False, name='Conv1')(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name='bn_Conv1')(x)\n    x = Activation(relu6, name='Conv1_relu')(x)\n\n    # 112,112,32 -> 112,112,16\n    x = _inverted_res_block(x, filters=16, stride=1,expansion=1, block_id=0)\n\n    # 112,112,16 -> 56,56,24\n    x = _inverted_res_block(x, filters=24, stride=2, expansion=6, block_id=1)\n    x = _inverted_res_block(x, filters=24, stride=1, expansion=6, block_id=2)\n\n    # 56,56,24 -> 28,28,32\n    x = _inverted_res_block(x, filters=32, stride=2, expansion=6, block_id=3)\n    x = _inverted_res_block(x, filters=32, stride=1, expansion=6, block_id=4)\n    x = _inverted_res_block(x, filters=32, stride=1, expansion=6, block_id=5)\n\n    # 28,28,32 -> 14,14,64\n    x = _inverted_res_block(x, filters=64, stride=2, expansion=6, block_id=6)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=7)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=8)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=9)\n\n    # 14,14,64 -> 14,14,96\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=10)\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=11)\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=12)\n    # 14,14,96 -> 7,7,160\n    x = _inverted_res_block(x, filters=160, stride=2, expansion=6, block_id=13)\n    x = _inverted_res_block(x, filters=160, stride=1, expansion=6, block_id=14)\n    x = _inverted_res_block(x, filters=160, stride=1, expansion=6, block_id=15)\n\n    # 7,7,160 -> 7,7,320\n    x = _inverted_res_block(x, filters=320, stride=1, expansion=6, block_id=16)\n\n    # 7,7,320 -> 7,7,1280\n    x = Conv2D(1280, kernel_size=1, use_bias=False, name='Conv_1')(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name='Conv_1_bn')(x)\n    x = Activation(relu6, name='out_relu')(x)\n\n    x = GlobalAveragePooling2D()(x)\n    x = Dense(classes, activation='softmax', use_bias=True, name='Logits')(x)\n\n    inputs = img_input\n\n    model = Model(inputs, x)\n\n    return model\n\n\ndef _inverted_res_block(inputs, expansion, stride, pointwise_filters, block_id):\n    in_channels = backend.int_shape(inputs)[-1]\n    x = inputs\n    prefix = 'block_{}_'.format(block_id)\n\n    # part1 数据扩张\n    if block_id:\n        # Expand\n        x = Conv2D(expansion * in_channels, kernel_size=1, padding='same', use_bias=False, activation=None, name=prefix + 'expand')(x)\n        x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + 'expand_BN')(x)\n        x = Activation(relu6, name=prefix + 'expand_relu')(x)\n    else:\n        prefix = 'expanded_conv_'\n\n    if stride == 2:\n        x = ZeroPadding2D(padding=(1,1), name=prefix + 'pad')(x)\n    \n    # part2 可分离卷积\n    x = DepthwiseConv2D(kernel_size=3, strides=stride, activation=None, use_bias=False, padding='same' if stride == 1 else 'valid', name=prefix + 'depthwise')(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + 'depthwise_BN')(x)\n\n    x = Activation(relu6, name=prefix + 'depthwise_relu')(x)\n\n    # part3压缩特征，而且不使用relu函数，保证特征不被破坏\n    x = Conv2D(pointwise_filters, kernel_size=1, padding='same', use_bias=False, activation=None, name=prefix + 'project')(x)\n\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + 'project_BN')(x)\n\n    if in_channels == pointwise_filters and stride == 1:\n        return Add(name=prefix + 'add')([inputs, x])\n    return x\n```\n\n### MobileNetv3\n\n`MobileNetv3`网络特点相较于`MobileNetv2`主要添加了以下特点：\n\n- 轻量级的注意力机制\n- 利用h-swish代替swish函数\n\n主要网络结构有两种，一种large，一种small，主要区别在于通道数和基础块的次数，本文介绍small类型，网络结构如下：\n\n![MobileNetv3](http://39.106.34.39:4567/20200122140810351.png)\n\n#### 轻量级注意力机制引入\n\n在`MobileNetv3`中，由于轻量级注意力机制的引入，使得原来的基础块结构产生了一些变化，新的结构如图所示:\n\n![MobileNetv3 block](http://39.106.34.39:4567/20200122110008244.png)\n\n从上图我们可以直观的感受到，轻量级注意力机制的引入主要用于改变各个特征层之间的权重系数。\n相信通过前面代码的学习你对特征提取的网络已经有了一定的了解，那么下面的代码就很容易理解了。\n代码如下：\n```python\nalpha = 1\ndef relu6(x):\n    # relu函数\n    return K.relu(x, max_value=6.0)\n\ndef hard_swish(x):\n    # 利用relu函数乘上x模拟sigmoid\n    return x * K.relu(x + 3.0, max_value=6.0) / 6.0\n\ndef return_activation(x, nl):\n    # 用于判断使用哪个激活函数\n    if nl == 'HS':\n        x = Activation(hard_swish)(x)\n    if nl == 'RE':\n        x = Activation(relu6)(x)\n\n    return x\n\ndef conv_block(inputs, filters, kernel, strides, nl):\n    # 一个卷积单元，也就是conv2d + batchnormalization + activation\n    channel_axis = 1 if K.image_data_format() == 'channels_first' else -1\n\n    x = Conv2D(filters, kernel, padding='same', strides=strides)(inputs)\n    x = BatchNormalization(axis=channel_axis)(x)\n\n    return return_activation(x, nl)\n\ndef squeeze(inputs):\n    # 注意力机制单元\n    input_channels = int(inputs.shape[-1])\n\n    x = GlobalAveragePooling2D()(inputs)\n    x = Dense(int(input_channels/4))(x)\n    x = Activation(relu6)(x)\n    x = Dense(input_channels)(x)\n    x = Activation(hard_swish)(x)\n    x = Reshape((1, 1, input_channels))(x)\n    x = Multiply()([inputs, x])\n\n    return x\n\ndef bottleneck(inputs, filters, kernel, up_dim, stride, sq, nl):\n    channel_axis = 1 if K.image_data_format() == 'channels_first' else -1\n\n    input_shape = K.int_shape(inputs)\n\n    tchannel = int(up_dim)\n    cchannel = int(alpha * filters)\n\n    r = stride == 1 and input_shape[3] == filters\n    # 1x1卷积调整通道数，通道数上升\n    x = conv_block(inputs, tchannel, (1, 1), (1, 1), nl)\n    # 进行3x3深度可分离卷积\n    x = DepthwiseConv2D(kernel, strides=(stride, stride), depth_multiplier=1, padding='same')(x)\n    x = BatchNormalization(axis=channel_axis)(x)\n    x = return_activation(x, nl)\n    # 引入注意力机制\n    if sq:\n        x = squeeze(x)\n    # 下降通道数\n    x = Conv2D(cchannel, (1, 1), strides=(1, 1), padding='same')(x)\n    x = BatchNormalization(axis=channel_axis)(x)\n\n\n    if r:\n        x = Add()([x, inputs])\n\n    return x\n\ndef MobileNetv3_small(shape = (224,224,3),n_class = 1000):\n    inputs = Input(shape)\n    # 224,224,3 -> 112,112,16\n    x = conv_block(inputs, 16, (3, 3), strides=(2, 2), nl='HS')\n\n    # 112,112,16 -> 56,56,16\n    x = bottleneck(x, 16, (3, 3), up_dim=16, stride=2, sq=True, nl='RE')\n\n    # 56,56,16 -> 28,28,24\n    x = bottleneck(x, 24, (3, 3), up_dim=72, stride=2, sq=False, nl='RE')\n    x = bottleneck(x, 24, (3, 3), up_dim=88, stride=1, sq=False, nl='RE')\n    \n    # 28,28,24 -> 14,14,40\n    x = bottleneck(x, 40, (5, 5), up_dim=96, stride=2, sq=True, nl='HS')\n    x = bottleneck(x, 40, (5, 5), up_dim=240, stride=1, sq=True, nl='HS')\n    x = bottleneck(x, 40, (5, 5), up_dim=240, stride=1, sq=True, nl='HS')\n    # 14,14,40 -> 14,14,48\n    x = bottleneck(x, 48, (5, 5), up_dim=120, stride=1, sq=True, nl='HS')\n    x = bottleneck(x, 48, (5, 5), up_dim=144, stride=1, sq=True, nl='HS')\n\n    # 14,14,48 -> 7,7,96\n    x = bottleneck(x, 96, (5, 5), up_dim=288, stride=2, sq=True, nl='HS')\n    x = bottleneck(x, 96, (5, 5), up_dim=576, stride=1, sq=True, nl='HS')\n    x = bottleneck(x, 96, (5, 5), up_dim=576, stride=1, sq=True, nl='HS')\n\n    x = conv_block(x, 576, (1, 1), strides=(1, 1), nl='HS')\n    x = GlobalAveragePooling2D()(x)\n    x = Reshape((1, 1, 576))(x)\n\n    x = Conv2D(1024, (1, 1), padding='same')(x)\n    x = return_activation(x, 'HS')\n\n    x = Conv2D(n_class, (1, 1), padding='same', activation='softmax')(x)\n    x = Reshape((n_class,))(x)\n\n    model = Model(inputs, x)\n\n    return model\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"feature_extractor/mobilenet","published":1,"updated":"2021-07-13T08:16:24.710Z","_id":"cknq6gtow0000gwuo23tu1wuh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习神经网络特征提取（三）\"><a href=\"#深度学习神经网络特征提取（三）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（三）\"></a>深度学习神经网络特征提取（三）</h2><h3 id=\"MobileNet简介\"><a href=\"#MobileNet简介\" class=\"headerlink\" title=\"MobileNet简介\"></a>MobileNet简介</h3><p>在之前的文章中已经介绍了<code>VGG</code>和<code>ResNet</code>相关的网络结构，随着深度学习的发展，都在追求精度和准确性，因此也导致了网络层数的加深抑或网络的扩展。然而随着网络的不断加深和扩展，参数的数量也在急剧上升，从而导致性能的下降。<code>MobileNet</code>的出现也正是为了解决这种情况。</p>\n<h3 id=\"MobileNetv1\"><a href=\"#MobileNetv1\" class=\"headerlink\" title=\"MobileNetv1\"></a>MobileNetv1</h3><p><code>MobileNetv1</code>网络特点主要集中于提出的深度可分离卷积，其网络结构部分只是线性连接，如下图所示。</p>\n<p><img src=\"http://39.106.34.39:4567/20191030153845940.png\" alt=\"MobileNetv1\"></p>\n<h4 id=\"深度可分离卷积\"><a href=\"#深度可分离卷积\" class=\"headerlink\" title=\"深度可分离卷积\"></a>深度可分离卷积</h4><p>介绍深度可分离卷积，那我们不得不与常规的卷积进行对比，常规的卷积操作如下图。</p>\n<p><img src=\"http://39.106.34.39:4567/v2-617b082492f5c1c31bde1c6e2d994bc0_720w.jpg\" alt=\"常规卷积\"></p>\n<p>对于一张通道数为3，长宽为5的输入图像，经过3x3的卷积核，且输出层数为4的卷积时，其卷积核的真实情况如上图，在此种情况下参数量为：4x3x3x3=108。<br>而在深度可分离卷积中，我们进行同样的3x3的卷积核，且输出层数为4的卷积时，其操作情况如下两张图片。</p>\n<p><img src=\"http://39.106.34.39:4567/v2-a20824492e3e8778a959ca3731dfeea3_720w.jpg\" alt=\"图1\"><br><img src=\"http://39.106.34.39:4567/v2-2cdae9b3ad2f1d07e2c738331dac6d8b_720w.jpg\" alt=\"图2\"></p>\n<p>在深度可分离卷积中，首先通过N个3x3的卷积核（其中N为输入的层数，在图一中N为3）与输入层数一一对应进行特征提取，然后再通过M个1xN的卷积进行层数的缩放（图2）。在这种情况下，参数量为：3x3x3+1x1x3x4=39。相较于常规卷积操作，深度可分离卷积的参数量下降了很多，大大提高了模型的运行性能，并且对最终的结果的精确度影响并不是很高。</p>\n<h4 id=\"MobileNetv1的网络结构\"><a href=\"#MobileNetv1的网络结构\" class=\"headerlink\" title=\"MobileNetv1的网络结构\"></a>MobileNetv1的网络结构</h4><p>在上图中，我们给出了<code>MobileNetv1</code>的网络结构，主要处理流程为：</p>\n<ul>\n<li>（步长为2的卷积和归一化）x 1</li>\n<li>（步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化，步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 3</li>\n<li>（步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化）x 5</li>\n<li>（步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 2</li>\n<li>一次7x7平均池化，一层全连接层</li>\n<li>最后softmax层</li>\n</ul>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token comment\" spellcheck=\"true\">#   MobileNet的网络部分</span>\n<span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">MobileNet</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> dropout<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> classes<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    img_input <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span>input_shape<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 224,224,3 -> 112,112,32</span>\n    x <span class=\"token operator\">=</span> _conv_block<span class=\"token punctuation\">(</span>img_input<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 112,112,32 -> 112,112,64</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 112,112,64 -> 56,56,128</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 56,56,128 -> 56,56,128</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 56,56,128 -> 28,28,256</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 28,28,256 -> 28,28,256</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 28,28,256 -> 14,14,512</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 14,14,512 -> 14,14,512</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 14,14,512 -> 7,7,1024</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _depthwise_conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 7,7,1024 -> 1,1,1024</span>\n    x <span class=\"token operator\">=</span> GlobalAveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'reshape_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Dropout<span class=\"token punctuation\">(</span>dropout<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'dropout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv_preds'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'act_softmax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'reshape_2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    inputs <span class=\"token operator\">=</span> img_input\n\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mobilenet_1_0_224_tf'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_conv_block</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">,</span> kernel<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv1_relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_depthwise_conv_block</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> pointwise_conv_filters<span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    x <span class=\"token operator\">=</span> DepthwiseConv2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token operator\">=</span>depth_multiplier<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv_dw_%d'</span> <span class=\"token operator\">%</span> block_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv_dw_%d_bn'</span> <span class=\"token operator\">%</span> block_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv_dw_%d_relu'</span> <span class=\"token operator\">%</span> block_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>pointwise_conv_filters<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv_pw_%d'</span> <span class=\"token operator\">%</span> block_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'conv_pw_%d_bn'</span> <span class=\"token operator\">%</span> block_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv_pw_%d_relu'</span> <span class=\"token operator\">%</span> block_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">relu6</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> K<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> max_value<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"MobileNetv2\"><a href=\"#MobileNetv2\" class=\"headerlink\" title=\"MobileNetv2\"></a>MobileNetv2</h3><p><code>MobileNetv2</code>网络特点相较于<code>MobileNetv1</code>提出了反残差结构和线性瓶颈结构，总体网络结构如下图所示。</p>\n<p><img src=\"http://39.106.34.39:4567/20191101094224444.png\" alt=\"MobileNetv2\"></p>\n<h4 id=\"反残差结构和线性瓶颈结构\"><a href=\"#反残差结构和线性瓶颈结构\" class=\"headerlink\" title=\"反残差结构和线性瓶颈结构\"></a>反残差结构和线性瓶颈结构</h4><p>反残差结构是相对于ResNet50而言的，此外MobileNetv2的基础结构和ResNet的基础结构一样，同样是双分支残差连接：</p>\n<p><img src=\"http://39.106.34.39:4567/201911131056046.png\" alt=\"结构对比\"><br><img src=\"http://39.106.34.39:4567/v2-38bcaaee3e9e28611ecc984727e6d598_720w.png\" alt=\"基础结构\"></p>\n<p>其中ResNet50中先卷积降维，然后进行3x3卷积提取特征，然后在进行升维，这样做在实际中部证明是比直接3x3卷积效果更好的。而在<code>MobileNetv2</code>中，反向进行操作。<br>而所谓的线性瓶颈结构则是在卷积降维之后不再进行<code>ReLu6</code>层激活，保证提取得到的特征不被破坏，直接与输入相加。</p>\n<h4 id=\"MobileNetv2的网络结构\"><a href=\"#MobileNetv2的网络结构\" class=\"headerlink\" title=\"MobileNetv2的网络结构\"></a>MobileNetv2的网络结构</h4><p>在上图中，我们给出了<code>MobileNetv2</code>的网络结构，主要处理流程为：</p>\n<ul>\n<li>步长为2的卷积层 x 1</li>\n<li>步长为1的瓶颈层 x 1</li>\n<li>步长为2的瓶颈层 x 3</li>\n<li>步长为1的瓶颈层 x 1</li>\n<li>步长为2的瓶颈层 x 1</li>\n<li>步长为1的瓶颈层 x 1</li>\n<li>步长为1的卷积层 x 1</li>\n<li>7x7 平均池化层 x 1</li>\n<li>全连接层softmax分类</li>\n</ul>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token comment\" spellcheck=\"true\">#   MobileNetV2的网络部分</span>\n<span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token comment\" spellcheck=\"true\"># relu6！</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">relu6</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> K<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> max_value<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">MobileNetV2</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> classes<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    img_input <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span>input_shape<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 224,224,3 -> 112,112,32</span>\n    x <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Conv1_pad'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>img_input<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Conv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>epsilon<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.999</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'bn_Conv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Conv1_relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 112,112,32 -> 112,112,16</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>expansion<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 112,112,16 -> 56,56,24</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 56,56,24 -> 28,28,32</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 28,28,32 -> 14,14,64</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 14,14,64 -> 14,14,96</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 14,14,96 -> 7,7,160</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 7,7,160 -> 7,7,320</span>\n    x <span class=\"token operator\">=</span> _inverted_res_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token operator\">=</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> block_id<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 7,7,320 -> 7,7,1280</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">1280</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Conv_1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>epsilon<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.999</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Conv_1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'out_relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> GlobalAveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Dense<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Logits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    inputs <span class=\"token operator\">=</span> img_input\n\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> model\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_inverted_res_block</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> expansion<span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">,</span> pointwise_filters<span class=\"token punctuation\">,</span> block_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    in_channels <span class=\"token operator\">=</span> backend<span class=\"token punctuation\">.</span>int_shape<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    x <span class=\"token operator\">=</span> inputs\n    prefix <span class=\"token operator\">=</span> <span class=\"token string\">'block_{}_'</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>block_id<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># part1 数据扩张</span>\n    <span class=\"token keyword\">if</span> block_id<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\"># Expand</span>\n        x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>expansion <span class=\"token operator\">*</span> in_channels<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'expand'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>epsilon<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.999</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'expand_BN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'expand_relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        prefix <span class=\"token operator\">=</span> <span class=\"token string\">'expanded_conv_'</span>\n\n    <span class=\"token keyword\">if</span> stride <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'pad'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># part2 可分离卷积</span>\n    x <span class=\"token operator\">=</span> DepthwiseConv2D<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>stride<span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span> <span class=\"token keyword\">if</span> stride <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'valid'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'depthwise'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>epsilon<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.999</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'depthwise_BN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'depthwise_relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># part3压缩特征，而且不使用relu函数，保证特征不被破坏</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>pointwise_filters<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'project'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>epsilon<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.999</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'project_BN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> in_channels <span class=\"token operator\">==</span> pointwise_filters <span class=\"token operator\">and</span> stride <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> Add<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>inputs<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x</code></pre>\n<h3 id=\"MobileNetv3\"><a href=\"#MobileNetv3\" class=\"headerlink\" title=\"MobileNetv3\"></a>MobileNetv3</h3><p><code>MobileNetv3</code>网络特点相较于<code>MobileNetv2</code>主要添加了以下特点：</p>\n<ul>\n<li>轻量级的注意力机制</li>\n<li>利用h-swish代替swish函数</li>\n</ul>\n<p>主要网络结构有两种，一种large，一种small，主要区别在于通道数和基础块的次数，本文介绍small类型，网络结构如下：</p>\n<p><img src=\"http://39.106.34.39:4567/20200122140810351.png\" alt=\"MobileNetv3\"></p>\n<h4 id=\"轻量级注意力机制引入\"><a href=\"#轻量级注意力机制引入\" class=\"headerlink\" title=\"轻量级注意力机制引入\"></a>轻量级注意力机制引入</h4><p>在<code>MobileNetv3</code>中，由于轻量级注意力机制的引入，使得原来的基础块结构产生了一些变化，新的结构如图所示:</p>\n<p><img src=\"http://39.106.34.39:4567/20200122110008244.png\" alt=\"MobileNetv3 block\"></p>\n<p>从上图我们可以直观的感受到，轻量级注意力机制的引入主要用于改变各个特征层之间的权重系数。<br>相信通过前面代码的学习你对特征提取的网络已经有了一定的了解，那么下面的代码就很容易理解了。<br>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">alpha <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">relu6</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># relu函数</span>\n    <span class=\"token keyword\">return</span> K<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> max_value<span class=\"token operator\">=</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hard_swish</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 利用relu函数乘上x模拟sigmoid</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> K<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> max_value<span class=\"token operator\">=</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">6.0</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">return_activation</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> nl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 用于判断使用哪个激活函数</span>\n    <span class=\"token keyword\">if</span> nl <span class=\"token operator\">==</span> <span class=\"token string\">'HS'</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>hard_swish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> nl <span class=\"token operator\">==</span> <span class=\"token string\">'RE'</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> x\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">conv_block</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> strides<span class=\"token punctuation\">,</span> nl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 一个卷积单元，也就是conv2d + batchnormalization + activation</span>\n    channel_axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> K<span class=\"token punctuation\">.</span>image_data_format<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'channels_first'</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span>channel_axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> return_activation<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> nl<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">squeeze</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 注意力机制单元</span>\n    input_channels <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> GlobalAveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Dense<span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>input_channels<span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>relu6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Dense<span class=\"token punctuation\">(</span>input_channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span>hard_swish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> input_channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Multiply<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>inputs<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> x\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">bottleneck</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> up_dim<span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">,</span> sq<span class=\"token punctuation\">,</span> nl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    channel_axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> K<span class=\"token punctuation\">.</span>image_data_format<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'channels_first'</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n    input_shape <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>int_shape<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span>\n\n    tchannel <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>up_dim<span class=\"token punctuation\">)</span>\n    cchannel <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>alpha <span class=\"token operator\">*</span> filters<span class=\"token punctuation\">)</span>\n\n    r <span class=\"token operator\">=</span> stride <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">and</span> input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> filters\n    <span class=\"token comment\" spellcheck=\"true\"># 1x1卷积调整通道数，通道数上升</span>\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> tchannel<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nl<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 进行3x3深度可分离卷积</span>\n    x <span class=\"token operator\">=</span> DepthwiseConv2D<span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>stride<span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> depth_multiplier<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span>channel_axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> return_activation<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> nl<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 引入注意力机制</span>\n    <span class=\"token keyword\">if</span> sq<span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> squeeze<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 下降通道数</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>cchannel<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span>channel_axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token keyword\">if</span> r<span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> Add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> x\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">MobileNetv3_small</span><span class=\"token punctuation\">(</span>shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>n_class <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    inputs <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 224,224,3 -> 112,112,16</span>\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 112,112,16 -> 56,56,16</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'RE'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 56,56,16 -> 28,28,24</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">72</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'RE'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">88</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'RE'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 28,28,24 -> 14,14,40</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">240</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">240</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 14,14,40 -> 14,14,48</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">144</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 14,14,48 -> 7,7,96</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">288</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">576</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> bottleneck<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> up_dim<span class=\"token operator\">=</span><span class=\"token number\">576</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">576</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nl<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> GlobalAveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">576</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> return_activation<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>n_class<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n_class<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> model</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习神经网络特征提取（三）\"><a href=\"#深度学习神经网络特征提取（三）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（三）\"></a>深度学习神经网络特征提取（三）</h2><h3 id=\"MobileNet简介\"><a href=\"#MobileNet简介\" class=\"headerlink\" title=\"MobileNet简介\"></a>MobileNet简介</h3><p>在之前的文章中已经介绍了<code>VGG</code>和<code>ResNet</code>相关的网络结构，随着深度学习的发展，都在追求精度和准确性，因此也导致了网络层数的加深抑或网络的扩展。然而随着网络的不断加深和扩展，参数的数量也在急剧上升，从而导致性能的下降。<code>MobileNet</code>的出现也正是为了解决这种情况。</p>\n<h3 id=\"MobileNetv1\"><a href=\"#MobileNetv1\" class=\"headerlink\" title=\"MobileNetv1\"></a>MobileNetv1</h3><p><code>MobileNetv1</code>网络特点主要集中于提出的深度可分离卷积，其网络结构部分只是线性连接，如下图所示。</p>\n<p><img src=\"http://39.106.34.39:4567/20191030153845940.png\" alt=\"MobileNetv1\"></p>\n<h4 id=\"深度可分离卷积\"><a href=\"#深度可分离卷积\" class=\"headerlink\" title=\"深度可分离卷积\"></a>深度可分离卷积</h4><p>介绍深度可分离卷积，那我们不得不与常规的卷积进行对比，常规的卷积操作如下图。</p>\n<p><img src=\"http://39.106.34.39:4567/v2-617b082492f5c1c31bde1c6e2d994bc0_720w.jpg\" alt=\"常规卷积\"></p>\n<p>对于一张通道数为3，长宽为5的输入图像，经过3x3的卷积核，且输出层数为4的卷积时，其卷积核的真实情况如上图，在此种情况下参数量为：4x3x3x3=108。<br>而在深度可分离卷积中，我们进行同样的3x3的卷积核，且输出层数为4的卷积时，其操作情况如下两张图片。</p>\n<p><img src=\"http://39.106.34.39:4567/v2-a20824492e3e8778a959ca3731dfeea3_720w.jpg\" alt=\"图1\"><br><img src=\"http://39.106.34.39:4567/v2-2cdae9b3ad2f1d07e2c738331dac6d8b_720w.jpg\" alt=\"图2\"></p>\n<p>在深度可分离卷积中，首先通过N个3x3的卷积核（其中N为输入的层数，在图一中N为3）与输入层数一一对应进行特征提取，然后再通过M个1xN的卷积进行层数的缩放（图2）。在这种情况下，参数量为：3x3x3+1x1x3x4=39。相较于常规卷积操作，深度可分离卷积的参数量下降了很多，大大提高了模型的运行性能，并且对最终的结果的精确度影响并不是很高。</p>\n<h4 id=\"MobileNetv1的网络结构\"><a href=\"#MobileNetv1的网络结构\" class=\"headerlink\" title=\"MobileNetv1的网络结构\"></a>MobileNetv1的网络结构</h4><p>在上图中，我们给出了<code>MobileNetv1</code>的网络结构，主要处理流程为：</p>\n<ul>\n<li>（步长为2的卷积和归一化）x 1</li>\n<li>（步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化，步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 3</li>\n<li>（步长为1的深度可分离卷积和归一化，步长为1的卷积和归一化）x 5</li>\n<li>（步长为2的深度可分离卷积和归一化，步长为1的卷积和归一化）x 2</li>\n<li>一次7x7平均池化，一层全连接层</li>\n<li>最后softmax层</li>\n</ul>\n<p>代码如下：</p>\n<pre><code class=\"python\">#-------------------------------------------------------------#\n#   MobileNet的网络部分\n#-------------------------------------------------------------#\ndef MobileNet(input_shape=[224,224,3], depth_multiplier=1, dropout=1e-3, classes=1000):\n    img_input = Input(shape=input_shape)\n\n    # 224,224,3 -&gt; 112,112,32\n    x = _conv_block(img_input, 32, strides=(2, 2))\n\n    # 112,112,32 -&gt; 112,112,64\n    x = _depthwise_conv_block(x, 64, depth_multiplier, block_id=1)\n\n    # 112,112,64 -&gt; 56,56,128\n    x = _depthwise_conv_block(x, 128, depth_multiplier, strides=(2, 2), block_id=2)\n    # 56,56,128 -&gt; 56,56,128\n    x = _depthwise_conv_block(x, 128, depth_multiplier, block_id=3)\n\n    # 56,56,128 -&gt; 28,28,256\n    x = _depthwise_conv_block(x, 256, depth_multiplier, strides=(2, 2), block_id=4)\n\n    # 28,28,256 -&gt; 28,28,256\n    x = _depthwise_conv_block(x, 256, depth_multiplier, block_id=5)\n\n    # 28,28,256 -&gt; 14,14,512\n    x = _depthwise_conv_block(x, 512, depth_multiplier, strides=(2, 2), block_id=6)\n\n    # 14,14,512 -&gt; 14,14,512\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=7)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=8)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=9)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=10)\n    x = _depthwise_conv_block(x, 512, depth_multiplier, block_id=11)\n\n    # 14,14,512 -&gt; 7,7,1024\n    x = _depthwise_conv_block(x, 1024, depth_multiplier, strides=(2, 2), block_id=12)\n    x = _depthwise_conv_block(x, 1024, depth_multiplier, block_id=13)\n\n    # 7,7,1024 -&gt; 1,1,1024\n    x = GlobalAveragePooling2D()(x)\n    x = Reshape((1, 1, 1024), name=&#39;reshape_1&#39;)(x)\n    x = Dropout(dropout, name=&#39;dropout&#39;)(x)\n    x = Conv2D(classes, (1, 1),padding=&#39;same&#39;, name=&#39;conv_preds&#39;)(x)\n    x = Activation(&#39;softmax&#39;, name=&#39;act_softmax&#39;)(x)\n    x = Reshape((classes,), name=&#39;reshape_2&#39;)(x)\n\n    inputs = img_input\n\n    model = Model(inputs, x, name=&#39;mobilenet_1_0_224_tf&#39;)\n    return model\n\ndef _conv_block(inputs, filters, kernel=(3, 3), strides=(1, 1)):\n    x = Conv2D(filters, kernel, padding=&#39;same&#39;, use_bias=False, strides=strides, name=&#39;conv1&#39;)(inputs)\n    x = BatchNormalization(name=&#39;conv1_bn&#39;)(x)\n    return Activation(relu6, name=&#39;conv1_relu&#39;)(x)\n\n\ndef _depthwise_conv_block(inputs, pointwise_conv_filters, depth_multiplier=1, strides=(1, 1), block_id=1):\n\n    x = DepthwiseConv2D((3, 3), padding=&#39;same&#39;, depth_multiplier=depth_multiplier, strides=strides, use_bias=False, name=&#39;conv_dw_%d&#39; % block_id)(inputs)\n\n    x = BatchNormalization(name=&#39;conv_dw_%d_bn&#39; % block_id)(x)\n    x = Activation(relu6, name=&#39;conv_dw_%d_relu&#39; % block_id)(x)\n\n    x = Conv2D(pointwise_conv_filters, (1, 1), padding=&#39;same&#39;, use_bias=False, strides=(1, 1), name=&#39;conv_pw_%d&#39; % block_id)(x)\n    x = BatchNormalization(name=&#39;conv_pw_%d_bn&#39; % block_id)(x)\n    return Activation(relu6, name=&#39;conv_pw_%d_relu&#39; % block_id)(x)\n\ndef relu6(x):\n    return K.relu(x, max_value=6)</code></pre>\n<h3 id=\"MobileNetv2\"><a href=\"#MobileNetv2\" class=\"headerlink\" title=\"MobileNetv2\"></a>MobileNetv2</h3><p><code>MobileNetv2</code>网络特点相较于<code>MobileNetv1</code>提出了反残差结构和线性瓶颈结构，总体网络结构如下图所示。</p>\n<p><img src=\"http://39.106.34.39:4567/20191101094224444.png\" alt=\"MobileNetv2\"></p>\n<h4 id=\"反残差结构和线性瓶颈结构\"><a href=\"#反残差结构和线性瓶颈结构\" class=\"headerlink\" title=\"反残差结构和线性瓶颈结构\"></a>反残差结构和线性瓶颈结构</h4><p>反残差结构是相对于ResNet50而言的，此外MobileNetv2的基础结构和ResNet的基础结构一样，同样是双分支残差连接：</p>\n<p><img src=\"http://39.106.34.39:4567/201911131056046.png\" alt=\"结构对比\"><br><img src=\"http://39.106.34.39:4567/v2-38bcaaee3e9e28611ecc984727e6d598_720w.png\" alt=\"基础结构\"></p>\n<p>其中ResNet50中先卷积降维，然后进行3x3卷积提取特征，然后在进行升维，这样做在实际中部证明是比直接3x3卷积效果更好的。而在<code>MobileNetv2</code>中，反向进行操作。<br>而所谓的线性瓶颈结构则是在卷积降维之后不再进行<code>ReLu6</code>层激活，保证提取得到的特征不被破坏，直接与输入相加。</p>\n<h4 id=\"MobileNetv2的网络结构\"><a href=\"#MobileNetv2的网络结构\" class=\"headerlink\" title=\"MobileNetv2的网络结构\"></a>MobileNetv2的网络结构</h4><p>在上图中，我们给出了<code>MobileNetv2</code>的网络结构，主要处理流程为：</p>\n<ul>\n<li>步长为2的卷积层 x 1</li>\n<li>步长为1的瓶颈层 x 1</li>\n<li>步长为2的瓶颈层 x 3</li>\n<li>步长为1的瓶颈层 x 1</li>\n<li>步长为2的瓶颈层 x 1</li>\n<li>步长为1的瓶颈层 x 1</li>\n<li>步长为1的卷积层 x 1</li>\n<li>7x7 平均池化层 x 1</li>\n<li>全连接层softmax分类</li>\n</ul>\n<p>代码如下：</p>\n<pre><code class=\"python\">#-------------------------------------------------------------#\n#   MobileNetV2的网络部分\n#-------------------------------------------------------------#\n# relu6！\ndef relu6(x):\n    return K.relu(x, max_value=6)\n\n\ndef MobileNetV2(input_shape=[224,224,3], classes=1000):\n\n    img_input = Input(shape=input_shape)\n\n    # 224,224,3 -&gt; 112,112,32\n    x = ZeroPadding2D(padding=(1, 1), name=&#39;Conv1_pad&#39;)(img_input)\n    x = Conv2D(32, kernel_size=3, strides=(2, 2), padding=&#39;valid&#39;, use_bias=False, name=&#39;Conv1&#39;)(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=&#39;bn_Conv1&#39;)(x)\n    x = Activation(relu6, name=&#39;Conv1_relu&#39;)(x)\n\n    # 112,112,32 -&gt; 112,112,16\n    x = _inverted_res_block(x, filters=16, stride=1,expansion=1, block_id=0)\n\n    # 112,112,16 -&gt; 56,56,24\n    x = _inverted_res_block(x, filters=24, stride=2, expansion=6, block_id=1)\n    x = _inverted_res_block(x, filters=24, stride=1, expansion=6, block_id=2)\n\n    # 56,56,24 -&gt; 28,28,32\n    x = _inverted_res_block(x, filters=32, stride=2, expansion=6, block_id=3)\n    x = _inverted_res_block(x, filters=32, stride=1, expansion=6, block_id=4)\n    x = _inverted_res_block(x, filters=32, stride=1, expansion=6, block_id=5)\n\n    # 28,28,32 -&gt; 14,14,64\n    x = _inverted_res_block(x, filters=64, stride=2, expansion=6, block_id=6)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=7)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=8)\n    x = _inverted_res_block(x, filters=64, stride=1, expansion=6, block_id=9)\n\n    # 14,14,64 -&gt; 14,14,96\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=10)\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=11)\n    x = _inverted_res_block(x, filters=96, stride=1, expansion=6, block_id=12)\n    # 14,14,96 -&gt; 7,7,160\n    x = _inverted_res_block(x, filters=160, stride=2, expansion=6, block_id=13)\n    x = _inverted_res_block(x, filters=160, stride=1, expansion=6, block_id=14)\n    x = _inverted_res_block(x, filters=160, stride=1, expansion=6, block_id=15)\n\n    # 7,7,160 -&gt; 7,7,320\n    x = _inverted_res_block(x, filters=320, stride=1, expansion=6, block_id=16)\n\n    # 7,7,320 -&gt; 7,7,1280\n    x = Conv2D(1280, kernel_size=1, use_bias=False, name=&#39;Conv_1&#39;)(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=&#39;Conv_1_bn&#39;)(x)\n    x = Activation(relu6, name=&#39;out_relu&#39;)(x)\n\n    x = GlobalAveragePooling2D()(x)\n    x = Dense(classes, activation=&#39;softmax&#39;, use_bias=True, name=&#39;Logits&#39;)(x)\n\n    inputs = img_input\n\n    model = Model(inputs, x)\n\n    return model\n\n\ndef _inverted_res_block(inputs, expansion, stride, pointwise_filters, block_id):\n    in_channels = backend.int_shape(inputs)[-1]\n    x = inputs\n    prefix = &#39;block_&#123;&#125;_&#39;.format(block_id)\n\n    # part1 数据扩张\n    if block_id:\n        # Expand\n        x = Conv2D(expansion * in_channels, kernel_size=1, padding=&#39;same&#39;, use_bias=False, activation=None, name=prefix + &#39;expand&#39;)(x)\n        x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + &#39;expand_BN&#39;)(x)\n        x = Activation(relu6, name=prefix + &#39;expand_relu&#39;)(x)\n    else:\n        prefix = &#39;expanded_conv_&#39;\n\n    if stride == 2:\n        x = ZeroPadding2D(padding=(1,1), name=prefix + &#39;pad&#39;)(x)\n\n    # part2 可分离卷积\n    x = DepthwiseConv2D(kernel_size=3, strides=stride, activation=None, use_bias=False, padding=&#39;same&#39; if stride == 1 else &#39;valid&#39;, name=prefix + &#39;depthwise&#39;)(x)\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + &#39;depthwise_BN&#39;)(x)\n\n    x = Activation(relu6, name=prefix + &#39;depthwise_relu&#39;)(x)\n\n    # part3压缩特征，而且不使用relu函数，保证特征不被破坏\n    x = Conv2D(pointwise_filters, kernel_size=1, padding=&#39;same&#39;, use_bias=False, activation=None, name=prefix + &#39;project&#39;)(x)\n\n    x = BatchNormalization(epsilon=1e-3, momentum=0.999, name=prefix + &#39;project_BN&#39;)(x)\n\n    if in_channels == pointwise_filters and stride == 1:\n        return Add(name=prefix + &#39;add&#39;)([inputs, x])\n    return x</code></pre>\n<h3 id=\"MobileNetv3\"><a href=\"#MobileNetv3\" class=\"headerlink\" title=\"MobileNetv3\"></a>MobileNetv3</h3><p><code>MobileNetv3</code>网络特点相较于<code>MobileNetv2</code>主要添加了以下特点：</p>\n<ul>\n<li>轻量级的注意力机制</li>\n<li>利用h-swish代替swish函数</li>\n</ul>\n<p>主要网络结构有两种，一种large，一种small，主要区别在于通道数和基础块的次数，本文介绍small类型，网络结构如下：</p>\n<p><img src=\"http://39.106.34.39:4567/20200122140810351.png\" alt=\"MobileNetv3\"></p>\n<h4 id=\"轻量级注意力机制引入\"><a href=\"#轻量级注意力机制引入\" class=\"headerlink\" title=\"轻量级注意力机制引入\"></a>轻量级注意力机制引入</h4><p>在<code>MobileNetv3</code>中，由于轻量级注意力机制的引入，使得原来的基础块结构产生了一些变化，新的结构如图所示:</p>\n<p><img src=\"http://39.106.34.39:4567/20200122110008244.png\" alt=\"MobileNetv3 block\"></p>\n<p>从上图我们可以直观的感受到，轻量级注意力机制的引入主要用于改变各个特征层之间的权重系数。<br>相信通过前面代码的学习你对特征提取的网络已经有了一定的了解，那么下面的代码就很容易理解了。<br>代码如下：</p>\n<pre><code class=\"python\">alpha = 1\ndef relu6(x):\n    # relu函数\n    return K.relu(x, max_value=6.0)\n\ndef hard_swish(x):\n    # 利用relu函数乘上x模拟sigmoid\n    return x * K.relu(x + 3.0, max_value=6.0) / 6.0\n\ndef return_activation(x, nl):\n    # 用于判断使用哪个激活函数\n    if nl == &#39;HS&#39;:\n        x = Activation(hard_swish)(x)\n    if nl == &#39;RE&#39;:\n        x = Activation(relu6)(x)\n\n    return x\n\ndef conv_block(inputs, filters, kernel, strides, nl):\n    # 一个卷积单元，也就是conv2d + batchnormalization + activation\n    channel_axis = 1 if K.image_data_format() == &#39;channels_first&#39; else -1\n\n    x = Conv2D(filters, kernel, padding=&#39;same&#39;, strides=strides)(inputs)\n    x = BatchNormalization(axis=channel_axis)(x)\n\n    return return_activation(x, nl)\n\ndef squeeze(inputs):\n    # 注意力机制单元\n    input_channels = int(inputs.shape[-1])\n\n    x = GlobalAveragePooling2D()(inputs)\n    x = Dense(int(input_channels/4))(x)\n    x = Activation(relu6)(x)\n    x = Dense(input_channels)(x)\n    x = Activation(hard_swish)(x)\n    x = Reshape((1, 1, input_channels))(x)\n    x = Multiply()([inputs, x])\n\n    return x\n\ndef bottleneck(inputs, filters, kernel, up_dim, stride, sq, nl):\n    channel_axis = 1 if K.image_data_format() == &#39;channels_first&#39; else -1\n\n    input_shape = K.int_shape(inputs)\n\n    tchannel = int(up_dim)\n    cchannel = int(alpha * filters)\n\n    r = stride == 1 and input_shape[3] == filters\n    # 1x1卷积调整通道数，通道数上升\n    x = conv_block(inputs, tchannel, (1, 1), (1, 1), nl)\n    # 进行3x3深度可分离卷积\n    x = DepthwiseConv2D(kernel, strides=(stride, stride), depth_multiplier=1, padding=&#39;same&#39;)(x)\n    x = BatchNormalization(axis=channel_axis)(x)\n    x = return_activation(x, nl)\n    # 引入注意力机制\n    if sq:\n        x = squeeze(x)\n    # 下降通道数\n    x = Conv2D(cchannel, (1, 1), strides=(1, 1), padding=&#39;same&#39;)(x)\n    x = BatchNormalization(axis=channel_axis)(x)\n\n\n    if r:\n        x = Add()([x, inputs])\n\n    return x\n\ndef MobileNetv3_small(shape = (224,224,3),n_class = 1000):\n    inputs = Input(shape)\n    # 224,224,3 -&gt; 112,112,16\n    x = conv_block(inputs, 16, (3, 3), strides=(2, 2), nl=&#39;HS&#39;)\n\n    # 112,112,16 -&gt; 56,56,16\n    x = bottleneck(x, 16, (3, 3), up_dim=16, stride=2, sq=True, nl=&#39;RE&#39;)\n\n    # 56,56,16 -&gt; 28,28,24\n    x = bottleneck(x, 24, (3, 3), up_dim=72, stride=2, sq=False, nl=&#39;RE&#39;)\n    x = bottleneck(x, 24, (3, 3), up_dim=88, stride=1, sq=False, nl=&#39;RE&#39;)\n\n    # 28,28,24 -&gt; 14,14,40\n    x = bottleneck(x, 40, (5, 5), up_dim=96, stride=2, sq=True, nl=&#39;HS&#39;)\n    x = bottleneck(x, 40, (5, 5), up_dim=240, stride=1, sq=True, nl=&#39;HS&#39;)\n    x = bottleneck(x, 40, (5, 5), up_dim=240, stride=1, sq=True, nl=&#39;HS&#39;)\n    # 14,14,40 -&gt; 14,14,48\n    x = bottleneck(x, 48, (5, 5), up_dim=120, stride=1, sq=True, nl=&#39;HS&#39;)\n    x = bottleneck(x, 48, (5, 5), up_dim=144, stride=1, sq=True, nl=&#39;HS&#39;)\n\n    # 14,14,48 -&gt; 7,7,96\n    x = bottleneck(x, 96, (5, 5), up_dim=288, stride=2, sq=True, nl=&#39;HS&#39;)\n    x = bottleneck(x, 96, (5, 5), up_dim=576, stride=1, sq=True, nl=&#39;HS&#39;)\n    x = bottleneck(x, 96, (5, 5), up_dim=576, stride=1, sq=True, nl=&#39;HS&#39;)\n\n    x = conv_block(x, 576, (1, 1), strides=(1, 1), nl=&#39;HS&#39;)\n    x = GlobalAveragePooling2D()(x)\n    x = Reshape((1, 1, 576))(x)\n\n    x = Conv2D(1024, (1, 1), padding=&#39;same&#39;)(x)\n    x = return_activation(x, &#39;HS&#39;)\n\n    x = Conv2D(n_class, (1, 1), padding=&#39;same&#39;, activation=&#39;softmax&#39;)(x)\n    x = Reshape((n_class,))(x)\n\n    model = Model(inputs, x)\n\n    return model</code></pre>\n"},{"title":"Inception","date":"2021-04-20T15:39:26.000Z","author":"Fanrencli","_content":" \n## 深度学习神经网络特征提取（四）\n\n`Inception`模型是谷歌提出的`GoogLeNet`网络中的主干特征提取网络。从`Inceptionv1`到`Xception`，模型的结构不断的改进，本文针对其中较为经典的`Inceptionv3`和`Xception`进行介绍。\n\n### Inceptionv3模型\n\n`Inceptionv3`模型相比于其他模型创新在于使用了四个并行分支，且每个分支采用的卷积核大小不同，使得存在不同的感受野，最后在进行特征融合，得到不同尺度的特征。其主要包括三个部分：block1、block2、block3，由这些部分线性连接组成了`Inceptionv3`(其中层数可能会有一些改变，但是总体结构一样)。\n\n![block1](http://39.106.34.39:4567/2019111309515588.png)\nblock1中四个分支分别为不同卷积核大小的卷积层。\n![block2](http://39.106.34.39:4567/20191113095610269.png)\nblock2中四个分支中将原始的卷积操作转换成横向和纵向结合的卷积操作，通过这样操作可以减少参数量。\n![block3](http://39.106.34.39:4567/2019111309572648.png)\nblock3的卷积形式和block2的卷积形式相同，只是其中组合的卷积核大小不同。\n\n代码如下：\n\n```python\n#-------------------------------------------------------------#\n#   InceptionV3的网络部分\n#-------------------------------------------------------------#\ndef conv2d_bn(x, filters, num_row, num_col, padding='same', strides=(1, 1), name=None):\n    x = Conv2D(filters, (num_row, num_col), strides=strides, padding=padding, use_bias=False)(x)\n    x = BatchNormalization(scale=False)(x)\n    x = Activation('relu')(x)\n    return x\n\n\ndef InceptionV3(input_shape=[299,299,3], classes=1000):\n    img_input = Input(shape=input_shape)\n    # 299x299 -> 149x149\n    x = conv2d_bn(img_input, 32, 3, 3, strides=(2, 2), padding='valid')\n    # 149x149 -> 147x147\n    x = conv2d_bn(x, 32, 3, 3, padding='valid')\n    # 147x147 -> 147x147\n    x = conv2d_bn(x, 64, 3, 3)\n    # 147x147 -> 73x73\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    # 73x73 -> 73x73\n    x = conv2d_bn(x, 80, 1, 1, padding='valid')\n    # 73x73 -> 71x71\n    x = conv2d_bn(x, 192, 3, 3, padding='valid')\n    # 71x71 -> 35x35\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n\n    #--------------------------------#\n    #   Block1 35x35\n    #--------------------------------#\n    # Block1 part1\n    # 35 x 35 x 192 -> 35 x 35 x 256\n    branch1x1 = conv2d_bn(x, 64, 1, 1)#第一分支\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)# 第二分支\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)#第三分支\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)#第四分支\n    branch_pool = conv2d_bn(branch_pool, 32, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name='mixed0')\n\n    # Block1 part2\n    # 35 x 35 x 256 -> 35 x 35 x 288\n    branch1x1 = conv2d_bn(x, 64, 1, 1)\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 64, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name='mixed1')\n\n    # Block1 part3\n    # 35 x 35 x 288 -> 35 x 35 x 288\n    branch1x1 = conv2d_bn(x, 64, 1, 1)\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 64, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name='mixed2')\n\n    #--------------------------------#\n    #   Block2 17x17\n    #--------------------------------#\n    # Block2 part1\n    # 35 x 35 x 288 -> 17 x 17 x 768\n    branch3x3 = conv2d_bn(x, 384, 3, 3, strides=(2, 2), padding='valid')\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3, strides=(2, 2), padding='valid')\n\n    branch_pool = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    x = layers.concatenate([branch3x3, branch3x3dbl, branch_pool], axis=3, name='mixed3')\n\n    # Block2 part2\n    # 17 x 17 x 768 -> 17 x 17 x 768\n    branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n    branch7x7 = conv2d_bn(x, 128, 1, 1)\n    branch7x7 = conv2d_bn(branch7x7, 128, 1, 7)\n    branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n    branch7x7dbl = conv2d_bn(x, 128, 1, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 1, 7)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n    x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name='mixed4')\n\n    # Block2 part3 and part4\n    # 17 x 17 x 768 -> 17 x 17 x 768 -> 17 x 17 x 768\n    for i in range(2):\n        branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n        branch7x7 = conv2d_bn(x, 160, 1, 1)\n        branch7x7 = conv2d_bn(branch7x7, 160, 1, 7)\n        branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n        branch7x7dbl = conv2d_bn(x, 160, 1, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 7, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 1, 7)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 7, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n        branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n        branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n        x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name='mixed' + str(5 + i))\n\n    # Block2 part5\n    # 17 x 17 x 768 -> 17 x 17 x 768\n    branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n    branch7x7 = conv2d_bn(x, 192, 1, 1)\n    branch7x7 = conv2d_bn(branch7x7, 192, 1, 7)\n    branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n    branch7x7dbl = conv2d_bn(x, 192, 1, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n    x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name='mixed7')\n\n    #--------------------------------#\n    #   Block3 8x8\n    #--------------------------------#\n    # Block3 part1\n    # 17 x 17 x 768 -> 8 x 8 x 1280\n    branch3x3 = conv2d_bn(x, 192, 1, 1)\n    branch3x3 = conv2d_bn(branch3x3, 320, 3, 3, strides=(2, 2), padding='valid')\n\n    branch7x7x3 = conv2d_bn(x, 192, 1, 1)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 1, 7)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 7, 1)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 3, 3, strides=(2, 2), padding='valid')\n\n    branch_pool = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    x = layers.concatenate([branch3x3, branch7x7x3, branch_pool], axis=3, name='mixed8')\n\n    # Block3 part2 part3\n    # 8 x 8 x 1280 -> 8 x 8 x 2048 -> 8 x 8 x 2048\n    for i in range(2):\n        branch1x1 = conv2d_bn(x, 320, 1, 1)\n\n        branch3x3 = conv2d_bn(x, 384, 1, 1)\n        branch3x3_1 = conv2d_bn(branch3x3, 384, 1, 3)\n        branch3x3_2 = conv2d_bn(branch3x3, 384, 3, 1)\n        branch3x3 = layers.concatenate([branch3x3_1, branch3x3_2], axis=3, name='mixed9_' + str(i))\n\n        branch3x3dbl = conv2d_bn(x, 448, 1, 1)\n        branch3x3dbl = conv2d_bn(branch3x3dbl, 384, 3, 3)\n        branch3x3dbl_1 = conv2d_bn(branch3x3dbl, 384, 1, 3)\n        branch3x3dbl_2 = conv2d_bn(branch3x3dbl, 384, 3, 1)\n        branch3x3dbl = layers.concatenate([branch3x3dbl_1, branch3x3dbl_2], axis=3)\n\n        branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n        branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n        x = layers.concatenate([branch1x1, branch3x3, branch3x3dbl, branch_pool], axis=3, name='mixed' + str(9 + i))\n    # 平均池化后全连接。\n    x = GlobalAveragePooling2D(name='avg_pool')(x)\n    x = Dense(classes, activation='softmax', name='predictions')(x)\n    inputs = img_input\n    model = Model(inputs, x, name='inception_v3')\n    return model\n```\n\n### Xception模型\n\n`Xception`是在`Inceptionv3`的基础上改进而来的，主要的改进在原来的多尺寸卷积，使用了深度可分离卷积进行替换，关于深度可分离卷积在之前的`MobileNet`文章中已经介绍，所以我们直接来看`Xception`的网络结构吧。\n\n![Xception](http://39.106.34.39:4567/20191030102403596.png)\n\n`Xception`的结构和`Inception`结构类似，同样也分为三个部分：entry flow、middle flow、exit flow。总共包含14个block，其中entry flow有4个，middle flow有重复8次即8个block，exit flow有两个。\n其中entry flow和exit flow中的block结构如下图所示：\n\n![block](http://39.106.34.39:4567/20191030103011544.png)\n\nmiddle flow的block结构如下图所示：\n\n![block](http://39.106.34.39:4567/2019111310354382.png)\n\n如果对于之前的ResNet已经有学习过，相信你已经对这个结构游刃有余了，所以直接来看代码吧。\n\n代码如下\n```python\n#-------------------------------------------------------------#\n#   Xception的网络部分\n#-------------------------------------------------------------#\ndef Xception(input_shape = [299,299,3],classes=1000):\n    img_input = Input(shape=input_shape)\n    #--------------------------#\n    # Entry flow\n    #--------------------------#\n    #--------------------#\n    # block1\n    #--------------------#\n    # 299,299,3 -> 149,149,64\n    x = Conv2D(32, (3, 3), strides=(2, 2), use_bias=False, name='block1_conv1')(img_input)\n    x = BatchNormalization(name='block1_conv1_bn')(x)\n    x = Activation('relu', name='block1_conv1_act')(x)\n    x = Conv2D(64, (3, 3), use_bias=False, name='block1_conv2')(x)\n    x = BatchNormalization(name='block1_conv2_bn')(x)\n    x = Activation('relu', name='block1_conv2_act')(x)\n\n    #--------------------#\n    # block2\n    #--------------------#\n    # 149,149,64 -> 75,75,128\n    residual = Conv2D(128, (1, 1), strides=(2, 2), padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = SeparableConv2D(128, (3, 3), padding='same', use_bias=False, name='block2_sepconv1')(x)\n    x = BatchNormalization(name='block2_sepconv1_bn')(x)\n    x = Activation('relu', name='block2_sepconv2_act')(x)\n    x = SeparableConv2D(128, (3, 3), padding='same', use_bias=False, name='block2_sepconv2')(x)\n    x = BatchNormalization(name='block2_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block2_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block3\n    #--------------------#\n    # 75,75,128 -> 38,38,256\n    residual = Conv2D(256, (1, 1), strides=(2, 2),padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation('relu', name='block3_sepconv1_act')(x)\n    x = SeparableConv2D(256, (3, 3), padding='same', use_bias=False, name='block3_sepconv1')(x)\n    x = BatchNormalization(name='block3_sepconv1_bn')(x)\n    x = Activation('relu', name='block3_sepconv2_act')(x)\n    x = SeparableConv2D(256, (3, 3), padding='same', use_bias=False, name='block3_sepconv2')(x)\n    x = BatchNormalization(name='block3_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block3_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block4\n    #--------------------#\n    # 38,38,256 -> 19,19,728\n    residual = Conv2D(728, (1, 1), strides=(2, 2),padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation('relu', name='block4_sepconv1_act')(x)\n    x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name='block4_sepconv1')(x)\n    x = BatchNormalization(name='block4_sepconv1_bn')(x)\n    x = Activation('relu', name='block4_sepconv2_act')(x)\n    x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name='block4_sepconv2')(x)\n    x = BatchNormalization(name='block4_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block4_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------------#\n    # Middle flow\n    #--------------------------#\n    #--------------------#\n    # block5--block12\n    #--------------------#\n    # 19,19,728 -> 19,19,728\n    for i in range(8):\n        residual = x\n        prefix = 'block' + str(i + 5)\n\n        x = Activation('relu', name=prefix + '_sepconv1_act')(x)\n        x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name=prefix + '_sepconv1')(x)\n        x = BatchNormalization(name=prefix + '_sepconv1_bn')(x)\n        x = Activation('relu', name=prefix + '_sepconv2_act')(x)\n        x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name=prefix + '_sepconv2')(x)\n        x = BatchNormalization(name=prefix + '_sepconv2_bn')(x)\n        x = Activation('relu', name=prefix + '_sepconv3_act')(x)\n        x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name=prefix + '_sepconv3')(x)\n        x = BatchNormalization(name=prefix + '_sepconv3_bn')(x)\n\n        x = layers.add([x, residual])\n    #--------------------------#\n    # Exit flow\n    #--------------------------#\n    #--------------------#\n    # block13\n    #--------------------#\n    # 19,19,728 -> 10,10,1024\n    residual = Conv2D(1024, (1, 1), strides=(2, 2),\n                      padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation('relu', name='block13_sepconv1_act')(x)\n    x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name='block13_sepconv1')(x)\n    x = BatchNormalization(name='block13_sepconv1_bn')(x)\n    x = Activation('relu', name='block13_sepconv2_act')(x)\n    x = SeparableConv2D(1024, (3, 3), padding='same', use_bias=False, name='block13_sepconv2')(x)\n    x = BatchNormalization(name='block13_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block13_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block14\n    #--------------------#\n    # 10,10,1024 -> 10,10,2048\n    x = SeparableConv2D(1536, (3, 3), padding='same', use_bias=False, name='block14_sepconv1')(x)\n    x = BatchNormalization(name='block14_sepconv1_bn')(x)\n    x = Activation('relu', name='block14_sepconv1_act')(x)\n\n    x = SeparableConv2D(2048, (3, 3), padding='same', use_bias=False, name='block14_sepconv2')(x)\n    x = BatchNormalization(name='block14_sepconv2_bn')(x)\n    x = Activation('relu', name='block14_sepconv2_act')(x)\n\n    x = GlobalAveragePooling2D(name='avg_pool')(x)\n    x = Dense(classes, activation='softmax', name='predictions')(x)\n    inputs = img_input\n    model = Model(inputs, x, name='xception')\n    return model\n```\n\n\n","source":"_posts/feature_extractor/Inception.md","raw":"---\ntitle: Inception\ndate: 2021-04-20 23:39:26\ncategories:\n- Deep Learning\ntags:\n- Inceptionv3\n- Xception\nauthor: Fanrencli\n---\n \n## 深度学习神经网络特征提取（四）\n\n`Inception`模型是谷歌提出的`GoogLeNet`网络中的主干特征提取网络。从`Inceptionv1`到`Xception`，模型的结构不断的改进，本文针对其中较为经典的`Inceptionv3`和`Xception`进行介绍。\n\n### Inceptionv3模型\n\n`Inceptionv3`模型相比于其他模型创新在于使用了四个并行分支，且每个分支采用的卷积核大小不同，使得存在不同的感受野，最后在进行特征融合，得到不同尺度的特征。其主要包括三个部分：block1、block2、block3，由这些部分线性连接组成了`Inceptionv3`(其中层数可能会有一些改变，但是总体结构一样)。\n\n![block1](http://39.106.34.39:4567/2019111309515588.png)\nblock1中四个分支分别为不同卷积核大小的卷积层。\n![block2](http://39.106.34.39:4567/20191113095610269.png)\nblock2中四个分支中将原始的卷积操作转换成横向和纵向结合的卷积操作，通过这样操作可以减少参数量。\n![block3](http://39.106.34.39:4567/2019111309572648.png)\nblock3的卷积形式和block2的卷积形式相同，只是其中组合的卷积核大小不同。\n\n代码如下：\n\n```python\n#-------------------------------------------------------------#\n#   InceptionV3的网络部分\n#-------------------------------------------------------------#\ndef conv2d_bn(x, filters, num_row, num_col, padding='same', strides=(1, 1), name=None):\n    x = Conv2D(filters, (num_row, num_col), strides=strides, padding=padding, use_bias=False)(x)\n    x = BatchNormalization(scale=False)(x)\n    x = Activation('relu')(x)\n    return x\n\n\ndef InceptionV3(input_shape=[299,299,3], classes=1000):\n    img_input = Input(shape=input_shape)\n    # 299x299 -> 149x149\n    x = conv2d_bn(img_input, 32, 3, 3, strides=(2, 2), padding='valid')\n    # 149x149 -> 147x147\n    x = conv2d_bn(x, 32, 3, 3, padding='valid')\n    # 147x147 -> 147x147\n    x = conv2d_bn(x, 64, 3, 3)\n    # 147x147 -> 73x73\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    # 73x73 -> 73x73\n    x = conv2d_bn(x, 80, 1, 1, padding='valid')\n    # 73x73 -> 71x71\n    x = conv2d_bn(x, 192, 3, 3, padding='valid')\n    # 71x71 -> 35x35\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n\n    #--------------------------------#\n    #   Block1 35x35\n    #--------------------------------#\n    # Block1 part1\n    # 35 x 35 x 192 -> 35 x 35 x 256\n    branch1x1 = conv2d_bn(x, 64, 1, 1)#第一分支\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)# 第二分支\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)#第三分支\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)#第四分支\n    branch_pool = conv2d_bn(branch_pool, 32, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name='mixed0')\n\n    # Block1 part2\n    # 35 x 35 x 256 -> 35 x 35 x 288\n    branch1x1 = conv2d_bn(x, 64, 1, 1)\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 64, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name='mixed1')\n\n    # Block1 part3\n    # 35 x 35 x 288 -> 35 x 35 x 288\n    branch1x1 = conv2d_bn(x, 64, 1, 1)\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 64, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name='mixed2')\n\n    #--------------------------------#\n    #   Block2 17x17\n    #--------------------------------#\n    # Block2 part1\n    # 35 x 35 x 288 -> 17 x 17 x 768\n    branch3x3 = conv2d_bn(x, 384, 3, 3, strides=(2, 2), padding='valid')\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3, strides=(2, 2), padding='valid')\n\n    branch_pool = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    x = layers.concatenate([branch3x3, branch3x3dbl, branch_pool], axis=3, name='mixed3')\n\n    # Block2 part2\n    # 17 x 17 x 768 -> 17 x 17 x 768\n    branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n    branch7x7 = conv2d_bn(x, 128, 1, 1)\n    branch7x7 = conv2d_bn(branch7x7, 128, 1, 7)\n    branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n    branch7x7dbl = conv2d_bn(x, 128, 1, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 1, 7)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n    x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name='mixed4')\n\n    # Block2 part3 and part4\n    # 17 x 17 x 768 -> 17 x 17 x 768 -> 17 x 17 x 768\n    for i in range(2):\n        branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n        branch7x7 = conv2d_bn(x, 160, 1, 1)\n        branch7x7 = conv2d_bn(branch7x7, 160, 1, 7)\n        branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n        branch7x7dbl = conv2d_bn(x, 160, 1, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 7, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 1, 7)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 7, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n        branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n        branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n        x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name='mixed' + str(5 + i))\n\n    # Block2 part5\n    # 17 x 17 x 768 -> 17 x 17 x 768\n    branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n    branch7x7 = conv2d_bn(x, 192, 1, 1)\n    branch7x7 = conv2d_bn(branch7x7, 192, 1, 7)\n    branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n    branch7x7dbl = conv2d_bn(x, 192, 1, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n    branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n    x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name='mixed7')\n\n    #--------------------------------#\n    #   Block3 8x8\n    #--------------------------------#\n    # Block3 part1\n    # 17 x 17 x 768 -> 8 x 8 x 1280\n    branch3x3 = conv2d_bn(x, 192, 1, 1)\n    branch3x3 = conv2d_bn(branch3x3, 320, 3, 3, strides=(2, 2), padding='valid')\n\n    branch7x7x3 = conv2d_bn(x, 192, 1, 1)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 1, 7)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 7, 1)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 3, 3, strides=(2, 2), padding='valid')\n\n    branch_pool = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    x = layers.concatenate([branch3x3, branch7x7x3, branch_pool], axis=3, name='mixed8')\n\n    # Block3 part2 part3\n    # 8 x 8 x 1280 -> 8 x 8 x 2048 -> 8 x 8 x 2048\n    for i in range(2):\n        branch1x1 = conv2d_bn(x, 320, 1, 1)\n\n        branch3x3 = conv2d_bn(x, 384, 1, 1)\n        branch3x3_1 = conv2d_bn(branch3x3, 384, 1, 3)\n        branch3x3_2 = conv2d_bn(branch3x3, 384, 3, 1)\n        branch3x3 = layers.concatenate([branch3x3_1, branch3x3_2], axis=3, name='mixed9_' + str(i))\n\n        branch3x3dbl = conv2d_bn(x, 448, 1, 1)\n        branch3x3dbl = conv2d_bn(branch3x3dbl, 384, 3, 3)\n        branch3x3dbl_1 = conv2d_bn(branch3x3dbl, 384, 1, 3)\n        branch3x3dbl_2 = conv2d_bn(branch3x3dbl, 384, 3, 1)\n        branch3x3dbl = layers.concatenate([branch3x3dbl_1, branch3x3dbl_2], axis=3)\n\n        branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding='same')(x)\n        branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n        x = layers.concatenate([branch1x1, branch3x3, branch3x3dbl, branch_pool], axis=3, name='mixed' + str(9 + i))\n    # 平均池化后全连接。\n    x = GlobalAveragePooling2D(name='avg_pool')(x)\n    x = Dense(classes, activation='softmax', name='predictions')(x)\n    inputs = img_input\n    model = Model(inputs, x, name='inception_v3')\n    return model\n```\n\n### Xception模型\n\n`Xception`是在`Inceptionv3`的基础上改进而来的，主要的改进在原来的多尺寸卷积，使用了深度可分离卷积进行替换，关于深度可分离卷积在之前的`MobileNet`文章中已经介绍，所以我们直接来看`Xception`的网络结构吧。\n\n![Xception](http://39.106.34.39:4567/20191030102403596.png)\n\n`Xception`的结构和`Inception`结构类似，同样也分为三个部分：entry flow、middle flow、exit flow。总共包含14个block，其中entry flow有4个，middle flow有重复8次即8个block，exit flow有两个。\n其中entry flow和exit flow中的block结构如下图所示：\n\n![block](http://39.106.34.39:4567/20191030103011544.png)\n\nmiddle flow的block结构如下图所示：\n\n![block](http://39.106.34.39:4567/2019111310354382.png)\n\n如果对于之前的ResNet已经有学习过，相信你已经对这个结构游刃有余了，所以直接来看代码吧。\n\n代码如下\n```python\n#-------------------------------------------------------------#\n#   Xception的网络部分\n#-------------------------------------------------------------#\ndef Xception(input_shape = [299,299,3],classes=1000):\n    img_input = Input(shape=input_shape)\n    #--------------------------#\n    # Entry flow\n    #--------------------------#\n    #--------------------#\n    # block1\n    #--------------------#\n    # 299,299,3 -> 149,149,64\n    x = Conv2D(32, (3, 3), strides=(2, 2), use_bias=False, name='block1_conv1')(img_input)\n    x = BatchNormalization(name='block1_conv1_bn')(x)\n    x = Activation('relu', name='block1_conv1_act')(x)\n    x = Conv2D(64, (3, 3), use_bias=False, name='block1_conv2')(x)\n    x = BatchNormalization(name='block1_conv2_bn')(x)\n    x = Activation('relu', name='block1_conv2_act')(x)\n\n    #--------------------#\n    # block2\n    #--------------------#\n    # 149,149,64 -> 75,75,128\n    residual = Conv2D(128, (1, 1), strides=(2, 2), padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = SeparableConv2D(128, (3, 3), padding='same', use_bias=False, name='block2_sepconv1')(x)\n    x = BatchNormalization(name='block2_sepconv1_bn')(x)\n    x = Activation('relu', name='block2_sepconv2_act')(x)\n    x = SeparableConv2D(128, (3, 3), padding='same', use_bias=False, name='block2_sepconv2')(x)\n    x = BatchNormalization(name='block2_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block2_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block3\n    #--------------------#\n    # 75,75,128 -> 38,38,256\n    residual = Conv2D(256, (1, 1), strides=(2, 2),padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation('relu', name='block3_sepconv1_act')(x)\n    x = SeparableConv2D(256, (3, 3), padding='same', use_bias=False, name='block3_sepconv1')(x)\n    x = BatchNormalization(name='block3_sepconv1_bn')(x)\n    x = Activation('relu', name='block3_sepconv2_act')(x)\n    x = SeparableConv2D(256, (3, 3), padding='same', use_bias=False, name='block3_sepconv2')(x)\n    x = BatchNormalization(name='block3_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block3_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block4\n    #--------------------#\n    # 38,38,256 -> 19,19,728\n    residual = Conv2D(728, (1, 1), strides=(2, 2),padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation('relu', name='block4_sepconv1_act')(x)\n    x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name='block4_sepconv1')(x)\n    x = BatchNormalization(name='block4_sepconv1_bn')(x)\n    x = Activation('relu', name='block4_sepconv2_act')(x)\n    x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name='block4_sepconv2')(x)\n    x = BatchNormalization(name='block4_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block4_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------------#\n    # Middle flow\n    #--------------------------#\n    #--------------------#\n    # block5--block12\n    #--------------------#\n    # 19,19,728 -> 19,19,728\n    for i in range(8):\n        residual = x\n        prefix = 'block' + str(i + 5)\n\n        x = Activation('relu', name=prefix + '_sepconv1_act')(x)\n        x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name=prefix + '_sepconv1')(x)\n        x = BatchNormalization(name=prefix + '_sepconv1_bn')(x)\n        x = Activation('relu', name=prefix + '_sepconv2_act')(x)\n        x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name=prefix + '_sepconv2')(x)\n        x = BatchNormalization(name=prefix + '_sepconv2_bn')(x)\n        x = Activation('relu', name=prefix + '_sepconv3_act')(x)\n        x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name=prefix + '_sepconv3')(x)\n        x = BatchNormalization(name=prefix + '_sepconv3_bn')(x)\n\n        x = layers.add([x, residual])\n    #--------------------------#\n    # Exit flow\n    #--------------------------#\n    #--------------------#\n    # block13\n    #--------------------#\n    # 19,19,728 -> 10,10,1024\n    residual = Conv2D(1024, (1, 1), strides=(2, 2),\n                      padding='same', use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation('relu', name='block13_sepconv1_act')(x)\n    x = SeparableConv2D(728, (3, 3), padding='same', use_bias=False, name='block13_sepconv1')(x)\n    x = BatchNormalization(name='block13_sepconv1_bn')(x)\n    x = Activation('relu', name='block13_sepconv2_act')(x)\n    x = SeparableConv2D(1024, (3, 3), padding='same', use_bias=False, name='block13_sepconv2')(x)\n    x = BatchNormalization(name='block13_sepconv2_bn')(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding='same', name='block13_pool')(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block14\n    #--------------------#\n    # 10,10,1024 -> 10,10,2048\n    x = SeparableConv2D(1536, (3, 3), padding='same', use_bias=False, name='block14_sepconv1')(x)\n    x = BatchNormalization(name='block14_sepconv1_bn')(x)\n    x = Activation('relu', name='block14_sepconv1_act')(x)\n\n    x = SeparableConv2D(2048, (3, 3), padding='same', use_bias=False, name='block14_sepconv2')(x)\n    x = BatchNormalization(name='block14_sepconv2_bn')(x)\n    x = Activation('relu', name='block14_sepconv2_act')(x)\n\n    x = GlobalAveragePooling2D(name='avg_pool')(x)\n    x = Dense(classes, activation='softmax', name='predictions')(x)\n    inputs = img_input\n    model = Model(inputs, x, name='xception')\n    return model\n```\n\n\n","slug":"feature_extractor/Inception","published":1,"updated":"2021-07-13T08:16:25.769Z","_id":"cknr69kyb0000pkuo4ouf0ff3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习神经网络特征提取（四）\"><a href=\"#深度学习神经网络特征提取（四）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（四）\"></a>深度学习神经网络特征提取（四）</h2><p><code>Inception</code>模型是谷歌提出的<code>GoogLeNet</code>网络中的主干特征提取网络。从<code>Inceptionv1</code>到<code>Xception</code>，模型的结构不断的改进，本文针对其中较为经典的<code>Inceptionv3</code>和<code>Xception</code>进行介绍。</p>\n<h3 id=\"Inceptionv3模型\"><a href=\"#Inceptionv3模型\" class=\"headerlink\" title=\"Inceptionv3模型\"></a>Inceptionv3模型</h3><p><code>Inceptionv3</code>模型相比于其他模型创新在于使用了四个并行分支，且每个分支采用的卷积核大小不同，使得存在不同的感受野，最后在进行特征融合，得到不同尺度的特征。其主要包括三个部分：block1、block2、block3，由这些部分线性连接组成了<code>Inceptionv3</code>(其中层数可能会有一些改变，但是总体结构一样)。</p>\n<p><img src=\"http://39.106.34.39:4567/2019111309515588.png\" alt=\"block1\"><br>block1中四个分支分别为不同卷积核大小的卷积层。<br><img src=\"http://39.106.34.39:4567/20191113095610269.png\" alt=\"block2\"><br>block2中四个分支中将原始的卷积操作转换成横向和纵向结合的卷积操作，通过这样操作可以减少参数量。<br><img src=\"http://39.106.34.39:4567/2019111309572648.png\" alt=\"block3\"><br>block3的卷积形式和block2的卷积形式相同，只是其中组合的卷积核大小不同。</p>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token comment\" spellcheck=\"true\">#   InceptionV3的网络部分</span>\n<span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">conv2d_bn</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">,</span> num_row<span class=\"token punctuation\">,</span> num_col<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>num_row<span class=\"token punctuation\">,</span> num_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span>padding<span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>scale<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">InceptionV3</span><span class=\"token punctuation\">(</span>input_shape<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">299</span><span class=\"token punctuation\">,</span><span class=\"token number\">299</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> classes<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    img_input <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span>input_shape<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 299x299 -> 149x149</span>\n    x <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>img_input<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 149x149 -> 147x147</span>\n    x <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 147x147 -> 147x147</span>\n    x <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 147x147 -> 73x73</span>\n    x <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 73x73 -> 73x73</span>\n    x <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 73x73 -> 71x71</span>\n    x <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 71x71 -> 35x35</span>\n    x <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\">#   Block1 35x35</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block1 part1</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 35 x 35 x 192 -> 35 x 35 x 256</span>\n    branch1x1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#第一分支</span>\n\n    branch5x5 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\"># 第二分支</span>\n    branch5x5 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch5x5<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#第三分支</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n    branch_pool <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#第四分支</span>\n    branch_pool <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch_pool<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch1x1<span class=\"token punctuation\">,</span> branch5x5<span class=\"token punctuation\">,</span> branch3x3dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed0'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block1 part2</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 35 x 35 x 256 -> 35 x 35 x 288</span>\n    branch1x1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    branch5x5 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch5x5 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch5x5<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n    branch_pool <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    branch_pool <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch_pool<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch1x1<span class=\"token punctuation\">,</span> branch5x5<span class=\"token punctuation\">,</span> branch3x3dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed1'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block1 part3</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 35 x 35 x 288 -> 35 x 35 x 288</span>\n    branch1x1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    branch5x5 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch5x5 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch5x5<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n    branch_pool <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    branch_pool <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch_pool<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch1x1<span class=\"token punctuation\">,</span> branch5x5<span class=\"token punctuation\">,</span> branch3x3dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed2'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\">#   Block2 17x17</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block2 part1</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 35 x 35 x 288 -> 17 x 17 x 768</span>\n    branch3x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n\n    branch_pool <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch3x3<span class=\"token punctuation\">,</span> branch3x3dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed3'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block2 part2</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 17 x 17 x 768 -> 17 x 17 x 768</span>\n    branch1x1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n    branch_pool <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    branch_pool <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch_pool<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch1x1<span class=\"token punctuation\">,</span> branch7x7<span class=\"token punctuation\">,</span> branch7x7dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed4'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block2 part3 and part4</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 17 x 17 x 768 -> 17 x 17 x 768 -> 17 x 17 x 768</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        branch1x1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7<span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n        branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n        branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n        branch_pool <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        branch_pool <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch_pool<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch1x1<span class=\"token punctuation\">,</span> branch7x7<span class=\"token punctuation\">,</span> branch7x7dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block2 part5</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 17 x 17 x 768 -> 17 x 17 x 768</span>\n    branch1x1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    branch7x7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n    branch_pool <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    branch_pool <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch_pool<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch1x1<span class=\"token punctuation\">,</span> branch7x7<span class=\"token punctuation\">,</span> branch7x7dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed7'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\">#   Block3 8x8</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Block3 part1</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 17 x 17 x 768 -> 8 x 8 x 1280</span>\n    branch3x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch3x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3<span class=\"token punctuation\">,</span> <span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n\n    branch7x7x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7x3<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    branch7x7x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7x3<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    branch7x7x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch7x7x3<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span>\n\n    branch_pool <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch3x3<span class=\"token punctuation\">,</span> branch7x7x3<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed8'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># Block3 part2 part3</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 8 x 8 x 1280 -> 8 x 8 x 2048 -> 8 x 8 x 2048</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        branch1x1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        branch3x3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch3x3_1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3<span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        branch3x3_2 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3<span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch3x3 <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch3x3_1<span class=\"token punctuation\">,</span> branch3x3_2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed9_'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">448</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch3x3dbl <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        branch3x3dbl_1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        branch3x3dbl_2 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch3x3dbl<span class=\"token punctuation\">,</span> <span class=\"token number\">384</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        branch3x3dbl <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch3x3dbl_1<span class=\"token punctuation\">,</span> branch3x3dbl_2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n        branch_pool <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        branch_pool <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>branch_pool<span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>branch1x1<span class=\"token punctuation\">,</span> branch3x3<span class=\"token punctuation\">,</span> branch3x3dbl<span class=\"token punctuation\">,</span> branch_pool<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'mixed'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 平均池化后全连接。</span>\n    x <span class=\"token operator\">=</span> GlobalAveragePooling2D<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'avg_pool'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Dense<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'predictions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    inputs <span class=\"token operator\">=</span> img_input\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'inception_v3'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model</code></pre>\n<h3 id=\"Xception模型\"><a href=\"#Xception模型\" class=\"headerlink\" title=\"Xception模型\"></a>Xception模型</h3><p><code>Xception</code>是在<code>Inceptionv3</code>的基础上改进而来的，主要的改进在原来的多尺寸卷积，使用了深度可分离卷积进行替换，关于深度可分离卷积在之前的<code>MobileNet</code>文章中已经介绍，所以我们直接来看<code>Xception</code>的网络结构吧。</p>\n<p><img src=\"http://39.106.34.39:4567/20191030102403596.png\" alt=\"Xception\"></p>\n<p><code>Xception</code>的结构和<code>Inception</code>结构类似，同样也分为三个部分：entry flow、middle flow、exit flow。总共包含14个block，其中entry flow有4个，middle flow有重复8次即8个block，exit flow有两个。<br>其中entry flow和exit flow中的block结构如下图所示：</p>\n<p><img src=\"http://39.106.34.39:4567/20191030103011544.png\" alt=\"block\"></p>\n<p>middle flow的block结构如下图所示：</p>\n<p><img src=\"http://39.106.34.39:4567/2019111310354382.png\" alt=\"block\"></p>\n<p>如果对于之前的ResNet已经有学习过，相信你已经对这个结构游刃有余了，所以直接来看代码吧。</p>\n<p>代码如下</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token comment\" spellcheck=\"true\">#   Xception的网络部分</span>\n<span class=\"token comment\" spellcheck=\"true\">#-------------------------------------------------------------#</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Xception</span><span class=\"token punctuation\">(</span>input_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">299</span><span class=\"token punctuation\">,</span><span class=\"token number\">299</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>classes<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    img_input <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span>input_shape<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Entry flow</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># block1</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 299,299,3 -> 149,149,64</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block1_conv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>img_input<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block1_conv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block1_conv1_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block1_conv2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block1_conv2_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block1_conv2_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># block2</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 149,149,64 -> 75,75,128</span>\n    residual <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    residual <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>residual<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block2_sepconv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block2_sepconv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block2_sepconv2_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block2_sepconv2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block2_sepconv2_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block2_pool'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> residual<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># block3</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 75,75,128 -> 38,38,256</span>\n    residual <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    residual <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>residual<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block3_sepconv1_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block3_sepconv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block3_sepconv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block3_sepconv2_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block3_sepconv2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block3_sepconv2_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block3_pool'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> residual<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># block4</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 38,38,256 -> 19,19,728</span>\n    residual <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    residual <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>residual<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block4_sepconv1_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block4_sepconv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block4_sepconv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block4_sepconv2_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block4_sepconv2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block4_sepconv2_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block4_pool'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> residual<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Middle flow</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># block5--block12</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 19,19,728 -> 19,19,728</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        residual <span class=\"token operator\">=</span> x\n        prefix <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv1_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv2_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv2_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv3_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_sepconv3_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> residual<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># Exit flow</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># block13</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 19,19,728 -> 10,10,1024</span>\n    residual <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    residual <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>residual<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block13_sepconv1_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block13_sepconv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block13_sepconv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block13_sepconv2_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block13_sepconv2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block13_sepconv2_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block13_pool'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> residual<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># block14</span>\n    <span class=\"token comment\" spellcheck=\"true\">#--------------------#</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 10,10,1024 -> 10,10,2048</span>\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">1536</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block14_sepconv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block14_sepconv1_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block14_sepconv1_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> SeparableConv2D<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> use_bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block14_sepconv2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'block14_sepconv2_bn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'block14_sepconv2_act'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> GlobalAveragePooling2D<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'avg_pool'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Dense<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'predictions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    inputs <span class=\"token operator\">=</span> img_input\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'xception'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习神经网络特征提取（四）\"><a href=\"#深度学习神经网络特征提取（四）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（四）\"></a>深度学习神经网络特征提取（四）</h2><p><code>Inception</code>模型是谷歌提出的<code>GoogLeNet</code>网络中的主干特征提取网络。从<code>Inceptionv1</code>到<code>Xception</code>，模型的结构不断的改进，本文针对其中较为经典的<code>Inceptionv3</code>和<code>Xception</code>进行介绍。</p>\n<h3 id=\"Inceptionv3模型\"><a href=\"#Inceptionv3模型\" class=\"headerlink\" title=\"Inceptionv3模型\"></a>Inceptionv3模型</h3><p><code>Inceptionv3</code>模型相比于其他模型创新在于使用了四个并行分支，且每个分支采用的卷积核大小不同，使得存在不同的感受野，最后在进行特征融合，得到不同尺度的特征。其主要包括三个部分：block1、block2、block3，由这些部分线性连接组成了<code>Inceptionv3</code>(其中层数可能会有一些改变，但是总体结构一样)。</p>\n<p><img src=\"http://39.106.34.39:4567/2019111309515588.png\" alt=\"block1\"><br>block1中四个分支分别为不同卷积核大小的卷积层。<br><img src=\"http://39.106.34.39:4567/20191113095610269.png\" alt=\"block2\"><br>block2中四个分支中将原始的卷积操作转换成横向和纵向结合的卷积操作，通过这样操作可以减少参数量。<br><img src=\"http://39.106.34.39:4567/2019111309572648.png\" alt=\"block3\"><br>block3的卷积形式和block2的卷积形式相同，只是其中组合的卷积核大小不同。</p>\n<p>代码如下：</p>\n<pre><code class=\"python\">#-------------------------------------------------------------#\n#   InceptionV3的网络部分\n#-------------------------------------------------------------#\ndef conv2d_bn(x, filters, num_row, num_col, padding=&#39;same&#39;, strides=(1, 1), name=None):\n    x = Conv2D(filters, (num_row, num_col), strides=strides, padding=padding, use_bias=False)(x)\n    x = BatchNormalization(scale=False)(x)\n    x = Activation(&#39;relu&#39;)(x)\n    return x\n\n\ndef InceptionV3(input_shape=[299,299,3], classes=1000):\n    img_input = Input(shape=input_shape)\n    # 299x299 -&gt; 149x149\n    x = conv2d_bn(img_input, 32, 3, 3, strides=(2, 2), padding=&#39;valid&#39;)\n    # 149x149 -&gt; 147x147\n    x = conv2d_bn(x, 32, 3, 3, padding=&#39;valid&#39;)\n    # 147x147 -&gt; 147x147\n    x = conv2d_bn(x, 64, 3, 3)\n    # 147x147 -&gt; 73x73\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    # 73x73 -&gt; 73x73\n    x = conv2d_bn(x, 80, 1, 1, padding=&#39;valid&#39;)\n    # 73x73 -&gt; 71x71\n    x = conv2d_bn(x, 192, 3, 3, padding=&#39;valid&#39;)\n    # 71x71 -&gt; 35x35\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n\n    #--------------------------------#\n    #   Block1 35x35\n    #--------------------------------#\n    # Block1 part1\n    # 35 x 35 x 192 -&gt; 35 x 35 x 256\n    branch1x1 = conv2d_bn(x, 64, 1, 1)#第一分支\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)# 第二分支\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)#第三分支\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;)(x)#第四分支\n    branch_pool = conv2d_bn(branch_pool, 32, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name=&#39;mixed0&#39;)\n\n    # Block1 part2\n    # 35 x 35 x 256 -&gt; 35 x 35 x 288\n    branch1x1 = conv2d_bn(x, 64, 1, 1)\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;)(x)\n    branch_pool = conv2d_bn(branch_pool, 64, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name=&#39;mixed1&#39;)\n\n    # Block1 part3\n    # 35 x 35 x 288 -&gt; 35 x 35 x 288\n    branch1x1 = conv2d_bn(x, 64, 1, 1)\n\n    branch5x5 = conv2d_bn(x, 48, 1, 1)\n    branch5x5 = conv2d_bn(branch5x5, 64, 5, 5)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;)(x)\n    branch_pool = conv2d_bn(branch_pool, 64, 1, 1)\n    x = layers.concatenate([branch1x1, branch5x5, branch3x3dbl, branch_pool], axis=3, name=&#39;mixed2&#39;)\n\n    #--------------------------------#\n    #   Block2 17x17\n    #--------------------------------#\n    # Block2 part1\n    # 35 x 35 x 288 -&gt; 17 x 17 x 768\n    branch3x3 = conv2d_bn(x, 384, 3, 3, strides=(2, 2), padding=&#39;valid&#39;)\n\n    branch3x3dbl = conv2d_bn(x, 64, 1, 1)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3)\n    branch3x3dbl = conv2d_bn(branch3x3dbl, 96, 3, 3, strides=(2, 2), padding=&#39;valid&#39;)\n\n    branch_pool = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    x = layers.concatenate([branch3x3, branch3x3dbl, branch_pool], axis=3, name=&#39;mixed3&#39;)\n\n    # Block2 part2\n    # 17 x 17 x 768 -&gt; 17 x 17 x 768\n    branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n    branch7x7 = conv2d_bn(x, 128, 1, 1)\n    branch7x7 = conv2d_bn(branch7x7, 128, 1, 7)\n    branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n    branch7x7dbl = conv2d_bn(x, 128, 1, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 1, 7)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 128, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;)(x)\n    branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n    x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name=&#39;mixed4&#39;)\n\n    # Block2 part3 and part4\n    # 17 x 17 x 768 -&gt; 17 x 17 x 768 -&gt; 17 x 17 x 768\n    for i in range(2):\n        branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n        branch7x7 = conv2d_bn(x, 160, 1, 1)\n        branch7x7 = conv2d_bn(branch7x7, 160, 1, 7)\n        branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n        branch7x7dbl = conv2d_bn(x, 160, 1, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 7, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 1, 7)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 160, 7, 1)\n        branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n        branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;)(x)\n        branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n        x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name=&#39;mixed&#39; + str(5 + i))\n\n    # Block2 part5\n    # 17 x 17 x 768 -&gt; 17 x 17 x 768\n    branch1x1 = conv2d_bn(x, 192, 1, 1)\n\n    branch7x7 = conv2d_bn(x, 192, 1, 1)\n    branch7x7 = conv2d_bn(branch7x7, 192, 1, 7)\n    branch7x7 = conv2d_bn(branch7x7, 192, 7, 1)\n\n    branch7x7dbl = conv2d_bn(x, 192, 1, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 7, 1)\n    branch7x7dbl = conv2d_bn(branch7x7dbl, 192, 1, 7)\n\n    branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;)(x)\n    branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n    x = layers.concatenate([branch1x1, branch7x7, branch7x7dbl, branch_pool], axis=3, name=&#39;mixed7&#39;)\n\n    #--------------------------------#\n    #   Block3 8x8\n    #--------------------------------#\n    # Block3 part1\n    # 17 x 17 x 768 -&gt; 8 x 8 x 1280\n    branch3x3 = conv2d_bn(x, 192, 1, 1)\n    branch3x3 = conv2d_bn(branch3x3, 320, 3, 3, strides=(2, 2), padding=&#39;valid&#39;)\n\n    branch7x7x3 = conv2d_bn(x, 192, 1, 1)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 1, 7)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 7, 1)\n    branch7x7x3 = conv2d_bn(branch7x7x3, 192, 3, 3, strides=(2, 2), padding=&#39;valid&#39;)\n\n    branch_pool = MaxPooling2D((3, 3), strides=(2, 2))(x)\n    x = layers.concatenate([branch3x3, branch7x7x3, branch_pool], axis=3, name=&#39;mixed8&#39;)\n\n    # Block3 part2 part3\n    # 8 x 8 x 1280 -&gt; 8 x 8 x 2048 -&gt; 8 x 8 x 2048\n    for i in range(2):\n        branch1x1 = conv2d_bn(x, 320, 1, 1)\n\n        branch3x3 = conv2d_bn(x, 384, 1, 1)\n        branch3x3_1 = conv2d_bn(branch3x3, 384, 1, 3)\n        branch3x3_2 = conv2d_bn(branch3x3, 384, 3, 1)\n        branch3x3 = layers.concatenate([branch3x3_1, branch3x3_2], axis=3, name=&#39;mixed9_&#39; + str(i))\n\n        branch3x3dbl = conv2d_bn(x, 448, 1, 1)\n        branch3x3dbl = conv2d_bn(branch3x3dbl, 384, 3, 3)\n        branch3x3dbl_1 = conv2d_bn(branch3x3dbl, 384, 1, 3)\n        branch3x3dbl_2 = conv2d_bn(branch3x3dbl, 384, 3, 1)\n        branch3x3dbl = layers.concatenate([branch3x3dbl_1, branch3x3dbl_2], axis=3)\n\n        branch_pool = AveragePooling2D((3, 3), strides=(1, 1), padding=&#39;same&#39;)(x)\n        branch_pool = conv2d_bn(branch_pool, 192, 1, 1)\n        x = layers.concatenate([branch1x1, branch3x3, branch3x3dbl, branch_pool], axis=3, name=&#39;mixed&#39; + str(9 + i))\n    # 平均池化后全连接。\n    x = GlobalAveragePooling2D(name=&#39;avg_pool&#39;)(x)\n    x = Dense(classes, activation=&#39;softmax&#39;, name=&#39;predictions&#39;)(x)\n    inputs = img_input\n    model = Model(inputs, x, name=&#39;inception_v3&#39;)\n    return model</code></pre>\n<h3 id=\"Xception模型\"><a href=\"#Xception模型\" class=\"headerlink\" title=\"Xception模型\"></a>Xception模型</h3><p><code>Xception</code>是在<code>Inceptionv3</code>的基础上改进而来的，主要的改进在原来的多尺寸卷积，使用了深度可分离卷积进行替换，关于深度可分离卷积在之前的<code>MobileNet</code>文章中已经介绍，所以我们直接来看<code>Xception</code>的网络结构吧。</p>\n<p><img src=\"http://39.106.34.39:4567/20191030102403596.png\" alt=\"Xception\"></p>\n<p><code>Xception</code>的结构和<code>Inception</code>结构类似，同样也分为三个部分：entry flow、middle flow、exit flow。总共包含14个block，其中entry flow有4个，middle flow有重复8次即8个block，exit flow有两个。<br>其中entry flow和exit flow中的block结构如下图所示：</p>\n<p><img src=\"http://39.106.34.39:4567/20191030103011544.png\" alt=\"block\"></p>\n<p>middle flow的block结构如下图所示：</p>\n<p><img src=\"http://39.106.34.39:4567/2019111310354382.png\" alt=\"block\"></p>\n<p>如果对于之前的ResNet已经有学习过，相信你已经对这个结构游刃有余了，所以直接来看代码吧。</p>\n<p>代码如下</p>\n<pre><code class=\"python\">#-------------------------------------------------------------#\n#   Xception的网络部分\n#-------------------------------------------------------------#\ndef Xception(input_shape = [299,299,3],classes=1000):\n    img_input = Input(shape=input_shape)\n    #--------------------------#\n    # Entry flow\n    #--------------------------#\n    #--------------------#\n    # block1\n    #--------------------#\n    # 299,299,3 -&gt; 149,149,64\n    x = Conv2D(32, (3, 3), strides=(2, 2), use_bias=False, name=&#39;block1_conv1&#39;)(img_input)\n    x = BatchNormalization(name=&#39;block1_conv1_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block1_conv1_act&#39;)(x)\n    x = Conv2D(64, (3, 3), use_bias=False, name=&#39;block1_conv2&#39;)(x)\n    x = BatchNormalization(name=&#39;block1_conv2_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block1_conv2_act&#39;)(x)\n\n    #--------------------#\n    # block2\n    #--------------------#\n    # 149,149,64 -&gt; 75,75,128\n    residual = Conv2D(128, (1, 1), strides=(2, 2), padding=&#39;same&#39;, use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = SeparableConv2D(128, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block2_sepconv1&#39;)(x)\n    x = BatchNormalization(name=&#39;block2_sepconv1_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block2_sepconv2_act&#39;)(x)\n    x = SeparableConv2D(128, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block2_sepconv2&#39;)(x)\n    x = BatchNormalization(name=&#39;block2_sepconv2_bn&#39;)(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding=&#39;same&#39;, name=&#39;block2_pool&#39;)(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block3\n    #--------------------#\n    # 75,75,128 -&gt; 38,38,256\n    residual = Conv2D(256, (1, 1), strides=(2, 2),padding=&#39;same&#39;, use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation(&#39;relu&#39;, name=&#39;block3_sepconv1_act&#39;)(x)\n    x = SeparableConv2D(256, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block3_sepconv1&#39;)(x)\n    x = BatchNormalization(name=&#39;block3_sepconv1_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block3_sepconv2_act&#39;)(x)\n    x = SeparableConv2D(256, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block3_sepconv2&#39;)(x)\n    x = BatchNormalization(name=&#39;block3_sepconv2_bn&#39;)(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding=&#39;same&#39;, name=&#39;block3_pool&#39;)(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block4\n    #--------------------#\n    # 38,38,256 -&gt; 19,19,728\n    residual = Conv2D(728, (1, 1), strides=(2, 2),padding=&#39;same&#39;, use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation(&#39;relu&#39;, name=&#39;block4_sepconv1_act&#39;)(x)\n    x = SeparableConv2D(728, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block4_sepconv1&#39;)(x)\n    x = BatchNormalization(name=&#39;block4_sepconv1_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block4_sepconv2_act&#39;)(x)\n    x = SeparableConv2D(728, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block4_sepconv2&#39;)(x)\n    x = BatchNormalization(name=&#39;block4_sepconv2_bn&#39;)(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding=&#39;same&#39;, name=&#39;block4_pool&#39;)(x)\n    x = layers.add([x, residual])\n\n    #--------------------------#\n    # Middle flow\n    #--------------------------#\n    #--------------------#\n    # block5--block12\n    #--------------------#\n    # 19,19,728 -&gt; 19,19,728\n    for i in range(8):\n        residual = x\n        prefix = &#39;block&#39; + str(i + 5)\n\n        x = Activation(&#39;relu&#39;, name=prefix + &#39;_sepconv1_act&#39;)(x)\n        x = SeparableConv2D(728, (3, 3), padding=&#39;same&#39;, use_bias=False, name=prefix + &#39;_sepconv1&#39;)(x)\n        x = BatchNormalization(name=prefix + &#39;_sepconv1_bn&#39;)(x)\n        x = Activation(&#39;relu&#39;, name=prefix + &#39;_sepconv2_act&#39;)(x)\n        x = SeparableConv2D(728, (3, 3), padding=&#39;same&#39;, use_bias=False, name=prefix + &#39;_sepconv2&#39;)(x)\n        x = BatchNormalization(name=prefix + &#39;_sepconv2_bn&#39;)(x)\n        x = Activation(&#39;relu&#39;, name=prefix + &#39;_sepconv3_act&#39;)(x)\n        x = SeparableConv2D(728, (3, 3), padding=&#39;same&#39;, use_bias=False, name=prefix + &#39;_sepconv3&#39;)(x)\n        x = BatchNormalization(name=prefix + &#39;_sepconv3_bn&#39;)(x)\n\n        x = layers.add([x, residual])\n    #--------------------------#\n    # Exit flow\n    #--------------------------#\n    #--------------------#\n    # block13\n    #--------------------#\n    # 19,19,728 -&gt; 10,10,1024\n    residual = Conv2D(1024, (1, 1), strides=(2, 2),\n                      padding=&#39;same&#39;, use_bias=False)(x)\n    residual = BatchNormalization()(residual)\n\n    x = Activation(&#39;relu&#39;, name=&#39;block13_sepconv1_act&#39;)(x)\n    x = SeparableConv2D(728, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block13_sepconv1&#39;)(x)\n    x = BatchNormalization(name=&#39;block13_sepconv1_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block13_sepconv2_act&#39;)(x)\n    x = SeparableConv2D(1024, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block13_sepconv2&#39;)(x)\n    x = BatchNormalization(name=&#39;block13_sepconv2_bn&#39;)(x)\n\n    x = MaxPooling2D((3, 3), strides=(2, 2), padding=&#39;same&#39;, name=&#39;block13_pool&#39;)(x)\n    x = layers.add([x, residual])\n\n    #--------------------#\n    # block14\n    #--------------------#\n    # 10,10,1024 -&gt; 10,10,2048\n    x = SeparableConv2D(1536, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block14_sepconv1&#39;)(x)\n    x = BatchNormalization(name=&#39;block14_sepconv1_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block14_sepconv1_act&#39;)(x)\n\n    x = SeparableConv2D(2048, (3, 3), padding=&#39;same&#39;, use_bias=False, name=&#39;block14_sepconv2&#39;)(x)\n    x = BatchNormalization(name=&#39;block14_sepconv2_bn&#39;)(x)\n    x = Activation(&#39;relu&#39;, name=&#39;block14_sepconv2_act&#39;)(x)\n\n    x = GlobalAveragePooling2D(name=&#39;avg_pool&#39;)(x)\n    x = Dense(classes, activation=&#39;softmax&#39;, name=&#39;predictions&#39;)(x)\n    inputs = img_input\n    model = Model(inputs, x, name=&#39;xception&#39;)\n    return model</code></pre>\n"},{"title":"OpenNI2_OpenCV","date":"2020-12-06T01:24:37.000Z","mathjax":true,"markup":"mmark","author":"Fanrencli","_content":"\n## 奥比中光OpenNISDK安装（Linux）\n奥比中光针对ZaroP1开发板和深度摄像机提供了相关的[OpenNI2的SDK](https://abzg-oss.oss-cn-shenzhen.aliyuncs.com/files/OpenNI-Linux-Arm64-2.3.0.65.rar),针对Windows/Linux/Android不同平台提供了相关的[安装文档](https://developer.orbbec.com.cn/technical_library.html?id=30).根据官方文档将OpenNI2配置完成，注意官方文档中说Linux平台内置驱动不需要额外安装，但是需要仔细阅读`README`文件：\n```\nOpenNI\n------\n\nWebsite: http://structure.io/openni\n\nBuilding Prerequisites(前置依赖)\n======================\n\nLinux\n-----\n- GCC 4.x\n    From: http://gcc.gnu.org/releases.html\n    Or via apt:\n    sudo apt-get install g++\n- Python 2.6+/3.x\n    From: http://www.python.org/download/\n    Or via apt:\n    sudo apt-get install python\n- LibUSB 1.0.x\n    From: http://sourceforge.net/projects/libusb/files/libusb-1.0/\n    Or via apt:\n    sudo apt-get install libusb-1.0-0-dev\n- LibUDEV\n    sudo apt-get install libudev-dev\n- JDK 6.0\n    From: http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u32-downloads-1594644.html\n    Or via apt:\n    sudo apt-get install openjdk-6-jdk\n- FreeGLUT3\n    From: http://freeglut.sourceforge.net/index.php#download\n    Or via apt:\n    sudo apt-get install freeglut3-dev\n- Doxygen\n    From: http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc\n    Or via apt:\n    sudo apt-get install doxygen\n- GraphViz\n    From: http://www.graphviz.org/Download_linux_ubuntu.php\n    Or via apt:\n    sudo apt-get install graphviz\n```\n将以上的依赖安装完成之后，运行其中示例代码还需要安装对应的USB驱动，驱动安装方法如下(此方法将同目录下的USB驱动文件拷贝到系统目录中，并自动生成环境文件指明OpenNI的路径)：\n\n进入安装包OpenNI目录中\n```sh\n orbbec@localhost:OpenNI$ ./install.sh\n```\n最后，在安装文件中找到`NiViewer`运行文件，若文件不能运行，查看`chmod`权限。\n```sh\nsudo ./NiViewer\n```\n![结果图片](https://api.orbbec.com.cn/uploads/kindeditor/20200718113033.jpg)\n经过以上的配置过程，OpenNI的环境就配置完成了。\n\n## OpenCV在Arm平台上编译\n在运用开发板设备获取数据的时候，通常运用`OpenNI2`获取数据流，通过`OpenCV`对数据流进行转换，生成RGB图片和深度图片。\n\n### 下载源文件\n源文件[官方地址](https://opencv.org/releases/)，本文用的是`OpenCV3.4.3`版本。OpenCV编译的方法自行百度，编译完成后对orbbec中OpenNI2SDK和opencv进行配置。\n\n## OpenCV+OpenNI2配置\n根据官方给出的示例代码，进行编写。由于官方的代码是在`Makefile`文件中进行编写，所以opencv也需要在其中编写。根据`Makefile`文件编写规则进行编写。\n```Makefile\n#Includes\nCFLAGS = ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS = ${shell pkg-config opencv --libs}\n\n```\n其中`pkg-config`需要在系统中配置`opencv.pc`文件，文件内容，在安装的文件中可以找到，若没有则可能默认没有生成（opencv4之后的版本默认不生成），需要在编译的时候设置。\n\n`opencv`环境配置没有问题后，在orbbec提供的OpenNI2的文件中示例代码中进行整合开发。文件位置在：\n```sh\n/OpenNI/Samples/\n```\n选择其中`SimpleViewer`文件夹中的示例代码进行编写。在`CommonCppMakefile`文件夹中找到`CFLAGS`和`LDFLAGS`变量位置，在其后加上：\n```Makefile\n#Includes\nCFLAGS += ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS += ${shell pkg-config opencv --libs}\n\n```\n此外还需要在`Makefile`文件中加入OpenNI头文件的路径和Redist的路径，这就是在配置OpenNI时运行`install.sh`文件生成的环境文件中的内容，也在同级目录下。\n\n其后编译即可通过。接下来就可以使用opencv对数据进行获取保存了。","source":"_posts/other/OpenNI2-OpenCV.md","raw":"---\ntitle: OpenNI2_OpenCV\ndate: 2020-12-06 09:24:37\nmathjax: true\nmarkup: mmark\ncategories:\n  - 环境配置\ntags:\n  - Orbbec_OpenNI\n  - OpenCV\n  - Fanrencli\nauthor: Fanrencli\n---\n\n## 奥比中光OpenNISDK安装（Linux）\n奥比中光针对ZaroP1开发板和深度摄像机提供了相关的[OpenNI2的SDK](https://abzg-oss.oss-cn-shenzhen.aliyuncs.com/files/OpenNI-Linux-Arm64-2.3.0.65.rar),针对Windows/Linux/Android不同平台提供了相关的[安装文档](https://developer.orbbec.com.cn/technical_library.html?id=30).根据官方文档将OpenNI2配置完成，注意官方文档中说Linux平台内置驱动不需要额外安装，但是需要仔细阅读`README`文件：\n```\nOpenNI\n------\n\nWebsite: http://structure.io/openni\n\nBuilding Prerequisites(前置依赖)\n======================\n\nLinux\n-----\n- GCC 4.x\n    From: http://gcc.gnu.org/releases.html\n    Or via apt:\n    sudo apt-get install g++\n- Python 2.6+/3.x\n    From: http://www.python.org/download/\n    Or via apt:\n    sudo apt-get install python\n- LibUSB 1.0.x\n    From: http://sourceforge.net/projects/libusb/files/libusb-1.0/\n    Or via apt:\n    sudo apt-get install libusb-1.0-0-dev\n- LibUDEV\n    sudo apt-get install libudev-dev\n- JDK 6.0\n    From: http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u32-downloads-1594644.html\n    Or via apt:\n    sudo apt-get install openjdk-6-jdk\n- FreeGLUT3\n    From: http://freeglut.sourceforge.net/index.php#download\n    Or via apt:\n    sudo apt-get install freeglut3-dev\n- Doxygen\n    From: http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc\n    Or via apt:\n    sudo apt-get install doxygen\n- GraphViz\n    From: http://www.graphviz.org/Download_linux_ubuntu.php\n    Or via apt:\n    sudo apt-get install graphviz\n```\n将以上的依赖安装完成之后，运行其中示例代码还需要安装对应的USB驱动，驱动安装方法如下(此方法将同目录下的USB驱动文件拷贝到系统目录中，并自动生成环境文件指明OpenNI的路径)：\n\n进入安装包OpenNI目录中\n```sh\n orbbec@localhost:OpenNI$ ./install.sh\n```\n最后，在安装文件中找到`NiViewer`运行文件，若文件不能运行，查看`chmod`权限。\n```sh\nsudo ./NiViewer\n```\n![结果图片](https://api.orbbec.com.cn/uploads/kindeditor/20200718113033.jpg)\n经过以上的配置过程，OpenNI的环境就配置完成了。\n\n## OpenCV在Arm平台上编译\n在运用开发板设备获取数据的时候，通常运用`OpenNI2`获取数据流，通过`OpenCV`对数据流进行转换，生成RGB图片和深度图片。\n\n### 下载源文件\n源文件[官方地址](https://opencv.org/releases/)，本文用的是`OpenCV3.4.3`版本。OpenCV编译的方法自行百度，编译完成后对orbbec中OpenNI2SDK和opencv进行配置。\n\n## OpenCV+OpenNI2配置\n根据官方给出的示例代码，进行编写。由于官方的代码是在`Makefile`文件中进行编写，所以opencv也需要在其中编写。根据`Makefile`文件编写规则进行编写。\n```Makefile\n#Includes\nCFLAGS = ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS = ${shell pkg-config opencv --libs}\n\n```\n其中`pkg-config`需要在系统中配置`opencv.pc`文件，文件内容，在安装的文件中可以找到，若没有则可能默认没有生成（opencv4之后的版本默认不生成），需要在编译的时候设置。\n\n`opencv`环境配置没有问题后，在orbbec提供的OpenNI2的文件中示例代码中进行整合开发。文件位置在：\n```sh\n/OpenNI/Samples/\n```\n选择其中`SimpleViewer`文件夹中的示例代码进行编写。在`CommonCppMakefile`文件夹中找到`CFLAGS`和`LDFLAGS`变量位置，在其后加上：\n```Makefile\n#Includes\nCFLAGS += ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS += ${shell pkg-config opencv --libs}\n\n```\n此外还需要在`Makefile`文件中加入OpenNI头文件的路径和Redist的路径，这就是在配置OpenNI时运行`install.sh`文件生成的环境文件中的内容，也在同级目录下。\n\n其后编译即可通过。接下来就可以使用opencv对数据进行获取保存了。","slug":"other/OpenNI2-OpenCV","published":1,"updated":"2021-04-22T06:46:12.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknsx2fq40000scuo4t9adrdr","content":"<h2 id=\"奥比中光OpenNISDK安装（Linux）\"><a href=\"#奥比中光OpenNISDK安装（Linux）\" class=\"headerlink\" title=\"奥比中光OpenNISDK安装（Linux）\"></a>奥比中光OpenNISDK安装（Linux）</h2><p>奥比中光针对ZaroP1开发板和深度摄像机提供了相关的<a href=\"https://abzg-oss.oss-cn-shenzhen.aliyuncs.com/files/OpenNI-Linux-Arm64-2.3.0.65.rar\">OpenNI2的SDK</a>,针对Windows/Linux/Android不同平台提供了相关的<a href=\"https://developer.orbbec.com.cn/technical_library.html?id=30\">安装文档</a>.根据官方文档将OpenNI2配置完成，注意官方文档中说Linux平台内置驱动不需要额外安装，但是需要仔细阅读<code>README</code>文件：</p>\n<pre><code>OpenNI\n------\n\nWebsite: http://structure.io/openni\n\nBuilding Prerequisites(前置依赖)\n======================\n\nLinux\n-----\n- GCC 4.x\n    From: http://gcc.gnu.org/releases.html\n    Or via apt:\n    sudo apt-get install g++\n- Python 2.6+/3.x\n    From: http://www.python.org/download/\n    Or via apt:\n    sudo apt-get install python\n- LibUSB 1.0.x\n    From: http://sourceforge.net/projects/libusb/files/libusb-1.0/\n    Or via apt:\n    sudo apt-get install libusb-1.0-0-dev\n- LibUDEV\n    sudo apt-get install libudev-dev\n- JDK 6.0\n    From: http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u32-downloads-1594644.html\n    Or via apt:\n    sudo apt-get install openjdk-6-jdk\n- FreeGLUT3\n    From: http://freeglut.sourceforge.net/index.php#download\n    Or via apt:\n    sudo apt-get install freeglut3-dev\n- Doxygen\n    From: http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc\n    Or via apt:\n    sudo apt-get install doxygen\n- GraphViz\n    From: http://www.graphviz.org/Download_linux_ubuntu.php\n    Or via apt:\n    sudo apt-get install graphviz</code></pre>\n<p>将以上的依赖安装完成之后，运行其中示例代码还需要安装对应的USB驱动，驱动安装方法如下(此方法将同目录下的USB驱动文件拷贝到系统目录中，并自动生成环境文件指明OpenNI的路径)：</p>\n<p>进入安装包OpenNI目录中</p>\n<pre class=\" language-sh\"><code class=\"language-sh\"> orbbec@localhost:OpenNI$ ./install.sh</code></pre>\n<p>最后，在安装文件中找到<code>NiViewer</code>运行文件，若文件不能运行，查看<code>chmod</code>权限。</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">sudo ./NiViewer</code></pre>\n<p><img src=\"https://api.orbbec.com.cn/uploads/kindeditor/20200718113033.jpg\" alt=\"结果图片\"><br>经过以上的配置过程，OpenNI的环境就配置完成了。</p>\n<h2 id=\"OpenCV在Arm平台上编译\"><a href=\"#OpenCV在Arm平台上编译\" class=\"headerlink\" title=\"OpenCV在Arm平台上编译\"></a>OpenCV在Arm平台上编译</h2><p>在运用开发板设备获取数据的时候，通常运用<code>OpenNI2</code>获取数据流，通过<code>OpenCV</code>对数据流进行转换，生成RGB图片和深度图片。</p>\n<h3 id=\"下载源文件\"><a href=\"#下载源文件\" class=\"headerlink\" title=\"下载源文件\"></a>下载源文件</h3><p>源文件<a href=\"https://opencv.org/releases/\">官方地址</a>，本文用的是<code>OpenCV3.4.3</code>版本。OpenCV编译的方法自行百度，编译完成后对orbbec中OpenNI2SDK和opencv进行配置。</p>\n<h2 id=\"OpenCV-OpenNI2配置\"><a href=\"#OpenCV-OpenNI2配置\" class=\"headerlink\" title=\"OpenCV+OpenNI2配置\"></a>OpenCV+OpenNI2配置</h2><p>根据官方给出的示例代码，进行编写。由于官方的代码是在<code>Makefile</code>文件中进行编写，所以opencv也需要在其中编写。根据<code>Makefile</code>文件编写规则进行编写。</p>\n<pre class=\" language-Makefile\"><code class=\"language-Makefile\">#Includes\nCFLAGS = ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS = ${shell pkg-config opencv --libs}\n</code></pre>\n<p>其中<code>pkg-config</code>需要在系统中配置<code>opencv.pc</code>文件，文件内容，在安装的文件中可以找到，若没有则可能默认没有生成（opencv4之后的版本默认不生成），需要在编译的时候设置。</p>\n<p><code>opencv</code>环境配置没有问题后，在orbbec提供的OpenNI2的文件中示例代码中进行整合开发。文件位置在：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">/OpenNI/Samples/</code></pre>\n<p>选择其中<code>SimpleViewer</code>文件夹中的示例代码进行编写。在<code>CommonCppMakefile</code>文件夹中找到<code>CFLAGS</code>和<code>LDFLAGS</code>变量位置，在其后加上：</p>\n<pre class=\" language-Makefile\"><code class=\"language-Makefile\">#Includes\nCFLAGS += ${shell pkg-config opencv --cflags}\n\n#lib\nLDFLAGS += ${shell pkg-config opencv --libs}\n</code></pre>\n<p>此外还需要在<code>Makefile</code>文件中加入OpenNI头文件的路径和Redist的路径，这就是在配置OpenNI时运行<code>install.sh</code>文件生成的环境文件中的内容，也在同级目录下。</p>\n<p>其后编译即可通过。接下来就可以使用opencv对数据进行获取保存了。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"奥比中光OpenNISDK安装（Linux）\"><a href=\"#奥比中光OpenNISDK安装（Linux）\" class=\"headerlink\" title=\"奥比中光OpenNISDK安装（Linux）\"></a>奥比中光OpenNISDK安装（Linux）</h2><p>奥比中光针对ZaroP1开发板和深度摄像机提供了相关的<a href=\"https://abzg-oss.oss-cn-shenzhen.aliyuncs.com/files/OpenNI-Linux-Arm64-2.3.0.65.rar\">OpenNI2的SDK</a>,针对Windows/Linux/Android不同平台提供了相关的<a href=\"https://developer.orbbec.com.cn/technical_library.html?id=30\">安装文档</a>.根据官方文档将OpenNI2配置完成，注意官方文档中说Linux平台内置驱动不需要额外安装，但是需要仔细阅读<code>README</code>文件：</p>\n<pre><code>OpenNI\n------\n\nWebsite: http://structure.io/openni\n\nBuilding Prerequisites(前置依赖)\n======================\n\nLinux\n-----\n- GCC 4.x\n    From: http://gcc.gnu.org/releases.html\n    Or via apt:\n    sudo apt-get install g++\n- Python 2.6+/3.x\n    From: http://www.python.org/download/\n    Or via apt:\n    sudo apt-get install python\n- LibUSB 1.0.x\n    From: http://sourceforge.net/projects/libusb/files/libusb-1.0/\n    Or via apt:\n    sudo apt-get install libusb-1.0-0-dev\n- LibUDEV\n    sudo apt-get install libudev-dev\n- JDK 6.0\n    From: http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u32-downloads-1594644.html\n    Or via apt:\n    sudo apt-get install openjdk-6-jdk\n- FreeGLUT3\n    From: http://freeglut.sourceforge.net/index.php#download\n    Or via apt:\n    sudo apt-get install freeglut3-dev\n- Doxygen\n    From: http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc\n    Or via apt:\n    sudo apt-get install doxygen\n- GraphViz\n    From: http://www.graphviz.org/Download_linux_ubuntu.php\n    Or via apt:\n    sudo apt-get install graphviz</code></pre>\n<p>将以上的依赖安装完成之后，运行其中示例代码还需要安装对应的USB驱动，驱动安装方法如下(此方法将同目录下的USB驱动文件拷贝到系统目录中，并自动生成环境文件指明OpenNI的路径)：</p>\n<p>进入安装包OpenNI目录中</p>\n<pre><code class=\"sh\"> orbbec@localhost:OpenNI$ ./install.sh</code></pre>\n<p>最后，在安装文件中找到<code>NiViewer</code>运行文件，若文件不能运行，查看<code>chmod</code>权限。</p>\n<pre><code class=\"sh\">sudo ./NiViewer</code></pre>\n<p><img src=\"https://api.orbbec.com.cn/uploads/kindeditor/20200718113033.jpg\" alt=\"结果图片\"><br>经过以上的配置过程，OpenNI的环境就配置完成了。</p>\n<h2 id=\"OpenCV在Arm平台上编译\"><a href=\"#OpenCV在Arm平台上编译\" class=\"headerlink\" title=\"OpenCV在Arm平台上编译\"></a>OpenCV在Arm平台上编译</h2><p>在运用开发板设备获取数据的时候，通常运用<code>OpenNI2</code>获取数据流，通过<code>OpenCV</code>对数据流进行转换，生成RGB图片和深度图片。</p>\n<h3 id=\"下载源文件\"><a href=\"#下载源文件\" class=\"headerlink\" title=\"下载源文件\"></a>下载源文件</h3><p>源文件<a href=\"https://opencv.org/releases/\">官方地址</a>，本文用的是<code>OpenCV3.4.3</code>版本。OpenCV编译的方法自行百度，编译完成后对orbbec中OpenNI2SDK和opencv进行配置。</p>\n<h2 id=\"OpenCV-OpenNI2配置\"><a href=\"#OpenCV-OpenNI2配置\" class=\"headerlink\" title=\"OpenCV+OpenNI2配置\"></a>OpenCV+OpenNI2配置</h2><p>根据官方给出的示例代码，进行编写。由于官方的代码是在<code>Makefile</code>文件中进行编写，所以opencv也需要在其中编写。根据<code>Makefile</code>文件编写规则进行编写。</p>\n<pre><code class=\"Makefile\">#Includes\nCFLAGS = $&#123;shell pkg-config opencv --cflags&#125;\n\n#lib\nLDFLAGS = $&#123;shell pkg-config opencv --libs&#125;\n</code></pre>\n<p>其中<code>pkg-config</code>需要在系统中配置<code>opencv.pc</code>文件，文件内容，在安装的文件中可以找到，若没有则可能默认没有生成（opencv4之后的版本默认不生成），需要在编译的时候设置。</p>\n<p><code>opencv</code>环境配置没有问题后，在orbbec提供的OpenNI2的文件中示例代码中进行整合开发。文件位置在：</p>\n<pre><code class=\"sh\">/OpenNI/Samples/</code></pre>\n<p>选择其中<code>SimpleViewer</code>文件夹中的示例代码进行编写。在<code>CommonCppMakefile</code>文件夹中找到<code>CFLAGS</code>和<code>LDFLAGS</code>变量位置，在其后加上：</p>\n<pre><code class=\"Makefile\">#Includes\nCFLAGS += $&#123;shell pkg-config opencv --cflags&#125;\n\n#lib\nLDFLAGS += $&#123;shell pkg-config opencv --libs&#125;\n</code></pre>\n<p>此外还需要在<code>Makefile</code>文件中加入OpenNI头文件的路径和Redist的路径，这就是在配置OpenNI时运行<code>install.sh</code>文件生成的环境文件中的内容，也在同级目录下。</p>\n<p>其后编译即可通过。接下来就可以使用opencv对数据进行获取保存了。</p>\n"},{"title":"Haar Wavelet（1）","date":"2020-10-23T04:33:49.000Z","author":"Fanrencli","_content":">haar小波变换的图像应用实例\n\n## Haar Wavelet 图片示例\n![Picture resolutions(512*512)](http://39.106.34.39:4567/pic.png)\n```python\nimport numpy as np\nimport cv2\nimport math\nimport requests\n\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #为了强化图片的显示效果，对数据进行归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == '__main__':\n    #读取网络图片（2选1）\n    file_pic=requests.get('http://39.106.34.39:4567/pic.png')\n    img= cv2.imdecode(np.fromstring(file_pic.content, np.uint8), 0).astype(np.float64)\n    #读取本地图片（2选1）\n    # img= cv2.imread(\"pic.png\",0).astype(np.float64)\n    cv2.imshow('asd',haar_dwt2D(img))\n    cv2.waitKey(0)\n    for i in range(0,img.shape[0]//2-1,img.shape[0]//2-1):\n        for j in range(0,img.shape[1]//2-1,img.shape[1]//2-1):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)  \n```","source":"_posts/other/haar_wavelet.md","raw":"---\ntitle: Haar Wavelet（1）\ndate: 2020-10-23 12:33:49\ncategories:\n  - 小波变换\ntags:\n  - Haar Wavelet\n  - Python\n  - Fanrencli\nauthor: Fanrencli\n---\n>haar小波变换的图像应用实例\n\n## Haar Wavelet 图片示例\n![Picture resolutions(512*512)](http://39.106.34.39:4567/pic.png)\n```python\nimport numpy as np\nimport cv2\nimport math\nimport requests\n\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #为了强化图片的显示效果，对数据进行归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == '__main__':\n    #读取网络图片（2选1）\n    file_pic=requests.get('http://39.106.34.39:4567/pic.png')\n    img= cv2.imdecode(np.fromstring(file_pic.content, np.uint8), 0).astype(np.float64)\n    #读取本地图片（2选1）\n    # img= cv2.imread(\"pic.png\",0).astype(np.float64)\n    cv2.imshow('asd',haar_dwt2D(img))\n    cv2.waitKey(0)\n    for i in range(0,img.shape[0]//2-1,img.shape[0]//2-1):\n        for j in range(0,img.shape[1]//2-1,img.shape[1]//2-1):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)  \n```","slug":"other/haar_wavelet","published":1,"updated":"2021-07-13T08:16:17.356Z","_id":"cknsx2fq90001scuohzjcdqks","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>haar小波变换的图像应用实例</p>\n</blockquote>\n<h2 id=\"Haar-Wavelet-图片示例\"><a href=\"#Haar-Wavelet-图片示例\" class=\"headerlink\" title=\"Haar Wavelet 图片示例\"></a>Haar Wavelet 图片示例</h2><p><img src=\"http://39.106.34.39:4567/pic.png\" alt=\"Picture resolutions(512*512)\"></p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> math\n<span class=\"token keyword\">import</span> requests\n\n<span class=\"token comment\" spellcheck=\"true\"># numpy数组归一化</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Normalize</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _range <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>img <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> _range\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: row or column of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array handle with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\" spellcheck=\"true\">#图片需要为2的次方形状</span>\n    length<span class=\"token operator\">=</span>len<span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    Low_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#小波变换的主体部分</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Low_frequency<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        High_frequency<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Low_frequency<span class=\"token punctuation\">,</span>High_frequency<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: array of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array of image handel with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>row_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>col_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#为了强化图片的显示效果，对数据进行归一化处理</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\">#读取网络图片（2选1）</span>\n    file_pic<span class=\"token operator\">=</span>requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://39.106.34.39:4567/pic.png'</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imdecode<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>file_pic<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#读取本地图片（2选1）</span>\n    <span class=\"token comment\" spellcheck=\"true\"># img= cv2.imread(\"pic.png\",0).astype(np.float64)</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">,</span>haar_dwt2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">:</span>j<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">:</span>j<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  </code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>haar小波变换的图像应用实例</p>\n</blockquote>\n<h2 id=\"Haar-Wavelet-图片示例\"><a href=\"#Haar-Wavelet-图片示例\" class=\"headerlink\" title=\"Haar Wavelet 图片示例\"></a>Haar Wavelet 图片示例</h2><p><img src=\"http://39.106.34.39:4567/pic.png\" alt=\"Picture resolutions(512*512)\"></p>\n<pre><code class=\"python\">import numpy as np\nimport cv2\nimport math\nimport requests\n\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #为了强化图片的显示效果，对数据进行归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == &#39;__main__&#39;:\n    #读取网络图片（2选1）\n    file_pic=requests.get(&#39;http://39.106.34.39:4567/pic.png&#39;)\n    img= cv2.imdecode(np.fromstring(file_pic.content, np.uint8), 0).astype(np.float64)\n    #读取本地图片（2选1）\n    # img= cv2.imread(&quot;pic.png&quot;,0).astype(np.float64)\n    cv2.imshow(&#39;asd&#39;,haar_dwt2D(img))\n    cv2.waitKey(0)\n    for i in range(0,img.shape[0]//2-1,img.shape[0]//2-1):\n        for j in range(0,img.shape[1]//2-1,img.shape[1]//2-1):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow(&#39;asd&#39;,img)\n    cv2.waitKey(0)  </code></pre>\n"},{"title":"Haar Wavelet（2）","date":"2020-10-23T04:33:49.000Z","mathjax":true,"markup":"mmark","author":"Fanrencli","_content":">haar小波变换的图像应用实例（优化）\n\n## 优化目标\n- 针对一维变换的循环处理方式，将使用矩阵运算进行代替\n- 针对二维的分行、列的处理方法，使用矩阵运算代替\n- 边界处理\n\n### 一维处理\n观察[上篇文章](https://fanrencli.cn/2020/10/27/haar-wavelet/)的代码,其中的一维变换代码`haar_dwt`，使用简单的循环处理方法，如下:\n```python \n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)\n```\n显然此种循环处理方法的性能不足，针对这个缺点，本文采用矩阵运算进行代替。首先分析循环的处理过程，转为矩阵方式，如下:\n$$Matrix_{lowfrequency}=\n{1\\over \\sqrt{2}}\n\\begin{pmatrix}\n1&1&0&\\cdots&\\cdots&0\\\\\\\\\n0&0&1&1&\\cdots&0\\\\\\\\\n\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\\\\\\\\n0&\\cdots&\\cdots&0&1&1\\\\\\\\\n\\end{pmatrix}（n*{n\\over 2}）\n$$\n$$Matrix_{highfrequency}=\n{1\\over \\sqrt{2}}\n\\begin{pmatrix}\n1&-1&0&\\cdots&\\cdots&0\\\\\\\\\n0&0&1&-1&\\cdots&0\\\\\\\\\n\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\\\\\\\\n0&\\cdots&\\cdots&0&1&-1\\\\\\\\\n\\end{pmatrix}（n*{n\\over 2}）\n$$\n$$\nLowfrequency=Matrix_{lowfrequency}\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nHighfrequency=Matrix_{highfrequency}\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{roworcol}=\n\\begin{pmatrix}\nLowfrequency\\\\\\\\\nHighfrequency\\\\\\\\\n\\end{pmatrix}\n$$\n由此分析，针对代码进行优化，将矩阵构造处理抽取出来作为一个函数`Create_haar_matrix`，这样便于以后根据图像分辨率进行构建矩阵，并且将$Matrix_{lowfrequency}$与$Matrix_{highfrequency}$合成为一个矩阵T,有以下的运算过程:\n$$\nT=\n\\begin{pmatrix}\nMatrix_{lowfrequency}\\\\\\\\\nMatrix_{highfrequency}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{roworcol}=T\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n代码如下:\n```python\n#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(length):\n    half_length=length//2\n    haar_wavelet_matrix=np.zeros((length,length),dtype=float)\n    for i in range(half_length):\n        haar_wavelet_matrix[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(haar_wavelet_matrix,row_or_col)\n    return Low_High_frequency\n\n```\n### 二维处理\n观察上篇文章的代码,其中的二维变换代码`haar_dwt2D`，使用简单的循环处理方法，如下:\n```python\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n此处代码，分行列分别进行运算，由一维变换过程:\n$$\nimg_{roworcol}=T\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n对此进行拓展得到：\n$$\nimg=T\\cdot\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1n}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nn}\\\\\\\\\n\\end{pmatrix}\n$$\n进而代码如下：\n```python\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n紧接着对代码的这个部分进行思考：\n```python\n    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T\n```\n此部分的代码逻辑过程可描述为：\n$$\nimg_{pic}=\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1n}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nn}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{row}=T \\cdot img_{pic}\n$$\n$$\nimg_{col}=T \\cdot (img_{row})^T\n$$\n$$\nimg_{pic}=(img_{col})^T\n$$\n即：\n$$\nimg_{pic}= (T \\cdot (T \\cdot img_{pic})^T)^T=T\\cdot img_{pic} \\cdot T^T\n$$\n由此将代码进一步转化：\n```python\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix,img),haar_wavelet_matrix.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n### 边界处理\n以上的处理基本解决了代码性能方面的不足，接着对代码的适用性进行考虑，此代码要求图片的分辨率必须为$2^x*2^x$，所以需要针对不是2的次方的图片进行扩展，思路：边界填充。\n> 边缘填充:\n> - 复制法：复制最边缘的像素\n> - 反射法：对称轴\n> - 外包装法：\n> - 常量法：用常量值填充四周\n\n本文选用其中的复制法，作为示例，在`python`中`OpenCV`提供了相关的方法`cv2.copyMakeBorder(src,top, bottom, left, right ,borderType,value)`。\n\n- src : 需要填充的图像\n- top : 图像上的填充边界长度\n- bottom : 图像下面的填充边界长度\n- left : 图像左边的填充边界长度\n- right : 图像右边的填充边界长度\n- borderType : 边界填充类型\n- value : 填充边界的颜色，常用于常量法。\n\n本文针对图像的分辨率，对于宽和高不是2的倍数，则对应边界添加一行复制行，本文代码用于每压缩一次则填充边界一次（即每次只填充一行，将行或列增加至2的倍数），并不是将边界一次扩展到2的次方倍，所以`haar_dwt2D`代码如下：\n```python\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n\n```\n由于图片的行列不在是2的次方倍数，且行列数不尽相同，根据上文提及的矩阵运算的过程，此时的运算过程:\n$$\nimg_{pic}=\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1m}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nm}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{row}=T_1 \\cdot img_{pic}\n$$\n$$\nimg_{col}=T_2 \\cdot (img_{row})^T\n$$\n$$\nimg_{pic}=(img_{col})^T\n$$\n即：\n$$\nimg_{pic}= (T_2 \\cdot (T_1 \\cdot img_{pic})^T)^T=T_1\\cdot img_{pic} \\cdot T_2^T\n$$\n针对`Create_haar_matrix`和`haar_dwt`的代码要进行调整:\n```python\ndef Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency\n```\n## 最终代码结果\n```python\nimport numpy as np\nimport cv2\nimport math\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == '__main__':\n    img= cv2.imread(\"pic1.png\",0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)\n```\n注意考虑到代码的适用性，本文的代码仅可以压缩一次。若需要连续压缩，需要将需要压缩的图片数据单独取出，重新输入，考虑到代码的适用性，以后再做更新。即以下的形式不正确：\n```python\nif __name__ == '__main__':\n    img= cv2.imread(\"pic.png\",0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)\n    #!!!!!!!本文代码在此处不能照抄之前的运行代码，本文已经删除以下代码。\n    for i in range(0,img.shape[0]//2+1,img.shape[0]//2):\n        for j in range(0,img.shape[1]//2+1,img.shape[1]//2):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)  \n```\n## 最后的思考\n>  本文采用haar wavelet对图像进行压缩，运算过程中将图像以行列作为区别，将二维图像转为一维矩阵运算，本质上应该还是属于一维的运算方法，但此方法感觉不应止于此。根据haar wavelet的计算原理，可否使用二维计算方法，即使用卷积计算。\n>\n> 计算思路如下:\n> \n> 压缩后的每一个图像像素点仅与压缩前的2x2矩阵中的信息相关，所以针对这一特性，我们只需要给出4个不同的卷积核，分别对应于$LL,LH,HL,HH,$这四个图像。本文针对Haar wavelet,给出以下四个卷积矩阵：\n> $$LL= {1\\over 2}\n\\begin{pmatrix}\n1&1\\\\\\\\\n1&1\\\\\\\\\n\\end{pmatrix}\n>$$\n>$$HH= {1\\over 2}\n\\begin{pmatrix}\n1&-1\\\\\\\\\n-1&1\\\\\\\\\n\\end{pmatrix}\n>$$\n> $$HL= {1\\over 2}\n\\begin{pmatrix}\n1&-1\\\\\\\\\n1&-1\\\\\\\\\n\\end{pmatrix}\n>$$\n> $$HL= {1\\over 2}\n\\begin{pmatrix}\n1&1\\\\\\\\\n-1&-1\\\\\\\\\n\\end{pmatrix}\n>$$\n>其中HL和LH的顺序可能不对，尚未验证。通过给出的四个卷积核，通过对图像进行卷积运算得出四个矩阵，即使haar wavelet的压缩结果。","source":"_posts/other/haar_wavelet_optimization.md","raw":"---\ntitle: Haar Wavelet（2）\ndate: 2020-10-23 12:33:49\nmathjax: true\nmarkup: mmark\ncategories:\n  - 小波变换\ntags:\n  - Haar Wavelet\n  - Python\n  - Fanrencli\nauthor: Fanrencli\n---\n>haar小波变换的图像应用实例（优化）\n\n## 优化目标\n- 针对一维变换的循环处理方式，将使用矩阵运算进行代替\n- 针对二维的分行、列的处理方法，使用矩阵运算代替\n- 边界处理\n\n### 一维处理\n观察[上篇文章](https://fanrencli.cn/2020/10/27/haar-wavelet/)的代码,其中的一维变换代码`haar_dwt`，使用简单的循环处理方法，如下:\n```python \n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)\n```\n显然此种循环处理方法的性能不足，针对这个缺点，本文采用矩阵运算进行代替。首先分析循环的处理过程，转为矩阵方式，如下:\n$$Matrix_{lowfrequency}=\n{1\\over \\sqrt{2}}\n\\begin{pmatrix}\n1&1&0&\\cdots&\\cdots&0\\\\\\\\\n0&0&1&1&\\cdots&0\\\\\\\\\n\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\\\\\\\\n0&\\cdots&\\cdots&0&1&1\\\\\\\\\n\\end{pmatrix}（n*{n\\over 2}）\n$$\n$$Matrix_{highfrequency}=\n{1\\over \\sqrt{2}}\n\\begin{pmatrix}\n1&-1&0&\\cdots&\\cdots&0\\\\\\\\\n0&0&1&-1&\\cdots&0\\\\\\\\\n\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\vdots&\\\\\\\\\n0&\\cdots&\\cdots&0&1&-1\\\\\\\\\n\\end{pmatrix}（n*{n\\over 2}）\n$$\n$$\nLowfrequency=Matrix_{lowfrequency}\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nHighfrequency=Matrix_{highfrequency}\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{roworcol}=\n\\begin{pmatrix}\nLowfrequency\\\\\\\\\nHighfrequency\\\\\\\\\n\\end{pmatrix}\n$$\n由此分析，针对代码进行优化，将矩阵构造处理抽取出来作为一个函数`Create_haar_matrix`，这样便于以后根据图像分辨率进行构建矩阵，并且将$Matrix_{lowfrequency}$与$Matrix_{highfrequency}$合成为一个矩阵T,有以下的运算过程:\n$$\nT=\n\\begin{pmatrix}\nMatrix_{lowfrequency}\\\\\\\\\nMatrix_{highfrequency}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{roworcol}=T\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n代码如下:\n```python\n#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(length):\n    half_length=length//2\n    haar_wavelet_matrix=np.zeros((length,length),dtype=float)\n    for i in range(half_length):\n        haar_wavelet_matrix[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(haar_wavelet_matrix,row_or_col)\n    return Low_High_frequency\n\n```\n### 二维处理\n观察上篇文章的代码,其中的二维变换代码`haar_dwt2D`，使用简单的循环处理方法，如下:\n```python\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n此处代码，分行列分别进行运算，由一维变换过程:\n$$\nimg_{roworcol}=T\n\\begin{pmatrix}\nx_1\\\\\\\\\nx_2\\\\\\\\\n\\vdots\\\\\\\\\nx_n\\\\\\\\\n\\end{pmatrix}\n$$\n对此进行拓展得到：\n$$\nimg=T\\cdot\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1n}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nn}\\\\\\\\\n\\end{pmatrix}\n$$\n进而代码如下：\n```python\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n紧接着对代码的这个部分进行思考：\n```python\n    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T\n```\n此部分的代码逻辑过程可描述为：\n$$\nimg_{pic}=\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1n}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nn}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{row}=T \\cdot img_{pic}\n$$\n$$\nimg_{col}=T \\cdot (img_{row})^T\n$$\n$$\nimg_{pic}=(img_{col})^T\n$$\n即：\n$$\nimg_{pic}= (T \\cdot (T \\cdot img_{pic})^T)^T=T\\cdot img_{pic} \\cdot T^T\n$$\n由此将代码进一步转化：\n```python\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix,img),haar_wavelet_matrix.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n```\n### 边界处理\n以上的处理基本解决了代码性能方面的不足，接着对代码的适用性进行考虑，此代码要求图片的分辨率必须为$2^x*2^x$，所以需要针对不是2的次方的图片进行扩展，思路：边界填充。\n> 边缘填充:\n> - 复制法：复制最边缘的像素\n> - 反射法：对称轴\n> - 外包装法：\n> - 常量法：用常量值填充四周\n\n本文选用其中的复制法，作为示例，在`python`中`OpenCV`提供了相关的方法`cv2.copyMakeBorder(src,top, bottom, left, right ,borderType,value)`。\n\n- src : 需要填充的图像\n- top : 图像上的填充边界长度\n- bottom : 图像下面的填充边界长度\n- left : 图像左边的填充边界长度\n- right : 图像右边的填充边界长度\n- borderType : 边界填充类型\n- value : 填充边界的颜色，常用于常量法。\n\n本文针对图像的分辨率，对于宽和高不是2的倍数，则对应边界添加一行复制行，本文代码用于每压缩一次则填充边界一次（即每次只填充一行，将行或列增加至2的倍数），并不是将边界一次扩展到2的次方倍，所以`haar_dwt2D`代码如下：\n```python\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n\n```\n由于图片的行列不在是2的次方倍数，且行列数不尽相同，根据上文提及的矩阵运算的过程，此时的运算过程:\n$$\nimg_{pic}=\n\\begin{pmatrix}\nx_{11}&x_{12}&\\cdots&x_{1m}\\\\\\\\\nx_{21}&\\ddots&&\\vdots\\\\\\\\\n\\vdots&&\\ddots&\\vdots\\\\\\\\\nx_{n1}&\\cdots&\\cdots&x_{nm}\\\\\\\\\n\\end{pmatrix}\n$$\n$$\nimg_{row}=T_1 \\cdot img_{pic}\n$$\n$$\nimg_{col}=T_2 \\cdot (img_{row})^T\n$$\n$$\nimg_{pic}=(img_{col})^T\n$$\n即：\n$$\nimg_{pic}= (T_2 \\cdot (T_1 \\cdot img_{pic})^T)^T=T_1\\cdot img_{pic} \\cdot T_2^T\n$$\n针对`Create_haar_matrix`和`haar_dwt`的代码要进行调整:\n```python\ndef Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency\n```\n## 最终代码结果\n```python\nimport numpy as np\nimport cv2\nimport math\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == '__main__':\n    img= cv2.imread(\"pic1.png\",0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)\n```\n注意考虑到代码的适用性，本文的代码仅可以压缩一次。若需要连续压缩，需要将需要压缩的图片数据单独取出，重新输入，考虑到代码的适用性，以后再做更新。即以下的形式不正确：\n```python\nif __name__ == '__main__':\n    img= cv2.imread(\"pic.png\",0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)\n    #!!!!!!!本文代码在此处不能照抄之前的运行代码，本文已经删除以下代码。\n    for i in range(0,img.shape[0]//2+1,img.shape[0]//2):\n        for j in range(0,img.shape[1]//2+1,img.shape[1]//2):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow('asd',img)\n    cv2.waitKey(0)  \n```\n## 最后的思考\n>  本文采用haar wavelet对图像进行压缩，运算过程中将图像以行列作为区别，将二维图像转为一维矩阵运算，本质上应该还是属于一维的运算方法，但此方法感觉不应止于此。根据haar wavelet的计算原理，可否使用二维计算方法，即使用卷积计算。\n>\n> 计算思路如下:\n> \n> 压缩后的每一个图像像素点仅与压缩前的2x2矩阵中的信息相关，所以针对这一特性，我们只需要给出4个不同的卷积核，分别对应于$LL,LH,HL,HH,$这四个图像。本文针对Haar wavelet,给出以下四个卷积矩阵：\n> $$LL= {1\\over 2}\n\\begin{pmatrix}\n1&1\\\\\\\\\n1&1\\\\\\\\\n\\end{pmatrix}\n>$$\n>$$HH= {1\\over 2}\n\\begin{pmatrix}\n1&-1\\\\\\\\\n-1&1\\\\\\\\\n\\end{pmatrix}\n>$$\n> $$HL= {1\\over 2}\n\\begin{pmatrix}\n1&-1\\\\\\\\\n1&-1\\\\\\\\\n\\end{pmatrix}\n>$$\n> $$HL= {1\\over 2}\n\\begin{pmatrix}\n1&1\\\\\\\\\n-1&-1\\\\\\\\\n\\end{pmatrix}\n>$$\n>其中HL和LH的顺序可能不对，尚未验证。通过给出的四个卷积核，通过对图像进行卷积运算得出四个矩阵，即使haar wavelet的压缩结果。","slug":"other/haar_wavelet_optimization","published":1,"updated":"2021-04-22T06:46:12.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknsx2fqb0003scuo2wsa59jg","content":"<blockquote>\n<p>haar小波变换的图像应用实例（优化）</p>\n</blockquote>\n<h2 id=\"优化目标\"><a href=\"#优化目标\" class=\"headerlink\" title=\"优化目标\"></a>优化目标</h2><ul>\n<li>针对一维变换的循环处理方式，将使用矩阵运算进行代替</li>\n<li>针对二维的分行、列的处理方法，使用矩阵运算代替</li>\n<li>边界处理</li>\n</ul>\n<h3 id=\"一维处理\"><a href=\"#一维处理\" class=\"headerlink\" title=\"一维处理\"></a>一维处理</h3><p>观察<a href=\"https://fanrencli.cn/2020/10/27/haar-wavelet/\">上篇文章</a>的代码,其中的一维变换代码<code>haar_dwt</code>，使用简单的循环处理方法，如下:</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#inputdata: row or column of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array handle with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\" spellcheck=\"true\">#图片需要为2的次方形状</span>\n    length<span class=\"token operator\">=</span>len<span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    Low_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#小波变换的主体部分</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Low_frequency<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        High_frequency<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>row_or_col<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Low_frequency<span class=\"token punctuation\">,</span>High_frequency<span class=\"token punctuation\">)</span></code></pre>\n<p>显然此种循环处理方法的性能不足，针对这个缺点，本文采用矩阵运算进行代替。首先分析循环的处理过程，转为矩阵方式，如下:<br>$$Matrix_{lowfrequency}=<br>{1\\over \\sqrt{2}}<br>\\begin{pmatrix}<br>1&amp;1&amp;0&amp;\\cdots&amp;\\cdots&amp;0\\\\<br>0&amp;0&amp;1&amp;1&amp;\\cdots&amp;0\\\\<br>\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\\\<br>0&amp;\\cdots&amp;\\cdots&amp;0&amp;1&amp;1\\\\<br>\\end{pmatrix}（n*{n\\over 2}）<br>$$<br>$$Matrix_{highfrequency}=<br>{1\\over \\sqrt{2}}<br>\\begin{pmatrix}<br>1&amp;-1&amp;0&amp;\\cdots&amp;\\cdots&amp;0\\\\<br>0&amp;0&amp;1&amp;-1&amp;\\cdots&amp;0\\\\<br>\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\\\<br>0&amp;\\cdots&amp;\\cdots&amp;0&amp;1&amp;-1\\\\<br>\\end{pmatrix}（n*{n\\over 2}）<br>$$<br>$$<br>Lowfrequency=Matrix_{lowfrequency}<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>Highfrequency=Matrix_{highfrequency}<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{roworcol}=<br>\\begin{pmatrix}<br>Lowfrequency\\\\<br>Highfrequency\\\\<br>\\end{pmatrix}<br>$$<br>由此分析，针对代码进行优化，将矩阵构造处理抽取出来作为一个函数<code>Create_haar_matrix</code>，这样便于以后根据图像分辨率进行构建矩阵，并且将$Matrix_{lowfrequency}$与$Matrix_{highfrequency}$合成为一个矩阵T,有以下的运算过程:<br>$$<br>T=<br>\\begin{pmatrix}<br>Matrix_{lowfrequency}\\\\<br>Matrix_{highfrequency}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{roworcol}=T<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>代码如下:</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#根据输入数组长度创建小波变换矩阵</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Create_haar_matrix</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    half_length<span class=\"token operator\">=</span>length<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    haar_wavelet_matrix<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>half_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        haar_wavelet_matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix<span class=\"token punctuation\">[</span>half_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix<span class=\"token punctuation\">[</span>half_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> haar_wavelet_matrix\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: row or column of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array handle with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>row_or_col<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    Low_High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>haar_wavelet_matrix<span class=\"token punctuation\">,</span>row_or_col<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Low_High_frequency\n</code></pre>\n<h3 id=\"二维处理\"><a href=\"#二维处理\" class=\"headerlink\" title=\"二维处理\"></a>二维处理</h3><p>观察上篇文章的代码,其中的二维变换代码<code>haar_dwt2D</code>，使用简单的循环处理方法，如下:</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#inputdata: array of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array of image handel with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>row_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>col_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#归一化处理</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img</code></pre>\n<p>此处代码，分行列分别进行运算，由一维变换过程:<br>$$<br>img_{roworcol}=T<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>对此进行拓展得到：<br>$$<br>img=T\\cdot<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1n}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nn}\\\\<br>\\end{pmatrix}<br>$$<br>进而代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#inputdata: array of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array of image handel with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\">#创建小波变换矩阵</span>\n    haar_wavelet_matrix<span class=\"token operator\">=</span>Create_haar_matrix<span class=\"token punctuation\">(</span>col_num<span class=\"token punctuation\">)</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>T\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img</code></pre>\n<p>紧接着对代码的这个部分进行思考：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>T</code></pre>\n<p>此部分的代码逻辑过程可描述为：<br>$$<br>img_{pic}=<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1n}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nn}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{row}=T \\cdot img_{pic}<br>$$<br>$$<br>img_{col}=T \\cdot (img_{row})^T<br>$$<br>$$<br>img_{pic}=(img_{col})^T<br>$$<br>即：<br>$$<br>img_{pic}= (T \\cdot (T \\cdot img_{pic})^T)^T=T\\cdot img_{pic} \\cdot T^T<br>$$<br>由此将代码进一步转化：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#inputdata: row or column of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array handle with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    Low_High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>haar_wavelet_matrix<span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Low_High_frequency\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: array of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array of image handel with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\">#创建小波变换矩阵</span>\n    haar_wavelet_matrix<span class=\"token operator\">=</span>Create_haar_matrix<span class=\"token punctuation\">(</span>col_num<span class=\"token punctuation\">)</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix<span class=\"token punctuation\">)</span>\n\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img</code></pre>\n<h3 id=\"边界处理\"><a href=\"#边界处理\" class=\"headerlink\" title=\"边界处理\"></a>边界处理</h3><p>以上的处理基本解决了代码性能方面的不足，接着对代码的适用性进行考虑，此代码要求图片的分辨率必须为$2^x*2^x$，所以需要针对不是2的次方的图片进行扩展，思路：边界填充。</p>\n<blockquote>\n<p>边缘填充:</p>\n<ul>\n<li>复制法：复制最边缘的像素</li>\n<li>反射法：对称轴</li>\n<li>外包装法：</li>\n<li>常量法：用常量值填充四周</li>\n</ul>\n</blockquote>\n<p>本文选用其中的复制法，作为示例，在<code>python</code>中<code>OpenCV</code>提供了相关的方法<code>cv2.copyMakeBorder(src,top, bottom, left, right ,borderType,value)</code>。</p>\n<ul>\n<li>src : 需要填充的图像</li>\n<li>top : 图像上的填充边界长度</li>\n<li>bottom : 图像下面的填充边界长度</li>\n<li>left : 图像左边的填充边界长度</li>\n<li>right : 图像右边的填充边界长度</li>\n<li>borderType : 边界填充类型</li>\n<li>value : 填充边界的颜色，常用于常量法。</li>\n</ul>\n<p>本文针对图像的分辨率，对于宽和高不是2的倍数，则对应边界添加一行复制行，本文代码用于每压缩一次则填充边界一次（即每次只填充一行，将行或列增加至2的倍数），并不是将边界一次扩展到2的次方倍，所以<code>haar_dwt2D</code>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\">#创建小波变换矩阵</span>\n    haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token operator\">=</span>Create_haar_matrix<span class=\"token punctuation\">(</span>row_num<span class=\"token punctuation\">,</span>col_num<span class=\"token punctuation\">)</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token punctuation\">)</span>\n\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img\n</code></pre>\n<p>由于图片的行列不在是2的次方倍数，且行列数不尽相同，根据上文提及的矩阵运算的过程，此时的运算过程:<br>$$<br>img_{pic}=<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1m}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nm}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{row}=T_1 \\cdot img_{pic}<br>$$<br>$$<br>img_{col}=T_2 \\cdot (img_{row})^T<br>$$<br>$$<br>img_{pic}=(img_{col})^T<br>$$<br>即：<br>$$<br>img_{pic}= (T_2 \\cdot (T_1 \\cdot img_{pic})^T)^T=T_1\\cdot img_{pic} \\cdot T_2^T<br>$$<br>针对<code>Create_haar_matrix</code>和<code>haar_dwt</code>的代码要进行调整:</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">Create_haar_matrix</span><span class=\"token punctuation\">(</span>row_length<span class=\"token punctuation\">,</span>col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    half_row_length<span class=\"token operator\">=</span>row_length<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_col_length<span class=\"token operator\">=</span>col_length<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    haar_wavelet_matrix_row<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row_length<span class=\"token punctuation\">,</span>row_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    haar_wavelet_matrix_col<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>col_length<span class=\"token punctuation\">,</span>col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>half_row_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>half_row_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>half_row_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>half_col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>half_col_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>half_col_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> haar_wavelet_matrix_col<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    Low_High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>haar_wavelet_matrix_col<span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Low_High_frequency</code></pre>\n<h2 id=\"最终代码结果\"><a href=\"#最终代码结果\" class=\"headerlink\" title=\"最终代码结果\"></a>最终代码结果</h2><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> math\n<span class=\"token comment\" spellcheck=\"true\"># numpy数组归一化</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Normalize</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _range <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>img <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> _range\n<span class=\"token comment\" spellcheck=\"true\">#根据输入数组长度创建小波变换矩阵</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Create_haar_matrix</span><span class=\"token punctuation\">(</span>row_length<span class=\"token punctuation\">,</span>col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    half_row_length<span class=\"token operator\">=</span>row_length<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_col_length<span class=\"token operator\">=</span>col_length<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    haar_wavelet_matrix_row<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row_length<span class=\"token punctuation\">,</span>row_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    haar_wavelet_matrix_col<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>col_length<span class=\"token punctuation\">,</span>col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>half_row_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>half_row_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_row<span class=\"token punctuation\">[</span>half_row_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>half_col_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>half_col_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        haar_wavelet_matrix_col<span class=\"token punctuation\">[</span>half_col_length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> haar_wavelet_matrix_col<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: row or column of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array handle with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    Low_High_frequency<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>haar_wavelet_matrix_col<span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Low_High_frequency\n\n<span class=\"token comment\" spellcheck=\"true\">#inputdata: array of image</span>\n<span class=\"token comment\" spellcheck=\"true\">#outputdata: array of image handel with haar_wavelet</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">haar_dwt2D</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> col_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">and</span> row_num<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        img<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>copyMakeBorder<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>BORDER_REPLICATE<span class=\"token punctuation\">)</span>\n    col_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    row_num<span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\">#创建小波变换矩阵</span>\n    haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token operator\">=</span>Create_haar_matrix<span class=\"token punctuation\">(</span>row_num<span class=\"token punctuation\">,</span>col_num<span class=\"token punctuation\">)</span>\n    half_col_num<span class=\"token operator\">=</span>col_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    half_row_num<span class=\"token operator\">=</span>row_num<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    img<span class=\"token operator\">=</span>haar_dwt<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>haar_wavelet_matrix_row<span class=\"token punctuation\">,</span>haar_wavelet_matrix_col<span class=\"token punctuation\">)</span>\n\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>half_row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Normalize<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>half_row_num<span class=\"token punctuation\">:</span>row_num<span class=\"token punctuation\">,</span>half_col_num<span class=\"token punctuation\">:</span>col_num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    img<span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"pic1.png\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>haar_dwt2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre>\n<p>注意考虑到代码的适用性，本文的代码仅可以压缩一次。若需要连续压缩，需要将需要压缩的图片数据单独取出，重新输入，考虑到代码的适用性，以后再做更新。即以下的形式不正确：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    img<span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"pic.png\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">)</span>\n    img<span class=\"token operator\">=</span>haar_dwt2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#!!!!!!!本文代码在此处不能照抄之前的运行代码，本文已经删除以下代码。</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">:</span>j<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>haar_dwt2D<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">:</span>j<span class=\"token operator\">+</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  </code></pre>\n<h2 id=\"最后的思考\"><a href=\"#最后的思考\" class=\"headerlink\" title=\"最后的思考\"></a>最后的思考</h2><blockquote>\n<p> 本文采用haar wavelet对图像进行压缩，运算过程中将图像以行列作为区别，将二维图像转为一维矩阵运算，本质上应该还是属于一维的运算方法，但此方法感觉不应止于此。根据haar wavelet的计算原理，可否使用二维计算方法，即使用卷积计算。</p>\n<p>计算思路如下:</p>\n<p>压缩后的每一个图像像素点仅与压缩前的2x2矩阵中的信息相关，所以针对这一特性，我们只需要给出4个不同的卷积核，分别对应于$LL,LH,HL,HH,$这四个图像。本文针对Haar wavelet,给出以下四个卷积矩阵：<br>$$LL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;1\\\\<br>1&amp;1\\\\<br>\\end{pmatrix}<br>$$<br>$$HH= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;-1\\\\<br>-1&amp;1\\\\<br>\\end{pmatrix}<br>$$<br>$$HL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;-1\\\\<br>1&amp;-1\\\\<br>\\end{pmatrix}<br>$$<br>$$HL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;1\\\\<br>-1&amp;-1\\\\<br>\\end{pmatrix}<br>$$<br>其中HL和LH的顺序可能不对，尚未验证。通过给出的四个卷积核，通过对图像进行卷积运算得出四个矩阵，即使haar wavelet的压缩结果。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>haar小波变换的图像应用实例（优化）</p>\n</blockquote>\n<h2 id=\"优化目标\"><a href=\"#优化目标\" class=\"headerlink\" title=\"优化目标\"></a>优化目标</h2><ul>\n<li>针对一维变换的循环处理方式，将使用矩阵运算进行代替</li>\n<li>针对二维的分行、列的处理方法，使用矩阵运算代替</li>\n<li>边界处理</li>\n</ul>\n<h3 id=\"一维处理\"><a href=\"#一维处理\" class=\"headerlink\" title=\"一维处理\"></a>一维处理</h3><p>观察<a href=\"https://fanrencli.cn/2020/10/27/haar-wavelet/\">上篇文章</a>的代码,其中的一维变换代码<code>haar_dwt</code>，使用简单的循环处理方法，如下:</p>\n<pre><code class=\"python\">#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col):#图片需要为2的次方形状\n    length=len(row_or_col)//2\n    Low_frequency=np.zeros(length,dtype=float)\n    High_frequency=np.zeros(length,dtype=float)\n    #小波变换的主体部分\n    for i in range(length):\n        Low_frequency[i]=(row_or_col[2*i]+row_or_col[2*i+1])/math.sqrt(2)\n        High_frequency[i]=(row_or_col[2*i]-row_or_col[2*i+1])/math.sqrt(2)\n    return np.append(Low_frequency,High_frequency)</code></pre>\n<p>显然此种循环处理方法的性能不足，针对这个缺点，本文采用矩阵运算进行代替。首先分析循环的处理过程，转为矩阵方式，如下:<br>$$Matrix_{lowfrequency}=<br>{1\\over \\sqrt{2}}<br>\\begin{pmatrix}<br>1&amp;1&amp;0&amp;\\cdots&amp;\\cdots&amp;0\\\\<br>0&amp;0&amp;1&amp;1&amp;\\cdots&amp;0\\\\<br>\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\\\<br>0&amp;\\cdots&amp;\\cdots&amp;0&amp;1&amp;1\\\\<br>\\end{pmatrix}（n*{n\\over 2}）<br>$$<br>$$Matrix_{highfrequency}=<br>{1\\over \\sqrt{2}}<br>\\begin{pmatrix}<br>1&amp;-1&amp;0&amp;\\cdots&amp;\\cdots&amp;0\\\\<br>0&amp;0&amp;1&amp;-1&amp;\\cdots&amp;0\\\\<br>\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\\\<br>0&amp;\\cdots&amp;\\cdots&amp;0&amp;1&amp;-1\\\\<br>\\end{pmatrix}（n*{n\\over 2}）<br>$$<br>$$<br>Lowfrequency=Matrix_{lowfrequency}<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>Highfrequency=Matrix_{highfrequency}<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{roworcol}=<br>\\begin{pmatrix}<br>Lowfrequency\\\\<br>Highfrequency\\\\<br>\\end{pmatrix}<br>$$<br>由此分析，针对代码进行优化，将矩阵构造处理抽取出来作为一个函数<code>Create_haar_matrix</code>，这样便于以后根据图像分辨率进行构建矩阵，并且将$Matrix_{lowfrequency}$与$Matrix_{highfrequency}$合成为一个矩阵T,有以下的运算过程:<br>$$<br>T=<br>\\begin{pmatrix}<br>Matrix_{lowfrequency}\\\\<br>Matrix_{highfrequency}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{roworcol}=T<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>代码如下:</p>\n<pre><code class=\"python\">#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(length):\n    half_length=length//2\n    haar_wavelet_matrix=np.zeros((length,length),dtype=float)\n    for i in range(half_length):\n        haar_wavelet_matrix[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix[half_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(row_or_col,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(haar_wavelet_matrix,row_or_col)\n    return Low_High_frequency\n</code></pre>\n<h3 id=\"二维处理\"><a href=\"#二维处理\" class=\"headerlink\" title=\"二维处理\"></a>二维处理</h3><p>观察上篇文章的代码,其中的二维变换代码<code>haar_dwt2D</code>，使用简单的循环处理方法，如下:</p>\n<pre><code class=\"python\">#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    for i in range(row_num):\n        img[i]=haar_dwt(img[i])\n    for j in range(col_num):\n        img[:,j]=haar_dwt(img[:,j])\n    #归一化处理\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img</code></pre>\n<p>此处代码，分行列分别进行运算，由一维变换过程:<br>$$<br>img_{roworcol}=T<br>\\begin{pmatrix}<br>x_1\\\\<br>x_2\\\\<br>\\vdots\\\\<br>x_n\\\\<br>\\end{pmatrix}<br>$$<br>对此进行拓展得到：<br>$$<br>img=T\\cdot<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1n}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nn}\\\\<br>\\end{pmatrix}<br>$$<br>进而代码如下：</p>\n<pre><code class=\"python\">#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img</code></pre>\n<p>紧接着对代码的这个部分进行思考：</p>\n<pre><code class=\"python\">    img=haar_dwt(img,haar_wavelet_matrix)\n    img=haar_dwt(img.T,haar_wavelet_matrix)\n    img=img.T</code></pre>\n<p>此部分的代码逻辑过程可描述为：<br>$$<br>img_{pic}=<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1n}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nn}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{row}=T \\cdot img_{pic}<br>$$<br>$$<br>img_{col}=T \\cdot (img_{row})^T<br>$$<br>$$<br>img_{pic}=(img_{col})^T<br>$$<br>即：<br>$$<br>img_{pic}= (T \\cdot (T \\cdot img_{pic})^T)^T=T\\cdot img_{pic} \\cdot T^T<br>$$<br>由此将代码进一步转化：</p>\n<pre><code class=\"python\">#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix,img),haar_wavelet_matrix.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix=Create_haar_matrix(col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img</code></pre>\n<h3 id=\"边界处理\"><a href=\"#边界处理\" class=\"headerlink\" title=\"边界处理\"></a>边界处理</h3><p>以上的处理基本解决了代码性能方面的不足，接着对代码的适用性进行考虑，此代码要求图片的分辨率必须为$2^x*2^x$，所以需要针对不是2的次方的图片进行扩展，思路：边界填充。</p>\n<blockquote>\n<p>边缘填充:</p>\n<ul>\n<li>复制法：复制最边缘的像素</li>\n<li>反射法：对称轴</li>\n<li>外包装法：</li>\n<li>常量法：用常量值填充四周</li>\n</ul>\n</blockquote>\n<p>本文选用其中的复制法，作为示例，在<code>python</code>中<code>OpenCV</code>提供了相关的方法<code>cv2.copyMakeBorder(src,top, bottom, left, right ,borderType,value)</code>。</p>\n<ul>\n<li>src : 需要填充的图像</li>\n<li>top : 图像上的填充边界长度</li>\n<li>bottom : 图像下面的填充边界长度</li>\n<li>left : 图像左边的填充边界长度</li>\n<li>right : 图像右边的填充边界长度</li>\n<li>borderType : 边界填充类型</li>\n<li>value : 填充边界的颜色，常用于常量法。</li>\n</ul>\n<p>本文针对图像的分辨率，对于宽和高不是2的倍数，则对应边界添加一行复制行，本文代码用于每压缩一次则填充边界一次（即每次只填充一行，将行或列增加至2的倍数），并不是将边界一次扩展到2的次方倍，所以<code>haar_dwt2D</code>代码如下：</p>\n<pre><code class=\"python\">def haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\n</code></pre>\n<p>由于图片的行列不在是2的次方倍数，且行列数不尽相同，根据上文提及的矩阵运算的过程，此时的运算过程:<br>$$<br>img_{pic}=<br>\\begin{pmatrix}<br>x_{11}&amp;x_{12}&amp;\\cdots&amp;x_{1m}\\\\<br>x_{21}&amp;\\ddots&amp;&amp;\\vdots\\\\<br>\\vdots&amp;&amp;\\ddots&amp;\\vdots\\\\<br>x_{n1}&amp;\\cdots&amp;\\cdots&amp;x_{nm}\\\\<br>\\end{pmatrix}<br>$$<br>$$<br>img_{row}=T_1 \\cdot img_{pic}<br>$$<br>$$<br>img_{col}=T_2 \\cdot (img_{row})^T<br>$$<br>$$<br>img_{pic}=(img_{col})^T<br>$$<br>即：<br>$$<br>img_{pic}= (T_2 \\cdot (T_1 \\cdot img_{pic})^T)^T=T_1\\cdot img_{pic} \\cdot T_2^T<br>$$<br>针对<code>Create_haar_matrix</code>和<code>haar_dwt</code>的代码要进行调整:</p>\n<pre><code class=\"python\">def Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency</code></pre>\n<h2 id=\"最终代码结果\"><a href=\"#最终代码结果\" class=\"headerlink\" title=\"最终代码结果\"></a>最终代码结果</h2><pre><code class=\"python\">import numpy as np\nimport cv2\nimport math\n# numpy数组归一化\ndef Normalize(img):\n    _range = np.max(img) - np.min(img)\n    return (img - np.min(img)) / _range\n#根据输入数组长度创建小波变换矩阵\ndef Create_haar_matrix(row_length,col_length):\n    half_row_length=row_length//2\n    half_col_length=col_length//2\n    haar_wavelet_matrix_row=np.zeros((row_length,row_length),dtype=float)\n    haar_wavelet_matrix_col=np.zeros((col_length,col_length),dtype=float)\n    for i in range(half_row_length):\n        haar_wavelet_matrix_row[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_row[half_row_length+i,i*2+1]=-1/math.sqrt(2)\n    for i in range(half_col_length):\n        haar_wavelet_matrix_col[i,i*2:i*2+1]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2]=1/math.sqrt(2)\n        haar_wavelet_matrix_col[half_col_length+i,i*2+1]=-1/math.sqrt(2)\n    return haar_wavelet_matrix_col,haar_wavelet_matrix_row\n\n#inputdata: row or column of image\n#outputdata: array handle with haar_wavelet\ndef haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col):\n    Low_High_frequency=np.dot(np.dot(haar_wavelet_matrix_col,img),haar_wavelet_matrix_row.T)\n    return Low_High_frequency\n\n#inputdata: array of image\n#outputdata: array of image handel with haar_wavelet\ndef haar_dwt2D(img):\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    if col_num%2!=0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,1,cv2.BORDER_REPLICATE)\n    elif col_num%2==0 and row_num%2!=0:\n        img=cv2.copyMakeBorder(img,0,1,0,0,cv2.BORDER_REPLICATE)\n    elif col_num%2!=0 and row_num%2==0:\n        img=cv2.copyMakeBorder(img,0,0,0,1,cv2.BORDER_REPLICATE)\n    col_num=img.shape[1]\n    row_num=img.shape[0]\n    #创建小波变换矩阵\n    haar_wavelet_matrix_row,haar_wavelet_matrix_col=Create_haar_matrix(row_num,col_num)\n    half_col_num=col_num//2\n    half_row_num=row_num//2\n    img=haar_dwt(img,haar_wavelet_matrix_row,haar_wavelet_matrix_col)\n\n    img[0:half_row_num,0:half_col_num]=Normalize(img[0:half_row_num,0:half_col_num])\n    img[half_row_num:row_num,0:half_col_num]=Normalize(img[half_row_num:row_num,0:half_col_num])\n    img[0:half_row_num,half_col_num:col_num]=Normalize(img[0:half_row_num,half_col_num:col_num])\n    img[half_row_num:row_num,half_col_num:col_num]=Normalize(img[half_row_num:row_num,half_col_num:col_num])\n    return img\nif __name__ == &#39;__main__&#39;:\n    img= cv2.imread(&quot;pic1.png&quot;,0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow(&#39;asd&#39;,img)\n    cv2.waitKey(0)</code></pre>\n<p>注意考虑到代码的适用性，本文的代码仅可以压缩一次。若需要连续压缩，需要将需要压缩的图片数据单独取出，重新输入，考虑到代码的适用性，以后再做更新。即以下的形式不正确：</p>\n<pre><code class=\"python\">if __name__ == &#39;__main__&#39;:\n    img= cv2.imread(&quot;pic.png&quot;,0).astype(np.float64)\n    img=haar_dwt2D(img)\n    cv2.imshow(&#39;asd&#39;,img)\n    cv2.waitKey(0)\n    #!!!!!!!本文代码在此处不能照抄之前的运行代码，本文已经删除以下代码。\n    for i in range(0,img.shape[0]//2+1,img.shape[0]//2):\n        for j in range(0,img.shape[1]//2+1,img.shape[1]//2):\n            img[i:i+img.shape[0]//2,j:j+img.shape[1]//2]=haar_dwt2D(img[i:i+img.shape[0]//2,j:j+img.shape[1]//2])\n    cv2.imshow(&#39;asd&#39;,img)\n    cv2.waitKey(0)  </code></pre>\n<h2 id=\"最后的思考\"><a href=\"#最后的思考\" class=\"headerlink\" title=\"最后的思考\"></a>最后的思考</h2><blockquote>\n<p> 本文采用haar wavelet对图像进行压缩，运算过程中将图像以行列作为区别，将二维图像转为一维矩阵运算，本质上应该还是属于一维的运算方法，但此方法感觉不应止于此。根据haar wavelet的计算原理，可否使用二维计算方法，即使用卷积计算。</p>\n<p>计算思路如下:</p>\n<p>压缩后的每一个图像像素点仅与压缩前的2x2矩阵中的信息相关，所以针对这一特性，我们只需要给出4个不同的卷积核，分别对应于$LL,LH,HL,HH,$这四个图像。本文针对Haar wavelet,给出以下四个卷积矩阵：<br>$$LL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;1\\\\<br>1&amp;1\\\\<br>\\end{pmatrix}<br>$$<br>$$HH= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;-1\\\\<br>-1&amp;1\\\\<br>\\end{pmatrix}<br>$$<br>$$HL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;-1\\\\<br>1&amp;-1\\\\<br>\\end{pmatrix}<br>$$<br>$$HL= {1\\over 2}<br>\\begin{pmatrix}<br>1&amp;1\\\\<br>-1&amp;-1\\\\<br>\\end{pmatrix}<br>$$<br>其中HL和LH的顺序可能不对，尚未验证。通过给出的四个卷积核，通过对图像进行卷积运算得出四个矩阵，即使haar wavelet的压缩结果。</p>\n</blockquote>\n"},{"title":"Hello World","date":"2020-10-21T04:33:49.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/other/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2020-10-21 12:33:49\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"other/hello-world","published":1,"updated":"2021-04-22T06:46:12.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknsx2fqd0005scuo5ibqh7bi","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"SegNet","date":"2021-04-22T06:45:35.000Z","author":"Fanrencli","_content":"\n## 深度学习之语义分割SegNet(2015)\n\n### what is SegNet?\n\nEmmmmm，从这篇文章开始应该会集中更新语义分割系列的算法模型，主要是科研的需求吧，应该会针对所有比较流行的语义分割的算法进行总结，以及讲解，针对各种算法的特点进行体现，而其中利用的主干特征提取的网络会在之前讲解过的特征提取网络中选择。总的来说，接下来一段时间会集中更新语义分割的相关系列算法，并对其中比较优秀的算法进行代码方面的实现。So，接下来就开始我们的第一次更新的内容吧——SegNet。\n\n想要了解`SegNet`，那我们首先要对语义分割这个概念进行了解。所谓的语义分割其实就是针对图像中的像素进行分类，判断每个像素所属的类别，这就是我们需要做的任务，其实从根本上来看，就是像素的多分类问题。\n\n![图1](http://39.106.34.39:4567/v2-c2bb4d18413382fccbc7455a1def8af6_1440w.jpg)\n\n语义分割在实际生活中的应用主要体现在医学影像和无人驾驶方面，在医学影像中主要用于对一些图像中的异常（如肿瘤）进行分割，辅助医生对病人的病情进行判断。在无人驾驶中，语义分割的作用就体现在对道路、车辆、行人、道路标识等一些物体的判断，如果语义分割能够对这些方面做得很好，那么对于社会的发展将是一个重要的推动力。\n\n而`SegNet`网络就是语义分割算法的一种，其网络结构符合语义分割算法的基本结构特征，主要包括编码和解码两个过程，根据最后的解码结果与真实值之间的比较训练模型参数。主要过程就是先通过特征提取进行降维，再进行上采样升维得到一个具有一定会长宽的特层。\n\n![SegNet网络结构](http://39.106.34.39:4567/20191108195650187.png)\n\n### 主干网络结构简介\n\n针对`SegNet`算法，其网络结构主要包括编码和解码两个部分。编码部分即特征提取部分，选择`ResNet50`作为特征提取的网络。在之前的文章中我们已经介绍过了`ResNet101`，相比于`ResNet101`的网络结构，`ResNet50`只在其中的`Identity`基础块的重复次数降低了，其余部分并没有过多的变化，其网络结构如下图：\n\n![ResNet50网络结构](http://39.106.34.39:4567/20191028224145980.png)\n\n`ResNet50`网络的主要流程：\n- 由于第一层7x7卷积，所以在卷积前加入`ZeroPadding2D`，然后如同图中所示，归一化接一层激活和池化\n- 第二层一次`Conv_block`、两次`identity_block`\n- 第三层一次`Conv_block`、三次`identity_block`\n- 第四层一次`Conv_block`、五次`identity_block`\n- 第五层一次`Conv_block`、两次`identity_block`\n\n代码如下：\n```python\ndef identity_block(input_tensor, kernel_size, filters, stage, block):\n\n    filters1, filters2, filters3 = filters\n\n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n    # 1x1压缩\n    x = Conv2D(filters1, (1, 1) , name=conv_name_base + '2a')(input_tensor)\n    x = BatchNormalization(name=bn_name_base + '2a')(x)\n    x = Activation('relu')(x)\n    # 3x3提取特征\n    x = Conv2D(filters2, kernel_size , data_format=IMAGE_ORDERING , padding='same', name=conv_name_base + '2b')(x)\n    x = BatchNormalization(name=bn_name_base + '2b')(x)\n    x = Activation('relu')(x)\n    # 1x1扩张特征\n    x = Conv2D(filters3 , (1, 1), name=conv_name_base + '2c')(x)\n    x = BatchNormalization(name=bn_name_base + '2c')(x)\n    # 残差网络\n    x = layers.add([x, input_tensor])\n    x = Activation('relu')(x)\n    return x\n\n# 与identity_block最大差距为，其可以减少wh，进行压缩\ndef conv_block(input_tensor, kernel_size, filters, stage, block, strides=(2, 2)):\n\n    filters1, filters2, filters3 = filters\n    \n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n    # 1x1压缩\n    x = Conv2D(filters1, (1, 1) , strides=strides, name=conv_name_base + '2a')(input_tensor)\n    x = BatchNormalization(name=bn_name_base + '2a')(x)\n    x = Activation('relu')(x)\n    # 3x3提取特征\n    x = Conv2D(filters2, kernel_size , padding='same', name=conv_name_base + '2b')(x)\n    x = BatchNormalization(name=bn_name_base + '2b')(x)\n    x = Activation('relu')(x)\n    # 1x1扩张特征\n    x = Conv2D(filters3, (1, 1) , name=conv_name_base + '2c')(x)\n    x = BatchNormalization(name=bn_name_base + '2c')(x)\n    # 1x1扩张特征\n    shortcut = Conv2D(filters3, (1, 1) , strides=strides, name=conv_name_base + '1')(input_tensor)\n    shortcut = BatchNormalization(name=bn_name_base + '1')(shortcut)\n    # add\n    x = layers.add([x, shortcut])\n    x = Activation('relu')(x)\n    return x\ndef get_resnet50_encoder(input_height=224 , input_width=224):\n\n    assert input_height%32 == 0\n    assert input_width%32 == 0\n\n    img_input = Input(shape=(input_height,input_width , 3 ))\n\n    x = ZeroPadding2D((3, 3))(img_input)\n    x = Conv2D(64, (7, 7), strides=(2, 2), name='conv1')(x)\n    # f1是hw方向压缩一次的结果\n    f1 = x\n    x = BatchNormalization(name='bn_conv1')(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D((3, 3) , strides=(2, 2))(x)\n    \n    \n    x = conv_block(x, 3, [64, 64, 256], stage=2, block='a', strides=(1, 1))\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block='b')\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block='c')\n    # f2是hw方向压缩两次的结果\n    f2 = x\n\n\n    x = conv_block(x, 3, [128, 128, 512], stage=3, block='a')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='b')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='c')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='d')\n    # f3是hw方向压缩三次的结果\n    f3 = x \n\n    x = conv_block(x, 3, [256, 256, 1024], stage=4, block='a')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='b')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='c')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='d')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='e')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='f')\n    # f4是hw方向压缩四次的结果\n    f4 = x \n\n    x = conv_block(x, 3, [512, 512, 2048], stage=5, block='a')\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block='b')\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block='c')\n    # f5是hw方向压缩五次的结果\n    f5 = x \n\n    x = AveragePooling2D((7, 7) , name='avg_pool')(x)\n    return img_input , [f1 , f2 , f3 , f4 , f5  ]\n```\n\n### 特征解码\n\n在特征解码部分，主要是针对前面编码部分提取出来的特征进行解码，然后为每个像素进行分类，获取loss值进行训练。其中解码部分主要就是对应于之前提取到的特征进行上采样，将特征纬度不断扩大。\n\n代码如下：\n```python\ndef segnet_decoder( f , n_classes, n_up=3 ):\n\n\tassert n_up >= 2\n\n\to = f\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D(512, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\t# 进行一次UpSampling2D，此时hw变为原来的1/8\n\to = UpSampling2D((2,2))(o)\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D( 256, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\t# 进行一次UpSampling2D，此时hw变为原来的1/4\n\tfor _ in range(n_up-2):\n\t\to = UpSampling2D((2,2))(o)\n\t\to = ZeroPadding2D((1,1))(o)\n\t\to = Conv2D( 128 , (3, 3), padding='valid')(o)\n\t\to = BatchNormalization()(o)\n\n\t# 进行一次UpSampling2D，此时hw变为原来的1/2\n\to = UpSampling2D((2,2) )(o)\n\to = ZeroPadding2D((1,1) )(o)\n\to = Conv2D( 64 , (3, 3), padding='valid' )(o)\n\to = BatchNormalization()(o)\n\n\t# 此时输出为h_input/2,w_input/2,nclasses\n\to = Conv2D(n_classes , (3, 3), padding='same')( o )\n\treturn o \ndef _segnet(n_classes , encoder, input_height=416, input_width=416 , encoder_level=3):\n\t# encoder通过主干网络\n\timg_input , levels = encoder( input_height=input_height ,  input_width=input_width )\n\t# 获取hw压缩四次后的结果\n\tfeat = levels[encoder_level]\n\t# 将特征传入segnet网络\n\to = segnet_decoder(feat, n_classes, n_up=3 )\n\t# 将结果进行reshape\n\to = Reshape((int(input_height/2)*int(input_width/2), -1))(o)\n\to = Softmax()(o)\n\tmodel = Model(img_input,o)\n\treturn model\n\ndef resnet50_segnet( n_classes ,  input_height=416, input_width=416 , encoder_level=3):\n\n\tmodel = _segnet( n_classes , get_resnet50_encoder ,  input_height=input_height, input_width=input_width , encoder_level=encoder_level)\n\treturn model\n```\n根据以上的代码，我们很容易看出，解码部分对应于编码的部分，通过不断的上采样将特征放大到原来图片的1/2的大小然后输出分类。\n至此，关于`SegNet`代码的所有内容就基本讲完了，下一张会讲解医学影像处理常用的语义分割网络`U-net`。\n\n##2021年4月23日再次更新\n\n在`SegNet`网络中，之前的代码在编码和解码的过程中没有考虑池化索引这个特点，直接通过池化和上采样层进行操作，没有添加池化索引。在实际的训练过程中，不添加池化索引这个特点有可能会导致loss值在训练过程中不太稳定，不过在运用过程中不会造成太大误差。不过在这里还是补上池化索引的功能，关于池化索引的相关特点可以百度一下。\n\n代码如下：\n```python\nfrom keras.engine import Layer\nimport keras.backend as K\n\nclass MaxPoolingWithArgmax2D(Layer):\n    def __init__(self, pool_size=(2, 2), strides=(2, 2), padding='same', **kwargs):\n        super(MaxPoolingWithArgmax2D, self).__init__(**kwargs)\n        self.padding = padding\n        self.pool_size = pool_size\n        self.strides = strides\n\n    def call(self, inputs, **kwargs):\n        padding = self.padding\n        pool_size = self.pool_size\n        strides = self.strides\n        if K.backend() == 'tensorflow':\n            ksize = [1, pool_size[0], pool_size[1], 1]\n            padding = padding.upper()\n            strides = [1, strides[0], strides[1], 1]\n            output, argmax = K.tf.nn.max_pool_with_argmax(inputs, ksize=ksize, strides=strides, padding=padding)\n        else:\n            errmsg = '{} backend is not supported for layer {}'.format(K.backend(), type(self).__name__)\n            raise NotImplementedError(errmsg)\n        argmax = K.cast(argmax, K.floatx())\n        return [output, argmax]\n\n    def compute_output_shape(self, input_shape):\n        ratio = (1, 2, 2, 1)\n        output_shape = [dim // ratio[idx] if dim is not None else None for idx, dim in enumerate(input_shape)]\n        output_shape = tuple(output_shape)\n        return [output_shape, output_shape]\n\n    def compute_mask(self, inputs, mask=None):\n        return 2 * [None]\n\n\nclass MaxUnpooling2D(Layer):\n    def __init__(self, up_size=(2, 2), **kwargs):\n        super(MaxUnpooling2D, self).__init__(**kwargs)\n        self.up_size = up_size\n\n    def call(self, inputs, output_shape=None):\n        updates, mask = inputs[0], inputs[1]\n        with K.tf.variable_scope(self.name):\n            mask = K.cast(mask, 'int32')\n            input_shape = K.tf.shape(updates, out_type='int32')\n            #  calculation new shape\n            if output_shape is None:\n                output_shape = (input_shape[0], input_shape[1] * self.up_size[0], input_shape[2] * self.up_size[1], input_shape[3])\n\n            # calculation indices for batch, height, width and feature maps\n            one_like_mask = K.ones_like(mask, dtype='int32')\n            batch_shape = K.concatenate([[input_shape[0]], [1], [1], [1]], axis=0)\n            batch_range = K.reshape(K.tf.range(output_shape[0], dtype='int32'), shape=batch_shape)\n            b = one_like_mask * batch_range\n            y = mask // (output_shape[2] * output_shape[3])\n            x = (mask // output_shape[3]) % output_shape[2]\n            feature_range = K.tf.range(output_shape[3], dtype='int32')\n            f = one_like_mask * feature_range\n\n            # transpose indices & reshape update values to one dimension\n            updates_size = K.tf.size(updates)\n            indices = K.transpose(K.reshape(K.stack([b, y, x, f]),[4, updates_size]))\n            values = K.reshape(updates, [updates_size])\n            ret = K.tf.scatter_nd(indices, values, output_shape)\n            return ret\n\n    def compute_output_shape(self, input_shape):\n        mask_shape = input_shape[1]\n        return (mask_shape[0], mask_shape[1] * self.up_size[0], mask_shape[2] * self.up_size[1], mask_shape[3])\n```\n在此处自定义了下采样代码和上采样的代码，在实际的运用中，需要将池化和上采样的代码替换为上文的代码。形如：\n\n```python\n    o = MaxPoolingWithArgmax2D()(input)\n    o2 = MaxUnpooling2D()(o)\n```\n\n其中`o`输出的是输出层和对应的`argmax`参数，对应的上采样层输入就是池化层的输出和索引参数。\n\n### loss函数\n\n在`SegNet`模型中，预测值是经过解码后的特征层的一维序列，对应的真实值就是图片ground truth的一维序列，在loss函数的设计中，本文采用了标准的交叉熵CE作为`SegNet`的loss函数。","source":"_posts/semantic_segmentation/segnet.md","raw":"---\ntitle: SegNet\ndate: 2021-04-22 14:45:35\ncategories:\n- Deep Learning\ntags:\n- semantic segmentation\n- SegNet\nauthor: Fanrencli\n---\n\n## 深度学习之语义分割SegNet(2015)\n\n### what is SegNet?\n\nEmmmmm，从这篇文章开始应该会集中更新语义分割系列的算法模型，主要是科研的需求吧，应该会针对所有比较流行的语义分割的算法进行总结，以及讲解，针对各种算法的特点进行体现，而其中利用的主干特征提取的网络会在之前讲解过的特征提取网络中选择。总的来说，接下来一段时间会集中更新语义分割的相关系列算法，并对其中比较优秀的算法进行代码方面的实现。So，接下来就开始我们的第一次更新的内容吧——SegNet。\n\n想要了解`SegNet`，那我们首先要对语义分割这个概念进行了解。所谓的语义分割其实就是针对图像中的像素进行分类，判断每个像素所属的类别，这就是我们需要做的任务，其实从根本上来看，就是像素的多分类问题。\n\n![图1](http://39.106.34.39:4567/v2-c2bb4d18413382fccbc7455a1def8af6_1440w.jpg)\n\n语义分割在实际生活中的应用主要体现在医学影像和无人驾驶方面，在医学影像中主要用于对一些图像中的异常（如肿瘤）进行分割，辅助医生对病人的病情进行判断。在无人驾驶中，语义分割的作用就体现在对道路、车辆、行人、道路标识等一些物体的判断，如果语义分割能够对这些方面做得很好，那么对于社会的发展将是一个重要的推动力。\n\n而`SegNet`网络就是语义分割算法的一种，其网络结构符合语义分割算法的基本结构特征，主要包括编码和解码两个过程，根据最后的解码结果与真实值之间的比较训练模型参数。主要过程就是先通过特征提取进行降维，再进行上采样升维得到一个具有一定会长宽的特层。\n\n![SegNet网络结构](http://39.106.34.39:4567/20191108195650187.png)\n\n### 主干网络结构简介\n\n针对`SegNet`算法，其网络结构主要包括编码和解码两个部分。编码部分即特征提取部分，选择`ResNet50`作为特征提取的网络。在之前的文章中我们已经介绍过了`ResNet101`，相比于`ResNet101`的网络结构，`ResNet50`只在其中的`Identity`基础块的重复次数降低了，其余部分并没有过多的变化，其网络结构如下图：\n\n![ResNet50网络结构](http://39.106.34.39:4567/20191028224145980.png)\n\n`ResNet50`网络的主要流程：\n- 由于第一层7x7卷积，所以在卷积前加入`ZeroPadding2D`，然后如同图中所示，归一化接一层激活和池化\n- 第二层一次`Conv_block`、两次`identity_block`\n- 第三层一次`Conv_block`、三次`identity_block`\n- 第四层一次`Conv_block`、五次`identity_block`\n- 第五层一次`Conv_block`、两次`identity_block`\n\n代码如下：\n```python\ndef identity_block(input_tensor, kernel_size, filters, stage, block):\n\n    filters1, filters2, filters3 = filters\n\n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n    # 1x1压缩\n    x = Conv2D(filters1, (1, 1) , name=conv_name_base + '2a')(input_tensor)\n    x = BatchNormalization(name=bn_name_base + '2a')(x)\n    x = Activation('relu')(x)\n    # 3x3提取特征\n    x = Conv2D(filters2, kernel_size , data_format=IMAGE_ORDERING , padding='same', name=conv_name_base + '2b')(x)\n    x = BatchNormalization(name=bn_name_base + '2b')(x)\n    x = Activation('relu')(x)\n    # 1x1扩张特征\n    x = Conv2D(filters3 , (1, 1), name=conv_name_base + '2c')(x)\n    x = BatchNormalization(name=bn_name_base + '2c')(x)\n    # 残差网络\n    x = layers.add([x, input_tensor])\n    x = Activation('relu')(x)\n    return x\n\n# 与identity_block最大差距为，其可以减少wh，进行压缩\ndef conv_block(input_tensor, kernel_size, filters, stage, block, strides=(2, 2)):\n\n    filters1, filters2, filters3 = filters\n    \n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n    # 1x1压缩\n    x = Conv2D(filters1, (1, 1) , strides=strides, name=conv_name_base + '2a')(input_tensor)\n    x = BatchNormalization(name=bn_name_base + '2a')(x)\n    x = Activation('relu')(x)\n    # 3x3提取特征\n    x = Conv2D(filters2, kernel_size , padding='same', name=conv_name_base + '2b')(x)\n    x = BatchNormalization(name=bn_name_base + '2b')(x)\n    x = Activation('relu')(x)\n    # 1x1扩张特征\n    x = Conv2D(filters3, (1, 1) , name=conv_name_base + '2c')(x)\n    x = BatchNormalization(name=bn_name_base + '2c')(x)\n    # 1x1扩张特征\n    shortcut = Conv2D(filters3, (1, 1) , strides=strides, name=conv_name_base + '1')(input_tensor)\n    shortcut = BatchNormalization(name=bn_name_base + '1')(shortcut)\n    # add\n    x = layers.add([x, shortcut])\n    x = Activation('relu')(x)\n    return x\ndef get_resnet50_encoder(input_height=224 , input_width=224):\n\n    assert input_height%32 == 0\n    assert input_width%32 == 0\n\n    img_input = Input(shape=(input_height,input_width , 3 ))\n\n    x = ZeroPadding2D((3, 3))(img_input)\n    x = Conv2D(64, (7, 7), strides=(2, 2), name='conv1')(x)\n    # f1是hw方向压缩一次的结果\n    f1 = x\n    x = BatchNormalization(name='bn_conv1')(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D((3, 3) , strides=(2, 2))(x)\n    \n    \n    x = conv_block(x, 3, [64, 64, 256], stage=2, block='a', strides=(1, 1))\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block='b')\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block='c')\n    # f2是hw方向压缩两次的结果\n    f2 = x\n\n\n    x = conv_block(x, 3, [128, 128, 512], stage=3, block='a')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='b')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='c')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='d')\n    # f3是hw方向压缩三次的结果\n    f3 = x \n\n    x = conv_block(x, 3, [256, 256, 1024], stage=4, block='a')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='b')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='c')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='d')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='e')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='f')\n    # f4是hw方向压缩四次的结果\n    f4 = x \n\n    x = conv_block(x, 3, [512, 512, 2048], stage=5, block='a')\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block='b')\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block='c')\n    # f5是hw方向压缩五次的结果\n    f5 = x \n\n    x = AveragePooling2D((7, 7) , name='avg_pool')(x)\n    return img_input , [f1 , f2 , f3 , f4 , f5  ]\n```\n\n### 特征解码\n\n在特征解码部分，主要是针对前面编码部分提取出来的特征进行解码，然后为每个像素进行分类，获取loss值进行训练。其中解码部分主要就是对应于之前提取到的特征进行上采样，将特征纬度不断扩大。\n\n代码如下：\n```python\ndef segnet_decoder( f , n_classes, n_up=3 ):\n\n\tassert n_up >= 2\n\n\to = f\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D(512, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\t# 进行一次UpSampling2D，此时hw变为原来的1/8\n\to = UpSampling2D((2,2))(o)\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D( 256, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\t# 进行一次UpSampling2D，此时hw变为原来的1/4\n\tfor _ in range(n_up-2):\n\t\to = UpSampling2D((2,2))(o)\n\t\to = ZeroPadding2D((1,1))(o)\n\t\to = Conv2D( 128 , (3, 3), padding='valid')(o)\n\t\to = BatchNormalization()(o)\n\n\t# 进行一次UpSampling2D，此时hw变为原来的1/2\n\to = UpSampling2D((2,2) )(o)\n\to = ZeroPadding2D((1,1) )(o)\n\to = Conv2D( 64 , (3, 3), padding='valid' )(o)\n\to = BatchNormalization()(o)\n\n\t# 此时输出为h_input/2,w_input/2,nclasses\n\to = Conv2D(n_classes , (3, 3), padding='same')( o )\n\treturn o \ndef _segnet(n_classes , encoder, input_height=416, input_width=416 , encoder_level=3):\n\t# encoder通过主干网络\n\timg_input , levels = encoder( input_height=input_height ,  input_width=input_width )\n\t# 获取hw压缩四次后的结果\n\tfeat = levels[encoder_level]\n\t# 将特征传入segnet网络\n\to = segnet_decoder(feat, n_classes, n_up=3 )\n\t# 将结果进行reshape\n\to = Reshape((int(input_height/2)*int(input_width/2), -1))(o)\n\to = Softmax()(o)\n\tmodel = Model(img_input,o)\n\treturn model\n\ndef resnet50_segnet( n_classes ,  input_height=416, input_width=416 , encoder_level=3):\n\n\tmodel = _segnet( n_classes , get_resnet50_encoder ,  input_height=input_height, input_width=input_width , encoder_level=encoder_level)\n\treturn model\n```\n根据以上的代码，我们很容易看出，解码部分对应于编码的部分，通过不断的上采样将特征放大到原来图片的1/2的大小然后输出分类。\n至此，关于`SegNet`代码的所有内容就基本讲完了，下一张会讲解医学影像处理常用的语义分割网络`U-net`。\n\n##2021年4月23日再次更新\n\n在`SegNet`网络中，之前的代码在编码和解码的过程中没有考虑池化索引这个特点，直接通过池化和上采样层进行操作，没有添加池化索引。在实际的训练过程中，不添加池化索引这个特点有可能会导致loss值在训练过程中不太稳定，不过在运用过程中不会造成太大误差。不过在这里还是补上池化索引的功能，关于池化索引的相关特点可以百度一下。\n\n代码如下：\n```python\nfrom keras.engine import Layer\nimport keras.backend as K\n\nclass MaxPoolingWithArgmax2D(Layer):\n    def __init__(self, pool_size=(2, 2), strides=(2, 2), padding='same', **kwargs):\n        super(MaxPoolingWithArgmax2D, self).__init__(**kwargs)\n        self.padding = padding\n        self.pool_size = pool_size\n        self.strides = strides\n\n    def call(self, inputs, **kwargs):\n        padding = self.padding\n        pool_size = self.pool_size\n        strides = self.strides\n        if K.backend() == 'tensorflow':\n            ksize = [1, pool_size[0], pool_size[1], 1]\n            padding = padding.upper()\n            strides = [1, strides[0], strides[1], 1]\n            output, argmax = K.tf.nn.max_pool_with_argmax(inputs, ksize=ksize, strides=strides, padding=padding)\n        else:\n            errmsg = '{} backend is not supported for layer {}'.format(K.backend(), type(self).__name__)\n            raise NotImplementedError(errmsg)\n        argmax = K.cast(argmax, K.floatx())\n        return [output, argmax]\n\n    def compute_output_shape(self, input_shape):\n        ratio = (1, 2, 2, 1)\n        output_shape = [dim // ratio[idx] if dim is not None else None for idx, dim in enumerate(input_shape)]\n        output_shape = tuple(output_shape)\n        return [output_shape, output_shape]\n\n    def compute_mask(self, inputs, mask=None):\n        return 2 * [None]\n\n\nclass MaxUnpooling2D(Layer):\n    def __init__(self, up_size=(2, 2), **kwargs):\n        super(MaxUnpooling2D, self).__init__(**kwargs)\n        self.up_size = up_size\n\n    def call(self, inputs, output_shape=None):\n        updates, mask = inputs[0], inputs[1]\n        with K.tf.variable_scope(self.name):\n            mask = K.cast(mask, 'int32')\n            input_shape = K.tf.shape(updates, out_type='int32')\n            #  calculation new shape\n            if output_shape is None:\n                output_shape = (input_shape[0], input_shape[1] * self.up_size[0], input_shape[2] * self.up_size[1], input_shape[3])\n\n            # calculation indices for batch, height, width and feature maps\n            one_like_mask = K.ones_like(mask, dtype='int32')\n            batch_shape = K.concatenate([[input_shape[0]], [1], [1], [1]], axis=0)\n            batch_range = K.reshape(K.tf.range(output_shape[0], dtype='int32'), shape=batch_shape)\n            b = one_like_mask * batch_range\n            y = mask // (output_shape[2] * output_shape[3])\n            x = (mask // output_shape[3]) % output_shape[2]\n            feature_range = K.tf.range(output_shape[3], dtype='int32')\n            f = one_like_mask * feature_range\n\n            # transpose indices & reshape update values to one dimension\n            updates_size = K.tf.size(updates)\n            indices = K.transpose(K.reshape(K.stack([b, y, x, f]),[4, updates_size]))\n            values = K.reshape(updates, [updates_size])\n            ret = K.tf.scatter_nd(indices, values, output_shape)\n            return ret\n\n    def compute_output_shape(self, input_shape):\n        mask_shape = input_shape[1]\n        return (mask_shape[0], mask_shape[1] * self.up_size[0], mask_shape[2] * self.up_size[1], mask_shape[3])\n```\n在此处自定义了下采样代码和上采样的代码，在实际的运用中，需要将池化和上采样的代码替换为上文的代码。形如：\n\n```python\n    o = MaxPoolingWithArgmax2D()(input)\n    o2 = MaxUnpooling2D()(o)\n```\n\n其中`o`输出的是输出层和对应的`argmax`参数，对应的上采样层输入就是池化层的输出和索引参数。\n\n### loss函数\n\n在`SegNet`模型中，预测值是经过解码后的特征层的一维序列，对应的真实值就是图片ground truth的一维序列，在loss函数的设计中，本文采用了标准的交叉熵CE作为`SegNet`的loss函数。","slug":"semantic_segmentation/segnet","published":1,"updated":"2021-07-13T08:16:05.792Z","_id":"cknsx2fqf0008scuobzau6k2l","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习之语义分割SegNet-2015\"><a href=\"#深度学习之语义分割SegNet-2015\" class=\"headerlink\" title=\"深度学习之语义分割SegNet(2015)\"></a>深度学习之语义分割SegNet(2015)</h2><h3 id=\"what-is-SegNet\"><a href=\"#what-is-SegNet\" class=\"headerlink\" title=\"what is SegNet?\"></a>what is SegNet?</h3><p>Emmmmm，从这篇文章开始应该会集中更新语义分割系列的算法模型，主要是科研的需求吧，应该会针对所有比较流行的语义分割的算法进行总结，以及讲解，针对各种算法的特点进行体现，而其中利用的主干特征提取的网络会在之前讲解过的特征提取网络中选择。总的来说，接下来一段时间会集中更新语义分割的相关系列算法，并对其中比较优秀的算法进行代码方面的实现。So，接下来就开始我们的第一次更新的内容吧——SegNet。</p>\n<p>想要了解<code>SegNet</code>，那我们首先要对语义分割这个概念进行了解。所谓的语义分割其实就是针对图像中的像素进行分类，判断每个像素所属的类别，这就是我们需要做的任务，其实从根本上来看，就是像素的多分类问题。</p>\n<p><img src=\"http://39.106.34.39:4567/v2-c2bb4d18413382fccbc7455a1def8af6_1440w.jpg\" alt=\"图1\"></p>\n<p>语义分割在实际生活中的应用主要体现在医学影像和无人驾驶方面，在医学影像中主要用于对一些图像中的异常（如肿瘤）进行分割，辅助医生对病人的病情进行判断。在无人驾驶中，语义分割的作用就体现在对道路、车辆、行人、道路标识等一些物体的判断，如果语义分割能够对这些方面做得很好，那么对于社会的发展将是一个重要的推动力。</p>\n<p>而<code>SegNet</code>网络就是语义分割算法的一种，其网络结构符合语义分割算法的基本结构特征，主要包括编码和解码两个过程，根据最后的解码结果与真实值之间的比较训练模型参数。主要过程就是先通过特征提取进行降维，再进行上采样升维得到一个具有一定会长宽的特层。</p>\n<p><img src=\"http://39.106.34.39:4567/20191108195650187.png\" alt=\"SegNet网络结构\"></p>\n<h3 id=\"主干网络结构简介\"><a href=\"#主干网络结构简介\" class=\"headerlink\" title=\"主干网络结构简介\"></a>主干网络结构简介</h3><p>针对<code>SegNet</code>算法，其网络结构主要包括编码和解码两个部分。编码部分即特征提取部分，选择<code>ResNet50</code>作为特征提取的网络。在之前的文章中我们已经介绍过了<code>ResNet101</code>，相比于<code>ResNet101</code>的网络结构，<code>ResNet50</code>只在其中的<code>Identity</code>基础块的重复次数降低了，其余部分并没有过多的变化，其网络结构如下图：</p>\n<p><img src=\"http://39.106.34.39:4567/20191028224145980.png\" alt=\"ResNet50网络结构\"></p>\n<p><code>ResNet50</code>网络的主要流程：</p>\n<ul>\n<li>由于第一层7x7卷积，所以在卷积前加入<code>ZeroPadding2D</code>，然后如同图中所示，归一化接一层激活和池化</li>\n<li>第二层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n<li>第三层一次<code>Conv_block</code>、三次<code>identity_block</code></li>\n<li>第四层一次<code>Conv_block</code>、五次<code>identity_block</code></li>\n<li>第五层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n</ul>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">identity_block</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">,</span> kernel_size<span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">,</span> block<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    filters1<span class=\"token punctuation\">,</span> filters2<span class=\"token punctuation\">,</span> filters3 <span class=\"token operator\">=</span> filters\n\n    conv_name_base <span class=\"token operator\">=</span> <span class=\"token string\">'res'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block <span class=\"token operator\">+</span> <span class=\"token string\">'_branch'</span>\n    bn_name_base <span class=\"token operator\">=</span> <span class=\"token string\">'bn'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block <span class=\"token operator\">+</span> <span class=\"token string\">'_branch'</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 1x1压缩</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 3x3提取特征</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters2<span class=\"token punctuation\">,</span> kernel_size <span class=\"token punctuation\">,</span> data_format<span class=\"token operator\">=</span>IMAGE_ORDERING <span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 1x1扩张特征</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters3 <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 残差网络</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> input_tensor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x\n\n<span class=\"token comment\" spellcheck=\"true\"># 与identity_block最大差距为，其可以减少wh，进行压缩</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">conv_block</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">,</span> kernel_size<span class=\"token punctuation\">,</span> filters<span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">,</span> block<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    filters1<span class=\"token punctuation\">,</span> filters2<span class=\"token punctuation\">,</span> filters3 <span class=\"token operator\">=</span> filters\n\n    conv_name_base <span class=\"token operator\">=</span> <span class=\"token string\">'res'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block <span class=\"token operator\">+</span> <span class=\"token string\">'_branch'</span>\n    bn_name_base <span class=\"token operator\">=</span> <span class=\"token string\">'bn'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> block <span class=\"token operator\">+</span> <span class=\"token string\">'_branch'</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 1x1压缩</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 3x3提取特征</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters2<span class=\"token punctuation\">,</span> kernel_size <span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 1x1扩张特征</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 1x1扩张特征</span>\n    shortcut <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>filters3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>conv_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input_tensor<span class=\"token punctuation\">)</span>\n    shortcut <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>bn_name_base <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>shortcut<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># add</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> shortcut<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_resnet50_encoder</span><span class=\"token punctuation\">(</span>input_height<span class=\"token operator\">=</span><span class=\"token number\">224</span> <span class=\"token punctuation\">,</span> input_width<span class=\"token operator\">=</span><span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">assert</span> input_height<span class=\"token operator\">%</span><span class=\"token number\">32</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">assert</span> input_width<span class=\"token operator\">%</span><span class=\"token number\">32</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n\n    img_input <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>input_height<span class=\"token punctuation\">,</span>input_width <span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>img_input<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'conv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># f1是hw方向压缩一次的结果</span>\n    f1 <span class=\"token operator\">=</span> x\n    x <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'bn_conv1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Activation<span class=\"token punctuation\">(</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> MaxPooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># f2是hw方向压缩两次的结果</span>\n    f2 <span class=\"token operator\">=</span> x\n\n\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># f3是hw方向压缩三次的结果</span>\n    f3 <span class=\"token operator\">=</span> x \n\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># f4是hw方向压缩四次的结果</span>\n    f4 <span class=\"token operator\">=</span> x \n\n    x <span class=\"token operator\">=</span> conv_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> identity_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">=</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># f5是hw方向压缩五次的结果</span>\n    f5 <span class=\"token operator\">=</span> x \n\n    x <span class=\"token operator\">=</span> AveragePooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'avg_pool'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> img_input <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>f1 <span class=\"token punctuation\">,</span> f2 <span class=\"token punctuation\">,</span> f3 <span class=\"token punctuation\">,</span> f4 <span class=\"token punctuation\">,</span> f5  <span class=\"token punctuation\">]</span></code></pre>\n<h3 id=\"特征解码\"><a href=\"#特征解码\" class=\"headerlink\" title=\"特征解码\"></a>特征解码</h3><p>在特征解码部分，主要是针对前面编码部分提取出来的特征进行解码，然后为每个像素进行分类，获取loss值进行训练。其中解码部分主要就是对应于之前提取到的特征进行上采样，将特征纬度不断扩大。</p>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">segnet_decoder</span><span class=\"token punctuation\">(</span> f <span class=\"token punctuation\">,</span> n_classes<span class=\"token punctuation\">,</span> n_up<span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">assert</span> n_up <span class=\"token operator\">>=</span> <span class=\"token number\">2</span>\n\n    o <span class=\"token operator\">=</span> f\n    o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 进行一次UpSampling2D，此时hw变为原来的1/8</span>\n    o <span class=\"token operator\">=</span> UpSampling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 进行一次UpSampling2D，此时hw变为原来的1/4</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n_up<span class=\"token number\">-2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        o <span class=\"token operator\">=</span> UpSampling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n        o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n        o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span> <span class=\"token number\">128</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n        o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 进行一次UpSampling2D，此时hw变为原来的1/2</span>\n    o <span class=\"token operator\">=</span> UpSampling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span> <span class=\"token number\">64</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 此时输出为h_input/2,w_input/2,nclasses</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span>n_classes <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> o <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> o \n<span class=\"token keyword\">def</span> <span class=\"token function\">_segnet</span><span class=\"token punctuation\">(</span>n_classes <span class=\"token punctuation\">,</span> encoder<span class=\"token punctuation\">,</span> input_height<span class=\"token operator\">=</span><span class=\"token number\">416</span><span class=\"token punctuation\">,</span> input_width<span class=\"token operator\">=</span><span class=\"token number\">416</span> <span class=\"token punctuation\">,</span> encoder_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># encoder通过主干网络</span>\n    img_input <span class=\"token punctuation\">,</span> levels <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">(</span> input_height<span class=\"token operator\">=</span>input_height <span class=\"token punctuation\">,</span>  input_width<span class=\"token operator\">=</span>input_width <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 获取hw压缩四次后的结果</span>\n    feat <span class=\"token operator\">=</span> levels<span class=\"token punctuation\">[</span>encoder_level<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 将特征传入segnet网络</span>\n    o <span class=\"token operator\">=</span> segnet_decoder<span class=\"token punctuation\">(</span>feat<span class=\"token punctuation\">,</span> n_classes<span class=\"token punctuation\">,</span> n_up<span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 将结果进行reshape</span>\n    o <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>input_height<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>int<span class=\"token punctuation\">(</span>input_width<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> Softmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>img_input<span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">resnet50_segnet</span><span class=\"token punctuation\">(</span> n_classes <span class=\"token punctuation\">,</span>  input_height<span class=\"token operator\">=</span><span class=\"token number\">416</span><span class=\"token punctuation\">,</span> input_width<span class=\"token operator\">=</span><span class=\"token number\">416</span> <span class=\"token punctuation\">,</span> encoder_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    model <span class=\"token operator\">=</span> _segnet<span class=\"token punctuation\">(</span> n_classes <span class=\"token punctuation\">,</span> get_resnet50_encoder <span class=\"token punctuation\">,</span>  input_height<span class=\"token operator\">=</span>input_height<span class=\"token punctuation\">,</span> input_width<span class=\"token operator\">=</span>input_width <span class=\"token punctuation\">,</span> encoder_level<span class=\"token operator\">=</span>encoder_level<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model</code></pre>\n<p>根据以上的代码，我们很容易看出，解码部分对应于编码的部分，通过不断的上采样将特征放大到原来图片的1/2的大小然后输出分类。<br>至此，关于<code>SegNet</code>代码的所有内容就基本讲完了，下一张会讲解医学影像处理常用的语义分割网络<code>U-net</code>。</p>\n<p>##2021年4月23日再次更新</p>\n<p>在<code>SegNet</code>网络中，之前的代码在编码和解码的过程中没有考虑池化索引这个特点，直接通过池化和上采样层进行操作，没有添加池化索引。在实际的训练过程中，不添加池化索引这个特点有可能会导致loss值在训练过程中不太稳定，不过在运用过程中不会造成太大误差。不过在这里还是补上池化索引的功能，关于池化索引的相关特点可以百度一下。</p>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>engine <span class=\"token keyword\">import</span> Layer\n<span class=\"token keyword\">import</span> keras<span class=\"token punctuation\">.</span>backend <span class=\"token keyword\">as</span> K\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MaxPoolingWithArgmax2D</span><span class=\"token punctuation\">(</span>Layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>MaxPoolingWithArgmax2D<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>padding <span class=\"token operator\">=</span> padding\n        self<span class=\"token punctuation\">.</span>pool_size <span class=\"token operator\">=</span> pool_size\n        self<span class=\"token punctuation\">.</span>strides <span class=\"token operator\">=</span> strides\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        padding <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>padding\n        pool_size <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pool_size\n        strides <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>strides\n        <span class=\"token keyword\">if</span> K<span class=\"token punctuation\">.</span>backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'tensorflow'</span><span class=\"token punctuation\">:</span>\n            ksize <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pool_size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pool_size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            padding <span class=\"token operator\">=</span> padding<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            strides <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> strides<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> strides<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            output<span class=\"token punctuation\">,</span> argmax <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>tf<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>max_pool_with_argmax<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> ksize<span class=\"token operator\">=</span>ksize<span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span>padding<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            errmsg <span class=\"token operator\">=</span> <span class=\"token string\">'{} backend is not supported for layer {}'</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">.</span>backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">raise</span> NotImplementedError<span class=\"token punctuation\">(</span>errmsg<span class=\"token punctuation\">)</span>\n        argmax <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>argmax<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">.</span>floatx<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>output<span class=\"token punctuation\">,</span> argmax<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">compute_output_shape</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        ratio <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dim <span class=\"token operator\">//</span> ratio<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> dim <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> None <span class=\"token keyword\">else</span> None <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> dim <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        output_shape <span class=\"token operator\">=</span> tuple<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>output_shape<span class=\"token punctuation\">,</span> output_shape<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">compute_mask</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> mask<span class=\"token operator\">=</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span>None<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MaxUnpooling2D</span><span class=\"token punctuation\">(</span>Layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> up_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>MaxUnpooling2D<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>up_size <span class=\"token operator\">=</span> up_size\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> output_shape<span class=\"token operator\">=</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        updates<span class=\"token punctuation\">,</span> mask <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">with</span> K<span class=\"token punctuation\">.</span>tf<span class=\"token punctuation\">.</span>variable_scope<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            mask <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>mask<span class=\"token punctuation\">,</span> <span class=\"token string\">'int32'</span><span class=\"token punctuation\">)</span>\n            input_shape <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>tf<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span>updates<span class=\"token punctuation\">,</span> out_type<span class=\"token operator\">=</span><span class=\"token string\">'int32'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\">#  calculation new shape</span>\n            <span class=\"token keyword\">if</span> output_shape <span class=\"token keyword\">is</span> None<span class=\"token punctuation\">:</span>\n                output_shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>up_size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>up_size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\" spellcheck=\"true\"># calculation indices for batch, height, width and feature maps</span>\n            one_like_mask <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>ones_like<span class=\"token punctuation\">(</span>mask<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token string\">'int32'</span><span class=\"token punctuation\">)</span>\n            batch_shape <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            batch_range <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">.</span>tf<span class=\"token punctuation\">.</span>range<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token string\">'int32'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> shape<span class=\"token operator\">=</span>batch_shape<span class=\"token punctuation\">)</span>\n            b <span class=\"token operator\">=</span> one_like_mask <span class=\"token operator\">*</span> batch_range\n            y <span class=\"token operator\">=</span> mask <span class=\"token operator\">//</span> <span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> output_shape<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mask <span class=\"token operator\">//</span> output_shape<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> output_shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n            feature_range <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>tf<span class=\"token punctuation\">.</span>range<span class=\"token punctuation\">(</span>output_shape<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token string\">'int32'</span><span class=\"token punctuation\">)</span>\n            f <span class=\"token operator\">=</span> one_like_mask <span class=\"token operator\">*</span> feature_range\n\n            <span class=\"token comment\" spellcheck=\"true\"># transpose indices &amp; reshape update values to one dimension</span>\n            updates_size <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>tf<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span>updates<span class=\"token punctuation\">)</span>\n            indices <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> updates_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            values <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>updates<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>updates_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            ret <span class=\"token operator\">=</span> K<span class=\"token punctuation\">.</span>tf<span class=\"token punctuation\">.</span>scatter_nd<span class=\"token punctuation\">(</span>indices<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> output_shape<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> ret\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">compute_output_shape</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        mask_shape <span class=\"token operator\">=</span> input_shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mask_shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mask_shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>up_size<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mask_shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>up_size<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mask_shape<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>在此处自定义了下采样代码和上采样的代码，在实际的运用中，需要将池化和上采样的代码替换为上文的代码。形如：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    o <span class=\"token operator\">=</span> MaxPoolingWithArgmax2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n    o2 <span class=\"token operator\">=</span> MaxUnpooling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span></code></pre>\n<p>其中<code>o</code>输出的是输出层和对应的<code>argmax</code>参数，对应的上采样层输入就是池化层的输出和索引参数。</p>\n<h3 id=\"loss函数\"><a href=\"#loss函数\" class=\"headerlink\" title=\"loss函数\"></a>loss函数</h3><p>在<code>SegNet</code>模型中，预测值是经过解码后的特征层的一维序列，对应的真实值就是图片ground truth的一维序列，在loss函数的设计中，本文采用了标准的交叉熵CE作为<code>SegNet</code>的loss函数。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习之语义分割SegNet-2015\"><a href=\"#深度学习之语义分割SegNet-2015\" class=\"headerlink\" title=\"深度学习之语义分割SegNet(2015)\"></a>深度学习之语义分割SegNet(2015)</h2><h3 id=\"what-is-SegNet\"><a href=\"#what-is-SegNet\" class=\"headerlink\" title=\"what is SegNet?\"></a>what is SegNet?</h3><p>Emmmmm，从这篇文章开始应该会集中更新语义分割系列的算法模型，主要是科研的需求吧，应该会针对所有比较流行的语义分割的算法进行总结，以及讲解，针对各种算法的特点进行体现，而其中利用的主干特征提取的网络会在之前讲解过的特征提取网络中选择。总的来说，接下来一段时间会集中更新语义分割的相关系列算法，并对其中比较优秀的算法进行代码方面的实现。So，接下来就开始我们的第一次更新的内容吧——SegNet。</p>\n<p>想要了解<code>SegNet</code>，那我们首先要对语义分割这个概念进行了解。所谓的语义分割其实就是针对图像中的像素进行分类，判断每个像素所属的类别，这就是我们需要做的任务，其实从根本上来看，就是像素的多分类问题。</p>\n<p><img src=\"http://39.106.34.39:4567/v2-c2bb4d18413382fccbc7455a1def8af6_1440w.jpg\" alt=\"图1\"></p>\n<p>语义分割在实际生活中的应用主要体现在医学影像和无人驾驶方面，在医学影像中主要用于对一些图像中的异常（如肿瘤）进行分割，辅助医生对病人的病情进行判断。在无人驾驶中，语义分割的作用就体现在对道路、车辆、行人、道路标识等一些物体的判断，如果语义分割能够对这些方面做得很好，那么对于社会的发展将是一个重要的推动力。</p>\n<p>而<code>SegNet</code>网络就是语义分割算法的一种，其网络结构符合语义分割算法的基本结构特征，主要包括编码和解码两个过程，根据最后的解码结果与真实值之间的比较训练模型参数。主要过程就是先通过特征提取进行降维，再进行上采样升维得到一个具有一定会长宽的特层。</p>\n<p><img src=\"http://39.106.34.39:4567/20191108195650187.png\" alt=\"SegNet网络结构\"></p>\n<h3 id=\"主干网络结构简介\"><a href=\"#主干网络结构简介\" class=\"headerlink\" title=\"主干网络结构简介\"></a>主干网络结构简介</h3><p>针对<code>SegNet</code>算法，其网络结构主要包括编码和解码两个部分。编码部分即特征提取部分，选择<code>ResNet50</code>作为特征提取的网络。在之前的文章中我们已经介绍过了<code>ResNet101</code>，相比于<code>ResNet101</code>的网络结构，<code>ResNet50</code>只在其中的<code>Identity</code>基础块的重复次数降低了，其余部分并没有过多的变化，其网络结构如下图：</p>\n<p><img src=\"http://39.106.34.39:4567/20191028224145980.png\" alt=\"ResNet50网络结构\"></p>\n<p><code>ResNet50</code>网络的主要流程：</p>\n<ul>\n<li>由于第一层7x7卷积，所以在卷积前加入<code>ZeroPadding2D</code>，然后如同图中所示，归一化接一层激活和池化</li>\n<li>第二层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n<li>第三层一次<code>Conv_block</code>、三次<code>identity_block</code></li>\n<li>第四层一次<code>Conv_block</code>、五次<code>identity_block</code></li>\n<li>第五层一次<code>Conv_block</code>、两次<code>identity_block</code></li>\n</ul>\n<p>代码如下：</p>\n<pre><code class=\"python\">def identity_block(input_tensor, kernel_size, filters, stage, block):\n\n    filters1, filters2, filters3 = filters\n\n    conv_name_base = &#39;res&#39; + str(stage) + block + &#39;_branch&#39;\n    bn_name_base = &#39;bn&#39; + str(stage) + block + &#39;_branch&#39;\n    # 1x1压缩\n    x = Conv2D(filters1, (1, 1) , name=conv_name_base + &#39;2a&#39;)(input_tensor)\n    x = BatchNormalization(name=bn_name_base + &#39;2a&#39;)(x)\n    x = Activation(&#39;relu&#39;)(x)\n    # 3x3提取特征\n    x = Conv2D(filters2, kernel_size , data_format=IMAGE_ORDERING , padding=&#39;same&#39;, name=conv_name_base + &#39;2b&#39;)(x)\n    x = BatchNormalization(name=bn_name_base + &#39;2b&#39;)(x)\n    x = Activation(&#39;relu&#39;)(x)\n    # 1x1扩张特征\n    x = Conv2D(filters3 , (1, 1), name=conv_name_base + &#39;2c&#39;)(x)\n    x = BatchNormalization(name=bn_name_base + &#39;2c&#39;)(x)\n    # 残差网络\n    x = layers.add([x, input_tensor])\n    x = Activation(&#39;relu&#39;)(x)\n    return x\n\n# 与identity_block最大差距为，其可以减少wh，进行压缩\ndef conv_block(input_tensor, kernel_size, filters, stage, block, strides=(2, 2)):\n\n    filters1, filters2, filters3 = filters\n\n    conv_name_base = &#39;res&#39; + str(stage) + block + &#39;_branch&#39;\n    bn_name_base = &#39;bn&#39; + str(stage) + block + &#39;_branch&#39;\n    # 1x1压缩\n    x = Conv2D(filters1, (1, 1) , strides=strides, name=conv_name_base + &#39;2a&#39;)(input_tensor)\n    x = BatchNormalization(name=bn_name_base + &#39;2a&#39;)(x)\n    x = Activation(&#39;relu&#39;)(x)\n    # 3x3提取特征\n    x = Conv2D(filters2, kernel_size , padding=&#39;same&#39;, name=conv_name_base + &#39;2b&#39;)(x)\n    x = BatchNormalization(name=bn_name_base + &#39;2b&#39;)(x)\n    x = Activation(&#39;relu&#39;)(x)\n    # 1x1扩张特征\n    x = Conv2D(filters3, (1, 1) , name=conv_name_base + &#39;2c&#39;)(x)\n    x = BatchNormalization(name=bn_name_base + &#39;2c&#39;)(x)\n    # 1x1扩张特征\n    shortcut = Conv2D(filters3, (1, 1) , strides=strides, name=conv_name_base + &#39;1&#39;)(input_tensor)\n    shortcut = BatchNormalization(name=bn_name_base + &#39;1&#39;)(shortcut)\n    # add\n    x = layers.add([x, shortcut])\n    x = Activation(&#39;relu&#39;)(x)\n    return x\ndef get_resnet50_encoder(input_height=224 , input_width=224):\n\n    assert input_height%32 == 0\n    assert input_width%32 == 0\n\n    img_input = Input(shape=(input_height,input_width , 3 ))\n\n    x = ZeroPadding2D((3, 3))(img_input)\n    x = Conv2D(64, (7, 7), strides=(2, 2), name=&#39;conv1&#39;)(x)\n    # f1是hw方向压缩一次的结果\n    f1 = x\n    x = BatchNormalization(name=&#39;bn_conv1&#39;)(x)\n    x = Activation(&#39;relu&#39;)(x)\n    x = MaxPooling2D((3, 3) , strides=(2, 2))(x)\n\n\n    x = conv_block(x, 3, [64, 64, 256], stage=2, block=&#39;a&#39;, strides=(1, 1))\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block=&#39;b&#39;)\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block=&#39;c&#39;)\n    # f2是hw方向压缩两次的结果\n    f2 = x\n\n\n    x = conv_block(x, 3, [128, 128, 512], stage=3, block=&#39;a&#39;)\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block=&#39;b&#39;)\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block=&#39;c&#39;)\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block=&#39;d&#39;)\n    # f3是hw方向压缩三次的结果\n    f3 = x \n\n    x = conv_block(x, 3, [256, 256, 1024], stage=4, block=&#39;a&#39;)\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block=&#39;b&#39;)\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block=&#39;c&#39;)\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block=&#39;d&#39;)\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block=&#39;e&#39;)\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block=&#39;f&#39;)\n    # f4是hw方向压缩四次的结果\n    f4 = x \n\n    x = conv_block(x, 3, [512, 512, 2048], stage=5, block=&#39;a&#39;)\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block=&#39;b&#39;)\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block=&#39;c&#39;)\n    # f5是hw方向压缩五次的结果\n    f5 = x \n\n    x = AveragePooling2D((7, 7) , name=&#39;avg_pool&#39;)(x)\n    return img_input , [f1 , f2 , f3 , f4 , f5  ]</code></pre>\n<h3 id=\"特征解码\"><a href=\"#特征解码\" class=\"headerlink\" title=\"特征解码\"></a>特征解码</h3><p>在特征解码部分，主要是针对前面编码部分提取出来的特征进行解码，然后为每个像素进行分类，获取loss值进行训练。其中解码部分主要就是对应于之前提取到的特征进行上采样，将特征纬度不断扩大。</p>\n<p>代码如下：</p>\n<pre><code class=\"python\">def segnet_decoder( f , n_classes, n_up=3 ):\n\n    assert n_up &gt;= 2\n\n    o = f\n    o = ZeroPadding2D((1,1))(o)\n    o = Conv2D(512, (3, 3), padding=&#39;valid&#39;)(o)\n    o = BatchNormalization()(o)\n    # 进行一次UpSampling2D，此时hw变为原来的1/8\n    o = UpSampling2D((2,2))(o)\n    o = ZeroPadding2D((1,1))(o)\n    o = Conv2D( 256, (3, 3), padding=&#39;valid&#39;)(o)\n    o = BatchNormalization()(o)\n\n    # 进行一次UpSampling2D，此时hw变为原来的1/4\n    for _ in range(n_up-2):\n        o = UpSampling2D((2,2))(o)\n        o = ZeroPadding2D((1,1))(o)\n        o = Conv2D( 128 , (3, 3), padding=&#39;valid&#39;)(o)\n        o = BatchNormalization()(o)\n\n    # 进行一次UpSampling2D，此时hw变为原来的1/2\n    o = UpSampling2D((2,2) )(o)\n    o = ZeroPadding2D((1,1) )(o)\n    o = Conv2D( 64 , (3, 3), padding=&#39;valid&#39; )(o)\n    o = BatchNormalization()(o)\n\n    # 此时输出为h_input/2,w_input/2,nclasses\n    o = Conv2D(n_classes , (3, 3), padding=&#39;same&#39;)( o )\n    return o \ndef _segnet(n_classes , encoder, input_height=416, input_width=416 , encoder_level=3):\n    # encoder通过主干网络\n    img_input , levels = encoder( input_height=input_height ,  input_width=input_width )\n    # 获取hw压缩四次后的结果\n    feat = levels[encoder_level]\n    # 将特征传入segnet网络\n    o = segnet_decoder(feat, n_classes, n_up=3 )\n    # 将结果进行reshape\n    o = Reshape((int(input_height/2)*int(input_width/2), -1))(o)\n    o = Softmax()(o)\n    model = Model(img_input,o)\n    return model\n\ndef resnet50_segnet( n_classes ,  input_height=416, input_width=416 , encoder_level=3):\n\n    model = _segnet( n_classes , get_resnet50_encoder ,  input_height=input_height, input_width=input_width , encoder_level=encoder_level)\n    return model</code></pre>\n<p>根据以上的代码，我们很容易看出，解码部分对应于编码的部分，通过不断的上采样将特征放大到原来图片的1/2的大小然后输出分类。<br>至此，关于<code>SegNet</code>代码的所有内容就基本讲完了，下一张会讲解医学影像处理常用的语义分割网络<code>U-net</code>。</p>\n<p>##2021年4月23日再次更新</p>\n<p>在<code>SegNet</code>网络中，之前的代码在编码和解码的过程中没有考虑池化索引这个特点，直接通过池化和上采样层进行操作，没有添加池化索引。在实际的训练过程中，不添加池化索引这个特点有可能会导致loss值在训练过程中不太稳定，不过在运用过程中不会造成太大误差。不过在这里还是补上池化索引的功能，关于池化索引的相关特点可以百度一下。</p>\n<p>代码如下：</p>\n<pre><code class=\"python\">from keras.engine import Layer\nimport keras.backend as K\n\nclass MaxPoolingWithArgmax2D(Layer):\n    def __init__(self, pool_size=(2, 2), strides=(2, 2), padding=&#39;same&#39;, **kwargs):\n        super(MaxPoolingWithArgmax2D, self).__init__(**kwargs)\n        self.padding = padding\n        self.pool_size = pool_size\n        self.strides = strides\n\n    def call(self, inputs, **kwargs):\n        padding = self.padding\n        pool_size = self.pool_size\n        strides = self.strides\n        if K.backend() == &#39;tensorflow&#39;:\n            ksize = [1, pool_size[0], pool_size[1], 1]\n            padding = padding.upper()\n            strides = [1, strides[0], strides[1], 1]\n            output, argmax = K.tf.nn.max_pool_with_argmax(inputs, ksize=ksize, strides=strides, padding=padding)\n        else:\n            errmsg = &#39;&#123;&#125; backend is not supported for layer &#123;&#125;&#39;.format(K.backend(), type(self).__name__)\n            raise NotImplementedError(errmsg)\n        argmax = K.cast(argmax, K.floatx())\n        return [output, argmax]\n\n    def compute_output_shape(self, input_shape):\n        ratio = (1, 2, 2, 1)\n        output_shape = [dim // ratio[idx] if dim is not None else None for idx, dim in enumerate(input_shape)]\n        output_shape = tuple(output_shape)\n        return [output_shape, output_shape]\n\n    def compute_mask(self, inputs, mask=None):\n        return 2 * [None]\n\n\nclass MaxUnpooling2D(Layer):\n    def __init__(self, up_size=(2, 2), **kwargs):\n        super(MaxUnpooling2D, self).__init__(**kwargs)\n        self.up_size = up_size\n\n    def call(self, inputs, output_shape=None):\n        updates, mask = inputs[0], inputs[1]\n        with K.tf.variable_scope(self.name):\n            mask = K.cast(mask, &#39;int32&#39;)\n            input_shape = K.tf.shape(updates, out_type=&#39;int32&#39;)\n            #  calculation new shape\n            if output_shape is None:\n                output_shape = (input_shape[0], input_shape[1] * self.up_size[0], input_shape[2] * self.up_size[1], input_shape[3])\n\n            # calculation indices for batch, height, width and feature maps\n            one_like_mask = K.ones_like(mask, dtype=&#39;int32&#39;)\n            batch_shape = K.concatenate([[input_shape[0]], [1], [1], [1]], axis=0)\n            batch_range = K.reshape(K.tf.range(output_shape[0], dtype=&#39;int32&#39;), shape=batch_shape)\n            b = one_like_mask * batch_range\n            y = mask // (output_shape[2] * output_shape[3])\n            x = (mask // output_shape[3]) % output_shape[2]\n            feature_range = K.tf.range(output_shape[3], dtype=&#39;int32&#39;)\n            f = one_like_mask * feature_range\n\n            # transpose indices &amp; reshape update values to one dimension\n            updates_size = K.tf.size(updates)\n            indices = K.transpose(K.reshape(K.stack([b, y, x, f]),[4, updates_size]))\n            values = K.reshape(updates, [updates_size])\n            ret = K.tf.scatter_nd(indices, values, output_shape)\n            return ret\n\n    def compute_output_shape(self, input_shape):\n        mask_shape = input_shape[1]\n        return (mask_shape[0], mask_shape[1] * self.up_size[0], mask_shape[2] * self.up_size[1], mask_shape[3])</code></pre>\n<p>在此处自定义了下采样代码和上采样的代码，在实际的运用中，需要将池化和上采样的代码替换为上文的代码。形如：</p>\n<pre><code class=\"python\">    o = MaxPoolingWithArgmax2D()(input)\n    o2 = MaxUnpooling2D()(o)</code></pre>\n<p>其中<code>o</code>输出的是输出层和对应的<code>argmax</code>参数，对应的上采样层输入就是池化层的输出和索引参数。</p>\n<h3 id=\"loss函数\"><a href=\"#loss函数\" class=\"headerlink\" title=\"loss函数\"></a>loss函数</h3><p>在<code>SegNet</code>模型中，预测值是经过解码后的特征层的一维序列，对应的真实值就是图片ground truth的一维序列，在loss函数的设计中，本文采用了标准的交叉熵CE作为<code>SegNet</code>的loss函数。</p>\n"},{"title":"U-net","date":"2021-04-23T02:48:06.000Z","author":"Fanrencli","_content":"\n## 深度学习之语义分割U-net(2015)\n\n### what is U-net\n\n上篇文章我们介绍了`SegNet`网络的相关知识和网络的特点，这篇文章介绍2015年发表的另一篇比较经典的语义分割网络`U-net`，这篇网络与上篇的`SegNet`的网络差别不大，但是结构上还是有差别的，并且在`U-net`网络中运用了跳跃连接，这个特点和`SegNet`不同，也正是因为此处的不同，有的文章将这两个网络的池化索引和跳跃连接这两个特点进行结合进行网络构建。\n\n`U-net`网络结构与`SegNet`结构相似，都拥有编码和解码的过程，但是在有效特征层选取的时候，`U-net`选取了多个特征层进行特征融合，而`SegNet`网络值利用了最后一层特征。\n\n![U-net网络结构](http://39.106.34.39:4567/20191109101342389.png)\n\n### 主干网络结构简介\n\n针对`U-net`网络，我们选取`MobileNet`作为主干网络，在之前的文章中已经介绍过，且给出了相关代码，此处给出[链接](http://fanrencli.cn/2021/04/20/feature-extractor/mobilenet/)。\n\n### 特征解码\n\n特征解码过程与`SegNet`网络类似，针对编码过程中提取得到的有效特征层进行上采样解码，并与对应的有效特征层进行连接。\n\n代码如下：\n```python\n\nfrom keras.models import *\nfrom keras.layers import *\nfrom nets.mobilenet import get_mobilenet_encoder\nMERGE_AXIS = -1\n\ndef _unet( n_classes , encoder , l1_skip_conn=True,  input_height=416, input_width=608  ):\n\n\timg_input , levels = encoder( input_height=input_height ,  input_width=input_width )\n\t[f1 , f2 , f3 , f4 , f5 ] = levels \n\n\to = f4\n\t# 26,26,512\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D(512, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\t# 52,52,512\n\to = ( UpSampling2D((2,2)))(o)\n\t# 52,52,768\n\to =  concatenate([o, f3],axis=MERGE_AXIS )  \n\to = ZeroPadding2D((1,1))(o)\n\t# 52,52,256\n\to = Conv2D(256, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\t# 104,104,256\n\to = UpSampling2D( (2,2)))(o)\n\t# 104,104,384\n\to = concatenate([o,f2],axis=MERGE_AXIS ) )\n\to = ZeroPadding2D((1,1))(o)\n\t# 104,104,128\n\to = Conv2D(128 , (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\t# 208,208,128\n\to = UpSampling2D((2,2))(o)\n\t\n\tif l1_skip_conn:\n\t\to = concatenate([o,f1],axis=MERGE_AXIS )\n\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D( 64 , (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\to =  Conv2D(n_classes, (3, 3), padding='same')( o )\n\t\n\t# 将结果进行reshape\n\to = Reshape((int(input_height/2)*int(input_width/2), -1))(o)\n\to = Softmax()(o)\n\tmodel = Model(img_input,o)\n\treturn model\n\ndef mobilenet_unet( n_classes ,  input_height=224, input_width=224 , encoder_level=3):\n\tmodel =  _unet( n_classes , get_mobilenet_encoder ,  input_height=input_height, input_width=input_width  )\n\treturn model\n```\n### loss函数\n\n在`U-net`模型中，预测值是经过解码后的特征层的一维序列，对应的真实值就是图片ground truth的一维序列，在loss函数的设计中，本文采用了标准的交叉熵CE作为`U-net`的loss函数。\n\n至此，`U-net`相关的代码就介绍完成了，在后期会针对已经介绍的网络进行不断更新。\n\n\n","source":"_posts/semantic_segmentation/unet.md","raw":"---\ntitle: U-net\ndate: 2021-04-23 10:48:06\ncategories:\n- Deep Learning\ntags:\n- semantic segmentation\n- U-net\nauthor: Fanrencli\n---\n\n## 深度学习之语义分割U-net(2015)\n\n### what is U-net\n\n上篇文章我们介绍了`SegNet`网络的相关知识和网络的特点，这篇文章介绍2015年发表的另一篇比较经典的语义分割网络`U-net`，这篇网络与上篇的`SegNet`的网络差别不大，但是结构上还是有差别的，并且在`U-net`网络中运用了跳跃连接，这个特点和`SegNet`不同，也正是因为此处的不同，有的文章将这两个网络的池化索引和跳跃连接这两个特点进行结合进行网络构建。\n\n`U-net`网络结构与`SegNet`结构相似，都拥有编码和解码的过程，但是在有效特征层选取的时候，`U-net`选取了多个特征层进行特征融合，而`SegNet`网络值利用了最后一层特征。\n\n![U-net网络结构](http://39.106.34.39:4567/20191109101342389.png)\n\n### 主干网络结构简介\n\n针对`U-net`网络，我们选取`MobileNet`作为主干网络，在之前的文章中已经介绍过，且给出了相关代码，此处给出[链接](http://fanrencli.cn/2021/04/20/feature-extractor/mobilenet/)。\n\n### 特征解码\n\n特征解码过程与`SegNet`网络类似，针对编码过程中提取得到的有效特征层进行上采样解码，并与对应的有效特征层进行连接。\n\n代码如下：\n```python\n\nfrom keras.models import *\nfrom keras.layers import *\nfrom nets.mobilenet import get_mobilenet_encoder\nMERGE_AXIS = -1\n\ndef _unet( n_classes , encoder , l1_skip_conn=True,  input_height=416, input_width=608  ):\n\n\timg_input , levels = encoder( input_height=input_height ,  input_width=input_width )\n\t[f1 , f2 , f3 , f4 , f5 ] = levels \n\n\to = f4\n\t# 26,26,512\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D(512, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\t# 52,52,512\n\to = ( UpSampling2D((2,2)))(o)\n\t# 52,52,768\n\to =  concatenate([o, f3],axis=MERGE_AXIS )  \n\to = ZeroPadding2D((1,1))(o)\n\t# 52,52,256\n\to = Conv2D(256, (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\t# 104,104,256\n\to = UpSampling2D( (2,2)))(o)\n\t# 104,104,384\n\to = concatenate([o,f2],axis=MERGE_AXIS ) )\n\to = ZeroPadding2D((1,1))(o)\n\t# 104,104,128\n\to = Conv2D(128 , (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\t# 208,208,128\n\to = UpSampling2D((2,2))(o)\n\t\n\tif l1_skip_conn:\n\t\to = concatenate([o,f1],axis=MERGE_AXIS )\n\n\to = ZeroPadding2D((1,1))(o)\n\to = Conv2D( 64 , (3, 3), padding='valid')(o)\n\to = BatchNormalization()(o)\n\n\to =  Conv2D(n_classes, (3, 3), padding='same')( o )\n\t\n\t# 将结果进行reshape\n\to = Reshape((int(input_height/2)*int(input_width/2), -1))(o)\n\to = Softmax()(o)\n\tmodel = Model(img_input,o)\n\treturn model\n\ndef mobilenet_unet( n_classes ,  input_height=224, input_width=224 , encoder_level=3):\n\tmodel =  _unet( n_classes , get_mobilenet_encoder ,  input_height=input_height, input_width=input_width  )\n\treturn model\n```\n### loss函数\n\n在`U-net`模型中，预测值是经过解码后的特征层的一维序列，对应的真实值就是图片ground truth的一维序列，在loss函数的设计中，本文采用了标准的交叉熵CE作为`U-net`的loss函数。\n\n至此，`U-net`相关的代码就介绍完成了，在后期会针对已经介绍的网络进行不断更新。\n\n\n","slug":"semantic_segmentation/unet","published":1,"updated":"2021-07-13T08:16:03.204Z","_id":"cknu4ydno0000eouo6p7rh8t0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习之语义分割U-net-2015\"><a href=\"#深度学习之语义分割U-net-2015\" class=\"headerlink\" title=\"深度学习之语义分割U-net(2015)\"></a>深度学习之语义分割U-net(2015)</h2><h3 id=\"what-is-U-net\"><a href=\"#what-is-U-net\" class=\"headerlink\" title=\"what is U-net\"></a>what is U-net</h3><p>上篇文章我们介绍了<code>SegNet</code>网络的相关知识和网络的特点，这篇文章介绍2015年发表的另一篇比较经典的语义分割网络<code>U-net</code>，这篇网络与上篇的<code>SegNet</code>的网络差别不大，但是结构上还是有差别的，并且在<code>U-net</code>网络中运用了跳跃连接，这个特点和<code>SegNet</code>不同，也正是因为此处的不同，有的文章将这两个网络的池化索引和跳跃连接这两个特点进行结合进行网络构建。</p>\n<p><code>U-net</code>网络结构与<code>SegNet</code>结构相似，都拥有编码和解码的过程，但是在有效特征层选取的时候，<code>U-net</code>选取了多个特征层进行特征融合，而<code>SegNet</code>网络值利用了最后一层特征。</p>\n<p><img src=\"http://39.106.34.39:4567/20191109101342389.png\" alt=\"U-net网络结构\"></p>\n<h3 id=\"主干网络结构简介\"><a href=\"#主干网络结构简介\" class=\"headerlink\" title=\"主干网络结构简介\"></a>主干网络结构简介</h3><p>针对<code>U-net</code>网络，我们选取<code>MobileNet</code>作为主干网络，在之前的文章中已经介绍过，且给出了相关代码，此处给出<a href=\"http://fanrencli.cn/2021/04/20/feature-extractor/mobilenet/\">链接</a>。</p>\n<h3 id=\"特征解码\"><a href=\"#特征解码\" class=\"headerlink\" title=\"特征解码\"></a>特征解码</h3><p>特征解码过程与<code>SegNet</code>网络类似，针对编码过程中提取得到的有效特征层进行上采样解码，并与对应的有效特征层进行连接。</p>\n<p>代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>layers <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> nets<span class=\"token punctuation\">.</span>mobilenet <span class=\"token keyword\">import</span> get_mobilenet_encoder\nMERGE_AXIS <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_unet</span><span class=\"token punctuation\">(</span> n_classes <span class=\"token punctuation\">,</span> encoder <span class=\"token punctuation\">,</span> l1_skip_conn<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>  input_height<span class=\"token operator\">=</span><span class=\"token number\">416</span><span class=\"token punctuation\">,</span> input_width<span class=\"token operator\">=</span><span class=\"token number\">608</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    img_input <span class=\"token punctuation\">,</span> levels <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">(</span> input_height<span class=\"token operator\">=</span>input_height <span class=\"token punctuation\">,</span>  input_width<span class=\"token operator\">=</span>input_width <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">[</span>f1 <span class=\"token punctuation\">,</span> f2 <span class=\"token punctuation\">,</span> f3 <span class=\"token punctuation\">,</span> f4 <span class=\"token punctuation\">,</span> f5 <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> levels \n\n    o <span class=\"token operator\">=</span> f4\n    <span class=\"token comment\" spellcheck=\"true\"># 26,26,512</span>\n    o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 52,52,512</span>\n    o <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> UpSampling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 52,52,768</span>\n    o <span class=\"token operator\">=</span>  concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">,</span> f3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>axis<span class=\"token operator\">=</span>MERGE_AXIS <span class=\"token punctuation\">)</span>  \n    o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 52,52,256</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 104,104,256</span>\n    o <span class=\"token operator\">=</span> UpSampling2D<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 104,104,384</span>\n    o <span class=\"token operator\">=</span> concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">,</span>f2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>axis<span class=\"token operator\">=</span>MERGE_AXIS <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 104,104,128</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">128</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 208,208,128</span>\n    o <span class=\"token operator\">=</span> UpSampling2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> l1_skip_conn<span class=\"token punctuation\">:</span>\n        o <span class=\"token operator\">=</span> concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">,</span>f1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>axis<span class=\"token operator\">=</span>MERGE_AXIS <span class=\"token punctuation\">)</span>\n\n    o <span class=\"token operator\">=</span> ZeroPadding2D<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> Conv2D<span class=\"token punctuation\">(</span> <span class=\"token number\">64</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'valid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> BatchNormalization<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n\n    o <span class=\"token operator\">=</span>  Conv2D<span class=\"token punctuation\">(</span>n_classes<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token string\">'same'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> o <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 将结果进行reshape</span>\n    o <span class=\"token operator\">=</span> Reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>input_height<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>int<span class=\"token punctuation\">(</span>input_width<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    o <span class=\"token operator\">=</span> Softmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n    model <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">(</span>img_input<span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">mobilenet_unet</span><span class=\"token punctuation\">(</span> n_classes <span class=\"token punctuation\">,</span>  input_height<span class=\"token operator\">=</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> input_width<span class=\"token operator\">=</span><span class=\"token number\">224</span> <span class=\"token punctuation\">,</span> encoder_level<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span>  _unet<span class=\"token punctuation\">(</span> n_classes <span class=\"token punctuation\">,</span> get_mobilenet_encoder <span class=\"token punctuation\">,</span>  input_height<span class=\"token operator\">=</span>input_height<span class=\"token punctuation\">,</span> input_width<span class=\"token operator\">=</span>input_width  <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model</code></pre>\n<h3 id=\"loss函数\"><a href=\"#loss函数\" class=\"headerlink\" title=\"loss函数\"></a>loss函数</h3><p>在<code>U-net</code>模型中，预测值是经过解码后的特征层的一维序列，对应的真实值就是图片ground truth的一维序列，在loss函数的设计中，本文采用了标准的交叉熵CE作为<code>U-net</code>的loss函数。</p>\n<p>至此，<code>U-net</code>相关的代码就介绍完成了，在后期会针对已经介绍的网络进行不断更新。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习之语义分割U-net-2015\"><a href=\"#深度学习之语义分割U-net-2015\" class=\"headerlink\" title=\"深度学习之语义分割U-net(2015)\"></a>深度学习之语义分割U-net(2015)</h2><h3 id=\"what-is-U-net\"><a href=\"#what-is-U-net\" class=\"headerlink\" title=\"what is U-net\"></a>what is U-net</h3><p>上篇文章我们介绍了<code>SegNet</code>网络的相关知识和网络的特点，这篇文章介绍2015年发表的另一篇比较经典的语义分割网络<code>U-net</code>，这篇网络与上篇的<code>SegNet</code>的网络差别不大，但是结构上还是有差别的，并且在<code>U-net</code>网络中运用了跳跃连接，这个特点和<code>SegNet</code>不同，也正是因为此处的不同，有的文章将这两个网络的池化索引和跳跃连接这两个特点进行结合进行网络构建。</p>\n<p><code>U-net</code>网络结构与<code>SegNet</code>结构相似，都拥有编码和解码的过程，但是在有效特征层选取的时候，<code>U-net</code>选取了多个特征层进行特征融合，而<code>SegNet</code>网络值利用了最后一层特征。</p>\n<p><img src=\"http://39.106.34.39:4567/20191109101342389.png\" alt=\"U-net网络结构\"></p>\n<h3 id=\"主干网络结构简介\"><a href=\"#主干网络结构简介\" class=\"headerlink\" title=\"主干网络结构简介\"></a>主干网络结构简介</h3><p>针对<code>U-net</code>网络，我们选取<code>MobileNet</code>作为主干网络，在之前的文章中已经介绍过，且给出了相关代码，此处给出<a href=\"http://fanrencli.cn/2021/04/20/feature-extractor/mobilenet/\">链接</a>。</p>\n<h3 id=\"特征解码\"><a href=\"#特征解码\" class=\"headerlink\" title=\"特征解码\"></a>特征解码</h3><p>特征解码过程与<code>SegNet</code>网络类似，针对编码过程中提取得到的有效特征层进行上采样解码，并与对应的有效特征层进行连接。</p>\n<p>代码如下：</p>\n<pre><code class=\"python\">\nfrom keras.models import *\nfrom keras.layers import *\nfrom nets.mobilenet import get_mobilenet_encoder\nMERGE_AXIS = -1\n\ndef _unet( n_classes , encoder , l1_skip_conn=True,  input_height=416, input_width=608  ):\n\n    img_input , levels = encoder( input_height=input_height ,  input_width=input_width )\n    [f1 , f2 , f3 , f4 , f5 ] = levels \n\n    o = f4\n    # 26,26,512\n    o = ZeroPadding2D((1,1))(o)\n    o = Conv2D(512, (3, 3), padding=&#39;valid&#39;)(o)\n    o = BatchNormalization()(o)\n\n    # 52,52,512\n    o = ( UpSampling2D((2,2)))(o)\n    # 52,52,768\n    o =  concatenate([o, f3],axis=MERGE_AXIS )  \n    o = ZeroPadding2D((1,1))(o)\n    # 52,52,256\n    o = Conv2D(256, (3, 3), padding=&#39;valid&#39;)(o)\n    o = BatchNormalization()(o)\n\n    # 104,104,256\n    o = UpSampling2D( (2,2)))(o)\n    # 104,104,384\n    o = concatenate([o,f2],axis=MERGE_AXIS ) )\n    o = ZeroPadding2D((1,1))(o)\n    # 104,104,128\n    o = Conv2D(128 , (3, 3), padding=&#39;valid&#39;)(o)\n    o = BatchNormalization()(o)\n    # 208,208,128\n    o = UpSampling2D((2,2))(o)\n\n    if l1_skip_conn:\n        o = concatenate([o,f1],axis=MERGE_AXIS )\n\n    o = ZeroPadding2D((1,1))(o)\n    o = Conv2D( 64 , (3, 3), padding=&#39;valid&#39;)(o)\n    o = BatchNormalization()(o)\n\n    o =  Conv2D(n_classes, (3, 3), padding=&#39;same&#39;)( o )\n\n    # 将结果进行reshape\n    o = Reshape((int(input_height/2)*int(input_width/2), -1))(o)\n    o = Softmax()(o)\n    model = Model(img_input,o)\n    return model\n\ndef mobilenet_unet( n_classes ,  input_height=224, input_width=224 , encoder_level=3):\n    model =  _unet( n_classes , get_mobilenet_encoder ,  input_height=input_height, input_width=input_width  )\n    return model</code></pre>\n<h3 id=\"loss函数\"><a href=\"#loss函数\" class=\"headerlink\" title=\"loss函数\"></a>loss函数</h3><p>在<code>U-net</code>模型中，预测值是经过解码后的特征层的一维序列，对应的真实值就是图片ground truth的一维序列，在loss函数的设计中，本文采用了标准的交叉熵CE作为<code>U-net</code>的loss函数。</p>\n<p>至此，<code>U-net</code>相关的代码就介绍完成了，在后期会针对已经介绍的网络进行不断更新。</p>\n"},{"title":"VGG & ResNet","date":"2021-05-06T08:26:39.000Z","author":"Fanrencli","_content":"## 深度学习神经网络特征提取（五）\n\n本文接续前文提到的主干特征提取网络，前文的网络构建主要是基于`keras`框架构建的，而在深度学习领域`pytorch`是当前最流行的框架，且深受顶会论文学者的喜爱。因此，在前文已经给出的`keras`代码的基础上，从这篇文章开始会针对前文网络重新用`pytorch`构建。\n\n再次给出`pytorch`代码，还需要注意的是：不同于`keras`，`pytorch`输入的shape=（3，224，224），通道数在前。关于网络的讲解部分，大家参考前期的文章[VGG](http://fanrencli.cn/2021/04/18/feature-extractor/vgg/)、[Resnet](http://fanrencli.cn/2021/04/18/feature-extractor/resnet/)\n\n\n\n### VGG16\n```python\nclass VGG16(nn.Module):\n    def __init__(self,num_classes):\n        super(VGG16,self).__init__()\n        #input_shape(3,224,224)\n        self.conv1 = nn.Conv2d(3,64,kernel_size=3,padding =1,stride=1)\n        self.relu1 = nn.ReLU()\n        self.conv2 = nn.Conv2d(64,64,kernel_size=3,padding =1,stride=1)\n        self.relu2 = nn.ReLU()\n        self.maxpool1 = nn.MaxPool2d(kernel_size=2,stride = 2)\n        \n        self.conv3 = nn.Conv2d(64,128,kernel_size=3,padding =1,stride=1)\n        self.relu3 = nn.ReLU()\n        self.conv4 = nn.Conv2d(128,128,kernel_size=3,padding =1,stride=1)\n        self.relu4 = nn.ReLU()\n        self.maxpool2 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv5 = nn.Conv2d(128,256,kernel_size=3,padding =1,stride=1)\n        self.relu5 = nn.ReLU()\n        self.conv6 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu6 = nn.ReLU()\n        self.conv7 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu7 = nn.ReLU()\n        self.maxpool3 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv8 = nn.Conv2d(256,512,kernel_size=3,padding =1,stride=1)\n        self.relu8 = nn.ReLU()\n        self.conv9 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu9 = nn.ReLU()\n        self.conv10 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu10 = nn.ReLU()\n        self.maxpool4 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv11 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu11 = nn.ReLU()\n        self.conv12 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu12 = nn.ReLU()\n        self.conv13 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu13 = nn.ReLU()\n        self.maxpool5 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.linear1 = nn.Linear(512*7*7,4096)\n        self.relu14 = nn.ReLU()\n        self.dropout1 = nn.Dropout(0.5)\n        self.linear2= nn.Linear(4096,4096)\n        self.relu15 = nn.ReLU()\n        self.dropout2 = nn.Dropout(0.5)\n        self.linear3= nn.Linear(4096,num_classes)\n    def forward(self,x):\n        x = self.conv1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.relu2(x)\n        x = self.maxpool1(x)\n        x = self.conv3(x)\n        x = self.relu3(x)\n        x = self.conv4(x)\n        x = self.relu4(x)\n        x = self.maxpool2(x)\n\n        x = self.conv5(x)\n        x = self.relu5(x)\n        x = self.conv6(x)\n        x = self.relu6(x)\n        x = self.conv7(x)\n        x = self.relu7(x)\n        x = self.maxpool3(x)\n\n        x = self.conv8(x)\n        x = self.relu8(x)\n        x = self.conv9(x)\n        x = self.relu9(x)\n        x = self.conv10(x)\n        x = self.relu10(x)\n        x = self.maxpool4(x)\n\n        x = self.conv11(x)\n        x = self.relu11(x)\n        x = self.conv12(x)\n        x = self.relu12(x)\n        x = self.conv13(x)\n        x = self.relu13(x)\n        x = self.maxpool5(x)\n\n        x = x.view(x.size(0),x.size(1))\n        x = self.linear1(x)\n        x = self.relu14(x)\n        x = self.dropout1(x)\n        x = self.linear2(x)\n        x = self.relu15(x)\n        x = self.dropout2(x)\n        x =self.linear3(x)\n        return x\n```\n\n### ResNet101\n```python\nclass Conv_block(nn.Module):\n    def __init__(self,input_channel,filters,stride=2):\n        super(Conv_block,self).__init__()\n        self.conv1 = nn.Conv2d(input_channel,filters[0],kernel_size=1,stride = stride,bias=True)\n        self.batch1 = nn.BatchNorm2d(filters[0])\n        self.relu1 = nn.ReLU()\n\n        self.conv2 = nn.Conv2d(filters[0],filters[1],kernel_size=3,stride=1,padding =1,bias =True)\n        self.batch2 = nn.BatchNorm2d(filters[1])\n        self.relu2 = nn.ReLU()\n\n        self.conv3 = nn.Conv2d(filters[1],filters[2],kernel_size=1,stride=1,bias =True)\n        self.batch3 = nn.BatchNorm2d(filters[2])\n\n        self.conv4 = nn.Conv2d(input_channel,filters[2],kernel_size=1,stride=stride,bias =True)\n        self.batch4 = nn.BatchNorm2d(filters[2])\n\n        self.relu3 = nn.ReLU()\n    def forward(self,x):\n        shortcut = x\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        x = self.conv3(x)\n        x = self.batch3(x)\n        shortcut = self.conv4(shortcut)\n        shortcut = self.batch4(shortcut)\n        x +=shortcut\n        x = self.relu3(x)\n        return x\n```\n```python\nclass Identity_block(nn.Module):\n    def __init__(self,input_channel,filters):\n        super(Identity_block,self).__init__()\n        self.conv1 = nn.Conv2d(input_channel,filters[0],kernel_size=1,stride=1,bias=True)\n        self.batch1 = nn.BatchNorm2d(filters[0])\n        self.relu1 = nn.ReLU()\n        \n        self.conv2 = nn.Conv2d(filters[0],filters[1],kernel_size=3,padding=1,stride=1,bias=True)\n        self.batch2 = nn.BatchNorm2d(filters[1])\n        self.relu2 = nn.ReLU()\n\n        self.conv3 = nn.Conv2d(filters[1],filters[2],kernel_size=1,stride=1,bias=True)\n        self.batch3 = nn.BatchNorm2d(filters[2])\n\n        self.relu3 = nn.ReLU()\n    \n    def forward(self,x):\n        shortcut = x\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        x = self.conv3(x)\n        x = self.batch3(x)\n        x +=shortcut\n        x = self.relu3(x)\n        return x\n```\n```python\nclass ResNet101(nn.Module):\n    def __init__(self,num_classes):\n        super(ResNet101,self).__init__()\n        self.model1 = nn.Sequential(\n            nn.Conv2d(3,64,kernel_size=7,padding=3,stride=2,bias=True),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=3,stride=2,padding=1)\n            \n        )\n        self.model2 = nn.Sequential(\n            Conv_block(64,[64,64,256],stride=1),\n            Identity_block(256,[64,64,256]),\n            Identity_block(256,[64,64,256])\n        )\n        self.model3 = nn.Sequential(\n            Conv_block(256,[128,128,512]),\n            Identity_block(512,[128,128,512]),\n            Identity_block(512,[128,128,512]),\n            Identity_block(512,[128,128,512])\n        )\n        \n        self.conv1 = Conv_block(512,[256,256,1024])\n        self.loop_identity = Identity_block(1024,[256,256,1024])\n        self.model4 = nn.Sequential(\n            Conv_block(1024,[512,512,2048]),\n            Identity_block(2048,[512,512,2048]),\n            Identity_block(2048,[512,512,2048])\n        )\n        \n        self.avgpool = nn.AdaptiveMaxPool2d(1)\n        self.model5 = nn.Sequential(\n            nn.Linear(2048,1024),\n            nn.Dropout(0.5),\n            nn.ReLU(),\n            nn.Linear(1024,num_classes)\n        )\n    def forward(self,x):\n        c1 = x = self.model1(x)\n        c2 = x = self.model2(x)\n        c3 = x = self.model3(x)\n        x = self.conv1(x)\n        for i in range(22):\n            x = self.loop_identity(x)\n        c4 = x\n        c5 = x = self.model4(x)\n        x = self.avgpool(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.model5(x)\n        return c1,c2,c3,c4,c5,x\n\n```\n针对重新构建的代码，读者可自行对照前文的代码，感受不同框架之间的差异和优缺点。\n为了方便读者自行测试代码，一下给出一些简易的测试代码，有助于读者了解输出输入的方式\n```python\nnet = ResNet101(num_classes=10) # net = VGG16(num_classes=10)\ninput = torch.randn(1,3,224,224)\nout = net(input)\nprint(net)\nprint(out[4].shape)\n\n```","source":"_posts/feature_extractor/VGG&ResNet.md","raw":"---\ntitle: VGG & ResNet\ndate: 2021-05-06 16:26:39\ncategories: \n- Deep Learning\ntags:\n- Pytorch\n- VGG16\n- ResNet101\nauthor: Fanrencli\n---\n## 深度学习神经网络特征提取（五）\n\n本文接续前文提到的主干特征提取网络，前文的网络构建主要是基于`keras`框架构建的，而在深度学习领域`pytorch`是当前最流行的框架，且深受顶会论文学者的喜爱。因此，在前文已经给出的`keras`代码的基础上，从这篇文章开始会针对前文网络重新用`pytorch`构建。\n\n再次给出`pytorch`代码，还需要注意的是：不同于`keras`，`pytorch`输入的shape=（3，224，224），通道数在前。关于网络的讲解部分，大家参考前期的文章[VGG](http://fanrencli.cn/2021/04/18/feature-extractor/vgg/)、[Resnet](http://fanrencli.cn/2021/04/18/feature-extractor/resnet/)\n\n\n\n### VGG16\n```python\nclass VGG16(nn.Module):\n    def __init__(self,num_classes):\n        super(VGG16,self).__init__()\n        #input_shape(3,224,224)\n        self.conv1 = nn.Conv2d(3,64,kernel_size=3,padding =1,stride=1)\n        self.relu1 = nn.ReLU()\n        self.conv2 = nn.Conv2d(64,64,kernel_size=3,padding =1,stride=1)\n        self.relu2 = nn.ReLU()\n        self.maxpool1 = nn.MaxPool2d(kernel_size=2,stride = 2)\n        \n        self.conv3 = nn.Conv2d(64,128,kernel_size=3,padding =1,stride=1)\n        self.relu3 = nn.ReLU()\n        self.conv4 = nn.Conv2d(128,128,kernel_size=3,padding =1,stride=1)\n        self.relu4 = nn.ReLU()\n        self.maxpool2 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv5 = nn.Conv2d(128,256,kernel_size=3,padding =1,stride=1)\n        self.relu5 = nn.ReLU()\n        self.conv6 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu6 = nn.ReLU()\n        self.conv7 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu7 = nn.ReLU()\n        self.maxpool3 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv8 = nn.Conv2d(256,512,kernel_size=3,padding =1,stride=1)\n        self.relu8 = nn.ReLU()\n        self.conv9 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu9 = nn.ReLU()\n        self.conv10 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu10 = nn.ReLU()\n        self.maxpool4 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv11 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu11 = nn.ReLU()\n        self.conv12 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu12 = nn.ReLU()\n        self.conv13 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu13 = nn.ReLU()\n        self.maxpool5 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.linear1 = nn.Linear(512*7*7,4096)\n        self.relu14 = nn.ReLU()\n        self.dropout1 = nn.Dropout(0.5)\n        self.linear2= nn.Linear(4096,4096)\n        self.relu15 = nn.ReLU()\n        self.dropout2 = nn.Dropout(0.5)\n        self.linear3= nn.Linear(4096,num_classes)\n    def forward(self,x):\n        x = self.conv1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.relu2(x)\n        x = self.maxpool1(x)\n        x = self.conv3(x)\n        x = self.relu3(x)\n        x = self.conv4(x)\n        x = self.relu4(x)\n        x = self.maxpool2(x)\n\n        x = self.conv5(x)\n        x = self.relu5(x)\n        x = self.conv6(x)\n        x = self.relu6(x)\n        x = self.conv7(x)\n        x = self.relu7(x)\n        x = self.maxpool3(x)\n\n        x = self.conv8(x)\n        x = self.relu8(x)\n        x = self.conv9(x)\n        x = self.relu9(x)\n        x = self.conv10(x)\n        x = self.relu10(x)\n        x = self.maxpool4(x)\n\n        x = self.conv11(x)\n        x = self.relu11(x)\n        x = self.conv12(x)\n        x = self.relu12(x)\n        x = self.conv13(x)\n        x = self.relu13(x)\n        x = self.maxpool5(x)\n\n        x = x.view(x.size(0),x.size(1))\n        x = self.linear1(x)\n        x = self.relu14(x)\n        x = self.dropout1(x)\n        x = self.linear2(x)\n        x = self.relu15(x)\n        x = self.dropout2(x)\n        x =self.linear3(x)\n        return x\n```\n\n### ResNet101\n```python\nclass Conv_block(nn.Module):\n    def __init__(self,input_channel,filters,stride=2):\n        super(Conv_block,self).__init__()\n        self.conv1 = nn.Conv2d(input_channel,filters[0],kernel_size=1,stride = stride,bias=True)\n        self.batch1 = nn.BatchNorm2d(filters[0])\n        self.relu1 = nn.ReLU()\n\n        self.conv2 = nn.Conv2d(filters[0],filters[1],kernel_size=3,stride=1,padding =1,bias =True)\n        self.batch2 = nn.BatchNorm2d(filters[1])\n        self.relu2 = nn.ReLU()\n\n        self.conv3 = nn.Conv2d(filters[1],filters[2],kernel_size=1,stride=1,bias =True)\n        self.batch3 = nn.BatchNorm2d(filters[2])\n\n        self.conv4 = nn.Conv2d(input_channel,filters[2],kernel_size=1,stride=stride,bias =True)\n        self.batch4 = nn.BatchNorm2d(filters[2])\n\n        self.relu3 = nn.ReLU()\n    def forward(self,x):\n        shortcut = x\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        x = self.conv3(x)\n        x = self.batch3(x)\n        shortcut = self.conv4(shortcut)\n        shortcut = self.batch4(shortcut)\n        x +=shortcut\n        x = self.relu3(x)\n        return x\n```\n```python\nclass Identity_block(nn.Module):\n    def __init__(self,input_channel,filters):\n        super(Identity_block,self).__init__()\n        self.conv1 = nn.Conv2d(input_channel,filters[0],kernel_size=1,stride=1,bias=True)\n        self.batch1 = nn.BatchNorm2d(filters[0])\n        self.relu1 = nn.ReLU()\n        \n        self.conv2 = nn.Conv2d(filters[0],filters[1],kernel_size=3,padding=1,stride=1,bias=True)\n        self.batch2 = nn.BatchNorm2d(filters[1])\n        self.relu2 = nn.ReLU()\n\n        self.conv3 = nn.Conv2d(filters[1],filters[2],kernel_size=1,stride=1,bias=True)\n        self.batch3 = nn.BatchNorm2d(filters[2])\n\n        self.relu3 = nn.ReLU()\n    \n    def forward(self,x):\n        shortcut = x\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        x = self.conv3(x)\n        x = self.batch3(x)\n        x +=shortcut\n        x = self.relu3(x)\n        return x\n```\n```python\nclass ResNet101(nn.Module):\n    def __init__(self,num_classes):\n        super(ResNet101,self).__init__()\n        self.model1 = nn.Sequential(\n            nn.Conv2d(3,64,kernel_size=7,padding=3,stride=2,bias=True),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=3,stride=2,padding=1)\n            \n        )\n        self.model2 = nn.Sequential(\n            Conv_block(64,[64,64,256],stride=1),\n            Identity_block(256,[64,64,256]),\n            Identity_block(256,[64,64,256])\n        )\n        self.model3 = nn.Sequential(\n            Conv_block(256,[128,128,512]),\n            Identity_block(512,[128,128,512]),\n            Identity_block(512,[128,128,512]),\n            Identity_block(512,[128,128,512])\n        )\n        \n        self.conv1 = Conv_block(512,[256,256,1024])\n        self.loop_identity = Identity_block(1024,[256,256,1024])\n        self.model4 = nn.Sequential(\n            Conv_block(1024,[512,512,2048]),\n            Identity_block(2048,[512,512,2048]),\n            Identity_block(2048,[512,512,2048])\n        )\n        \n        self.avgpool = nn.AdaptiveMaxPool2d(1)\n        self.model5 = nn.Sequential(\n            nn.Linear(2048,1024),\n            nn.Dropout(0.5),\n            nn.ReLU(),\n            nn.Linear(1024,num_classes)\n        )\n    def forward(self,x):\n        c1 = x = self.model1(x)\n        c2 = x = self.model2(x)\n        c3 = x = self.model3(x)\n        x = self.conv1(x)\n        for i in range(22):\n            x = self.loop_identity(x)\n        c4 = x\n        c5 = x = self.model4(x)\n        x = self.avgpool(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.model5(x)\n        return c1,c2,c3,c4,c5,x\n\n```\n针对重新构建的代码，读者可自行对照前文的代码，感受不同框架之间的差异和优缺点。\n为了方便读者自行测试代码，一下给出一些简易的测试代码，有助于读者了解输出输入的方式\n```python\nnet = ResNet101(num_classes=10) # net = VGG16(num_classes=10)\ninput = torch.randn(1,3,224,224)\nout = net(input)\nprint(net)\nprint(out[4].shape)\n\n```","slug":"feature_extractor/VGG&ResNet","published":1,"updated":"2021-05-21T07:33:02.366Z","_id":"ckocmy3x00000ysuo473r3730","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习神经网络特征提取（五）\"><a href=\"#深度学习神经网络特征提取（五）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（五）\"></a>深度学习神经网络特征提取（五）</h2><p>本文接续前文提到的主干特征提取网络，前文的网络构建主要是基于<code>keras</code>框架构建的，而在深度学习领域<code>pytorch</code>是当前最流行的框架，且深受顶会论文学者的喜爱。因此，在前文已经给出的<code>keras</code>代码的基础上，从这篇文章开始会针对前文网络重新用<code>pytorch</code>构建。</p>\n<p>再次给出<code>pytorch</code>代码，还需要注意的是：不同于<code>keras</code>，<code>pytorch</code>输入的shape=（3，224，224），通道数在前。关于网络的讲解部分，大家参考前期的文章<a href=\"http://fanrencli.cn/2021/04/18/feature-extractor/vgg/\">VGG</a>、<a href=\"http://fanrencli.cn/2021/04/18/feature-extractor/resnet/\">Resnet</a></p>\n<h3 id=\"VGG16\"><a href=\"#VGG16\" class=\"headerlink\" title=\"VGG16\"></a>VGG16</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">VGG16</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>VGG16<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">#input_shape(3,224,224)</span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv5 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu5 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv6 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu6 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv7 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu7 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv8 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu8 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv9 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu9 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv10 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu10 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv11 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu11 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv12 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu12 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv13 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu13 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool5 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>linear1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token operator\">*</span><span class=\"token number\">7</span><span class=\"token operator\">*</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu14 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dropout1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>linear2<span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu15 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dropout2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>linear3<span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv5<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu5<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv6<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu6<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv7<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu7<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv8<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu8<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv9<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu9<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv10<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu10<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv11<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu11<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv12<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu12<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv13<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu13<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool5<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>linear1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu14<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dropout1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>linear2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu15<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dropout2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>linear3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<h3 id=\"ResNet101\"><a href=\"#ResNet101\" class=\"headerlink\" title=\"ResNet101\"></a>ResNet101</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Conv_block</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Conv_block<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> stride<span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias <span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias <span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span>stride<span class=\"token punctuation\">,</span>bias <span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>relu3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        shortcut <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        shortcut <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv4<span class=\"token punctuation\">(</span>shortcut<span class=\"token punctuation\">)</span>\n        shortcut <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch4<span class=\"token punctuation\">(</span>shortcut<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">+=</span>shortcut\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Identity_block</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Identity_block<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>relu3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        shortcut <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">+=</span>shortcut\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ResNet101</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>ResNet101<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            Conv_block<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            Conv_block<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> Conv_block<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>loop_identity <span class=\"token operator\">=</span> Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            Conv_block<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>avgpool <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveMaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model5 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        c1 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        c2 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        c3 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>loop_identity<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        c4 <span class=\"token operator\">=</span> x\n        c5 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>avgpool<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model5<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> c1<span class=\"token punctuation\">,</span>c2<span class=\"token punctuation\">,</span>c3<span class=\"token punctuation\">,</span>c4<span class=\"token punctuation\">,</span>c5<span class=\"token punctuation\">,</span>x\n</code></pre>\n<p>针对重新构建的代码，读者可自行对照前文的代码，感受不同框架之间的差异和优缺点。<br>为了方便读者自行测试代码，一下给出一些简易的测试代码，有助于读者了解输出输入的方式</p>\n<pre class=\" language-python\"><code class=\"language-python\">net <span class=\"token operator\">=</span> ResNet101<span class=\"token punctuation\">(</span>num_classes<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># net = VGG16(num_classes=10)</span>\ninput <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">)</span>\nout <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习神经网络特征提取（五）\"><a href=\"#深度学习神经网络特征提取（五）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（五）\"></a>深度学习神经网络特征提取（五）</h2><p>本文接续前文提到的主干特征提取网络，前文的网络构建主要是基于<code>keras</code>框架构建的，而在深度学习领域<code>pytorch</code>是当前最流行的框架，且深受顶会论文学者的喜爱。因此，在前文已经给出的<code>keras</code>代码的基础上，从这篇文章开始会针对前文网络重新用<code>pytorch</code>构建。</p>\n<p>再次给出<code>pytorch</code>代码，还需要注意的是：不同于<code>keras</code>，<code>pytorch</code>输入的shape=（3，224，224），通道数在前。关于网络的讲解部分，大家参考前期的文章<a href=\"http://fanrencli.cn/2021/04/18/feature-extractor/vgg/\">VGG</a>、<a href=\"http://fanrencli.cn/2021/04/18/feature-extractor/resnet/\">Resnet</a></p>\n<h3 id=\"VGG16\"><a href=\"#VGG16\" class=\"headerlink\" title=\"VGG16\"></a>VGG16</h3><pre><code class=\"python\">class VGG16(nn.Module):\n    def __init__(self,num_classes):\n        super(VGG16,self).__init__()\n        #input_shape(3,224,224)\n        self.conv1 = nn.Conv2d(3,64,kernel_size=3,padding =1,stride=1)\n        self.relu1 = nn.ReLU()\n        self.conv2 = nn.Conv2d(64,64,kernel_size=3,padding =1,stride=1)\n        self.relu2 = nn.ReLU()\n        self.maxpool1 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv3 = nn.Conv2d(64,128,kernel_size=3,padding =1,stride=1)\n        self.relu3 = nn.ReLU()\n        self.conv4 = nn.Conv2d(128,128,kernel_size=3,padding =1,stride=1)\n        self.relu4 = nn.ReLU()\n        self.maxpool2 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv5 = nn.Conv2d(128,256,kernel_size=3,padding =1,stride=1)\n        self.relu5 = nn.ReLU()\n        self.conv6 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu6 = nn.ReLU()\n        self.conv7 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu7 = nn.ReLU()\n        self.maxpool3 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv8 = nn.Conv2d(256,512,kernel_size=3,padding =1,stride=1)\n        self.relu8 = nn.ReLU()\n        self.conv9 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu9 = nn.ReLU()\n        self.conv10 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu10 = nn.ReLU()\n        self.maxpool4 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv11 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu11 = nn.ReLU()\n        self.conv12 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu12 = nn.ReLU()\n        self.conv13 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu13 = nn.ReLU()\n        self.maxpool5 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.linear1 = nn.Linear(512*7*7,4096)\n        self.relu14 = nn.ReLU()\n        self.dropout1 = nn.Dropout(0.5)\n        self.linear2= nn.Linear(4096,4096)\n        self.relu15 = nn.ReLU()\n        self.dropout2 = nn.Dropout(0.5)\n        self.linear3= nn.Linear(4096,num_classes)\n    def forward(self,x):\n        x = self.conv1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.relu2(x)\n        x = self.maxpool1(x)\n        x = self.conv3(x)\n        x = self.relu3(x)\n        x = self.conv4(x)\n        x = self.relu4(x)\n        x = self.maxpool2(x)\n\n        x = self.conv5(x)\n        x = self.relu5(x)\n        x = self.conv6(x)\n        x = self.relu6(x)\n        x = self.conv7(x)\n        x = self.relu7(x)\n        x = self.maxpool3(x)\n\n        x = self.conv8(x)\n        x = self.relu8(x)\n        x = self.conv9(x)\n        x = self.relu9(x)\n        x = self.conv10(x)\n        x = self.relu10(x)\n        x = self.maxpool4(x)\n\n        x = self.conv11(x)\n        x = self.relu11(x)\n        x = self.conv12(x)\n        x = self.relu12(x)\n        x = self.conv13(x)\n        x = self.relu13(x)\n        x = self.maxpool5(x)\n\n        x = x.view(x.size(0),x.size(1))\n        x = self.linear1(x)\n        x = self.relu14(x)\n        x = self.dropout1(x)\n        x = self.linear2(x)\n        x = self.relu15(x)\n        x = self.dropout2(x)\n        x =self.linear3(x)\n        return x</code></pre>\n<h3 id=\"ResNet101\"><a href=\"#ResNet101\" class=\"headerlink\" title=\"ResNet101\"></a>ResNet101</h3><pre><code class=\"python\">class Conv_block(nn.Module):\n    def __init__(self,input_channel,filters,stride=2):\n        super(Conv_block,self).__init__()\n        self.conv1 = nn.Conv2d(input_channel,filters[0],kernel_size=1,stride = stride,bias=True)\n        self.batch1 = nn.BatchNorm2d(filters[0])\n        self.relu1 = nn.ReLU()\n\n        self.conv2 = nn.Conv2d(filters[0],filters[1],kernel_size=3,stride=1,padding =1,bias =True)\n        self.batch2 = nn.BatchNorm2d(filters[1])\n        self.relu2 = nn.ReLU()\n\n        self.conv3 = nn.Conv2d(filters[1],filters[2],kernel_size=1,stride=1,bias =True)\n        self.batch3 = nn.BatchNorm2d(filters[2])\n\n        self.conv4 = nn.Conv2d(input_channel,filters[2],kernel_size=1,stride=stride,bias =True)\n        self.batch4 = nn.BatchNorm2d(filters[2])\n\n        self.relu3 = nn.ReLU()\n    def forward(self,x):\n        shortcut = x\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        x = self.conv3(x)\n        x = self.batch3(x)\n        shortcut = self.conv4(shortcut)\n        shortcut = self.batch4(shortcut)\n        x +=shortcut\n        x = self.relu3(x)\n        return x</code></pre>\n<pre><code class=\"python\">class Identity_block(nn.Module):\n    def __init__(self,input_channel,filters):\n        super(Identity_block,self).__init__()\n        self.conv1 = nn.Conv2d(input_channel,filters[0],kernel_size=1,stride=1,bias=True)\n        self.batch1 = nn.BatchNorm2d(filters[0])\n        self.relu1 = nn.ReLU()\n\n        self.conv2 = nn.Conv2d(filters[0],filters[1],kernel_size=3,padding=1,stride=1,bias=True)\n        self.batch2 = nn.BatchNorm2d(filters[1])\n        self.relu2 = nn.ReLU()\n\n        self.conv3 = nn.Conv2d(filters[1],filters[2],kernel_size=1,stride=1,bias=True)\n        self.batch3 = nn.BatchNorm2d(filters[2])\n\n        self.relu3 = nn.ReLU()\n\n    def forward(self,x):\n        shortcut = x\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        x = self.conv3(x)\n        x = self.batch3(x)\n        x +=shortcut\n        x = self.relu3(x)\n        return x</code></pre>\n<pre><code class=\"python\">class ResNet101(nn.Module):\n    def __init__(self,num_classes):\n        super(ResNet101,self).__init__()\n        self.model1 = nn.Sequential(\n            nn.Conv2d(3,64,kernel_size=7,padding=3,stride=2,bias=True),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=3,stride=2,padding=1)\n\n        )\n        self.model2 = nn.Sequential(\n            Conv_block(64,[64,64,256],stride=1),\n            Identity_block(256,[64,64,256]),\n            Identity_block(256,[64,64,256])\n        )\n        self.model3 = nn.Sequential(\n            Conv_block(256,[128,128,512]),\n            Identity_block(512,[128,128,512]),\n            Identity_block(512,[128,128,512]),\n            Identity_block(512,[128,128,512])\n        )\n\n        self.conv1 = Conv_block(512,[256,256,1024])\n        self.loop_identity = Identity_block(1024,[256,256,1024])\n        self.model4 = nn.Sequential(\n            Conv_block(1024,[512,512,2048]),\n            Identity_block(2048,[512,512,2048]),\n            Identity_block(2048,[512,512,2048])\n        )\n\n        self.avgpool = nn.AdaptiveMaxPool2d(1)\n        self.model5 = nn.Sequential(\n            nn.Linear(2048,1024),\n            nn.Dropout(0.5),\n            nn.ReLU(),\n            nn.Linear(1024,num_classes)\n        )\n    def forward(self,x):\n        c1 = x = self.model1(x)\n        c2 = x = self.model2(x)\n        c3 = x = self.model3(x)\n        x = self.conv1(x)\n        for i in range(22):\n            x = self.loop_identity(x)\n        c4 = x\n        c5 = x = self.model4(x)\n        x = self.avgpool(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.model5(x)\n        return c1,c2,c3,c4,c5,x\n</code></pre>\n<p>针对重新构建的代码，读者可自行对照前文的代码，感受不同框架之间的差异和优缺点。<br>为了方便读者自行测试代码，一下给出一些简易的测试代码，有助于读者了解输出输入的方式</p>\n<pre><code class=\"python\">net = ResNet101(num_classes=10) # net = VGG16(num_classes=10)\ninput = torch.randn(1,3,224,224)\nout = net(input)\nprint(net)\nprint(out[4].shape)\n</code></pre>\n"},{"title":"Mobilnet(pytorch)","date":"2021-05-08T01:46:42.000Z","author":"Fanrencli","_content":"## 深度学习神经网络特征提取（六）\n\n本次文章给出`MobileNet`的`Pytorch`版本的代码。关于网络的讲解部分，大家参考前期的[文章](http://fanrencli.cn/2021/04/20/feature-extractor/mobilenet/)\n\n### MobileNetv1\n```python\nclass DepthwiseSeparabel(nn.Module):\n    def __init__(self,input_channel,output,stride=1):\n        super(DepthwiseSeparabel,self).__init__()\n        self.depth_wise = nn.Conv2d(input_channel,input_channel,kernel_size=3, stride = stride, padding =1,groups = input_channel)\n        self.batch1 = nn.BatchNorm2d(input_channel)\n        self.relu1 = nn.ReLU6(inplace = True)\n        self.separable = nn.Conv2d(input_channel,output,kernel_size=1,stride = 1)\n        self.batch2 = nn.BatchNorm2d(output)\n        self.relu2  = nn.ReLU6(inplace = True)\n    def forward(self,x):\n        x = self.depth_wise(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.separable(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        return x\n\n```\n```python\nclass MobileNetv1(nn.Module):\n    def __init__(self,num_classes):\n        super(MobileNetv1,self).__init__()\n        self.model = nn.Sequential(\n            nn.Conv2d(3,32,kernel_size=3,stride = 2,padding =1),\n            nn.BatchNorm2d(32),\n            nn.ReLU6(inplace=True),\n            DepthwiseSeparabel(32,64),\n            DepthwiseSeparabel(64,128,2),\n            DepthwiseSeparabel(128,128),\n            DepthwiseSeparabel(128,256,2),\n            DepthwiseSeparabel(256,256),\n            DepthwiseSeparabel(256,512,2),\n            DepthwiseSeparabel(512,512),\n            DepthwiseSeparabel(512,512),\n            DepthwiseSeparabel(512,512),\n            DepthwiseSeparabel(512,512),\n            DepthwiseSeparabel(512,512),\n            DepthwiseSeparabel(512,1024,2),\n            DepthwiseSeparabel(1024,1024),\n        )\n        self.avg = nn.AdaptiveMaxPool2d(1)\n\n        self.drop1 = nn.Dropout(0.5)\n        self.linear1 = nn.Linear(1024,num_classes)\n    def forward(self,x):\n        x = self.model(x)\n        x = self.avg(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.drop1(x)\n        x = self.linear1(x)\n        return x\n\n```\n\n### MobileNetv2\n```python\nclass DepthwiseSeparabel(nn.Module):\n    def __init__(self,input_channel,output,stride=1):\n        super(DepthwiseSeparabel,self).__init__()\n        self.depth_wise = nn.Conv2d(input_channel,input_channel,kernel_size=3, stride = stride, padding =1,groups = input_channel)\n        self.batch1 = nn.BatchNorm2d(input_channel)\n        self.relu1 = nn.ReLU6(inplace = True)\n        self.separable = nn.Conv2d(input_channel,output,kernel_size=1,stride = 1)\n        self.batch2 = nn.BatchNorm2d(output)\n    def forward(self,x):\n        x = self.depth_wise(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.separable(x)\n        x = self.batch2(x)\n        return x\n```\n```python\nclass inverted_res_block(nn.Module):\n    def __init__(self,input_channel,output,stride,expansion,first_inverted_res_block = False):\n        super(inverted_res_block,self).__init__()\n        if not first_inverted_res_block:\n            self.model = nn.Sequential(\n                nn.Conv2d(input_channel,expansion*input_channel,kernel_size=1,stride = 1),\n                nn.BatchNorm2d(expansion*input_channel),\n                nn.ReLU6()\n            )\n        else:\n            self.model = nn.Sequential()\n        self.depth_wise_separable = DepthwiseSeparabel(input_channel*expansion,output,stride = stride)\n    def forward(self,x):\n        input_data = x\n        x = self.model(x)\n        x = self.depth_wise_separable(x)\n        if x.shape == input_data.shape:\n            x += input_data\n        return x\n```\n```python \nclass MobileNetv2(nn.Module):\n    def __init__(self,num_classes):\n        super(MobileNetv2,self).__init__()\n        # input = [3,224,224]\n        self.model = nn.Sequential(\n            nn.Conv2d(3,32,kernel_size=3, padding=1, stride=2),\n            nn.BatchNorm2d(32),\n            nn.ReLU6(),\n            inverted_res_block(32,16,1,1,True),\n            inverted_res_block(16,24,2,6),\n            inverted_res_block(24,24,1,6),\n            inverted_res_block(24,32,2,6),\n            inverted_res_block(32,32,1,6),\n            inverted_res_block(32,32,1,6),\n            inverted_res_block(32,64,2,6),\n            inverted_res_block(64,64,1,6),\n            inverted_res_block(64,64,1,6),\n            inverted_res_block(64,64,1,6),\n            inverted_res_block(64,96,2,6),\n            inverted_res_block(96,96,1,6),\n            inverted_res_block(96,96,1,6),\n            inverted_res_block(96,160,2,6),\n            inverted_res_block(160,160,1,6),\n            inverted_res_block(160,160,1,6),\n            inverted_res_block(160,320,1,6),\n            nn.Conv2d(320,1280,kernel_size=1, stride=1),\n            nn.BatchNorm2d(1280),\n            nn.ReLU6(), \n            nn.AdaptiveAvgPool2d(1),\n        )\n        self.fc = nn.Linear(1280,num_classes)\n    def forward(self,x):\n        x = self.model(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.fc(x)\n        return x\n```\n\n### MobileNetv3\n\n```python \nclass hard_swish(nn.Module):\n    def __init__(self,inplace=True):\n        super(hard_swish,self).__init__()\n        self.relu = nn.ReLU6(inplace=inplace)\n    def forward(self,x):\n        x = x*self.relu(x+3.)/6.\n        return x\n```\n```python\nclass squeeze(nn.Module):\n    def __init__(self,up_dim):\n        super(squeeze,self).__init__()\n        self.avg = nn.AdaptiveAvgPool2d(1)\n        self.model = nn.Sequential(\n            nn.Linear(up_dim,up_dim//4),\n            nn.ReLU6(inplace=True),\n            nn.Linear(up_dim//4,up_dim),\n            hard_swish(inplace=True)\n        )\n    def forward(self,x):\n        input_data = x\n        x = self.avg(x)\n        x = x.view(input_data.size(0),input_data.size(1))\n        x = self.model(x)\n        x = x.view(input_data.size(0),input_data.size(1),1,1)\n        return torch.mul(input_data,x)\n```\n```python\nclass bottleneck(nn.Module):\n    def __init__(self,input_channel,output,kernel_size,stride,up_dim,sq,activation_fun):\n        super(bottleneck,self).__init__()\n        self.conv1 = nn.Conv2d(input_channel,up_dim,kernel_size=1,stride=1)\n        self.batch1 = nn.BatchNorm2d(up_dim)\n        self.act_fun1 = hard_swish(inplace=True) if activation_fun == 'HS' else nn.ReLU6(inplace=True)\n        self.depth_wise = nn.Conv2d(up_dim,up_dim,kernel_size=kernel_size, stride = stride, padding =(kernel_size-1)//2,groups = up_dim)\n        self.batch2 = nn.BatchNorm2d(up_dim)\n        self.act_fun2 = hard_swish(inplace=True) if activation_fun == 'HS' else nn.ReLU6(inplace=True)\n        self.squeeze = nn.Sequential()\n        if sq:\n            self.squeeze = squeeze(up_dim)\n        self.conv2 = nn.Conv2d(up_dim,output,kernel_size=1,stride = 1)\n        self.batch3 = nn.BatchNorm2d(output)\n    def forward(self,x):\n        input_data = x\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.act_fun1(x)\n        x = self.depth_wise(x)\n        x = self.batch2(x)\n        x = self.act_fun2(x)\n        x = self.squeeze(x)\n        x = self.conv2(x)\n        x = self.batch3(x)\n        if x.shape == input_data.shape:\n            x +=input_data\n        return x\n```\n```python\nclass MobileNetv3_small(nn.Module):\n    def __init__(self,num_classes):\n        super(MobileNetv3_small,self).__init__()\n        self.model = nn.Sequential(\n            nn.Conv2d(3,16,kernel_size=3,stride=2,padding=1),\n            nn.BatchNorm2d(16),\n            hard_swish(inplace=True),\n            #16,112,112 ->16,56,56\n            bottleneck(input_channel=16,output=16,kernel_size=3,stride=2,up_dim=16,sq=True,activation_fun='RE'),\n            #16,56,56->24,28,28\n            bottleneck(input_channel=16,output=24,kernel_size=3,stride=2,up_dim=72,sq=False,activation_fun='RE'),\n            bottleneck(input_channel=24,output=24,kernel_size=3,stride=1,up_dim=88,sq=False,activation_fun='RE'),\n            #24,28,28->40,14,14\n            bottleneck(input_channel=24,output=40,kernel_size=5,stride=2,up_dim=96,sq=True,activation_fun='HS'),\n            bottleneck(input_channel=40,output=40,kernel_size=5,stride=1,up_dim=240,sq=True,activation_fun='HS'),\n            bottleneck(input_channel=40,output=40,kernel_size=5,stride=1,up_dim=240,sq=True,activation_fun='HS'),\n            #40,14,14->48,14,14\n            bottleneck(input_channel=40,output=48,kernel_size=5,stride=1,up_dim=120,sq=True,activation_fun='HS'),\n            bottleneck(input_channel=48,output=48,kernel_size=5,stride=1,up_dim=144,sq=True,activation_fun='HS'),\n            #48,14,14->96,7,7\n            bottleneck(input_channel=48,output=96,kernel_size=5,stride=2,up_dim=288,sq=True,activation_fun='HS'),\n            bottleneck(input_channel=96,output=96,kernel_size=5,stride=1,up_dim=576,sq=True,activation_fun='HS'),\n            bottleneck(input_channel=96,output=96,kernel_size=5,stride=1,up_dim=576,sq=True,activation_fun='HS'),\n            nn.Conv2d(96,576,kernel_size=1,stride=1),\n            nn.BatchNorm2d(576),\n            hard_swish(inplace=True),\n            nn.AdaptiveAvgPool2d(1)\n        )\n        self.linear1 = nn.Linear(576,1024)\n        self.act_fun1 = hard_swish(inplace=True)\n        self.linear2 = nn.Linear(1024,num_classes)\n    def forward(self,x):\n        x = self.model(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.linear1(x)\n        x = self.act_fun1(x)\n        x = self.linear2(x)\n        return x\n```\n至此，`MobileNet`网络的pytorch版本全部更新。\n对了，如果有读者想要看一下网络结构的细节部分，此处提供一下代码，此处代码可以进行适当修改，无缝链接到其他文章中的网络。\n```python\nnet = MobileNet(10)\nnet.to(torch.device('cuda'))\ninput = torch.randn(10,3,224,224)\nout = net(input)\n#网络结构\nprint(net)\n#输出参数\nprint(out.shape)\n#网络细节\nsummary(net,(3,299,299))\n```","source":"_posts/feature_extractor/mobilnet(pytorch).md","raw":"---\ntitle: Mobilnet(pytorch)\ndate: 2021-05-08 09:46:42\ncategories: \n- Deep Learning\ntags:\n- Pytorch\n- MobileNet\nauthor: Fanrencli\n---\n## 深度学习神经网络特征提取（六）\n\n本次文章给出`MobileNet`的`Pytorch`版本的代码。关于网络的讲解部分，大家参考前期的[文章](http://fanrencli.cn/2021/04/20/feature-extractor/mobilenet/)\n\n### MobileNetv1\n```python\nclass DepthwiseSeparabel(nn.Module):\n    def __init__(self,input_channel,output,stride=1):\n        super(DepthwiseSeparabel,self).__init__()\n        self.depth_wise = nn.Conv2d(input_channel,input_channel,kernel_size=3, stride = stride, padding =1,groups = input_channel)\n        self.batch1 = nn.BatchNorm2d(input_channel)\n        self.relu1 = nn.ReLU6(inplace = True)\n        self.separable = nn.Conv2d(input_channel,output,kernel_size=1,stride = 1)\n        self.batch2 = nn.BatchNorm2d(output)\n        self.relu2  = nn.ReLU6(inplace = True)\n    def forward(self,x):\n        x = self.depth_wise(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.separable(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        return x\n\n```\n```python\nclass MobileNetv1(nn.Module):\n    def __init__(self,num_classes):\n        super(MobileNetv1,self).__init__()\n        self.model = nn.Sequential(\n            nn.Conv2d(3,32,kernel_size=3,stride = 2,padding =1),\n            nn.BatchNorm2d(32),\n            nn.ReLU6(inplace=True),\n            DepthwiseSeparabel(32,64),\n            DepthwiseSeparabel(64,128,2),\n            DepthwiseSeparabel(128,128),\n            DepthwiseSeparabel(128,256,2),\n            DepthwiseSeparabel(256,256),\n            DepthwiseSeparabel(256,512,2),\n            DepthwiseSeparabel(512,512),\n            DepthwiseSeparabel(512,512),\n            DepthwiseSeparabel(512,512),\n            DepthwiseSeparabel(512,512),\n            DepthwiseSeparabel(512,512),\n            DepthwiseSeparabel(512,1024,2),\n            DepthwiseSeparabel(1024,1024),\n        )\n        self.avg = nn.AdaptiveMaxPool2d(1)\n\n        self.drop1 = nn.Dropout(0.5)\n        self.linear1 = nn.Linear(1024,num_classes)\n    def forward(self,x):\n        x = self.model(x)\n        x = self.avg(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.drop1(x)\n        x = self.linear1(x)\n        return x\n\n```\n\n### MobileNetv2\n```python\nclass DepthwiseSeparabel(nn.Module):\n    def __init__(self,input_channel,output,stride=1):\n        super(DepthwiseSeparabel,self).__init__()\n        self.depth_wise = nn.Conv2d(input_channel,input_channel,kernel_size=3, stride = stride, padding =1,groups = input_channel)\n        self.batch1 = nn.BatchNorm2d(input_channel)\n        self.relu1 = nn.ReLU6(inplace = True)\n        self.separable = nn.Conv2d(input_channel,output,kernel_size=1,stride = 1)\n        self.batch2 = nn.BatchNorm2d(output)\n    def forward(self,x):\n        x = self.depth_wise(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.separable(x)\n        x = self.batch2(x)\n        return x\n```\n```python\nclass inverted_res_block(nn.Module):\n    def __init__(self,input_channel,output,stride,expansion,first_inverted_res_block = False):\n        super(inverted_res_block,self).__init__()\n        if not first_inverted_res_block:\n            self.model = nn.Sequential(\n                nn.Conv2d(input_channel,expansion*input_channel,kernel_size=1,stride = 1),\n                nn.BatchNorm2d(expansion*input_channel),\n                nn.ReLU6()\n            )\n        else:\n            self.model = nn.Sequential()\n        self.depth_wise_separable = DepthwiseSeparabel(input_channel*expansion,output,stride = stride)\n    def forward(self,x):\n        input_data = x\n        x = self.model(x)\n        x = self.depth_wise_separable(x)\n        if x.shape == input_data.shape:\n            x += input_data\n        return x\n```\n```python \nclass MobileNetv2(nn.Module):\n    def __init__(self,num_classes):\n        super(MobileNetv2,self).__init__()\n        # input = [3,224,224]\n        self.model = nn.Sequential(\n            nn.Conv2d(3,32,kernel_size=3, padding=1, stride=2),\n            nn.BatchNorm2d(32),\n            nn.ReLU6(),\n            inverted_res_block(32,16,1,1,True),\n            inverted_res_block(16,24,2,6),\n            inverted_res_block(24,24,1,6),\n            inverted_res_block(24,32,2,6),\n            inverted_res_block(32,32,1,6),\n            inverted_res_block(32,32,1,6),\n            inverted_res_block(32,64,2,6),\n            inverted_res_block(64,64,1,6),\n            inverted_res_block(64,64,1,6),\n            inverted_res_block(64,64,1,6),\n            inverted_res_block(64,96,2,6),\n            inverted_res_block(96,96,1,6),\n            inverted_res_block(96,96,1,6),\n            inverted_res_block(96,160,2,6),\n            inverted_res_block(160,160,1,6),\n            inverted_res_block(160,160,1,6),\n            inverted_res_block(160,320,1,6),\n            nn.Conv2d(320,1280,kernel_size=1, stride=1),\n            nn.BatchNorm2d(1280),\n            nn.ReLU6(), \n            nn.AdaptiveAvgPool2d(1),\n        )\n        self.fc = nn.Linear(1280,num_classes)\n    def forward(self,x):\n        x = self.model(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.fc(x)\n        return x\n```\n\n### MobileNetv3\n\n```python \nclass hard_swish(nn.Module):\n    def __init__(self,inplace=True):\n        super(hard_swish,self).__init__()\n        self.relu = nn.ReLU6(inplace=inplace)\n    def forward(self,x):\n        x = x*self.relu(x+3.)/6.\n        return x\n```\n```python\nclass squeeze(nn.Module):\n    def __init__(self,up_dim):\n        super(squeeze,self).__init__()\n        self.avg = nn.AdaptiveAvgPool2d(1)\n        self.model = nn.Sequential(\n            nn.Linear(up_dim,up_dim//4),\n            nn.ReLU6(inplace=True),\n            nn.Linear(up_dim//4,up_dim),\n            hard_swish(inplace=True)\n        )\n    def forward(self,x):\n        input_data = x\n        x = self.avg(x)\n        x = x.view(input_data.size(0),input_data.size(1))\n        x = self.model(x)\n        x = x.view(input_data.size(0),input_data.size(1),1,1)\n        return torch.mul(input_data,x)\n```\n```python\nclass bottleneck(nn.Module):\n    def __init__(self,input_channel,output,kernel_size,stride,up_dim,sq,activation_fun):\n        super(bottleneck,self).__init__()\n        self.conv1 = nn.Conv2d(input_channel,up_dim,kernel_size=1,stride=1)\n        self.batch1 = nn.BatchNorm2d(up_dim)\n        self.act_fun1 = hard_swish(inplace=True) if activation_fun == 'HS' else nn.ReLU6(inplace=True)\n        self.depth_wise = nn.Conv2d(up_dim,up_dim,kernel_size=kernel_size, stride = stride, padding =(kernel_size-1)//2,groups = up_dim)\n        self.batch2 = nn.BatchNorm2d(up_dim)\n        self.act_fun2 = hard_swish(inplace=True) if activation_fun == 'HS' else nn.ReLU6(inplace=True)\n        self.squeeze = nn.Sequential()\n        if sq:\n            self.squeeze = squeeze(up_dim)\n        self.conv2 = nn.Conv2d(up_dim,output,kernel_size=1,stride = 1)\n        self.batch3 = nn.BatchNorm2d(output)\n    def forward(self,x):\n        input_data = x\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.act_fun1(x)\n        x = self.depth_wise(x)\n        x = self.batch2(x)\n        x = self.act_fun2(x)\n        x = self.squeeze(x)\n        x = self.conv2(x)\n        x = self.batch3(x)\n        if x.shape == input_data.shape:\n            x +=input_data\n        return x\n```\n```python\nclass MobileNetv3_small(nn.Module):\n    def __init__(self,num_classes):\n        super(MobileNetv3_small,self).__init__()\n        self.model = nn.Sequential(\n            nn.Conv2d(3,16,kernel_size=3,stride=2,padding=1),\n            nn.BatchNorm2d(16),\n            hard_swish(inplace=True),\n            #16,112,112 ->16,56,56\n            bottleneck(input_channel=16,output=16,kernel_size=3,stride=2,up_dim=16,sq=True,activation_fun='RE'),\n            #16,56,56->24,28,28\n            bottleneck(input_channel=16,output=24,kernel_size=3,stride=2,up_dim=72,sq=False,activation_fun='RE'),\n            bottleneck(input_channel=24,output=24,kernel_size=3,stride=1,up_dim=88,sq=False,activation_fun='RE'),\n            #24,28,28->40,14,14\n            bottleneck(input_channel=24,output=40,kernel_size=5,stride=2,up_dim=96,sq=True,activation_fun='HS'),\n            bottleneck(input_channel=40,output=40,kernel_size=5,stride=1,up_dim=240,sq=True,activation_fun='HS'),\n            bottleneck(input_channel=40,output=40,kernel_size=5,stride=1,up_dim=240,sq=True,activation_fun='HS'),\n            #40,14,14->48,14,14\n            bottleneck(input_channel=40,output=48,kernel_size=5,stride=1,up_dim=120,sq=True,activation_fun='HS'),\n            bottleneck(input_channel=48,output=48,kernel_size=5,stride=1,up_dim=144,sq=True,activation_fun='HS'),\n            #48,14,14->96,7,7\n            bottleneck(input_channel=48,output=96,kernel_size=5,stride=2,up_dim=288,sq=True,activation_fun='HS'),\n            bottleneck(input_channel=96,output=96,kernel_size=5,stride=1,up_dim=576,sq=True,activation_fun='HS'),\n            bottleneck(input_channel=96,output=96,kernel_size=5,stride=1,up_dim=576,sq=True,activation_fun='HS'),\n            nn.Conv2d(96,576,kernel_size=1,stride=1),\n            nn.BatchNorm2d(576),\n            hard_swish(inplace=True),\n            nn.AdaptiveAvgPool2d(1)\n        )\n        self.linear1 = nn.Linear(576,1024)\n        self.act_fun1 = hard_swish(inplace=True)\n        self.linear2 = nn.Linear(1024,num_classes)\n    def forward(self,x):\n        x = self.model(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.linear1(x)\n        x = self.act_fun1(x)\n        x = self.linear2(x)\n        return x\n```\n至此，`MobileNet`网络的pytorch版本全部更新。\n对了，如果有读者想要看一下网络结构的细节部分，此处提供一下代码，此处代码可以进行适当修改，无缝链接到其他文章中的网络。\n```python\nnet = MobileNet(10)\nnet.to(torch.device('cuda'))\ninput = torch.randn(10,3,224,224)\nout = net(input)\n#网络结构\nprint(net)\n#输出参数\nprint(out.shape)\n#网络细节\nsummary(net,(3,299,299))\n```","slug":"feature_extractor/mobilnet(pytorch)","published":1,"updated":"2021-05-21T07:33:24.009Z","_id":"ckoffod350000m8uofa2u4cn0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习神经网络特征提取（六）\"><a href=\"#深度学习神经网络特征提取（六）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（六）\"></a>深度学习神经网络特征提取（六）</h2><p>本次文章给出<code>MobileNet</code>的<code>Pytorch</code>版本的代码。关于网络的讲解部分，大家参考前期的<a href=\"http://fanrencli.cn/2021/04/20/feature-extractor/mobilenet/\">文章</a></p>\n<h3 id=\"MobileNetv1\"><a href=\"#MobileNetv1\" class=\"headerlink\" title=\"MobileNetv1\"></a>MobileNetv1</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DepthwiseSeparabel</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>DepthwiseSeparabel<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>depth_wise <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride <span class=\"token operator\">=</span> stride<span class=\"token punctuation\">,</span> padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span> input_channel<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU6<span class=\"token punctuation\">(</span>inplace <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>separable <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu2  <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU6<span class=\"token punctuation\">(</span>inplace <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>depth_wise<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>separable<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x\n</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MobileNetv1</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>MobileNetv1<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU6<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>avg <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveMaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>drop1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>linear1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>avg<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>drop1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>linear1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x\n</code></pre>\n<h3 id=\"MobileNetv2\"><a href=\"#MobileNetv2\" class=\"headerlink\" title=\"MobileNetv2\"></a>MobileNetv2</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DepthwiseSeparabel</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>DepthwiseSeparabel<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>depth_wise <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride <span class=\"token operator\">=</span> stride<span class=\"token punctuation\">,</span> padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span> input_channel<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU6<span class=\"token punctuation\">(</span>inplace <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>separable <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>depth_wise<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>separable<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">inverted_res_block</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">,</span>stride<span class=\"token punctuation\">,</span>expansion<span class=\"token punctuation\">,</span>first_inverted_res_block <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>inverted_res_block<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> first_inverted_res_block<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n                nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>expansion<span class=\"token operator\">*</span>input_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>expansion<span class=\"token operator\">*</span>input_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                nn<span class=\"token punctuation\">.</span>ReLU6<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>depth_wise_separable <span class=\"token operator\">=</span> DepthwiseSeparabel<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">*</span>expansion<span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> stride<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        input_data <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>depth_wise_separable<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">==</span> input_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">:</span>\n            x <span class=\"token operator\">+=</span> input_data\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MobileNetv2</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>MobileNetv2<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># input = [3,224,224]</span>\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU6<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            inverted_res_block<span class=\"token punctuation\">(</span><span class=\"token number\">160</span><span class=\"token punctuation\">,</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span><span class=\"token number\">1280</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">1280</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU6<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n            nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>fc <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">1280</span><span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<h3 id=\"MobileNetv3\"><a href=\"#MobileNetv3\" class=\"headerlink\" title=\"MobileNetv3\"></a>MobileNetv3</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">hard_swish</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>hard_swish<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU6<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span>inplace<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span>self<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">6</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">squeeze</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>up_dim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>squeeze<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>avg <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>up_dim<span class=\"token punctuation\">,</span>up_dim<span class=\"token operator\">//</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU6<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>up_dim<span class=\"token operator\">//</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>up_dim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            hard_swish<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        input_data <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>avg<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>input_data<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>input_data<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>input_data<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>input_data<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> torch<span class=\"token punctuation\">.</span>mul<span class=\"token punctuation\">(</span>input_data<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span></code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">bottleneck</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">,</span>kernel_size<span class=\"token punctuation\">,</span>stride<span class=\"token punctuation\">,</span>up_dim<span class=\"token punctuation\">,</span>sq<span class=\"token punctuation\">,</span>activation_fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>bottleneck<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>up_dim<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>up_dim<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>act_fun1 <span class=\"token operator\">=</span> hard_swish<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> activation_fun <span class=\"token operator\">==</span> <span class=\"token string\">'HS'</span> <span class=\"token keyword\">else</span> nn<span class=\"token punctuation\">.</span>ReLU6<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>depth_wise <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>up_dim<span class=\"token punctuation\">,</span>up_dim<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span>kernel_size<span class=\"token punctuation\">,</span> stride <span class=\"token operator\">=</span> stride<span class=\"token punctuation\">,</span> padding <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>kernel_size<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span> up_dim<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>up_dim<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>act_fun2 <span class=\"token operator\">=</span> hard_swish<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> activation_fun <span class=\"token operator\">==</span> <span class=\"token string\">'HS'</span> <span class=\"token keyword\">else</span> nn<span class=\"token punctuation\">.</span>ReLU6<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>squeeze <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> sq<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>squeeze <span class=\"token operator\">=</span> squeeze<span class=\"token punctuation\">(</span>up_dim<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>up_dim<span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        input_data <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>act_fun1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>depth_wise<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>act_fun2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">==</span> input_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">:</span>\n            x <span class=\"token operator\">+=</span>input_data\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MobileNetv3_small</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>MobileNetv3_small<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            hard_swish<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\">#16,112,112 ->16,56,56</span>\n            bottleneck<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>output<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>up_dim<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>activation_fun<span class=\"token operator\">=</span><span class=\"token string\">'RE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\">#16,56,56->24,28,28</span>\n            bottleneck<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>output<span class=\"token operator\">=</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>up_dim<span class=\"token operator\">=</span><span class=\"token number\">72</span><span class=\"token punctuation\">,</span>sq<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>activation_fun<span class=\"token operator\">=</span><span class=\"token string\">'RE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            bottleneck<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span>output<span class=\"token operator\">=</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>up_dim<span class=\"token operator\">=</span><span class=\"token number\">88</span><span class=\"token punctuation\">,</span>sq<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>activation_fun<span class=\"token operator\">=</span><span class=\"token string\">'RE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\">#24,28,28->40,14,14</span>\n            bottleneck<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span>output<span class=\"token operator\">=</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>up_dim<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span>sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>activation_fun<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            bottleneck<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>output<span class=\"token operator\">=</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>up_dim<span class=\"token operator\">=</span><span class=\"token number\">240</span><span class=\"token punctuation\">,</span>sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>activation_fun<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            bottleneck<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>output<span class=\"token operator\">=</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>up_dim<span class=\"token operator\">=</span><span class=\"token number\">240</span><span class=\"token punctuation\">,</span>sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>activation_fun<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\">#40,14,14->48,14,14</span>\n            bottleneck<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span>output<span class=\"token operator\">=</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>up_dim<span class=\"token operator\">=</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span>sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>activation_fun<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            bottleneck<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span>output<span class=\"token operator\">=</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>up_dim<span class=\"token operator\">=</span><span class=\"token number\">144</span><span class=\"token punctuation\">,</span>sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>activation_fun<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\">#48,14,14->96,7,7</span>\n            bottleneck<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span>output<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>up_dim<span class=\"token operator\">=</span><span class=\"token number\">288</span><span class=\"token punctuation\">,</span>sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>activation_fun<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            bottleneck<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span>output<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>up_dim<span class=\"token operator\">=</span><span class=\"token number\">576</span><span class=\"token punctuation\">,</span>sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>activation_fun<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            bottleneck<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span>output<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>up_dim<span class=\"token operator\">=</span><span class=\"token number\">576</span><span class=\"token punctuation\">,</span>sq<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>activation_fun<span class=\"token operator\">=</span><span class=\"token string\">'HS'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span><span class=\"token number\">576</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">576</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            hard_swish<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>linear1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">576</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>act_fun1 <span class=\"token operator\">=</span> hard_swish<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>linear2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>linear1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>act_fun1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>linear2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<p>至此，<code>MobileNet</code>网络的pytorch版本全部更新。<br>对了，如果有读者想要看一下网络结构的细节部分，此处提供一下代码，此处代码可以进行适当修改，无缝链接到其他文章中的网络。</p>\n<pre class=\" language-python\"><code class=\"language-python\">net <span class=\"token operator\">=</span> MobileNet<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nnet<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">'cuda'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ninput <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">)</span>\nout <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#网络结构</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出参数</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#网络细节</span>\nsummary<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">299</span><span class=\"token punctuation\">,</span><span class=\"token number\">299</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习神经网络特征提取（六）\"><a href=\"#深度学习神经网络特征提取（六）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（六）\"></a>深度学习神经网络特征提取（六）</h2><p>本次文章给出<code>MobileNet</code>的<code>Pytorch</code>版本的代码。关于网络的讲解部分，大家参考前期的<a href=\"http://fanrencli.cn/2021/04/20/feature-extractor/mobilenet/\">文章</a></p>\n<h3 id=\"MobileNetv1\"><a href=\"#MobileNetv1\" class=\"headerlink\" title=\"MobileNetv1\"></a>MobileNetv1</h3><pre><code class=\"python\">class DepthwiseSeparabel(nn.Module):\n    def __init__(self,input_channel,output,stride=1):\n        super(DepthwiseSeparabel,self).__init__()\n        self.depth_wise = nn.Conv2d(input_channel,input_channel,kernel_size=3, stride = stride, padding =1,groups = input_channel)\n        self.batch1 = nn.BatchNorm2d(input_channel)\n        self.relu1 = nn.ReLU6(inplace = True)\n        self.separable = nn.Conv2d(input_channel,output,kernel_size=1,stride = 1)\n        self.batch2 = nn.BatchNorm2d(output)\n        self.relu2  = nn.ReLU6(inplace = True)\n    def forward(self,x):\n        x = self.depth_wise(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.separable(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        return x\n</code></pre>\n<pre><code class=\"python\">class MobileNetv1(nn.Module):\n    def __init__(self,num_classes):\n        super(MobileNetv1,self).__init__()\n        self.model = nn.Sequential(\n            nn.Conv2d(3,32,kernel_size=3,stride = 2,padding =1),\n            nn.BatchNorm2d(32),\n            nn.ReLU6(inplace=True),\n            DepthwiseSeparabel(32,64),\n            DepthwiseSeparabel(64,128,2),\n            DepthwiseSeparabel(128,128),\n            DepthwiseSeparabel(128,256,2),\n            DepthwiseSeparabel(256,256),\n            DepthwiseSeparabel(256,512,2),\n            DepthwiseSeparabel(512,512),\n            DepthwiseSeparabel(512,512),\n            DepthwiseSeparabel(512,512),\n            DepthwiseSeparabel(512,512),\n            DepthwiseSeparabel(512,512),\n            DepthwiseSeparabel(512,1024,2),\n            DepthwiseSeparabel(1024,1024),\n        )\n        self.avg = nn.AdaptiveMaxPool2d(1)\n\n        self.drop1 = nn.Dropout(0.5)\n        self.linear1 = nn.Linear(1024,num_classes)\n    def forward(self,x):\n        x = self.model(x)\n        x = self.avg(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.drop1(x)\n        x = self.linear1(x)\n        return x\n</code></pre>\n<h3 id=\"MobileNetv2\"><a href=\"#MobileNetv2\" class=\"headerlink\" title=\"MobileNetv2\"></a>MobileNetv2</h3><pre><code class=\"python\">class DepthwiseSeparabel(nn.Module):\n    def __init__(self,input_channel,output,stride=1):\n        super(DepthwiseSeparabel,self).__init__()\n        self.depth_wise = nn.Conv2d(input_channel,input_channel,kernel_size=3, stride = stride, padding =1,groups = input_channel)\n        self.batch1 = nn.BatchNorm2d(input_channel)\n        self.relu1 = nn.ReLU6(inplace = True)\n        self.separable = nn.Conv2d(input_channel,output,kernel_size=1,stride = 1)\n        self.batch2 = nn.BatchNorm2d(output)\n    def forward(self,x):\n        x = self.depth_wise(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.separable(x)\n        x = self.batch2(x)\n        return x</code></pre>\n<pre><code class=\"python\">class inverted_res_block(nn.Module):\n    def __init__(self,input_channel,output,stride,expansion,first_inverted_res_block = False):\n        super(inverted_res_block,self).__init__()\n        if not first_inverted_res_block:\n            self.model = nn.Sequential(\n                nn.Conv2d(input_channel,expansion*input_channel,kernel_size=1,stride = 1),\n                nn.BatchNorm2d(expansion*input_channel),\n                nn.ReLU6()\n            )\n        else:\n            self.model = nn.Sequential()\n        self.depth_wise_separable = DepthwiseSeparabel(input_channel*expansion,output,stride = stride)\n    def forward(self,x):\n        input_data = x\n        x = self.model(x)\n        x = self.depth_wise_separable(x)\n        if x.shape == input_data.shape:\n            x += input_data\n        return x</code></pre>\n<pre><code class=\"python\">class MobileNetv2(nn.Module):\n    def __init__(self,num_classes):\n        super(MobileNetv2,self).__init__()\n        # input = [3,224,224]\n        self.model = nn.Sequential(\n            nn.Conv2d(3,32,kernel_size=3, padding=1, stride=2),\n            nn.BatchNorm2d(32),\n            nn.ReLU6(),\n            inverted_res_block(32,16,1,1,True),\n            inverted_res_block(16,24,2,6),\n            inverted_res_block(24,24,1,6),\n            inverted_res_block(24,32,2,6),\n            inverted_res_block(32,32,1,6),\n            inverted_res_block(32,32,1,6),\n            inverted_res_block(32,64,2,6),\n            inverted_res_block(64,64,1,6),\n            inverted_res_block(64,64,1,6),\n            inverted_res_block(64,64,1,6),\n            inverted_res_block(64,96,2,6),\n            inverted_res_block(96,96,1,6),\n            inverted_res_block(96,96,1,6),\n            inverted_res_block(96,160,2,6),\n            inverted_res_block(160,160,1,6),\n            inverted_res_block(160,160,1,6),\n            inverted_res_block(160,320,1,6),\n            nn.Conv2d(320,1280,kernel_size=1, stride=1),\n            nn.BatchNorm2d(1280),\n            nn.ReLU6(), \n            nn.AdaptiveAvgPool2d(1),\n        )\n        self.fc = nn.Linear(1280,num_classes)\n    def forward(self,x):\n        x = self.model(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.fc(x)\n        return x</code></pre>\n<h3 id=\"MobileNetv3\"><a href=\"#MobileNetv3\" class=\"headerlink\" title=\"MobileNetv3\"></a>MobileNetv3</h3><pre><code class=\"python\">class hard_swish(nn.Module):\n    def __init__(self,inplace=True):\n        super(hard_swish,self).__init__()\n        self.relu = nn.ReLU6(inplace=inplace)\n    def forward(self,x):\n        x = x*self.relu(x+3.)/6.\n        return x</code></pre>\n<pre><code class=\"python\">class squeeze(nn.Module):\n    def __init__(self,up_dim):\n        super(squeeze,self).__init__()\n        self.avg = nn.AdaptiveAvgPool2d(1)\n        self.model = nn.Sequential(\n            nn.Linear(up_dim,up_dim//4),\n            nn.ReLU6(inplace=True),\n            nn.Linear(up_dim//4,up_dim),\n            hard_swish(inplace=True)\n        )\n    def forward(self,x):\n        input_data = x\n        x = self.avg(x)\n        x = x.view(input_data.size(0),input_data.size(1))\n        x = self.model(x)\n        x = x.view(input_data.size(0),input_data.size(1),1,1)\n        return torch.mul(input_data,x)</code></pre>\n<pre><code class=\"python\">class bottleneck(nn.Module):\n    def __init__(self,input_channel,output,kernel_size,stride,up_dim,sq,activation_fun):\n        super(bottleneck,self).__init__()\n        self.conv1 = nn.Conv2d(input_channel,up_dim,kernel_size=1,stride=1)\n        self.batch1 = nn.BatchNorm2d(up_dim)\n        self.act_fun1 = hard_swish(inplace=True) if activation_fun == &#39;HS&#39; else nn.ReLU6(inplace=True)\n        self.depth_wise = nn.Conv2d(up_dim,up_dim,kernel_size=kernel_size, stride = stride, padding =(kernel_size-1)//2,groups = up_dim)\n        self.batch2 = nn.BatchNorm2d(up_dim)\n        self.act_fun2 = hard_swish(inplace=True) if activation_fun == &#39;HS&#39; else nn.ReLU6(inplace=True)\n        self.squeeze = nn.Sequential()\n        if sq:\n            self.squeeze = squeeze(up_dim)\n        self.conv2 = nn.Conv2d(up_dim,output,kernel_size=1,stride = 1)\n        self.batch3 = nn.BatchNorm2d(output)\n    def forward(self,x):\n        input_data = x\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.act_fun1(x)\n        x = self.depth_wise(x)\n        x = self.batch2(x)\n        x = self.act_fun2(x)\n        x = self.squeeze(x)\n        x = self.conv2(x)\n        x = self.batch3(x)\n        if x.shape == input_data.shape:\n            x +=input_data\n        return x</code></pre>\n<pre><code class=\"python\">class MobileNetv3_small(nn.Module):\n    def __init__(self,num_classes):\n        super(MobileNetv3_small,self).__init__()\n        self.model = nn.Sequential(\n            nn.Conv2d(3,16,kernel_size=3,stride=2,padding=1),\n            nn.BatchNorm2d(16),\n            hard_swish(inplace=True),\n            #16,112,112 -&gt;16,56,56\n            bottleneck(input_channel=16,output=16,kernel_size=3,stride=2,up_dim=16,sq=True,activation_fun=&#39;RE&#39;),\n            #16,56,56-&gt;24,28,28\n            bottleneck(input_channel=16,output=24,kernel_size=3,stride=2,up_dim=72,sq=False,activation_fun=&#39;RE&#39;),\n            bottleneck(input_channel=24,output=24,kernel_size=3,stride=1,up_dim=88,sq=False,activation_fun=&#39;RE&#39;),\n            #24,28,28-&gt;40,14,14\n            bottleneck(input_channel=24,output=40,kernel_size=5,stride=2,up_dim=96,sq=True,activation_fun=&#39;HS&#39;),\n            bottleneck(input_channel=40,output=40,kernel_size=5,stride=1,up_dim=240,sq=True,activation_fun=&#39;HS&#39;),\n            bottleneck(input_channel=40,output=40,kernel_size=5,stride=1,up_dim=240,sq=True,activation_fun=&#39;HS&#39;),\n            #40,14,14-&gt;48,14,14\n            bottleneck(input_channel=40,output=48,kernel_size=5,stride=1,up_dim=120,sq=True,activation_fun=&#39;HS&#39;),\n            bottleneck(input_channel=48,output=48,kernel_size=5,stride=1,up_dim=144,sq=True,activation_fun=&#39;HS&#39;),\n            #48,14,14-&gt;96,7,7\n            bottleneck(input_channel=48,output=96,kernel_size=5,stride=2,up_dim=288,sq=True,activation_fun=&#39;HS&#39;),\n            bottleneck(input_channel=96,output=96,kernel_size=5,stride=1,up_dim=576,sq=True,activation_fun=&#39;HS&#39;),\n            bottleneck(input_channel=96,output=96,kernel_size=5,stride=1,up_dim=576,sq=True,activation_fun=&#39;HS&#39;),\n            nn.Conv2d(96,576,kernel_size=1,stride=1),\n            nn.BatchNorm2d(576),\n            hard_swish(inplace=True),\n            nn.AdaptiveAvgPool2d(1)\n        )\n        self.linear1 = nn.Linear(576,1024)\n        self.act_fun1 = hard_swish(inplace=True)\n        self.linear2 = nn.Linear(1024,num_classes)\n    def forward(self,x):\n        x = self.model(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.linear1(x)\n        x = self.act_fun1(x)\n        x = self.linear2(x)\n        return x</code></pre>\n<p>至此，<code>MobileNet</code>网络的pytorch版本全部更新。<br>对了，如果有读者想要看一下网络结构的细节部分，此处提供一下代码，此处代码可以进行适当修改，无缝链接到其他文章中的网络。</p>\n<pre><code class=\"python\">net = MobileNet(10)\nnet.to(torch.device(&#39;cuda&#39;))\ninput = torch.randn(10,3,224,224)\nout = net(input)\n#网络结构\nprint(net)\n#输出参数\nprint(out.shape)\n#网络细节\nsummary(net,(3,299,299))</code></pre>\n"},{"title":"Inception(pytorch)","date":"2021-05-09T10:38:08.000Z","author":"Fanrencli","_content":"\n## 深度学习神经网络特征提取（七）\n\nemmmmmmm....代码重构的过程实在是无聊与枯燥，烦躁的心情也无法抑制，不过运动可以缓解一下。整天坐在实验室，整个人就是个关禁闭的状态啊~~~感觉近期就是处于一个懵逼的状态:-( \n哎，不说了，开始今天的文章吧。。。本次文章给出`Inception`系列的`Pytorch`版本的代码。关于网络的讲解部分，大家参考前期的[文章](http://fanrencli.cn/2021/04/20/feature-extractor/inception/)\n\n\n### Inceptionv3\n\n```python\ndef conv2d_bn(input_channel, output_channel, kernel_size, padding=0, stride=1):\n    return nn.Sequential(\n        nn.Conv2d(input_channel,output_channel,kernel_size=kernel_size,padding=padding,stride=stride,bias=False),\n        nn.BatchNorm2d(output_channel),\n        nn.ReLU(inplace = True)\n    )\n```\n```python\nclass Inceptionv3_frist_block(nn.Module):\n    def __init__(self,input_channel,change_channel):\n        super(Inceptionv3_frist_block,self).__init__()\n        self.first_branch = conv2d_bn(input_channel=input_channel,output_channel=64,kernel_size=1,stride=1)\n        self.second_branch = nn.Sequential(\n            conv2d_bn(input_channel=input_channel,output_channel=48,kernel_size=1),\n            conv2d_bn(input_channel=48,output_channel=64,kernel_size=5,padding=2)\n        )\n        self.third_branch = nn.Sequential(\n            conv2d_bn(input_channel=input_channel,output_channel=64,kernel_size=1),\n            conv2d_bn(input_channel=64,output_channel=96,kernel_size=3,padding=1),\n            conv2d_bn(input_channel=96,output_channel=96,kernel_size=3,padding=1)\n        )\n        self.forth_branch = nn.Sequential(\n            nn.AvgPool2d(kernel_size=3,stride=1,padding=1),\n            conv2d_bn(input_channel=input_channel,output_channel=change_channel,kernel_size=1)\n        )\n    def forward(self,x):\n        branch1 = self.first_branch(x)\n        branch2 = self.second_branch(x)\n        branch3 = self.third_branch(x)\n        branch4 = self.forth_branch(x)\n        x = torch.cat((branch1,branch2,branch3,branch4),1)\n        return x\n```\n```python\nclass Inceptionv3_second_block(nn.Module):\n    def __init__(self,input_channel,change_channel=0,is_first_block_part=False):\n        super(Inceptionv3_second_block,self).__init__()\n        self.is_first_block_part = is_first_block_part\n        if is_first_block_part:\n            self.first_branch = conv2d_bn(input_channel=input_channel,output_channel=384,kernel_size=3,stride=2)\n            self.second_branch = nn.Sequential(\n                conv2d_bn(input_channel=input_channel,output_channel=64,kernel_size=1),\n                conv2d_bn(input_channel=64,output_channel=96,kernel_size=3,padding=1),\n                conv2d_bn(input_channel=96,output_channel=96,kernel_size=3,stride=2)\n            )\n            self.third_branch = nn.MaxPool2d(kernel_size=3,stride=2)\n        else:\n            self.first_branch = conv2d_bn(input_channel=input_channel,output_channel=192,kernel_size=1)\n            self.second_branch = nn.Sequential(\n                conv2d_bn(input_channel=input_channel,output_channel=change_channel,kernel_size=1),\n                conv2d_bn(input_channel=change_channel,output_channel=change_channel,kernel_size=[1,7],padding=[0,3]),\n                conv2d_bn(input_channel=change_channel,output_channel=192,kernel_size=[7,1],padding=[3,0])\n            )\n            self.third_branch = nn.Sequential(\n                conv2d_bn(input_channel=input_channel,output_channel=change_channel,kernel_size=1),\n                conv2d_bn(input_channel=change_channel,output_channel=change_channel,kernel_size=[7,1],padding=[3,0]),\n                conv2d_bn(input_channel=change_channel,output_channel=change_channel,kernel_size=[1,7],padding=[0,3]),\n                conv2d_bn(input_channel=change_channel,output_channel=change_channel,kernel_size=[7,1],padding=[3,0]),\n                conv2d_bn(input_channel=change_channel,output_channel=192,kernel_size=[1,7],padding=[0,3])\n            )\n            self.forth_branch = nn.Sequential(\n                nn.AvgPool2d(kernel_size=3, stride = 1, padding=1),\n                conv2d_bn(input_channel=input_channel,output_channel=192,kernel_size=1)\n            )\n    def forward(self,x):\n        branch1 = self.first_branch(x)\n        branch2 = self.second_branch(x)\n        branch3 = self.third_branch(x)\n        if self.is_first_block_part:\n            x = torch.cat((branch1,branch2,branch3),1)\n        else:\n            branch4 = self.forth_branch(x)\n            x = torch.cat((branch1,branch2,branch3,branch4),1)\n        return x\n```\n```python\nclass Inceptionv3_third_block(nn.Module):\n    def __init__(self,input_channel,is_first_block_part=False):\n        super(Inceptionv3_third_block,self).__init__()\n        self.is_first_block_part = is_first_block_part\n        if is_first_block_part:\n            self.first_branch = nn.Sequential(\n                conv2d_bn(input_channel=input_channel,output_channel=192,kernel_size=1),\n                conv2d_bn(input_channel=192,output_channel=320,kernel_size=3,stride=2)\n            )\n            self.second_branch = nn.Sequential(\n                conv2d_bn(input_channel=input_channel,output_channel=192,kernel_size=1),\n                conv2d_bn(input_channel=192,output_channel=192,kernel_size=[1,7],padding=[0,3]),\n                conv2d_bn(input_channel=192,output_channel=192,kernel_size=[7,1],padding=[3,0]),\n                conv2d_bn(input_channel=192,output_channel=192,kernel_size=3,stride=2)\n            )\n            self.third_branch = nn.MaxPool2d(kernel_size=3,stride=2)\n        else:\n            #branch1x1\n            self.conv1 = conv2d_bn(input_channel=input_channel,output_channel=320,kernel_size=1)\n            #branch3x3\n            self.conv2 = conv2d_bn(input_channel=input_channel,output_channel=384,kernel_size=1)\n            #branch3x3_1\n            #branch3x3_2\n            self.conv3 = conv2d_bn(input_channel=384,output_channel=384,kernel_size=[1,3],padding=[0,1])\n            self.conv4 = conv2d_bn(input_channel=384,output_channel=384,kernel_size=[3,1],padding=[1,0])\n            #branch3x3db1\n            self.conv5 = conv2d_bn(input_channel=input_channel,output_channel=448,kernel_size=1)\n            self.conv6 = conv2d_bn(input_channel=448,output_channel=384,kernel_size=3,padding=1)\n            #branch3x3db1_1\n            #branch3x3db1_2\n            self.conv7 = conv2d_bn(input_channel=384,output_channel=384,kernel_size=[1,3],padding=[0,1])\n            self.conv8 = conv2d_bn(input_channel=384,output_channel=384,kernel_size=[3,1],padding=[1,0])\n\n            self.avg = nn.AvgPool2d(kernel_size=3,stride=1,padding =1)\n            self.conv9 = conv2d_bn(input_channel=input_channel,output_channel=192,kernel_size=1)\n            \n    def forward(self,x):\n        if self.is_first_block_part:\n            branch1 = self.first_branch(x)\n            branch2 = self.second_branch(x)\n            branch3 = self.third_branch(x)\n            x = torch.cat((branch1,branch2,branch3),1)\n        else:\n            branch1 = self.conv1(x)\n\n            branch2 = self.conv2(x)\n            branch2_1 = self.conv3(branch2)\n            branch2_2 = self.conv4(branch2)\n            branch2 = torch.cat((branch2_1,branch2_2),1)\n\n            branch3 = self.conv5(x)\n            branch3 = self.conv6(branch3)\n            branch3_1 = self.conv7(branch3)\n            branch3_2 = self.conv8(branch3)\n            branch3 = torch.cat((branch3_1,branch3_2),1)\n\n            branch4 = self.avg(x)\n            branch4 = self.conv9(branch4)\n            x = torch.cat((branch1,branch2,branch3,branch4),1)\n        return x\n```\n```python\nclass Inceptionv3(nn.Module):\n    def __init__(self,num_classes):\n        super(Inceptionv3,self).__init__()\n        # input_shape  = 3,299,299\n        self.model1 = nn.Sequential(\n            # 299,299 -> 149,149 \n            conv2d_bn(input_channel=3,output_channel=32,kernel_size=3,stride=2),\n            # 149,149 -> 147,147\n            conv2d_bn(input_channel=32,output_channel=32,kernel_size=3),\n            # 147,147 -> 147,147\n            conv2d_bn(input_channel=32,output_channel=64,kernel_size=3,padding=1),\n            # 147,147 -> 73,73\n            nn.MaxPool2d(kernel_size=3,stride=2),\n            # 73,73 -> 73,73\n            conv2d_bn(input_channel=64,output_channel=80,kernel_size=1),\n            # 73,73 -> 71,71\n            conv2d_bn(input_channel=80,output_channel=192,kernel_size=3),\n            # 71,71 -> 35,35\n            nn.MaxPool2d(kernel_size=3,stride=2)\n        )\n        # 35,35,192 -> 35,35,288\n        self.block1 = nn.Sequential(\n            Inceptionv3_frist_block(input_channel = 192,change_channel = 32),\n            Inceptionv3_frist_block(input_channel = 256,change_channel = 64),\n            Inceptionv3_frist_block(input_channel = 288,change_channel = 64)\n        )\n        #35,35,288 -> 17,17,768\n        self.block2 = nn.Sequential(\n            Inceptionv3_second_block(input_channel=288,is_first_block_part=True),\n            Inceptionv3_second_block(input_channel=768,change_channel=128),\n            Inceptionv3_second_block(input_channel=768,change_channel=160),\n            Inceptionv3_second_block(input_channel=768,change_channel=160),\n            Inceptionv3_second_block(input_channel=768,change_channel=192)\n        )\n        #17,17,768 -> 8,8,2048\n        self.block3 = nn.Sequential(\n            Inceptionv3_third_block(768,is_first_block_part=True),\n            Inceptionv3_third_block(1280),\n            Inceptionv3_third_block(2048),\n        )\n        self.avg = nn.AdaptiveMaxPool2d(1)\n        self.linear = nn.Linear(2048,num_classes)\n    def forward(self,x):\n        x = self.model1(x)\n        x =self.block1(x)\n        x = self.block2(x)\n        x = self.block3(x)\n        x = self.avg(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.linear(x)\n        return x\n```\nemmmmmmm...????重新写完一个竟然用了好几个小时？？？？？看来是人老了:-(\n\n### Xception\n\n```python \nclass Xception_Entry_flow(nn.Module):\n    def __init__(self,input_channel,change_channel):\n        super(Xception_Entry_flow,self).__init__()\n        self.shortcut = nn.Sequential(\n            nn.Conv2d(input_channel,change_channel,kernel_size=1,stride=2),\n            nn.BatchNorm2d(change_channel)\n        )\n        self.model = nn.Sequential(\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,change_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(change_channel),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(change_channel,change_channel,kernel_size=3,stride = 1,padding =1,groups =change_channel,bias=False),\n            nn.Conv2d(change_channel,change_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(change_channel),\n            nn.MaxPool2d(kernel_size=3,stride= 2,padding=1)\n        )\n    def forward(self,x):\n        residual = self.shortcut(x)\n        x = self.model(x)\n        x += residual\n        return x\n```\n\n```python \nclass Xception_Middle_flow(nn.Module):\n    def __init__(self,input_channel):\n        super(Xception_Middle_flow,self).__init__()\n        self.model = nn.Sequential(\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,input_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(input_channel),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,input_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(input_channel),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,input_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(input_channel),\n        )\n    def forward(self,x):\n        shortcut = x\n        x = self.model(x)\n        x += shortcut\n        return x\n```\n\n```python \nclass Xception_Exit_flow(nn.Module):\n    def __init__(self,input_channel):\n        super(Xception_Exit_flow,self).__init__()\n        self.shortcut = nn.Sequential(\n            nn.Conv2d(input_channel,1024,kernel_size=1,stride=2,bias=False),\n            nn.BatchNorm2d(1024)\n        )\n        self.model1 = nn.Sequential(\n            nn.ReLU(inplace = True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,input_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(input_channel),\n            nn.ReLU(inplace = True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,1024,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(1024),\n            nn.MaxPool2d(kernel_size=3,stride=2,padding=1)\n        )\n        self.model2 = nn.Sequential(\n            nn.Conv2d(1024,1024,kernel_size=3,stride = 1,padding =1,groups =1024,bias=False),\n            nn.Conv2d(1024,1536,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(1536),\n            nn.ReLU(inplace = True),\n            nn.Conv2d(1536,1536,kernel_size=3,stride = 1,padding =1,groups =1536,bias=False),\n            nn.Conv2d(1536,2048,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(2048),\n            nn.ReLU(inplace = True),\n            nn.AdaptiveMaxPool2d(1)\n        )\n    def forward(self,x):\n        residual = self.shortcut(x)\n        x = self.model1(x)\n        x +=residual\n        x = self.model2(x)\n        return x\n```\n\n```python \nclass Xception(nn.Module):\n    def __init__(self,num_classes):\n        super(Xception,self).__init__()\n        self.first_block = nn.Sequential(\n            nn.Conv2d(3,32,kernel_size=3,stride=2,bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(32,64,kernel_size=3,stride=1,padding=1,bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True)\n        )\n        self.Entry_flow = nn.Sequential(\n            Xception_Entry_flow(64,128),\n            Xception_Entry_flow(128,256),\n            Xception_Entry_flow(256,728)\n        )\n        self.Middle_flow = nn.Sequential(\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728)\n        )\n        self.Exit_flow = Xception_Exit_flow(728)\n        self.linear = nn.Linear(2048,num_classes)\n    def forward(self,x):\n        x = self.first_block(x)\n        x = self.Entry_flow(x)\n        x = self.Middle_flow(x)\n        x = self.Exit_flow(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.linear(x)\n        return x\n```\n\n至此，关于之前所有用`keras`构建的特征提取网络已经全部重构完毕，后续看情况可能会继续更新一下`DenseNet`、`ShuffleNet`和其他组合型特征提取网络。emmmmmmm....话说又用了一个上午:-(\n对了，如果有读者想要看一下网络结构的细节部分，此处提供一下代码，此处代码可以进行适当修改，无缝链接到其他文章中的网络。\n```python\nnet = Xception(10)\nnet.to(torch.device('cuda'))\ninput = torch.randn(10,3,224,224)\nout = net(input)\n#网络结构\nprint(net)\n#输出参数\nprint(out.shape)\n#网络细节\nsummary(net,(3,299,299))\n```","source":"_posts/feature_extractor/Inception(pytorch).md","raw":"---\ntitle: Inception(pytorch)\ndate: 2021-05-09 18:38:08\ncategories: \n- Deep Learning\ntags:\n- Inceptionv3\n- Xception\n- Pytorch\nauthor: Fanrencli\n---\n\n## 深度学习神经网络特征提取（七）\n\nemmmmmmm....代码重构的过程实在是无聊与枯燥，烦躁的心情也无法抑制，不过运动可以缓解一下。整天坐在实验室，整个人就是个关禁闭的状态啊~~~感觉近期就是处于一个懵逼的状态:-( \n哎，不说了，开始今天的文章吧。。。本次文章给出`Inception`系列的`Pytorch`版本的代码。关于网络的讲解部分，大家参考前期的[文章](http://fanrencli.cn/2021/04/20/feature-extractor/inception/)\n\n\n### Inceptionv3\n\n```python\ndef conv2d_bn(input_channel, output_channel, kernel_size, padding=0, stride=1):\n    return nn.Sequential(\n        nn.Conv2d(input_channel,output_channel,kernel_size=kernel_size,padding=padding,stride=stride,bias=False),\n        nn.BatchNorm2d(output_channel),\n        nn.ReLU(inplace = True)\n    )\n```\n```python\nclass Inceptionv3_frist_block(nn.Module):\n    def __init__(self,input_channel,change_channel):\n        super(Inceptionv3_frist_block,self).__init__()\n        self.first_branch = conv2d_bn(input_channel=input_channel,output_channel=64,kernel_size=1,stride=1)\n        self.second_branch = nn.Sequential(\n            conv2d_bn(input_channel=input_channel,output_channel=48,kernel_size=1),\n            conv2d_bn(input_channel=48,output_channel=64,kernel_size=5,padding=2)\n        )\n        self.third_branch = nn.Sequential(\n            conv2d_bn(input_channel=input_channel,output_channel=64,kernel_size=1),\n            conv2d_bn(input_channel=64,output_channel=96,kernel_size=3,padding=1),\n            conv2d_bn(input_channel=96,output_channel=96,kernel_size=3,padding=1)\n        )\n        self.forth_branch = nn.Sequential(\n            nn.AvgPool2d(kernel_size=3,stride=1,padding=1),\n            conv2d_bn(input_channel=input_channel,output_channel=change_channel,kernel_size=1)\n        )\n    def forward(self,x):\n        branch1 = self.first_branch(x)\n        branch2 = self.second_branch(x)\n        branch3 = self.third_branch(x)\n        branch4 = self.forth_branch(x)\n        x = torch.cat((branch1,branch2,branch3,branch4),1)\n        return x\n```\n```python\nclass Inceptionv3_second_block(nn.Module):\n    def __init__(self,input_channel,change_channel=0,is_first_block_part=False):\n        super(Inceptionv3_second_block,self).__init__()\n        self.is_first_block_part = is_first_block_part\n        if is_first_block_part:\n            self.first_branch = conv2d_bn(input_channel=input_channel,output_channel=384,kernel_size=3,stride=2)\n            self.second_branch = nn.Sequential(\n                conv2d_bn(input_channel=input_channel,output_channel=64,kernel_size=1),\n                conv2d_bn(input_channel=64,output_channel=96,kernel_size=3,padding=1),\n                conv2d_bn(input_channel=96,output_channel=96,kernel_size=3,stride=2)\n            )\n            self.third_branch = nn.MaxPool2d(kernel_size=3,stride=2)\n        else:\n            self.first_branch = conv2d_bn(input_channel=input_channel,output_channel=192,kernel_size=1)\n            self.second_branch = nn.Sequential(\n                conv2d_bn(input_channel=input_channel,output_channel=change_channel,kernel_size=1),\n                conv2d_bn(input_channel=change_channel,output_channel=change_channel,kernel_size=[1,7],padding=[0,3]),\n                conv2d_bn(input_channel=change_channel,output_channel=192,kernel_size=[7,1],padding=[3,0])\n            )\n            self.third_branch = nn.Sequential(\n                conv2d_bn(input_channel=input_channel,output_channel=change_channel,kernel_size=1),\n                conv2d_bn(input_channel=change_channel,output_channel=change_channel,kernel_size=[7,1],padding=[3,0]),\n                conv2d_bn(input_channel=change_channel,output_channel=change_channel,kernel_size=[1,7],padding=[0,3]),\n                conv2d_bn(input_channel=change_channel,output_channel=change_channel,kernel_size=[7,1],padding=[3,0]),\n                conv2d_bn(input_channel=change_channel,output_channel=192,kernel_size=[1,7],padding=[0,3])\n            )\n            self.forth_branch = nn.Sequential(\n                nn.AvgPool2d(kernel_size=3, stride = 1, padding=1),\n                conv2d_bn(input_channel=input_channel,output_channel=192,kernel_size=1)\n            )\n    def forward(self,x):\n        branch1 = self.first_branch(x)\n        branch2 = self.second_branch(x)\n        branch3 = self.third_branch(x)\n        if self.is_first_block_part:\n            x = torch.cat((branch1,branch2,branch3),1)\n        else:\n            branch4 = self.forth_branch(x)\n            x = torch.cat((branch1,branch2,branch3,branch4),1)\n        return x\n```\n```python\nclass Inceptionv3_third_block(nn.Module):\n    def __init__(self,input_channel,is_first_block_part=False):\n        super(Inceptionv3_third_block,self).__init__()\n        self.is_first_block_part = is_first_block_part\n        if is_first_block_part:\n            self.first_branch = nn.Sequential(\n                conv2d_bn(input_channel=input_channel,output_channel=192,kernel_size=1),\n                conv2d_bn(input_channel=192,output_channel=320,kernel_size=3,stride=2)\n            )\n            self.second_branch = nn.Sequential(\n                conv2d_bn(input_channel=input_channel,output_channel=192,kernel_size=1),\n                conv2d_bn(input_channel=192,output_channel=192,kernel_size=[1,7],padding=[0,3]),\n                conv2d_bn(input_channel=192,output_channel=192,kernel_size=[7,1],padding=[3,0]),\n                conv2d_bn(input_channel=192,output_channel=192,kernel_size=3,stride=2)\n            )\n            self.third_branch = nn.MaxPool2d(kernel_size=3,stride=2)\n        else:\n            #branch1x1\n            self.conv1 = conv2d_bn(input_channel=input_channel,output_channel=320,kernel_size=1)\n            #branch3x3\n            self.conv2 = conv2d_bn(input_channel=input_channel,output_channel=384,kernel_size=1)\n            #branch3x3_1\n            #branch3x3_2\n            self.conv3 = conv2d_bn(input_channel=384,output_channel=384,kernel_size=[1,3],padding=[0,1])\n            self.conv4 = conv2d_bn(input_channel=384,output_channel=384,kernel_size=[3,1],padding=[1,0])\n            #branch3x3db1\n            self.conv5 = conv2d_bn(input_channel=input_channel,output_channel=448,kernel_size=1)\n            self.conv6 = conv2d_bn(input_channel=448,output_channel=384,kernel_size=3,padding=1)\n            #branch3x3db1_1\n            #branch3x3db1_2\n            self.conv7 = conv2d_bn(input_channel=384,output_channel=384,kernel_size=[1,3],padding=[0,1])\n            self.conv8 = conv2d_bn(input_channel=384,output_channel=384,kernel_size=[3,1],padding=[1,0])\n\n            self.avg = nn.AvgPool2d(kernel_size=3,stride=1,padding =1)\n            self.conv9 = conv2d_bn(input_channel=input_channel,output_channel=192,kernel_size=1)\n            \n    def forward(self,x):\n        if self.is_first_block_part:\n            branch1 = self.first_branch(x)\n            branch2 = self.second_branch(x)\n            branch3 = self.third_branch(x)\n            x = torch.cat((branch1,branch2,branch3),1)\n        else:\n            branch1 = self.conv1(x)\n\n            branch2 = self.conv2(x)\n            branch2_1 = self.conv3(branch2)\n            branch2_2 = self.conv4(branch2)\n            branch2 = torch.cat((branch2_1,branch2_2),1)\n\n            branch3 = self.conv5(x)\n            branch3 = self.conv6(branch3)\n            branch3_1 = self.conv7(branch3)\n            branch3_2 = self.conv8(branch3)\n            branch3 = torch.cat((branch3_1,branch3_2),1)\n\n            branch4 = self.avg(x)\n            branch4 = self.conv9(branch4)\n            x = torch.cat((branch1,branch2,branch3,branch4),1)\n        return x\n```\n```python\nclass Inceptionv3(nn.Module):\n    def __init__(self,num_classes):\n        super(Inceptionv3,self).__init__()\n        # input_shape  = 3,299,299\n        self.model1 = nn.Sequential(\n            # 299,299 -> 149,149 \n            conv2d_bn(input_channel=3,output_channel=32,kernel_size=3,stride=2),\n            # 149,149 -> 147,147\n            conv2d_bn(input_channel=32,output_channel=32,kernel_size=3),\n            # 147,147 -> 147,147\n            conv2d_bn(input_channel=32,output_channel=64,kernel_size=3,padding=1),\n            # 147,147 -> 73,73\n            nn.MaxPool2d(kernel_size=3,stride=2),\n            # 73,73 -> 73,73\n            conv2d_bn(input_channel=64,output_channel=80,kernel_size=1),\n            # 73,73 -> 71,71\n            conv2d_bn(input_channel=80,output_channel=192,kernel_size=3),\n            # 71,71 -> 35,35\n            nn.MaxPool2d(kernel_size=3,stride=2)\n        )\n        # 35,35,192 -> 35,35,288\n        self.block1 = nn.Sequential(\n            Inceptionv3_frist_block(input_channel = 192,change_channel = 32),\n            Inceptionv3_frist_block(input_channel = 256,change_channel = 64),\n            Inceptionv3_frist_block(input_channel = 288,change_channel = 64)\n        )\n        #35,35,288 -> 17,17,768\n        self.block2 = nn.Sequential(\n            Inceptionv3_second_block(input_channel=288,is_first_block_part=True),\n            Inceptionv3_second_block(input_channel=768,change_channel=128),\n            Inceptionv3_second_block(input_channel=768,change_channel=160),\n            Inceptionv3_second_block(input_channel=768,change_channel=160),\n            Inceptionv3_second_block(input_channel=768,change_channel=192)\n        )\n        #17,17,768 -> 8,8,2048\n        self.block3 = nn.Sequential(\n            Inceptionv3_third_block(768,is_first_block_part=True),\n            Inceptionv3_third_block(1280),\n            Inceptionv3_third_block(2048),\n        )\n        self.avg = nn.AdaptiveMaxPool2d(1)\n        self.linear = nn.Linear(2048,num_classes)\n    def forward(self,x):\n        x = self.model1(x)\n        x =self.block1(x)\n        x = self.block2(x)\n        x = self.block3(x)\n        x = self.avg(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.linear(x)\n        return x\n```\nemmmmmmm...????重新写完一个竟然用了好几个小时？？？？？看来是人老了:-(\n\n### Xception\n\n```python \nclass Xception_Entry_flow(nn.Module):\n    def __init__(self,input_channel,change_channel):\n        super(Xception_Entry_flow,self).__init__()\n        self.shortcut = nn.Sequential(\n            nn.Conv2d(input_channel,change_channel,kernel_size=1,stride=2),\n            nn.BatchNorm2d(change_channel)\n        )\n        self.model = nn.Sequential(\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,change_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(change_channel),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(change_channel,change_channel,kernel_size=3,stride = 1,padding =1,groups =change_channel,bias=False),\n            nn.Conv2d(change_channel,change_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(change_channel),\n            nn.MaxPool2d(kernel_size=3,stride= 2,padding=1)\n        )\n    def forward(self,x):\n        residual = self.shortcut(x)\n        x = self.model(x)\n        x += residual\n        return x\n```\n\n```python \nclass Xception_Middle_flow(nn.Module):\n    def __init__(self,input_channel):\n        super(Xception_Middle_flow,self).__init__()\n        self.model = nn.Sequential(\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,input_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(input_channel),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,input_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(input_channel),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,input_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(input_channel),\n        )\n    def forward(self,x):\n        shortcut = x\n        x = self.model(x)\n        x += shortcut\n        return x\n```\n\n```python \nclass Xception_Exit_flow(nn.Module):\n    def __init__(self,input_channel):\n        super(Xception_Exit_flow,self).__init__()\n        self.shortcut = nn.Sequential(\n            nn.Conv2d(input_channel,1024,kernel_size=1,stride=2,bias=False),\n            nn.BatchNorm2d(1024)\n        )\n        self.model1 = nn.Sequential(\n            nn.ReLU(inplace = True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,input_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(input_channel),\n            nn.ReLU(inplace = True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,1024,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(1024),\n            nn.MaxPool2d(kernel_size=3,stride=2,padding=1)\n        )\n        self.model2 = nn.Sequential(\n            nn.Conv2d(1024,1024,kernel_size=3,stride = 1,padding =1,groups =1024,bias=False),\n            nn.Conv2d(1024,1536,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(1536),\n            nn.ReLU(inplace = True),\n            nn.Conv2d(1536,1536,kernel_size=3,stride = 1,padding =1,groups =1536,bias=False),\n            nn.Conv2d(1536,2048,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(2048),\n            nn.ReLU(inplace = True),\n            nn.AdaptiveMaxPool2d(1)\n        )\n    def forward(self,x):\n        residual = self.shortcut(x)\n        x = self.model1(x)\n        x +=residual\n        x = self.model2(x)\n        return x\n```\n\n```python \nclass Xception(nn.Module):\n    def __init__(self,num_classes):\n        super(Xception,self).__init__()\n        self.first_block = nn.Sequential(\n            nn.Conv2d(3,32,kernel_size=3,stride=2,bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(32,64,kernel_size=3,stride=1,padding=1,bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True)\n        )\n        self.Entry_flow = nn.Sequential(\n            Xception_Entry_flow(64,128),\n            Xception_Entry_flow(128,256),\n            Xception_Entry_flow(256,728)\n        )\n        self.Middle_flow = nn.Sequential(\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728)\n        )\n        self.Exit_flow = Xception_Exit_flow(728)\n        self.linear = nn.Linear(2048,num_classes)\n    def forward(self,x):\n        x = self.first_block(x)\n        x = self.Entry_flow(x)\n        x = self.Middle_flow(x)\n        x = self.Exit_flow(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.linear(x)\n        return x\n```\n\n至此，关于之前所有用`keras`构建的特征提取网络已经全部重构完毕，后续看情况可能会继续更新一下`DenseNet`、`ShuffleNet`和其他组合型特征提取网络。emmmmmmm....话说又用了一个上午:-(\n对了，如果有读者想要看一下网络结构的细节部分，此处提供一下代码，此处代码可以进行适当修改，无缝链接到其他文章中的网络。\n```python\nnet = Xception(10)\nnet.to(torch.device('cuda'))\ninput = torch.randn(10,3,224,224)\nout = net(input)\n#网络结构\nprint(net)\n#输出参数\nprint(out.shape)\n#网络细节\nsummary(net,(3,299,299))\n```","slug":"feature_extractor/Inception(pytorch)","published":1,"updated":"2021-05-21T07:33:48.669Z","_id":"ckoi183li0000louo4b5taxbm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习神经网络特征提取（七）\"><a href=\"#深度学习神经网络特征提取（七）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（七）\"></a>深度学习神经网络特征提取（七）</h2><p>emmmmmmm….代码重构的过程实在是无聊与枯燥，烦躁的心情也无法抑制，不过运动可以缓解一下。整天坐在实验室，整个人就是个关禁闭的状态啊<del>~</del>感觉近期就是处于一个懵逼的状态:-(<br>哎，不说了，开始今天的文章吧。。。本次文章给出<code>Inception</code>系列的<code>Pytorch</code>版本的代码。关于网络的讲解部分，大家参考前期的<a href=\"http://fanrencli.cn/2021/04/20/feature-extractor/inception/\">文章</a></p>\n<h3 id=\"Inceptionv3\"><a href=\"#Inceptionv3\" class=\"headerlink\" title=\"Inceptionv3\"></a>Inceptionv3</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">conv2d_bn</span><span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span> output_channel<span class=\"token punctuation\">,</span> kernel_size<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n        nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span>kernel_size<span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span>padding<span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span>stride<span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>output_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span></code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Inceptionv3_frist_block</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>change_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Inceptionv3_frist_block<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>first_branch <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>second_branch <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>third_branch <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>forth_branch <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>AvgPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span>change_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        branch1 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>first_branch<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        branch2 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>second_branch<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        branch3 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>third_branch<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        branch4 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>forth_branch<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>branch1<span class=\"token punctuation\">,</span>branch2<span class=\"token punctuation\">,</span>branch3<span class=\"token punctuation\">,</span>branch4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Inceptionv3_second_block</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>change_channel<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>is_first_block_part<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Inceptionv3_second_block<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>is_first_block_part <span class=\"token operator\">=</span> is_first_block_part\n        <span class=\"token keyword\">if</span> is_first_block_part<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>first_branch <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">384</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>second_branch <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>third_branch <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>first_branch <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>second_branch <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span>change_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>change_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span>change_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>change_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>third_branch <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span>change_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>change_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span>change_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>change_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span>change_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>change_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span>change_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>change_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>forth_branch <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n                nn<span class=\"token punctuation\">.</span>AvgPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        branch1 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>first_branch<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        branch2 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>second_branch<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        branch3 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>third_branch<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_first_block_part<span class=\"token punctuation\">:</span>\n            x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>branch1<span class=\"token punctuation\">,</span>branch2<span class=\"token punctuation\">,</span>branch3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            branch4 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>forth_branch<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n            x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>branch1<span class=\"token punctuation\">,</span>branch2<span class=\"token punctuation\">,</span>branch3<span class=\"token punctuation\">,</span>branch4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Inceptionv3_third_block</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>is_first_block_part<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Inceptionv3_third_block<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>is_first_block_part <span class=\"token operator\">=</span> is_first_block_part\n        <span class=\"token keyword\">if</span> is_first_block_part<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>first_branch <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>second_branch <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>third_branch <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\" spellcheck=\"true\">#branch1x1</span>\n            self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\">#branch3x3</span>\n            self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">384</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\">#branch3x3_1</span>\n            <span class=\"token comment\" spellcheck=\"true\">#branch3x3_2</span>\n            self<span class=\"token punctuation\">.</span>conv3 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">384</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">384</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>conv4 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">384</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">384</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\">#branch3x3db1</span>\n            self<span class=\"token punctuation\">.</span>conv5 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">448</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>conv6 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">448</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">384</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\">#branch3x3db1_1</span>\n            <span class=\"token comment\" spellcheck=\"true\">#branch3x3db1_2</span>\n            self<span class=\"token punctuation\">.</span>conv7 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">384</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">384</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>conv8 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">384</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">384</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            self<span class=\"token punctuation\">.</span>avg <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AvgPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>conv9 <span class=\"token operator\">=</span> conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_first_block_part<span class=\"token punctuation\">:</span>\n            branch1 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>first_branch<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n            branch2 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>second_branch<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n            branch3 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>third_branch<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n            x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>branch1<span class=\"token punctuation\">,</span>branch2<span class=\"token punctuation\">,</span>branch3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            branch1 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n            branch2 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n            branch2_1 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv3<span class=\"token punctuation\">(</span>branch2<span class=\"token punctuation\">)</span>\n            branch2_2 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv4<span class=\"token punctuation\">(</span>branch2<span class=\"token punctuation\">)</span>\n            branch2 <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>branch2_1<span class=\"token punctuation\">,</span>branch2_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n            branch3 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv5<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n            branch3 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv6<span class=\"token punctuation\">(</span>branch3<span class=\"token punctuation\">)</span>\n            branch3_1 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv7<span class=\"token punctuation\">(</span>branch3<span class=\"token punctuation\">)</span>\n            branch3_2 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv8<span class=\"token punctuation\">(</span>branch3<span class=\"token punctuation\">)</span>\n            branch3 <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>branch3_1<span class=\"token punctuation\">,</span>branch3_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n            branch4 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>avg<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n            branch4 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv9<span class=\"token punctuation\">(</span>branch4<span class=\"token punctuation\">)</span>\n            x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>branch1<span class=\"token punctuation\">,</span>branch2<span class=\"token punctuation\">,</span>branch3<span class=\"token punctuation\">,</span>branch4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Inceptionv3</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Inceptionv3<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># input_shape  = 3,299,299</span>\n        self<span class=\"token punctuation\">.</span>model1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            <span class=\"token comment\" spellcheck=\"true\"># 299,299 -> 149,149 </span>\n            conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\"># 149,149 -> 147,147</span>\n            conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\"># 147,147 -> 147,147</span>\n            conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\"># 147,147 -> 73,73</span>\n            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\"># 73,73 -> 73,73</span>\n            conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\"># 73,73 -> 71,71</span>\n            conv2d_bn<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span>output_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\"># 71,71 -> 35,35</span>\n            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 35,35,192 -> 35,35,288</span>\n        self<span class=\"token punctuation\">.</span>block1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            Inceptionv3_frist_block<span class=\"token punctuation\">(</span>input_channel <span class=\"token operator\">=</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span>change_channel <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Inceptionv3_frist_block<span class=\"token punctuation\">(</span>input_channel <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span>change_channel <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Inceptionv3_frist_block<span class=\"token punctuation\">(</span>input_channel <span class=\"token operator\">=</span> <span class=\"token number\">288</span><span class=\"token punctuation\">,</span>change_channel <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">#35,35,288 -> 17,17,768</span>\n        self<span class=\"token punctuation\">.</span>block2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            Inceptionv3_second_block<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">288</span><span class=\"token punctuation\">,</span>is_first_block_part<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Inceptionv3_second_block<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">768</span><span class=\"token punctuation\">,</span>change_channel<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Inceptionv3_second_block<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">768</span><span class=\"token punctuation\">,</span>change_channel<span class=\"token operator\">=</span><span class=\"token number\">160</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Inceptionv3_second_block<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">768</span><span class=\"token punctuation\">,</span>change_channel<span class=\"token operator\">=</span><span class=\"token number\">160</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Inceptionv3_second_block<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">768</span><span class=\"token punctuation\">,</span>change_channel<span class=\"token operator\">=</span><span class=\"token number\">192</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">#17,17,768 -> 8,8,2048</span>\n        self<span class=\"token punctuation\">.</span>block3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            Inceptionv3_third_block<span class=\"token punctuation\">(</span><span class=\"token number\">768</span><span class=\"token punctuation\">,</span>is_first_block_part<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Inceptionv3_third_block<span class=\"token punctuation\">(</span><span class=\"token number\">1280</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Inceptionv3_third_block<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>avg <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveMaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>linear <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>block1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>block2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>block3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>avg<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<p>emmmmmmm…????重新写完一个竟然用了好几个小时？？？？？看来是人老了:-(</p>\n<h3 id=\"Xception\"><a href=\"#Xception\" class=\"headerlink\" title=\"Xception\"></a>Xception</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Xception_Entry_flow</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>change_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Xception_Entry_flow<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>shortcut <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>change_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>change_channel<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>change_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>change_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>change_channel<span class=\"token punctuation\">,</span>change_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span>change_channel<span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>change_channel<span class=\"token punctuation\">,</span>change_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>change_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        residual <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>shortcut<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">+=</span> residual\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Xception_Middle_flow</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Xception_Middle_flow<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        shortcut <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">+=</span> shortcut\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Xception_Exit_flow</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Xception_Exit_flow<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>shortcut <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span>input_channel<span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span><span class=\"token number\">1536</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">1536</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">1536</span><span class=\"token punctuation\">,</span><span class=\"token number\">1536</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>groups <span class=\"token operator\">=</span><span class=\"token number\">1536</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">1536</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>AdaptiveMaxPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        residual <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>shortcut<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">+=</span>residual\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Xception</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Xception<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>first_block <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>Entry_flow <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            Xception_Entry_flow<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Entry_flow<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Entry_flow<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">728</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>Middle_flow <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>Exit_flow <span class=\"token operator\">=</span> Xception_Exit_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>linear <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>first_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>Entry_flow<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>Middle_flow<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>Exit_flow<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<p>至此，关于之前所有用<code>keras</code>构建的特征提取网络已经全部重构完毕，后续看情况可能会继续更新一下<code>DenseNet</code>、<code>ShuffleNet</code>和其他组合型特征提取网络。emmmmmmm….话说又用了一个上午:-(<br>对了，如果有读者想要看一下网络结构的细节部分，此处提供一下代码，此处代码可以进行适当修改，无缝链接到其他文章中的网络。</p>\n<pre class=\" language-python\"><code class=\"language-python\">net <span class=\"token operator\">=</span> Xception<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nnet<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">'cuda'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ninput <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">)</span>\nout <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#网络结构</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出参数</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#网络细节</span>\nsummary<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">299</span><span class=\"token punctuation\">,</span><span class=\"token number\">299</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习神经网络特征提取（七）\"><a href=\"#深度学习神经网络特征提取（七）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（七）\"></a>深度学习神经网络特征提取（七）</h2><p>emmmmmmm….代码重构的过程实在是无聊与枯燥，烦躁的心情也无法抑制，不过运动可以缓解一下。整天坐在实验室，整个人就是个关禁闭的状态啊<del>~</del>感觉近期就是处于一个懵逼的状态:-(<br>哎，不说了，开始今天的文章吧。。。本次文章给出<code>Inception</code>系列的<code>Pytorch</code>版本的代码。关于网络的讲解部分，大家参考前期的<a href=\"http://fanrencli.cn/2021/04/20/feature-extractor/inception/\">文章</a></p>\n<h3 id=\"Inceptionv3\"><a href=\"#Inceptionv3\" class=\"headerlink\" title=\"Inceptionv3\"></a>Inceptionv3</h3><pre><code class=\"python\">def conv2d_bn(input_channel, output_channel, kernel_size, padding=0, stride=1):\n    return nn.Sequential(\n        nn.Conv2d(input_channel,output_channel,kernel_size=kernel_size,padding=padding,stride=stride,bias=False),\n        nn.BatchNorm2d(output_channel),\n        nn.ReLU(inplace = True)\n    )</code></pre>\n<pre><code class=\"python\">class Inceptionv3_frist_block(nn.Module):\n    def __init__(self,input_channel,change_channel):\n        super(Inceptionv3_frist_block,self).__init__()\n        self.first_branch = conv2d_bn(input_channel=input_channel,output_channel=64,kernel_size=1,stride=1)\n        self.second_branch = nn.Sequential(\n            conv2d_bn(input_channel=input_channel,output_channel=48,kernel_size=1),\n            conv2d_bn(input_channel=48,output_channel=64,kernel_size=5,padding=2)\n        )\n        self.third_branch = nn.Sequential(\n            conv2d_bn(input_channel=input_channel,output_channel=64,kernel_size=1),\n            conv2d_bn(input_channel=64,output_channel=96,kernel_size=3,padding=1),\n            conv2d_bn(input_channel=96,output_channel=96,kernel_size=3,padding=1)\n        )\n        self.forth_branch = nn.Sequential(\n            nn.AvgPool2d(kernel_size=3,stride=1,padding=1),\n            conv2d_bn(input_channel=input_channel,output_channel=change_channel,kernel_size=1)\n        )\n    def forward(self,x):\n        branch1 = self.first_branch(x)\n        branch2 = self.second_branch(x)\n        branch3 = self.third_branch(x)\n        branch4 = self.forth_branch(x)\n        x = torch.cat((branch1,branch2,branch3,branch4),1)\n        return x</code></pre>\n<pre><code class=\"python\">class Inceptionv3_second_block(nn.Module):\n    def __init__(self,input_channel,change_channel=0,is_first_block_part=False):\n        super(Inceptionv3_second_block,self).__init__()\n        self.is_first_block_part = is_first_block_part\n        if is_first_block_part:\n            self.first_branch = conv2d_bn(input_channel=input_channel,output_channel=384,kernel_size=3,stride=2)\n            self.second_branch = nn.Sequential(\n                conv2d_bn(input_channel=input_channel,output_channel=64,kernel_size=1),\n                conv2d_bn(input_channel=64,output_channel=96,kernel_size=3,padding=1),\n                conv2d_bn(input_channel=96,output_channel=96,kernel_size=3,stride=2)\n            )\n            self.third_branch = nn.MaxPool2d(kernel_size=3,stride=2)\n        else:\n            self.first_branch = conv2d_bn(input_channel=input_channel,output_channel=192,kernel_size=1)\n            self.second_branch = nn.Sequential(\n                conv2d_bn(input_channel=input_channel,output_channel=change_channel,kernel_size=1),\n                conv2d_bn(input_channel=change_channel,output_channel=change_channel,kernel_size=[1,7],padding=[0,3]),\n                conv2d_bn(input_channel=change_channel,output_channel=192,kernel_size=[7,1],padding=[3,0])\n            )\n            self.third_branch = nn.Sequential(\n                conv2d_bn(input_channel=input_channel,output_channel=change_channel,kernel_size=1),\n                conv2d_bn(input_channel=change_channel,output_channel=change_channel,kernel_size=[7,1],padding=[3,0]),\n                conv2d_bn(input_channel=change_channel,output_channel=change_channel,kernel_size=[1,7],padding=[0,3]),\n                conv2d_bn(input_channel=change_channel,output_channel=change_channel,kernel_size=[7,1],padding=[3,0]),\n                conv2d_bn(input_channel=change_channel,output_channel=192,kernel_size=[1,7],padding=[0,3])\n            )\n            self.forth_branch = nn.Sequential(\n                nn.AvgPool2d(kernel_size=3, stride = 1, padding=1),\n                conv2d_bn(input_channel=input_channel,output_channel=192,kernel_size=1)\n            )\n    def forward(self,x):\n        branch1 = self.first_branch(x)\n        branch2 = self.second_branch(x)\n        branch3 = self.third_branch(x)\n        if self.is_first_block_part:\n            x = torch.cat((branch1,branch2,branch3),1)\n        else:\n            branch4 = self.forth_branch(x)\n            x = torch.cat((branch1,branch2,branch3,branch4),1)\n        return x</code></pre>\n<pre><code class=\"python\">class Inceptionv3_third_block(nn.Module):\n    def __init__(self,input_channel,is_first_block_part=False):\n        super(Inceptionv3_third_block,self).__init__()\n        self.is_first_block_part = is_first_block_part\n        if is_first_block_part:\n            self.first_branch = nn.Sequential(\n                conv2d_bn(input_channel=input_channel,output_channel=192,kernel_size=1),\n                conv2d_bn(input_channel=192,output_channel=320,kernel_size=3,stride=2)\n            )\n            self.second_branch = nn.Sequential(\n                conv2d_bn(input_channel=input_channel,output_channel=192,kernel_size=1),\n                conv2d_bn(input_channel=192,output_channel=192,kernel_size=[1,7],padding=[0,3]),\n                conv2d_bn(input_channel=192,output_channel=192,kernel_size=[7,1],padding=[3,0]),\n                conv2d_bn(input_channel=192,output_channel=192,kernel_size=3,stride=2)\n            )\n            self.third_branch = nn.MaxPool2d(kernel_size=3,stride=2)\n        else:\n            #branch1x1\n            self.conv1 = conv2d_bn(input_channel=input_channel,output_channel=320,kernel_size=1)\n            #branch3x3\n            self.conv2 = conv2d_bn(input_channel=input_channel,output_channel=384,kernel_size=1)\n            #branch3x3_1\n            #branch3x3_2\n            self.conv3 = conv2d_bn(input_channel=384,output_channel=384,kernel_size=[1,3],padding=[0,1])\n            self.conv4 = conv2d_bn(input_channel=384,output_channel=384,kernel_size=[3,1],padding=[1,0])\n            #branch3x3db1\n            self.conv5 = conv2d_bn(input_channel=input_channel,output_channel=448,kernel_size=1)\n            self.conv6 = conv2d_bn(input_channel=448,output_channel=384,kernel_size=3,padding=1)\n            #branch3x3db1_1\n            #branch3x3db1_2\n            self.conv7 = conv2d_bn(input_channel=384,output_channel=384,kernel_size=[1,3],padding=[0,1])\n            self.conv8 = conv2d_bn(input_channel=384,output_channel=384,kernel_size=[3,1],padding=[1,0])\n\n            self.avg = nn.AvgPool2d(kernel_size=3,stride=1,padding =1)\n            self.conv9 = conv2d_bn(input_channel=input_channel,output_channel=192,kernel_size=1)\n\n    def forward(self,x):\n        if self.is_first_block_part:\n            branch1 = self.first_branch(x)\n            branch2 = self.second_branch(x)\n            branch3 = self.third_branch(x)\n            x = torch.cat((branch1,branch2,branch3),1)\n        else:\n            branch1 = self.conv1(x)\n\n            branch2 = self.conv2(x)\n            branch2_1 = self.conv3(branch2)\n            branch2_2 = self.conv4(branch2)\n            branch2 = torch.cat((branch2_1,branch2_2),1)\n\n            branch3 = self.conv5(x)\n            branch3 = self.conv6(branch3)\n            branch3_1 = self.conv7(branch3)\n            branch3_2 = self.conv8(branch3)\n            branch3 = torch.cat((branch3_1,branch3_2),1)\n\n            branch4 = self.avg(x)\n            branch4 = self.conv9(branch4)\n            x = torch.cat((branch1,branch2,branch3,branch4),1)\n        return x</code></pre>\n<pre><code class=\"python\">class Inceptionv3(nn.Module):\n    def __init__(self,num_classes):\n        super(Inceptionv3,self).__init__()\n        # input_shape  = 3,299,299\n        self.model1 = nn.Sequential(\n            # 299,299 -&gt; 149,149 \n            conv2d_bn(input_channel=3,output_channel=32,kernel_size=3,stride=2),\n            # 149,149 -&gt; 147,147\n            conv2d_bn(input_channel=32,output_channel=32,kernel_size=3),\n            # 147,147 -&gt; 147,147\n            conv2d_bn(input_channel=32,output_channel=64,kernel_size=3,padding=1),\n            # 147,147 -&gt; 73,73\n            nn.MaxPool2d(kernel_size=3,stride=2),\n            # 73,73 -&gt; 73,73\n            conv2d_bn(input_channel=64,output_channel=80,kernel_size=1),\n            # 73,73 -&gt; 71,71\n            conv2d_bn(input_channel=80,output_channel=192,kernel_size=3),\n            # 71,71 -&gt; 35,35\n            nn.MaxPool2d(kernel_size=3,stride=2)\n        )\n        # 35,35,192 -&gt; 35,35,288\n        self.block1 = nn.Sequential(\n            Inceptionv3_frist_block(input_channel = 192,change_channel = 32),\n            Inceptionv3_frist_block(input_channel = 256,change_channel = 64),\n            Inceptionv3_frist_block(input_channel = 288,change_channel = 64)\n        )\n        #35,35,288 -&gt; 17,17,768\n        self.block2 = nn.Sequential(\n            Inceptionv3_second_block(input_channel=288,is_first_block_part=True),\n            Inceptionv3_second_block(input_channel=768,change_channel=128),\n            Inceptionv3_second_block(input_channel=768,change_channel=160),\n            Inceptionv3_second_block(input_channel=768,change_channel=160),\n            Inceptionv3_second_block(input_channel=768,change_channel=192)\n        )\n        #17,17,768 -&gt; 8,8,2048\n        self.block3 = nn.Sequential(\n            Inceptionv3_third_block(768,is_first_block_part=True),\n            Inceptionv3_third_block(1280),\n            Inceptionv3_third_block(2048),\n        )\n        self.avg = nn.AdaptiveMaxPool2d(1)\n        self.linear = nn.Linear(2048,num_classes)\n    def forward(self,x):\n        x = self.model1(x)\n        x =self.block1(x)\n        x = self.block2(x)\n        x = self.block3(x)\n        x = self.avg(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.linear(x)\n        return x</code></pre>\n<p>emmmmmmm…????重新写完一个竟然用了好几个小时？？？？？看来是人老了:-(</p>\n<h3 id=\"Xception\"><a href=\"#Xception\" class=\"headerlink\" title=\"Xception\"></a>Xception</h3><pre><code class=\"python\">class Xception_Entry_flow(nn.Module):\n    def __init__(self,input_channel,change_channel):\n        super(Xception_Entry_flow,self).__init__()\n        self.shortcut = nn.Sequential(\n            nn.Conv2d(input_channel,change_channel,kernel_size=1,stride=2),\n            nn.BatchNorm2d(change_channel)\n        )\n        self.model = nn.Sequential(\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,change_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(change_channel),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(change_channel,change_channel,kernel_size=3,stride = 1,padding =1,groups =change_channel,bias=False),\n            nn.Conv2d(change_channel,change_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(change_channel),\n            nn.MaxPool2d(kernel_size=3,stride= 2,padding=1)\n        )\n    def forward(self,x):\n        residual = self.shortcut(x)\n        x = self.model(x)\n        x += residual\n        return x</code></pre>\n<pre><code class=\"python\">class Xception_Middle_flow(nn.Module):\n    def __init__(self,input_channel):\n        super(Xception_Middle_flow,self).__init__()\n        self.model = nn.Sequential(\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,input_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(input_channel),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,input_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(input_channel),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,input_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(input_channel),\n        )\n    def forward(self,x):\n        shortcut = x\n        x = self.model(x)\n        x += shortcut\n        return x</code></pre>\n<pre><code class=\"python\">class Xception_Exit_flow(nn.Module):\n    def __init__(self,input_channel):\n        super(Xception_Exit_flow,self).__init__()\n        self.shortcut = nn.Sequential(\n            nn.Conv2d(input_channel,1024,kernel_size=1,stride=2,bias=False),\n            nn.BatchNorm2d(1024)\n        )\n        self.model1 = nn.Sequential(\n            nn.ReLU(inplace = True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,input_channel,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(input_channel),\n            nn.ReLU(inplace = True),\n            nn.Conv2d(input_channel,input_channel,kernel_size=3,stride = 1,padding =1,groups =input_channel,bias=False),\n            nn.Conv2d(input_channel,1024,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(1024),\n            nn.MaxPool2d(kernel_size=3,stride=2,padding=1)\n        )\n        self.model2 = nn.Sequential(\n            nn.Conv2d(1024,1024,kernel_size=3,stride = 1,padding =1,groups =1024,bias=False),\n            nn.Conv2d(1024,1536,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(1536),\n            nn.ReLU(inplace = True),\n            nn.Conv2d(1536,1536,kernel_size=3,stride = 1,padding =1,groups =1536,bias=False),\n            nn.Conv2d(1536,2048,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(2048),\n            nn.ReLU(inplace = True),\n            nn.AdaptiveMaxPool2d(1)\n        )\n    def forward(self,x):\n        residual = self.shortcut(x)\n        x = self.model1(x)\n        x +=residual\n        x = self.model2(x)\n        return x</code></pre>\n<pre><code class=\"python\">class Xception(nn.Module):\n    def __init__(self,num_classes):\n        super(Xception,self).__init__()\n        self.first_block = nn.Sequential(\n            nn.Conv2d(3,32,kernel_size=3,stride=2,bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(32,64,kernel_size=3,stride=1,padding=1,bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True)\n        )\n        self.Entry_flow = nn.Sequential(\n            Xception_Entry_flow(64,128),\n            Xception_Entry_flow(128,256),\n            Xception_Entry_flow(256,728)\n        )\n        self.Middle_flow = nn.Sequential(\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728),\n            Xception_Middle_flow(728)\n        )\n        self.Exit_flow = Xception_Exit_flow(728)\n        self.linear = nn.Linear(2048,num_classes)\n    def forward(self,x):\n        x = self.first_block(x)\n        x = self.Entry_flow(x)\n        x = self.Middle_flow(x)\n        x = self.Exit_flow(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.linear(x)\n        return x</code></pre>\n<p>至此，关于之前所有用<code>keras</code>构建的特征提取网络已经全部重构完毕，后续看情况可能会继续更新一下<code>DenseNet</code>、<code>ShuffleNet</code>和其他组合型特征提取网络。emmmmmmm….话说又用了一个上午:-(<br>对了，如果有读者想要看一下网络结构的细节部分，此处提供一下代码，此处代码可以进行适当修改，无缝链接到其他文章中的网络。</p>\n<pre><code class=\"python\">net = Xception(10)\nnet.to(torch.device(&#39;cuda&#39;))\ninput = torch.randn(10,3,224,224)\nout = net(input)\n#网络结构\nprint(net)\n#输出参数\nprint(out.shape)\n#网络细节\nsummary(net,(3,299,299))</code></pre>\n"},{"title":"FCN","date":"2021-05-10T07:31:42.000Z","author":"Fanrencli","_content":"\n## 深度学习之语义分割FCN(2015)\n\n### FCN网络简介\nemmmmmmm...时隔几个星期，语义分割系列又开始了，从这期开始所有的代码都会以`pytorch`框架给出。加油吧，少年~~\n\n话不多说，开始今天的语义分割之`FCN`。总的来说，`FCN`网络基本上可以算是语义分割的重量级人物。基于CNN网络在进行卷积和池化的过程中会不断缩小特征层，不可避免丢失了一些图像细节，所以到最后的特征层基本就无法判断每个像素具体属于哪个物体，没有办法做到精确分割。而针对这个问题，`FCN`应运而生。\n\n相比于之前CNN网络，`FCN`网络如同它的名称一般，是一个全卷积的网络，FCN抛弃了传统CNN网络最后的全连接层，全部采用卷积层替换。这样最后获得是一个二维的特征层，便于后面的反卷积扩张，具体情况如下图（根据论文中的阐述，主干网络使用的是VGG16）。\n![FCN网络结构](http://39.106.34.39:4567/_20210510164538.png)\n\n经过上图所示的特征提取网络之后，对相应的特征层进行反卷积上采样，将特征层扩大到原来图像的大小，然后计算loss。这样`FCN`的基本结构就完成了。而这里的重点就是在于选择那个特征层进行上采样，由此根据选择的特征层，将FCN网络分成三种形式：`FCN32s`、`FCN16s`和`FCN8s`，分别对应32步长上采样，16步长上采样和8倍步长上采样。具体形式如下图。\n\n![FCN网络结构](http://39.106.34.39:4567/_20210510165258.png)\n\n至于loss函数部分，就是交叉熵函数。接下来代码部分，会给出三种形式的`FCN`代码，以及相关的关键注释。\n\n### FCN32s\n```python\nclass VGG16(nn.Module):\n    def __init__(self,num_classes):\n        super(VGG16,self).__init__()\n        #input_shape(3,500,500) \n        self.conv1 = nn.Conv2d(3,64,kernel_size=3,padding =100,stride=1)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.conv2 = nn.Conv2d(64,64,kernel_size=3,padding =1,stride=1)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.maxpool1 = nn.MaxPool2d(kernel_size=2,stride = 2)\n        \n        self.conv3 = nn.Conv2d(64,128,kernel_size=3,padding =1,stride=1)\n        self.relu3 = nn.ReLU(inplace=True)\n        self.conv4 = nn.Conv2d(128,128,kernel_size=3,padding =1,stride=1)\n        self.relu4 = nn.ReLU(inplace=True)\n        self.maxpool2 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv5 = nn.Conv2d(128,256,kernel_size=3,padding =1,stride=1)\n        self.relu5 = nn.ReLU(inplace=True)\n        self.conv6 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu6 = nn.ReLU(inplace=True)\n        self.conv7 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu7 = nn.ReLU(inplace=True)\n        self.maxpool3 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv8 = nn.Conv2d(256,512,kernel_size=3,padding =1,stride=1)\n        self.relu8 = nn.ReLU(inplace=True)\n        self.conv9 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu9 = nn.ReLU(inplace=True)\n        self.conv10 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu10 = nn.ReLU(inplace=True)\n        self.maxpool4 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv11 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu11 = nn.ReLU(inplace=True)\n        self.conv12 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu12 = nn.ReLU(inplace=True)\n        self.conv13 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu13 = nn.ReLU(inplace=True)\n        self.maxpool5 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv14 = nn.Conv2d(512,4096,7)\n        self.relu14 =nn.ReLU(inplace=True)\n        self.dropout1 = nn.Dropout2d()\n\n        self.conv15 = nn.Conv2d(4096,4096,1)\n        self.relu15 =nn.ReLU(inplace=True)\n        self.dropout2 = nn.Dropout2d()\n\n        self.score_fr = nn.Conv2d(4096,num_classes,1)\n        self.upscore32 = nn.ConvTranspose2d(num_classes,num_classes,64,stride=32,bias=False)\n\n    def forward(self,x):\n        h = x\n        x = self.conv1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.relu2(x)\n        x = self.maxpool1(x)\n        x = self.conv3(x)\n        x = self.relu3(x)\n        x = self.conv4(x)\n        x = self.relu4(x)\n        x = self.maxpool2(x)\n\n        x = self.conv5(x)\n        x = self.relu5(x)\n        x = self.conv6(x)\n        x = self.relu6(x)\n        x = self.conv7(x)\n        x = self.relu7(x)\n        x = self.maxpool3(x)\n\n        x = self.conv8(x)\n        x = self.relu8(x)\n        x = self.conv9(x)\n        x = self.relu9(x)\n        x = self.conv10(x)\n        x = self.relu10(x)\n        x = self.maxpool4(x)\n\n        x = self.conv11(x)\n        x = self.relu11(x)\n        x = self.conv12(x)\n        x = self.relu12(x)\n        x = self.conv13(x)\n        x = self.relu13(x)\n        x = self.maxpool5(x)\n\n        x = self.conv14(x)\n        x = self.relu14(x)\n        x = self.dropout1(x)\n        x = self.conv15(x)\n        x = self.relu15(x)\n        x= self.dropout2(x)\n\n        x = self.score_fr(x)\n        x = self.upscore32(x)\n        x = x[:, :, 6:6 + h.size()[2], 6:6 + h.size()[3]].contiguous()\n        return x\n```\n\n### FCN16s\n\n```python\nclass VGG16(nn.Module):\n    def __init__(self,num_classes):\n        super(VGG16,self).__init__()\n        #input_shape(3,500,500)\n        self.conv1 = nn.Conv2d(3,64,kernel_size=3,padding =100,stride=1)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.conv2 = nn.Conv2d(64,64,kernel_size=3,padding =1,stride=1)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.maxpool1 = nn.MaxPool2d(kernel_size=2,stride = 2)\n        \n        self.conv3 = nn.Conv2d(64,128,kernel_size=3,padding =1,stride=1)\n        self.relu3 = nn.ReLU(inplace=True)\n        self.conv4 = nn.Conv2d(128,128,kernel_size=3,padding =1,stride=1)\n        self.relu4 = nn.ReLU(inplace=True)\n        self.maxpool2 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv5 = nn.Conv2d(128,256,kernel_size=3,padding =1,stride=1)\n        self.relu5 = nn.ReLU(inplace=True)\n        self.conv6 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu6 = nn.ReLU(inplace=True)\n        self.conv7 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu7 = nn.ReLU(inplace=True)\n        self.maxpool3 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv8 = nn.Conv2d(256,512,kernel_size=3,padding =1,stride=1)\n        self.relu8 = nn.ReLU(inplace=True)\n        self.conv9 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu9 = nn.ReLU(inplace=True)\n        self.conv10 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu10 = nn.ReLU(inplace=True)\n        self.maxpool4 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv11 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu11 = nn.ReLU(inplace=True)\n        self.conv12 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu12 = nn.ReLU(inplace=True)\n        self.conv13 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu13 = nn.ReLU(inplace=True)\n        self.maxpool5 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv14 = nn.Conv2d(512,4096,7)\n        self.relu14 =nn.ReLU(inplace=True)\n        self.dropout1 = nn.Dropout2d()\n\n        self.conv15 = nn.Conv2d(4096,4096,1)\n        self.relu15 =nn.ReLU(inplace=True)\n        self.dropout2 = nn.Dropout2d()\n\n        self.score_fr = nn.Conv2d(4096,num_classes,1)\n\n        self.upscore16 = nn.ConvTranspose2d(num_classes,num_classes,32,stride=16,bias=False)\n        self.upscore2 = nn.ConvTranspose2d(num_classes,num_classes,4,stride=2,bias=False)\n        self.score_pool4 = nn.Conv2d(512,num_classes,kernel_size=1,stride=1,bias=False)\n    def forward(self,x):\n        h = x\n        x = self.conv1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.relu2(x)\n        x = self.maxpool1(x)\n\n        x = self.conv3(x)\n        x = self.relu3(x)\n        x = self.conv4(x)\n        x = self.relu4(x)\n        x = self.maxpool2(x)\n\n        x = self.conv5(x)\n        x = self.relu5(x)\n        x = self.conv6(x)\n        x = self.relu6(x)\n        x = self.conv7(x)\n        x = self.relu7(x)\n        x = self.maxpool3(x)\n\n        x = self.conv8(x)\n        x = self.relu8(x)\n        x = self.conv9(x)\n        x = self.relu9(x)\n        x = self.conv10(x)\n        x = self.relu10(x)\n        x = self.maxpool4(x)\n        pool4 = x #1/16  31\n        x = self.conv11(x)\n        x = self.relu11(x)\n        x = self.conv12(x)\n        x = self.relu12(x)\n        x = self.conv13(x)\n        x = self.relu13(x)\n        x = self.maxpool5(x)\n\n        x = self.conv14(x)\n        x = self.relu14(x)\n        x = self.dropout1(x)\n        x = self.conv15(x)\n        x = self.relu15(x)\n        x= self.dropout2(x)\n\n        x = self.score_fr(x)\n\n        x = self.upscore2(x) #1/16\n        pool4 = self.score_pool4(pool4) #pool4调整通道数\n        x = x + pool4[:,:,5:5+x.size(2),5:5+x.size(3)]\n        x = x.contiguous()\n        x = self.upscore16(x)\n        x = x[:,:,27:27+h.size(2),27:27+h.size(3)].contiguous()\n        return x\n```\n\n### FCN8s\n```python\nclass VGG16(nn.Module):\n    def __init__(self,num_classes):\n        super(VGG16,self).__init__()\n        #input_shape(3,500,500) \n        self.conv1 = nn.Conv2d(3,64,kernel_size=3,padding =100,stride=1)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.conv2 = nn.Conv2d(64,64,kernel_size=3,padding =1,stride=1)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.maxpool1 = nn.MaxPool2d(kernel_size=2,stride = 2)\n        \n        self.conv3 = nn.Conv2d(64,128,kernel_size=3,padding =1,stride=1)\n        self.relu3 = nn.ReLU(inplace=True)\n        self.conv4 = nn.Conv2d(128,128,kernel_size=3,padding =1,stride=1)\n        self.relu4 = nn.ReLU(inplace=True)\n        self.maxpool2 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv5 = nn.Conv2d(128,256,kernel_size=3,padding =1,stride=1)\n        self.relu5 = nn.ReLU(inplace=True)\n        self.conv6 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu6 = nn.ReLU(inplace=True)\n        self.conv7 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu7 = nn.ReLU(inplace=True)\n        self.maxpool3 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv8 = nn.Conv2d(256,512,kernel_size=3,padding =1,stride=1)\n        self.relu8 = nn.ReLU(inplace=True)\n        self.conv9 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu9 = nn.ReLU(inplace=True)\n        self.conv10 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu10 = nn.ReLU(inplace=True)\n        self.maxpool4 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv11 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu11 = nn.ReLU(inplace=True)\n        self.conv12 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu12 = nn.ReLU(inplace=True)\n        self.conv13 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu13 = nn.ReLU(inplace=True)\n        self.maxpool5 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv14 = nn.Conv2d(512,4096,7)\n        self.relu14 =nn.ReLU(inplace=True)\n        self.dropout1 = nn.Dropout2d()\n\n        self.conv15 = nn.Conv2d(4096,4096,1)\n        self.relu15 =nn.ReLU(inplace=True)\n        self.dropout2 = nn.Dropout2d()\n\n        self.score_fr = nn.Conv2d(4096,num_classes,1)\n        self.score_pool3 = nn.Conv2d(256, num_classes, 1)\n        self.score_pool4 = nn.Conv2d(512, num_classes, 1)\n\n\n        self.upscore2 = nn.ConvTranspose2d(num_classes, num_classes, 4, stride=2, bias=False)\n        self.upscore8 = nn.ConvTranspose2d(num_classes, num_classes, 16, stride=8, bias=False)\n        self.upscore2x2 = nn.ConvTranspose2d(num_classes, num_classes, 4, stride=2, bias=False)\n    def forward(self,x):\n        h = x\n        x = self.conv1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.relu2(x)\n        x = self.maxpool1(x)\n        x = self.conv3(x)\n        x = self.relu3(x)\n        x = self.conv4(x)\n        x = self.relu4(x)\n        x = self.maxpool2(x)\n\n        x = self.conv5(x)\n        x = self.relu5(x)\n        x = self.conv6(x)\n        x = self.relu6(x)\n        x = self.conv7(x)\n        x = self.relu7(x)\n        x = self.maxpool3(x)\n        pool3 = x\n        x = self.conv8(x)\n        x = self.relu8(x)\n        x = self.conv9(x)\n        x = self.relu9(x)\n        x = self.conv10(x)\n        x = self.relu10(x)\n        x = self.maxpool4(x)\n        pool4 = x\n        x = self.conv11(x)\n        x = self.relu11(x)\n        x = self.conv12(x)\n        x = self.relu12(x)\n        x = self.conv13(x)\n        x = self.relu13(x)\n        x = self.maxpool5(x)\n\n        x = self.conv14(x)\n        x = self.relu14(x)\n        x = self.dropout1(x)\n        x = self.conv15(x)\n        x = self.relu15(x)\n        x= self.dropout2(x)\n\n        x = self.score_fr(x)\n        #2倍反卷积\n        x = self.upscore2(x)\n        # 调整pool4通道\n        pool4 = self.score_pool4(pool4)\n        # 融合 pool4\n        x = x + pool4[:, :, 5:5 + x.size(2), 5:5 + x.size(3)]\n        # 再次2倍反卷积\n        x = self.upscore2x2(x)\n        #调整pool3通道数\n        pool3 = self.score_pool3(pool3)\n        #融合pool3\n        x = x + pool3[:, :, 9:9 + x.size(2), 9:9 + x.size(3)]\n        # 8倍反卷积\n        x = self.upscore8(x)\n        x = x[:, :, 31:31 + h.size(2), 31:31 + h.size(3)].contiguous()\n\n        return x\n```\n\n至此，关于FCN网络的结构更新完毕了，其中我们输入的原始图片大小为500x500，所以读者在自行构建数据集时需要将图片固定到500x500的大小，如果读者想要使用其他尺寸大小的图片进行训练，则需要修改网络中的一些参数，其中注意本文网络在第一次卷积层中给出了`100`大小的padding，这个主要是为了适合500pixel图片所设计的，如果读者想要自己设计图片大小，则需要自行修改。其中由于在进行倍数反卷积时会导致层数之间的size大小不同，所以在每层融合的时候都进行了一定量的裁剪操作，读者需要考虑到这些，如果你都了解了，那么你就可以自行修改了。\n至于FCN的loss函数部分，由于只是一个简单的交叉熵，此处不再进行更新，会在更新完所有语义分割网络之后，进行单独讲解，或者给出一般性的代码。","source":"_posts/semantic_segmentation/FCN.md","raw":"---\ntitle: FCN\ndate: 2021-05-10 15:31:42\ncategories:\n- Deep Learning\ntags:\n- semantic segmentation\n- FCN\nauthor: Fanrencli\n---\n\n## 深度学习之语义分割FCN(2015)\n\n### FCN网络简介\nemmmmmmm...时隔几个星期，语义分割系列又开始了，从这期开始所有的代码都会以`pytorch`框架给出。加油吧，少年~~\n\n话不多说，开始今天的语义分割之`FCN`。总的来说，`FCN`网络基本上可以算是语义分割的重量级人物。基于CNN网络在进行卷积和池化的过程中会不断缩小特征层，不可避免丢失了一些图像细节，所以到最后的特征层基本就无法判断每个像素具体属于哪个物体，没有办法做到精确分割。而针对这个问题，`FCN`应运而生。\n\n相比于之前CNN网络，`FCN`网络如同它的名称一般，是一个全卷积的网络，FCN抛弃了传统CNN网络最后的全连接层，全部采用卷积层替换。这样最后获得是一个二维的特征层，便于后面的反卷积扩张，具体情况如下图（根据论文中的阐述，主干网络使用的是VGG16）。\n![FCN网络结构](http://39.106.34.39:4567/_20210510164538.png)\n\n经过上图所示的特征提取网络之后，对相应的特征层进行反卷积上采样，将特征层扩大到原来图像的大小，然后计算loss。这样`FCN`的基本结构就完成了。而这里的重点就是在于选择那个特征层进行上采样，由此根据选择的特征层，将FCN网络分成三种形式：`FCN32s`、`FCN16s`和`FCN8s`，分别对应32步长上采样，16步长上采样和8倍步长上采样。具体形式如下图。\n\n![FCN网络结构](http://39.106.34.39:4567/_20210510165258.png)\n\n至于loss函数部分，就是交叉熵函数。接下来代码部分，会给出三种形式的`FCN`代码，以及相关的关键注释。\n\n### FCN32s\n```python\nclass VGG16(nn.Module):\n    def __init__(self,num_classes):\n        super(VGG16,self).__init__()\n        #input_shape(3,500,500) \n        self.conv1 = nn.Conv2d(3,64,kernel_size=3,padding =100,stride=1)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.conv2 = nn.Conv2d(64,64,kernel_size=3,padding =1,stride=1)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.maxpool1 = nn.MaxPool2d(kernel_size=2,stride = 2)\n        \n        self.conv3 = nn.Conv2d(64,128,kernel_size=3,padding =1,stride=1)\n        self.relu3 = nn.ReLU(inplace=True)\n        self.conv4 = nn.Conv2d(128,128,kernel_size=3,padding =1,stride=1)\n        self.relu4 = nn.ReLU(inplace=True)\n        self.maxpool2 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv5 = nn.Conv2d(128,256,kernel_size=3,padding =1,stride=1)\n        self.relu5 = nn.ReLU(inplace=True)\n        self.conv6 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu6 = nn.ReLU(inplace=True)\n        self.conv7 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu7 = nn.ReLU(inplace=True)\n        self.maxpool3 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv8 = nn.Conv2d(256,512,kernel_size=3,padding =1,stride=1)\n        self.relu8 = nn.ReLU(inplace=True)\n        self.conv9 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu9 = nn.ReLU(inplace=True)\n        self.conv10 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu10 = nn.ReLU(inplace=True)\n        self.maxpool4 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv11 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu11 = nn.ReLU(inplace=True)\n        self.conv12 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu12 = nn.ReLU(inplace=True)\n        self.conv13 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu13 = nn.ReLU(inplace=True)\n        self.maxpool5 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv14 = nn.Conv2d(512,4096,7)\n        self.relu14 =nn.ReLU(inplace=True)\n        self.dropout1 = nn.Dropout2d()\n\n        self.conv15 = nn.Conv2d(4096,4096,1)\n        self.relu15 =nn.ReLU(inplace=True)\n        self.dropout2 = nn.Dropout2d()\n\n        self.score_fr = nn.Conv2d(4096,num_classes,1)\n        self.upscore32 = nn.ConvTranspose2d(num_classes,num_classes,64,stride=32,bias=False)\n\n    def forward(self,x):\n        h = x\n        x = self.conv1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.relu2(x)\n        x = self.maxpool1(x)\n        x = self.conv3(x)\n        x = self.relu3(x)\n        x = self.conv4(x)\n        x = self.relu4(x)\n        x = self.maxpool2(x)\n\n        x = self.conv5(x)\n        x = self.relu5(x)\n        x = self.conv6(x)\n        x = self.relu6(x)\n        x = self.conv7(x)\n        x = self.relu7(x)\n        x = self.maxpool3(x)\n\n        x = self.conv8(x)\n        x = self.relu8(x)\n        x = self.conv9(x)\n        x = self.relu9(x)\n        x = self.conv10(x)\n        x = self.relu10(x)\n        x = self.maxpool4(x)\n\n        x = self.conv11(x)\n        x = self.relu11(x)\n        x = self.conv12(x)\n        x = self.relu12(x)\n        x = self.conv13(x)\n        x = self.relu13(x)\n        x = self.maxpool5(x)\n\n        x = self.conv14(x)\n        x = self.relu14(x)\n        x = self.dropout1(x)\n        x = self.conv15(x)\n        x = self.relu15(x)\n        x= self.dropout2(x)\n\n        x = self.score_fr(x)\n        x = self.upscore32(x)\n        x = x[:, :, 6:6 + h.size()[2], 6:6 + h.size()[3]].contiguous()\n        return x\n```\n\n### FCN16s\n\n```python\nclass VGG16(nn.Module):\n    def __init__(self,num_classes):\n        super(VGG16,self).__init__()\n        #input_shape(3,500,500)\n        self.conv1 = nn.Conv2d(3,64,kernel_size=3,padding =100,stride=1)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.conv2 = nn.Conv2d(64,64,kernel_size=3,padding =1,stride=1)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.maxpool1 = nn.MaxPool2d(kernel_size=2,stride = 2)\n        \n        self.conv3 = nn.Conv2d(64,128,kernel_size=3,padding =1,stride=1)\n        self.relu3 = nn.ReLU(inplace=True)\n        self.conv4 = nn.Conv2d(128,128,kernel_size=3,padding =1,stride=1)\n        self.relu4 = nn.ReLU(inplace=True)\n        self.maxpool2 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv5 = nn.Conv2d(128,256,kernel_size=3,padding =1,stride=1)\n        self.relu5 = nn.ReLU(inplace=True)\n        self.conv6 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu6 = nn.ReLU(inplace=True)\n        self.conv7 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu7 = nn.ReLU(inplace=True)\n        self.maxpool3 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv8 = nn.Conv2d(256,512,kernel_size=3,padding =1,stride=1)\n        self.relu8 = nn.ReLU(inplace=True)\n        self.conv9 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu9 = nn.ReLU(inplace=True)\n        self.conv10 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu10 = nn.ReLU(inplace=True)\n        self.maxpool4 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv11 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu11 = nn.ReLU(inplace=True)\n        self.conv12 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu12 = nn.ReLU(inplace=True)\n        self.conv13 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu13 = nn.ReLU(inplace=True)\n        self.maxpool5 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv14 = nn.Conv2d(512,4096,7)\n        self.relu14 =nn.ReLU(inplace=True)\n        self.dropout1 = nn.Dropout2d()\n\n        self.conv15 = nn.Conv2d(4096,4096,1)\n        self.relu15 =nn.ReLU(inplace=True)\n        self.dropout2 = nn.Dropout2d()\n\n        self.score_fr = nn.Conv2d(4096,num_classes,1)\n\n        self.upscore16 = nn.ConvTranspose2d(num_classes,num_classes,32,stride=16,bias=False)\n        self.upscore2 = nn.ConvTranspose2d(num_classes,num_classes,4,stride=2,bias=False)\n        self.score_pool4 = nn.Conv2d(512,num_classes,kernel_size=1,stride=1,bias=False)\n    def forward(self,x):\n        h = x\n        x = self.conv1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.relu2(x)\n        x = self.maxpool1(x)\n\n        x = self.conv3(x)\n        x = self.relu3(x)\n        x = self.conv4(x)\n        x = self.relu4(x)\n        x = self.maxpool2(x)\n\n        x = self.conv5(x)\n        x = self.relu5(x)\n        x = self.conv6(x)\n        x = self.relu6(x)\n        x = self.conv7(x)\n        x = self.relu7(x)\n        x = self.maxpool3(x)\n\n        x = self.conv8(x)\n        x = self.relu8(x)\n        x = self.conv9(x)\n        x = self.relu9(x)\n        x = self.conv10(x)\n        x = self.relu10(x)\n        x = self.maxpool4(x)\n        pool4 = x #1/16  31\n        x = self.conv11(x)\n        x = self.relu11(x)\n        x = self.conv12(x)\n        x = self.relu12(x)\n        x = self.conv13(x)\n        x = self.relu13(x)\n        x = self.maxpool5(x)\n\n        x = self.conv14(x)\n        x = self.relu14(x)\n        x = self.dropout1(x)\n        x = self.conv15(x)\n        x = self.relu15(x)\n        x= self.dropout2(x)\n\n        x = self.score_fr(x)\n\n        x = self.upscore2(x) #1/16\n        pool4 = self.score_pool4(pool4) #pool4调整通道数\n        x = x + pool4[:,:,5:5+x.size(2),5:5+x.size(3)]\n        x = x.contiguous()\n        x = self.upscore16(x)\n        x = x[:,:,27:27+h.size(2),27:27+h.size(3)].contiguous()\n        return x\n```\n\n### FCN8s\n```python\nclass VGG16(nn.Module):\n    def __init__(self,num_classes):\n        super(VGG16,self).__init__()\n        #input_shape(3,500,500) \n        self.conv1 = nn.Conv2d(3,64,kernel_size=3,padding =100,stride=1)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.conv2 = nn.Conv2d(64,64,kernel_size=3,padding =1,stride=1)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.maxpool1 = nn.MaxPool2d(kernel_size=2,stride = 2)\n        \n        self.conv3 = nn.Conv2d(64,128,kernel_size=3,padding =1,stride=1)\n        self.relu3 = nn.ReLU(inplace=True)\n        self.conv4 = nn.Conv2d(128,128,kernel_size=3,padding =1,stride=1)\n        self.relu4 = nn.ReLU(inplace=True)\n        self.maxpool2 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv5 = nn.Conv2d(128,256,kernel_size=3,padding =1,stride=1)\n        self.relu5 = nn.ReLU(inplace=True)\n        self.conv6 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu6 = nn.ReLU(inplace=True)\n        self.conv7 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu7 = nn.ReLU(inplace=True)\n        self.maxpool3 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv8 = nn.Conv2d(256,512,kernel_size=3,padding =1,stride=1)\n        self.relu8 = nn.ReLU(inplace=True)\n        self.conv9 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu9 = nn.ReLU(inplace=True)\n        self.conv10 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu10 = nn.ReLU(inplace=True)\n        self.maxpool4 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv11 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu11 = nn.ReLU(inplace=True)\n        self.conv12 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu12 = nn.ReLU(inplace=True)\n        self.conv13 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu13 = nn.ReLU(inplace=True)\n        self.maxpool5 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv14 = nn.Conv2d(512,4096,7)\n        self.relu14 =nn.ReLU(inplace=True)\n        self.dropout1 = nn.Dropout2d()\n\n        self.conv15 = nn.Conv2d(4096,4096,1)\n        self.relu15 =nn.ReLU(inplace=True)\n        self.dropout2 = nn.Dropout2d()\n\n        self.score_fr = nn.Conv2d(4096,num_classes,1)\n        self.score_pool3 = nn.Conv2d(256, num_classes, 1)\n        self.score_pool4 = nn.Conv2d(512, num_classes, 1)\n\n\n        self.upscore2 = nn.ConvTranspose2d(num_classes, num_classes, 4, stride=2, bias=False)\n        self.upscore8 = nn.ConvTranspose2d(num_classes, num_classes, 16, stride=8, bias=False)\n        self.upscore2x2 = nn.ConvTranspose2d(num_classes, num_classes, 4, stride=2, bias=False)\n    def forward(self,x):\n        h = x\n        x = self.conv1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.relu2(x)\n        x = self.maxpool1(x)\n        x = self.conv3(x)\n        x = self.relu3(x)\n        x = self.conv4(x)\n        x = self.relu4(x)\n        x = self.maxpool2(x)\n\n        x = self.conv5(x)\n        x = self.relu5(x)\n        x = self.conv6(x)\n        x = self.relu6(x)\n        x = self.conv7(x)\n        x = self.relu7(x)\n        x = self.maxpool3(x)\n        pool3 = x\n        x = self.conv8(x)\n        x = self.relu8(x)\n        x = self.conv9(x)\n        x = self.relu9(x)\n        x = self.conv10(x)\n        x = self.relu10(x)\n        x = self.maxpool4(x)\n        pool4 = x\n        x = self.conv11(x)\n        x = self.relu11(x)\n        x = self.conv12(x)\n        x = self.relu12(x)\n        x = self.conv13(x)\n        x = self.relu13(x)\n        x = self.maxpool5(x)\n\n        x = self.conv14(x)\n        x = self.relu14(x)\n        x = self.dropout1(x)\n        x = self.conv15(x)\n        x = self.relu15(x)\n        x= self.dropout2(x)\n\n        x = self.score_fr(x)\n        #2倍反卷积\n        x = self.upscore2(x)\n        # 调整pool4通道\n        pool4 = self.score_pool4(pool4)\n        # 融合 pool4\n        x = x + pool4[:, :, 5:5 + x.size(2), 5:5 + x.size(3)]\n        # 再次2倍反卷积\n        x = self.upscore2x2(x)\n        #调整pool3通道数\n        pool3 = self.score_pool3(pool3)\n        #融合pool3\n        x = x + pool3[:, :, 9:9 + x.size(2), 9:9 + x.size(3)]\n        # 8倍反卷积\n        x = self.upscore8(x)\n        x = x[:, :, 31:31 + h.size(2), 31:31 + h.size(3)].contiguous()\n\n        return x\n```\n\n至此，关于FCN网络的结构更新完毕了，其中我们输入的原始图片大小为500x500，所以读者在自行构建数据集时需要将图片固定到500x500的大小，如果读者想要使用其他尺寸大小的图片进行训练，则需要修改网络中的一些参数，其中注意本文网络在第一次卷积层中给出了`100`大小的padding，这个主要是为了适合500pixel图片所设计的，如果读者想要自己设计图片大小，则需要自行修改。其中由于在进行倍数反卷积时会导致层数之间的size大小不同，所以在每层融合的时候都进行了一定量的裁剪操作，读者需要考虑到这些，如果你都了解了，那么你就可以自行修改了。\n至于FCN的loss函数部分，由于只是一个简单的交叉熵，此处不再进行更新，会在更新完所有语义分割网络之后，进行单独讲解，或者给出一般性的代码。","slug":"semantic_segmentation/FCN","published":1,"updated":"2021-07-13T08:16:07.750Z","_id":"ckol98e5n0001ocuogprqamd3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习之语义分割FCN-2015\"><a href=\"#深度学习之语义分割FCN-2015\" class=\"headerlink\" title=\"深度学习之语义分割FCN(2015)\"></a>深度学习之语义分割FCN(2015)</h2><h3 id=\"FCN网络简介\"><a href=\"#FCN网络简介\" class=\"headerlink\" title=\"FCN网络简介\"></a>FCN网络简介</h3><p>emmmmmmm…时隔几个星期，语义分割系列又开始了，从这期开始所有的代码都会以<code>pytorch</code>框架给出。加油吧，少年~~</p>\n<p>话不多说，开始今天的语义分割之<code>FCN</code>。总的来说，<code>FCN</code>网络基本上可以算是语义分割的重量级人物。基于CNN网络在进行卷积和池化的过程中会不断缩小特征层，不可避免丢失了一些图像细节，所以到最后的特征层基本就无法判断每个像素具体属于哪个物体，没有办法做到精确分割。而针对这个问题，<code>FCN</code>应运而生。</p>\n<p>相比于之前CNN网络，<code>FCN</code>网络如同它的名称一般，是一个全卷积的网络，FCN抛弃了传统CNN网络最后的全连接层，全部采用卷积层替换。这样最后获得是一个二维的特征层，便于后面的反卷积扩张，具体情况如下图（根据论文中的阐述，主干网络使用的是VGG16）。<br><img src=\"http://39.106.34.39:4567/_20210510164538.png\" alt=\"FCN网络结构\"></p>\n<p>经过上图所示的特征提取网络之后，对相应的特征层进行反卷积上采样，将特征层扩大到原来图像的大小，然后计算loss。这样<code>FCN</code>的基本结构就完成了。而这里的重点就是在于选择那个特征层进行上采样，由此根据选择的特征层，将FCN网络分成三种形式：<code>FCN32s</code>、<code>FCN16s</code>和<code>FCN8s</code>，分别对应32步长上采样，16步长上采样和8倍步长上采样。具体形式如下图。</p>\n<p><img src=\"http://39.106.34.39:4567/_20210510165258.png\" alt=\"FCN网络结构\"></p>\n<p>至于loss函数部分，就是交叉熵函数。接下来代码部分，会给出三种形式的<code>FCN</code>代码，以及相关的关键注释。</p>\n<h3 id=\"FCN32s\"><a href=\"#FCN32s\" class=\"headerlink\" title=\"FCN32s\"></a>FCN32s</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">VGG16</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>VGG16<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">#input_shape(3,500,500) </span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv5 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu5 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv6 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu6 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv7 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu7 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv8 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu8 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv9 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu9 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv10 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu10 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv11 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu11 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv12 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu12 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv13 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu13 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool5 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv14 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu14 <span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dropout1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout2d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv15 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu15 <span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dropout2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout2d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>score_fr <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>upscore32 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ConvTranspose2d<span class=\"token punctuation\">(</span>num_classes<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        h <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv5<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu5<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv6<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu6<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv7<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu7<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv8<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu8<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv9<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu9<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv10<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu10<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv11<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu11<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv12<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu12<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv13<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu13<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool5<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv14<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu14<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dropout1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv15<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu15<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x<span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dropout2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>score_fr<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>upscore32<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span> <span class=\"token operator\">+</span> h<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span> <span class=\"token operator\">+</span> h<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>contiguous<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<h3 id=\"FCN16s\"><a href=\"#FCN16s\" class=\"headerlink\" title=\"FCN16s\"></a>FCN16s</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">VGG16</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>VGG16<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">#input_shape(3,500,500)</span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv5 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu5 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv6 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu6 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv7 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu7 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv8 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu8 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv9 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu9 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv10 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu10 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv11 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu11 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv12 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu12 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv13 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu13 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool5 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv14 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu14 <span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dropout1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout2d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv15 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu15 <span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dropout2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout2d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>score_fr <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>upscore16 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ConvTranspose2d<span class=\"token punctuation\">(</span>num_classes<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>upscore2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ConvTranspose2d<span class=\"token punctuation\">(</span>num_classes<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>score_pool4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        h <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv5<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu5<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv6<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu6<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv7<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu7<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv8<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu8<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv9<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu9<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv10<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu10<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        pool4 <span class=\"token operator\">=</span> x <span class=\"token comment\" spellcheck=\"true\">#1/16  31</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv11<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu11<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv12<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu12<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv13<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu13<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool5<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv14<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu14<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dropout1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv15<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu15<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x<span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dropout2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>score_fr<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>upscore2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#1/16</span>\n        pool4 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>score_pool4<span class=\"token punctuation\">(</span>pool4<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#pool4调整通道数</span>\n        x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> pool4<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token operator\">+</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token operator\">+</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>contiguous<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>upscore16<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">27</span><span class=\"token punctuation\">:</span><span class=\"token number\">27</span><span class=\"token operator\">+</span>h<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">27</span><span class=\"token punctuation\">:</span><span class=\"token number\">27</span><span class=\"token operator\">+</span>h<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>contiguous<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<h3 id=\"FCN8s\"><a href=\"#FCN8s\" class=\"headerlink\" title=\"FCN8s\"></a>FCN8s</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">VGG16</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>VGG16<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">#input_shape(3,500,500) </span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv5 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu5 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv6 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu6 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv7 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu7 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv8 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu8 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv9 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu9 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv10 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu10 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv11 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu11 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv12 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu12 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv13 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu13 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool5 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv14 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu14 <span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dropout1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout2d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv15 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu15 <span class=\"token operator\">=</span>nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dropout2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout2d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>score_fr <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>score_pool3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> num_classes<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>score_pool4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> num_classes<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\n        self<span class=\"token punctuation\">.</span>upscore2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ConvTranspose2d<span class=\"token punctuation\">(</span>num_classes<span class=\"token punctuation\">,</span> num_classes<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>upscore8 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ConvTranspose2d<span class=\"token punctuation\">(</span>num_classes<span class=\"token punctuation\">,</span> num_classes<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>upscore2x2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ConvTranspose2d<span class=\"token punctuation\">(</span>num_classes<span class=\"token punctuation\">,</span> num_classes<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        h <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv5<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu5<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv6<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu6<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv7<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu7<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        pool3 <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv8<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu8<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv9<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu9<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv10<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu10<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        pool4 <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv11<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu11<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv12<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu12<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv13<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu13<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool5<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv14<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu14<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dropout1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv15<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu15<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x<span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dropout2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>score_fr<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">#2倍反卷积</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>upscore2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 调整pool4通道</span>\n        pool4 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>score_pool4<span class=\"token punctuation\">(</span>pool4<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 融合 pool4</span>\n        x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> pool4<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 再次2倍反卷积</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>upscore2x2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">#调整pool3通道数</span>\n        pool3 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>score_pool3<span class=\"token punctuation\">(</span>pool3<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">#融合pool3</span>\n        x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> pool3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">:</span><span class=\"token number\">9</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">:</span><span class=\"token number\">9</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 8倍反卷积</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>upscore8<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">:</span><span class=\"token number\">31</span> <span class=\"token operator\">+</span> h<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">:</span><span class=\"token number\">31</span> <span class=\"token operator\">+</span> h<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>contiguous<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> x</code></pre>\n<p>至此，关于FCN网络的结构更新完毕了，其中我们输入的原始图片大小为500x500，所以读者在自行构建数据集时需要将图片固定到500x500的大小，如果读者想要使用其他尺寸大小的图片进行训练，则需要修改网络中的一些参数，其中注意本文网络在第一次卷积层中给出了<code>100</code>大小的padding，这个主要是为了适合500pixel图片所设计的，如果读者想要自己设计图片大小，则需要自行修改。其中由于在进行倍数反卷积时会导致层数之间的size大小不同，所以在每层融合的时候都进行了一定量的裁剪操作，读者需要考虑到这些，如果你都了解了，那么你就可以自行修改了。<br>至于FCN的loss函数部分，由于只是一个简单的交叉熵，此处不再进行更新，会在更新完所有语义分割网络之后，进行单独讲解，或者给出一般性的代码。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习之语义分割FCN-2015\"><a href=\"#深度学习之语义分割FCN-2015\" class=\"headerlink\" title=\"深度学习之语义分割FCN(2015)\"></a>深度学习之语义分割FCN(2015)</h2><h3 id=\"FCN网络简介\"><a href=\"#FCN网络简介\" class=\"headerlink\" title=\"FCN网络简介\"></a>FCN网络简介</h3><p>emmmmmmm…时隔几个星期，语义分割系列又开始了，从这期开始所有的代码都会以<code>pytorch</code>框架给出。加油吧，少年~~</p>\n<p>话不多说，开始今天的语义分割之<code>FCN</code>。总的来说，<code>FCN</code>网络基本上可以算是语义分割的重量级人物。基于CNN网络在进行卷积和池化的过程中会不断缩小特征层，不可避免丢失了一些图像细节，所以到最后的特征层基本就无法判断每个像素具体属于哪个物体，没有办法做到精确分割。而针对这个问题，<code>FCN</code>应运而生。</p>\n<p>相比于之前CNN网络，<code>FCN</code>网络如同它的名称一般，是一个全卷积的网络，FCN抛弃了传统CNN网络最后的全连接层，全部采用卷积层替换。这样最后获得是一个二维的特征层，便于后面的反卷积扩张，具体情况如下图（根据论文中的阐述，主干网络使用的是VGG16）。<br><img src=\"http://39.106.34.39:4567/_20210510164538.png\" alt=\"FCN网络结构\"></p>\n<p>经过上图所示的特征提取网络之后，对相应的特征层进行反卷积上采样，将特征层扩大到原来图像的大小，然后计算loss。这样<code>FCN</code>的基本结构就完成了。而这里的重点就是在于选择那个特征层进行上采样，由此根据选择的特征层，将FCN网络分成三种形式：<code>FCN32s</code>、<code>FCN16s</code>和<code>FCN8s</code>，分别对应32步长上采样，16步长上采样和8倍步长上采样。具体形式如下图。</p>\n<p><img src=\"http://39.106.34.39:4567/_20210510165258.png\" alt=\"FCN网络结构\"></p>\n<p>至于loss函数部分，就是交叉熵函数。接下来代码部分，会给出三种形式的<code>FCN</code>代码，以及相关的关键注释。</p>\n<h3 id=\"FCN32s\"><a href=\"#FCN32s\" class=\"headerlink\" title=\"FCN32s\"></a>FCN32s</h3><pre><code class=\"python\">class VGG16(nn.Module):\n    def __init__(self,num_classes):\n        super(VGG16,self).__init__()\n        #input_shape(3,500,500) \n        self.conv1 = nn.Conv2d(3,64,kernel_size=3,padding =100,stride=1)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.conv2 = nn.Conv2d(64,64,kernel_size=3,padding =1,stride=1)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.maxpool1 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv3 = nn.Conv2d(64,128,kernel_size=3,padding =1,stride=1)\n        self.relu3 = nn.ReLU(inplace=True)\n        self.conv4 = nn.Conv2d(128,128,kernel_size=3,padding =1,stride=1)\n        self.relu4 = nn.ReLU(inplace=True)\n        self.maxpool2 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv5 = nn.Conv2d(128,256,kernel_size=3,padding =1,stride=1)\n        self.relu5 = nn.ReLU(inplace=True)\n        self.conv6 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu6 = nn.ReLU(inplace=True)\n        self.conv7 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu7 = nn.ReLU(inplace=True)\n        self.maxpool3 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv8 = nn.Conv2d(256,512,kernel_size=3,padding =1,stride=1)\n        self.relu8 = nn.ReLU(inplace=True)\n        self.conv9 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu9 = nn.ReLU(inplace=True)\n        self.conv10 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu10 = nn.ReLU(inplace=True)\n        self.maxpool4 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv11 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu11 = nn.ReLU(inplace=True)\n        self.conv12 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu12 = nn.ReLU(inplace=True)\n        self.conv13 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu13 = nn.ReLU(inplace=True)\n        self.maxpool5 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv14 = nn.Conv2d(512,4096,7)\n        self.relu14 =nn.ReLU(inplace=True)\n        self.dropout1 = nn.Dropout2d()\n\n        self.conv15 = nn.Conv2d(4096,4096,1)\n        self.relu15 =nn.ReLU(inplace=True)\n        self.dropout2 = nn.Dropout2d()\n\n        self.score_fr = nn.Conv2d(4096,num_classes,1)\n        self.upscore32 = nn.ConvTranspose2d(num_classes,num_classes,64,stride=32,bias=False)\n\n    def forward(self,x):\n        h = x\n        x = self.conv1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.relu2(x)\n        x = self.maxpool1(x)\n        x = self.conv3(x)\n        x = self.relu3(x)\n        x = self.conv4(x)\n        x = self.relu4(x)\n        x = self.maxpool2(x)\n\n        x = self.conv5(x)\n        x = self.relu5(x)\n        x = self.conv6(x)\n        x = self.relu6(x)\n        x = self.conv7(x)\n        x = self.relu7(x)\n        x = self.maxpool3(x)\n\n        x = self.conv8(x)\n        x = self.relu8(x)\n        x = self.conv9(x)\n        x = self.relu9(x)\n        x = self.conv10(x)\n        x = self.relu10(x)\n        x = self.maxpool4(x)\n\n        x = self.conv11(x)\n        x = self.relu11(x)\n        x = self.conv12(x)\n        x = self.relu12(x)\n        x = self.conv13(x)\n        x = self.relu13(x)\n        x = self.maxpool5(x)\n\n        x = self.conv14(x)\n        x = self.relu14(x)\n        x = self.dropout1(x)\n        x = self.conv15(x)\n        x = self.relu15(x)\n        x= self.dropout2(x)\n\n        x = self.score_fr(x)\n        x = self.upscore32(x)\n        x = x[:, :, 6:6 + h.size()[2], 6:6 + h.size()[3]].contiguous()\n        return x</code></pre>\n<h3 id=\"FCN16s\"><a href=\"#FCN16s\" class=\"headerlink\" title=\"FCN16s\"></a>FCN16s</h3><pre><code class=\"python\">class VGG16(nn.Module):\n    def __init__(self,num_classes):\n        super(VGG16,self).__init__()\n        #input_shape(3,500,500)\n        self.conv1 = nn.Conv2d(3,64,kernel_size=3,padding =100,stride=1)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.conv2 = nn.Conv2d(64,64,kernel_size=3,padding =1,stride=1)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.maxpool1 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv3 = nn.Conv2d(64,128,kernel_size=3,padding =1,stride=1)\n        self.relu3 = nn.ReLU(inplace=True)\n        self.conv4 = nn.Conv2d(128,128,kernel_size=3,padding =1,stride=1)\n        self.relu4 = nn.ReLU(inplace=True)\n        self.maxpool2 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv5 = nn.Conv2d(128,256,kernel_size=3,padding =1,stride=1)\n        self.relu5 = nn.ReLU(inplace=True)\n        self.conv6 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu6 = nn.ReLU(inplace=True)\n        self.conv7 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu7 = nn.ReLU(inplace=True)\n        self.maxpool3 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv8 = nn.Conv2d(256,512,kernel_size=3,padding =1,stride=1)\n        self.relu8 = nn.ReLU(inplace=True)\n        self.conv9 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu9 = nn.ReLU(inplace=True)\n        self.conv10 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu10 = nn.ReLU(inplace=True)\n        self.maxpool4 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv11 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu11 = nn.ReLU(inplace=True)\n        self.conv12 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu12 = nn.ReLU(inplace=True)\n        self.conv13 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu13 = nn.ReLU(inplace=True)\n        self.maxpool5 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv14 = nn.Conv2d(512,4096,7)\n        self.relu14 =nn.ReLU(inplace=True)\n        self.dropout1 = nn.Dropout2d()\n\n        self.conv15 = nn.Conv2d(4096,4096,1)\n        self.relu15 =nn.ReLU(inplace=True)\n        self.dropout2 = nn.Dropout2d()\n\n        self.score_fr = nn.Conv2d(4096,num_classes,1)\n\n        self.upscore16 = nn.ConvTranspose2d(num_classes,num_classes,32,stride=16,bias=False)\n        self.upscore2 = nn.ConvTranspose2d(num_classes,num_classes,4,stride=2,bias=False)\n        self.score_pool4 = nn.Conv2d(512,num_classes,kernel_size=1,stride=1,bias=False)\n    def forward(self,x):\n        h = x\n        x = self.conv1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.relu2(x)\n        x = self.maxpool1(x)\n\n        x = self.conv3(x)\n        x = self.relu3(x)\n        x = self.conv4(x)\n        x = self.relu4(x)\n        x = self.maxpool2(x)\n\n        x = self.conv5(x)\n        x = self.relu5(x)\n        x = self.conv6(x)\n        x = self.relu6(x)\n        x = self.conv7(x)\n        x = self.relu7(x)\n        x = self.maxpool3(x)\n\n        x = self.conv8(x)\n        x = self.relu8(x)\n        x = self.conv9(x)\n        x = self.relu9(x)\n        x = self.conv10(x)\n        x = self.relu10(x)\n        x = self.maxpool4(x)\n        pool4 = x #1/16  31\n        x = self.conv11(x)\n        x = self.relu11(x)\n        x = self.conv12(x)\n        x = self.relu12(x)\n        x = self.conv13(x)\n        x = self.relu13(x)\n        x = self.maxpool5(x)\n\n        x = self.conv14(x)\n        x = self.relu14(x)\n        x = self.dropout1(x)\n        x = self.conv15(x)\n        x = self.relu15(x)\n        x= self.dropout2(x)\n\n        x = self.score_fr(x)\n\n        x = self.upscore2(x) #1/16\n        pool4 = self.score_pool4(pool4) #pool4调整通道数\n        x = x + pool4[:,:,5:5+x.size(2),5:5+x.size(3)]\n        x = x.contiguous()\n        x = self.upscore16(x)\n        x = x[:,:,27:27+h.size(2),27:27+h.size(3)].contiguous()\n        return x</code></pre>\n<h3 id=\"FCN8s\"><a href=\"#FCN8s\" class=\"headerlink\" title=\"FCN8s\"></a>FCN8s</h3><pre><code class=\"python\">class VGG16(nn.Module):\n    def __init__(self,num_classes):\n        super(VGG16,self).__init__()\n        #input_shape(3,500,500) \n        self.conv1 = nn.Conv2d(3,64,kernel_size=3,padding =100,stride=1)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.conv2 = nn.Conv2d(64,64,kernel_size=3,padding =1,stride=1)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.maxpool1 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv3 = nn.Conv2d(64,128,kernel_size=3,padding =1,stride=1)\n        self.relu3 = nn.ReLU(inplace=True)\n        self.conv4 = nn.Conv2d(128,128,kernel_size=3,padding =1,stride=1)\n        self.relu4 = nn.ReLU(inplace=True)\n        self.maxpool2 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv5 = nn.Conv2d(128,256,kernel_size=3,padding =1,stride=1)\n        self.relu5 = nn.ReLU(inplace=True)\n        self.conv6 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu6 = nn.ReLU(inplace=True)\n        self.conv7 = nn.Conv2d(256,256,kernel_size=3,padding =1,stride=1)\n        self.relu7 = nn.ReLU(inplace=True)\n        self.maxpool3 = nn.MaxPool2d(kernel_size=2,stride=2)\n\n        self.conv8 = nn.Conv2d(256,512,kernel_size=3,padding =1,stride=1)\n        self.relu8 = nn.ReLU(inplace=True)\n        self.conv9 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu9 = nn.ReLU(inplace=True)\n        self.conv10 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu10 = nn.ReLU(inplace=True)\n        self.maxpool4 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv11 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu11 = nn.ReLU(inplace=True)\n        self.conv12 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu12 = nn.ReLU(inplace=True)\n        self.conv13 = nn.Conv2d(512,512,kernel_size=3,padding =1,stride=1)\n        self.relu13 = nn.ReLU(inplace=True)\n        self.maxpool5 = nn.MaxPool2d(kernel_size=2,stride = 2)\n\n        self.conv14 = nn.Conv2d(512,4096,7)\n        self.relu14 =nn.ReLU(inplace=True)\n        self.dropout1 = nn.Dropout2d()\n\n        self.conv15 = nn.Conv2d(4096,4096,1)\n        self.relu15 =nn.ReLU(inplace=True)\n        self.dropout2 = nn.Dropout2d()\n\n        self.score_fr = nn.Conv2d(4096,num_classes,1)\n        self.score_pool3 = nn.Conv2d(256, num_classes, 1)\n        self.score_pool4 = nn.Conv2d(512, num_classes, 1)\n\n\n        self.upscore2 = nn.ConvTranspose2d(num_classes, num_classes, 4, stride=2, bias=False)\n        self.upscore8 = nn.ConvTranspose2d(num_classes, num_classes, 16, stride=8, bias=False)\n        self.upscore2x2 = nn.ConvTranspose2d(num_classes, num_classes, 4, stride=2, bias=False)\n    def forward(self,x):\n        h = x\n        x = self.conv1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.relu2(x)\n        x = self.maxpool1(x)\n        x = self.conv3(x)\n        x = self.relu3(x)\n        x = self.conv4(x)\n        x = self.relu4(x)\n        x = self.maxpool2(x)\n\n        x = self.conv5(x)\n        x = self.relu5(x)\n        x = self.conv6(x)\n        x = self.relu6(x)\n        x = self.conv7(x)\n        x = self.relu7(x)\n        x = self.maxpool3(x)\n        pool3 = x\n        x = self.conv8(x)\n        x = self.relu8(x)\n        x = self.conv9(x)\n        x = self.relu9(x)\n        x = self.conv10(x)\n        x = self.relu10(x)\n        x = self.maxpool4(x)\n        pool4 = x\n        x = self.conv11(x)\n        x = self.relu11(x)\n        x = self.conv12(x)\n        x = self.relu12(x)\n        x = self.conv13(x)\n        x = self.relu13(x)\n        x = self.maxpool5(x)\n\n        x = self.conv14(x)\n        x = self.relu14(x)\n        x = self.dropout1(x)\n        x = self.conv15(x)\n        x = self.relu15(x)\n        x= self.dropout2(x)\n\n        x = self.score_fr(x)\n        #2倍反卷积\n        x = self.upscore2(x)\n        # 调整pool4通道\n        pool4 = self.score_pool4(pool4)\n        # 融合 pool4\n        x = x + pool4[:, :, 5:5 + x.size(2), 5:5 + x.size(3)]\n        # 再次2倍反卷积\n        x = self.upscore2x2(x)\n        #调整pool3通道数\n        pool3 = self.score_pool3(pool3)\n        #融合pool3\n        x = x + pool3[:, :, 9:9 + x.size(2), 9:9 + x.size(3)]\n        # 8倍反卷积\n        x = self.upscore8(x)\n        x = x[:, :, 31:31 + h.size(2), 31:31 + h.size(3)].contiguous()\n\n        return x</code></pre>\n<p>至此，关于FCN网络的结构更新完毕了，其中我们输入的原始图片大小为500x500，所以读者在自行构建数据集时需要将图片固定到500x500的大小，如果读者想要使用其他尺寸大小的图片进行训练，则需要修改网络中的一些参数，其中注意本文网络在第一次卷积层中给出了<code>100</code>大小的padding，这个主要是为了适合500pixel图片所设计的，如果读者想要自己设计图片大小，则需要自行修改。其中由于在进行倍数反卷积时会导致层数之间的size大小不同，所以在每层融合的时候都进行了一定量的裁剪操作，读者需要考虑到这些，如果你都了解了，那么你就可以自行修改了。<br>至于FCN的loss函数部分，由于只是一个简单的交叉熵，此处不再进行更新，会在更新完所有语义分割网络之后，进行单独讲解，或者给出一般性的代码。</p>\n"},{"title":"PSPNet","date":"2021-05-11T13:18:35.000Z","author":"Fanrencli","_content":"\n## 深度学习之语义分割PSPNet(2016)\n\n### PSPNet网络简介\n\n接续上一期的`FCN`语义分割网络，本章讲述在其后出现的又一较为流行的网络`PSPNet`。`PSPNet`相较于之前的`SegNet`和`U-Net`的改进还是比较明显的，改进的地方就在于引入了`PPM`模块。\n什么是`PPM`模块？其实所谓的`PPM（pyramid pooling module）`顾名思义就是金字塔池化模型。和我们熟知的`FPN`特征金字塔比较相似，它通过对最后的特征层进行不同大小的平均池化，然后再将其堆叠起来，其中池化分为四个部分:1x1,2x2,3x3,6x6。将最后的18x18大小的特征层调整为对应的四个大小，然后进行特征提取。具体如下图。\n\n![PPM模型](http://39.106.34.39:4567/_20210512163417.png)\n\n关于`PSPNet`的loss函数，本文将在代码中给出。其中主要分为两个部分，一个部分是主干特征提取网络的倒数第二层进行调整通道和大小，然后与对应的GT进行计算aux_loss，另一部分是经过`PPM`模块后再调整通道和大小的特征与对应的GT计算的main_loss。\n此次文章使用的主干网络为`ResNet101`，下面给出代码：\n\n### ResNet101\n```python\nclass Conv_block(nn.Module):\n    def __init__(self,input_channel,filters,stride=2):\n        super(Conv_block,self).__init__()\n        self.conv1 = nn.Conv2d(input_channel,filters[0],kernel_size=1,stride = stride,bias=True)\n        self.batch1 = nn.BatchNorm2d(filters[0])\n        self.relu1 = nn.ReLU()\n\n        self.conv2 = nn.Conv2d(filters[0],filters[1],kernel_size=3,stride=1,padding =1,bias =True)\n        self.batch2 = nn.BatchNorm2d(filters[1])\n        self.relu2 = nn.ReLU()\n\n        self.conv3 = nn.Conv2d(filters[1],filters[2],kernel_size=1,stride=1,bias =True)\n        self.batch3 = nn.BatchNorm2d(filters[2])\n\n        self.conv4 = nn.Conv2d(input_channel,filters[2],kernel_size=1,stride=stride,bias =True)\n        self.batch4 = nn.BatchNorm2d(filters[2])\n\n        self.relu3 = nn.ReLU()\n    def forward(self,x):\n        shortcut = x\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        x = self.conv3(x)\n        x = self.batch3(x)\n        shortcut = self.conv4(shortcut)\n        shortcut = self.batch4(shortcut)\n        x +=shortcut\n        x = self.relu3(x)\n        return x\n```\n```python\nclass Identity_block(nn.Module):\n    def __init__(self,input_channel,filters):\n        super(Identity_block,self).__init__()\n        self.conv1 = nn.Conv2d(input_channel,filters[0],kernel_size=1,stride=1,bias=True)\n        self.batch1 = nn.BatchNorm2d(filters[0])\n        self.relu1 = nn.ReLU()\n        \n        self.conv2 = nn.Conv2d(filters[0],filters[1],kernel_size=3,padding=1,stride=1,bias=True)\n        self.batch2 = nn.BatchNorm2d(filters[1])\n        self.relu2 = nn.ReLU()\n\n        self.conv3 = nn.Conv2d(filters[1],filters[2],kernel_size=1,stride=1,bias=True)\n        self.batch3 = nn.BatchNorm2d(filters[2])\n\n        self.relu3 = nn.ReLU()\n    \n    def forward(self,x):\n        shortcut = x\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        x = self.conv3(x)\n        x = self.batch3(x)\n        x +=shortcut\n        x = self.relu3(x)\n        return x\n\n```\n```python\nclass ResNet101(nn.Module):\n    def __init__(self,num_classes):\n        super(ResNet101,self).__init__()\n        self.model1 = nn.Sequential(\n            nn.Conv2d(3,64,kernel_size=7,padding=3,stride=2,bias=True),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=3,stride=2,padding=1)\n            \n        )\n        self.model2 = nn.Sequential(\n            Conv_block(64,[64,64,256],stride=1),\n            Identity_block(256,[64,64,256]),\n            Identity_block(256,[64,64,256])\n        )\n        self.model3 = nn.Sequential(\n            Conv_block(256,[128,128,512]),\n            Identity_block(512,[128,128,512]),\n            Identity_block(512,[128,128,512]),\n            Identity_block(512,[128,128,512])\n        )\n        \n        self.conv1 = Conv_block(512,[256,256,1024])\n        self.loop_identity = Identity_block(1024,[256,256,1024])\n        self.model4 = nn.Sequential(\n            Conv_block(1024,[512,512,2048]),\n            Identity_block(2048,[512,512,2048]),\n            Identity_block(2048,[512,512,2048])\n        )\n    def forward(self,x):\n        c1 = x = self.model1(x)\n        c2 = x = self.model2(x)\n        c3 = x = self.model3(x)\n        x = self.conv1(x)\n        for i in range(22):\n            x = self.loop_identity(x)\n        c4 = x\n        c5 = x = self.model4(x)\n        return c2,c3,c4,c5\n\n```\n### PPM模块\n```python\nclass PPM(nn.Module):\n    def __init__(self,input_channel,reduction_dim,pool_size):\n        super(PPM,self).__init__()\n        self.features_pool = []\n        for i in pool_size:\n            self.features_pool.append(nn.Sequential(\n                nn.AdaptiveAvgPool2d(i),\n                nn.Conv2d(input_channel, reduction_dim, kernel_size=1, bias=False),\n                nn.BatchNorm2d(reduction_dim),\n                nn.ReLU(inplace=True)\n            ))\n        self.features_pool = nn.ModuleList(self.features_pool)\n    def forward(self,x):\n        x_size = x.size()\n        out = [x]\n        for f in self.features_pool:\n            out.append(F.interpolate(f(x),x_size[2:],mode = 'bilinear',align_corners =True))\n        return torch.cat(out,1)\n```\n\n### PSPNet网络结构\n```python\nclass PSPNet(nn.Module):\n    def __init__(self,num_classes,training = True):\n        # input_shape = 576x576\n        super(PSPNet,self).__init__()\n        self.training = training\n        self.resnet = ResNet101(num_classes)\n        self.criterion = nn.CrossEntropyLoss(ignore_index=255)\n        self.ppm = PPM(2048,512,[1,2,3,6])\n        self.cls = nn.Sequential(\n            nn.Conv2d(4096, 512, kernel_size=3, padding=1, bias=False),\n            nn.BatchNorm2d(512),\n            nn.ReLU(inplace=True),\n            nn.Dropout2d(),\n            nn.Conv2d(512, num_classes, kernel_size=1)\n        )\n        self.aux = nn.Sequential(\n            nn.Conv2d(1024, 256, kernel_size=3, padding=1, bias=False),\n            nn.BatchNorm2d(256),\n            nn.ReLU(inplace=True),\n            nn.Dropout2d(),\n            nn.Conv2d(256, num_classes, kernel_size=1)\n        )\n    def forward(self,x,target=None):\n        input_size = x.size()\n        layer = self.resnet(x)\n        #取layer4层的特征层\n        x = layer[3]\n        #PPM金字塔池化模型\n        x = self.ppm(x)\n        # 调整通道数=num_classes，可以简单的认为就是将后续的全连接层换成卷积层进行学习\n        x = self.cls(x)\n        #双线性差值调整size\n        x = F.interpolate(x,size=(input_size[2],input_size[3]),mode = 'bilinear',align_corners = True)\n\n        # 辅助的loss计算\n        if self.training :\n            #调整辅助层通道数\n            aux = self.aux(layer[2])\n            aux = F.interpolate(aux,size=(input_size[2],input_size[3]),mode = 'bilinear',align_corners = True)\n            main_loss = self.criterion(x,y)\n            aux_loss = self.criterion(aux,y)\n            # x.max(1)[1]用于计算标准\n            return x.max(1)[1],main_loss,aux_loss\n        return x\n```\n","source":"_posts/semantic_segmentation/PSPNet.md","raw":"---\ntitle: PSPNet\ndate: 2021-05-11 21:18:35\ncategories:\n- Deep Learning\ntags:\n- semantic segmentation\n- PSPNet\nauthor: Fanrencli\n---\n\n## 深度学习之语义分割PSPNet(2016)\n\n### PSPNet网络简介\n\n接续上一期的`FCN`语义分割网络，本章讲述在其后出现的又一较为流行的网络`PSPNet`。`PSPNet`相较于之前的`SegNet`和`U-Net`的改进还是比较明显的，改进的地方就在于引入了`PPM`模块。\n什么是`PPM`模块？其实所谓的`PPM（pyramid pooling module）`顾名思义就是金字塔池化模型。和我们熟知的`FPN`特征金字塔比较相似，它通过对最后的特征层进行不同大小的平均池化，然后再将其堆叠起来，其中池化分为四个部分:1x1,2x2,3x3,6x6。将最后的18x18大小的特征层调整为对应的四个大小，然后进行特征提取。具体如下图。\n\n![PPM模型](http://39.106.34.39:4567/_20210512163417.png)\n\n关于`PSPNet`的loss函数，本文将在代码中给出。其中主要分为两个部分，一个部分是主干特征提取网络的倒数第二层进行调整通道和大小，然后与对应的GT进行计算aux_loss，另一部分是经过`PPM`模块后再调整通道和大小的特征与对应的GT计算的main_loss。\n此次文章使用的主干网络为`ResNet101`，下面给出代码：\n\n### ResNet101\n```python\nclass Conv_block(nn.Module):\n    def __init__(self,input_channel,filters,stride=2):\n        super(Conv_block,self).__init__()\n        self.conv1 = nn.Conv2d(input_channel,filters[0],kernel_size=1,stride = stride,bias=True)\n        self.batch1 = nn.BatchNorm2d(filters[0])\n        self.relu1 = nn.ReLU()\n\n        self.conv2 = nn.Conv2d(filters[0],filters[1],kernel_size=3,stride=1,padding =1,bias =True)\n        self.batch2 = nn.BatchNorm2d(filters[1])\n        self.relu2 = nn.ReLU()\n\n        self.conv3 = nn.Conv2d(filters[1],filters[2],kernel_size=1,stride=1,bias =True)\n        self.batch3 = nn.BatchNorm2d(filters[2])\n\n        self.conv4 = nn.Conv2d(input_channel,filters[2],kernel_size=1,stride=stride,bias =True)\n        self.batch4 = nn.BatchNorm2d(filters[2])\n\n        self.relu3 = nn.ReLU()\n    def forward(self,x):\n        shortcut = x\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        x = self.conv3(x)\n        x = self.batch3(x)\n        shortcut = self.conv4(shortcut)\n        shortcut = self.batch4(shortcut)\n        x +=shortcut\n        x = self.relu3(x)\n        return x\n```\n```python\nclass Identity_block(nn.Module):\n    def __init__(self,input_channel,filters):\n        super(Identity_block,self).__init__()\n        self.conv1 = nn.Conv2d(input_channel,filters[0],kernel_size=1,stride=1,bias=True)\n        self.batch1 = nn.BatchNorm2d(filters[0])\n        self.relu1 = nn.ReLU()\n        \n        self.conv2 = nn.Conv2d(filters[0],filters[1],kernel_size=3,padding=1,stride=1,bias=True)\n        self.batch2 = nn.BatchNorm2d(filters[1])\n        self.relu2 = nn.ReLU()\n\n        self.conv3 = nn.Conv2d(filters[1],filters[2],kernel_size=1,stride=1,bias=True)\n        self.batch3 = nn.BatchNorm2d(filters[2])\n\n        self.relu3 = nn.ReLU()\n    \n    def forward(self,x):\n        shortcut = x\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        x = self.conv3(x)\n        x = self.batch3(x)\n        x +=shortcut\n        x = self.relu3(x)\n        return x\n\n```\n```python\nclass ResNet101(nn.Module):\n    def __init__(self,num_classes):\n        super(ResNet101,self).__init__()\n        self.model1 = nn.Sequential(\n            nn.Conv2d(3,64,kernel_size=7,padding=3,stride=2,bias=True),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=3,stride=2,padding=1)\n            \n        )\n        self.model2 = nn.Sequential(\n            Conv_block(64,[64,64,256],stride=1),\n            Identity_block(256,[64,64,256]),\n            Identity_block(256,[64,64,256])\n        )\n        self.model3 = nn.Sequential(\n            Conv_block(256,[128,128,512]),\n            Identity_block(512,[128,128,512]),\n            Identity_block(512,[128,128,512]),\n            Identity_block(512,[128,128,512])\n        )\n        \n        self.conv1 = Conv_block(512,[256,256,1024])\n        self.loop_identity = Identity_block(1024,[256,256,1024])\n        self.model4 = nn.Sequential(\n            Conv_block(1024,[512,512,2048]),\n            Identity_block(2048,[512,512,2048]),\n            Identity_block(2048,[512,512,2048])\n        )\n    def forward(self,x):\n        c1 = x = self.model1(x)\n        c2 = x = self.model2(x)\n        c3 = x = self.model3(x)\n        x = self.conv1(x)\n        for i in range(22):\n            x = self.loop_identity(x)\n        c4 = x\n        c5 = x = self.model4(x)\n        return c2,c3,c4,c5\n\n```\n### PPM模块\n```python\nclass PPM(nn.Module):\n    def __init__(self,input_channel,reduction_dim,pool_size):\n        super(PPM,self).__init__()\n        self.features_pool = []\n        for i in pool_size:\n            self.features_pool.append(nn.Sequential(\n                nn.AdaptiveAvgPool2d(i),\n                nn.Conv2d(input_channel, reduction_dim, kernel_size=1, bias=False),\n                nn.BatchNorm2d(reduction_dim),\n                nn.ReLU(inplace=True)\n            ))\n        self.features_pool = nn.ModuleList(self.features_pool)\n    def forward(self,x):\n        x_size = x.size()\n        out = [x]\n        for f in self.features_pool:\n            out.append(F.interpolate(f(x),x_size[2:],mode = 'bilinear',align_corners =True))\n        return torch.cat(out,1)\n```\n\n### PSPNet网络结构\n```python\nclass PSPNet(nn.Module):\n    def __init__(self,num_classes,training = True):\n        # input_shape = 576x576\n        super(PSPNet,self).__init__()\n        self.training = training\n        self.resnet = ResNet101(num_classes)\n        self.criterion = nn.CrossEntropyLoss(ignore_index=255)\n        self.ppm = PPM(2048,512,[1,2,3,6])\n        self.cls = nn.Sequential(\n            nn.Conv2d(4096, 512, kernel_size=3, padding=1, bias=False),\n            nn.BatchNorm2d(512),\n            nn.ReLU(inplace=True),\n            nn.Dropout2d(),\n            nn.Conv2d(512, num_classes, kernel_size=1)\n        )\n        self.aux = nn.Sequential(\n            nn.Conv2d(1024, 256, kernel_size=3, padding=1, bias=False),\n            nn.BatchNorm2d(256),\n            nn.ReLU(inplace=True),\n            nn.Dropout2d(),\n            nn.Conv2d(256, num_classes, kernel_size=1)\n        )\n    def forward(self,x,target=None):\n        input_size = x.size()\n        layer = self.resnet(x)\n        #取layer4层的特征层\n        x = layer[3]\n        #PPM金字塔池化模型\n        x = self.ppm(x)\n        # 调整通道数=num_classes，可以简单的认为就是将后续的全连接层换成卷积层进行学习\n        x = self.cls(x)\n        #双线性差值调整size\n        x = F.interpolate(x,size=(input_size[2],input_size[3]),mode = 'bilinear',align_corners = True)\n\n        # 辅助的loss计算\n        if self.training :\n            #调整辅助层通道数\n            aux = self.aux(layer[2])\n            aux = F.interpolate(aux,size=(input_size[2],input_size[3]),mode = 'bilinear',align_corners = True)\n            main_loss = self.criterion(x,y)\n            aux_loss = self.criterion(aux,y)\n            # x.max(1)[1]用于计算标准\n            return x.max(1)[1],main_loss,aux_loss\n        return x\n```\n","slug":"semantic_segmentation/PSPNet","published":1,"updated":"2021-07-13T08:16:06.810Z","_id":"ckol98e5o0002ocuo634sc3kj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习之语义分割PSPNet-2016\"><a href=\"#深度学习之语义分割PSPNet-2016\" class=\"headerlink\" title=\"深度学习之语义分割PSPNet(2016)\"></a>深度学习之语义分割PSPNet(2016)</h2><h3 id=\"PSPNet网络简介\"><a href=\"#PSPNet网络简介\" class=\"headerlink\" title=\"PSPNet网络简介\"></a>PSPNet网络简介</h3><p>接续上一期的<code>FCN</code>语义分割网络，本章讲述在其后出现的又一较为流行的网络<code>PSPNet</code>。<code>PSPNet</code>相较于之前的<code>SegNet</code>和<code>U-Net</code>的改进还是比较明显的，改进的地方就在于引入了<code>PPM</code>模块。<br>什么是<code>PPM</code>模块？其实所谓的<code>PPM（pyramid pooling module）</code>顾名思义就是金字塔池化模型。和我们熟知的<code>FPN</code>特征金字塔比较相似，它通过对最后的特征层进行不同大小的平均池化，然后再将其堆叠起来，其中池化分为四个部分:1x1,2x2,3x3,6x6。将最后的18x18大小的特征层调整为对应的四个大小，然后进行特征提取。具体如下图。</p>\n<p><img src=\"http://39.106.34.39:4567/_20210512163417.png\" alt=\"PPM模型\"></p>\n<p>关于<code>PSPNet</code>的loss函数，本文将在代码中给出。其中主要分为两个部分，一个部分是主干特征提取网络的倒数第二层进行调整通道和大小，然后与对应的GT进行计算aux_loss，另一部分是经过<code>PPM</code>模块后再调整通道和大小的特征与对应的GT计算的main_loss。<br>此次文章使用的主干网络为<code>ResNet101</code>，下面给出代码：</p>\n<h3 id=\"ResNet101\"><a href=\"#ResNet101\" class=\"headerlink\" title=\"ResNet101\"></a>ResNet101</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Conv_block</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Conv_block<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> stride<span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias <span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias <span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span>stride<span class=\"token punctuation\">,</span>bias <span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>relu3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        shortcut <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        shortcut <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv4<span class=\"token punctuation\">(</span>shortcut<span class=\"token punctuation\">)</span>\n        shortcut <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch4<span class=\"token punctuation\">(</span>shortcut<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">+=</span>shortcut\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Identity_block</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Identity_block<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>relu3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        shortcut <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">+=</span>shortcut\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x\n</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ResNet101</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>ResNet101<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            Conv_block<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            Conv_block<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> Conv_block<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>loop_identity <span class=\"token operator\">=</span> Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            Conv_block<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Identity_block<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        c1 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        c2 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        c3 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>loop_identity<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        c4 <span class=\"token operator\">=</span> x\n        c5 <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> c2<span class=\"token punctuation\">,</span>c3<span class=\"token punctuation\">,</span>c4<span class=\"token punctuation\">,</span>c5\n</code></pre>\n<h3 id=\"PPM模块\"><a href=\"#PPM模块\" class=\"headerlink\" title=\"PPM模块\"></a>PPM模块</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PPM</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>reduction_dim<span class=\"token punctuation\">,</span>pool_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>PPM<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>features_pool <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> pool_size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>features_pool<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n                nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span> reduction_dim<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>reduction_dim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>features_pool <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ModuleList<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>features_pool<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x_size <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        out <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>features_pool<span class=\"token punctuation\">:</span>\n            out<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>interpolate<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x_size<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>mode <span class=\"token operator\">=</span> <span class=\"token string\">'bilinear'</span><span class=\"token punctuation\">,</span>align_corners <span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"PSPNet网络结构\"><a href=\"#PSPNet网络结构\" class=\"headerlink\" title=\"PSPNet网络结构\"></a>PSPNet网络结构</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PSPNet</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">,</span>training <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\"># input_shape = 576x576</span>\n        super<span class=\"token punctuation\">(</span>PSPNet<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>training <span class=\"token operator\">=</span> training\n        self<span class=\"token punctuation\">.</span>resnet <span class=\"token operator\">=</span> ResNet101<span class=\"token punctuation\">(</span>num_classes<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>criterion <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">(</span>ignore_index<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>ppm <span class=\"token operator\">=</span> PPM<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>cls <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Dropout2d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> num_classes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>aux <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Dropout2d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> num_classes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>target<span class=\"token operator\">=</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        input_size <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        layer <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>resnet<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">#取layer4层的特征层</span>\n        x <span class=\"token operator\">=</span> layer<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\" spellcheck=\"true\">#PPM金字塔池化模型</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>ppm<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 调整通道数=num_classes，可以简单的认为就是将后续的全连接层换成卷积层进行学习</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cls<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">#双线性差值调整size</span>\n        x <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span>interpolate<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>input_size<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>input_size<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>mode <span class=\"token operator\">=</span> <span class=\"token string\">'bilinear'</span><span class=\"token punctuation\">,</span>align_corners <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># 辅助的loss计算</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>training <span class=\"token punctuation\">:</span>\n            <span class=\"token comment\" spellcheck=\"true\">#调整辅助层通道数</span>\n            aux <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>aux<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            aux <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span>interpolate<span class=\"token punctuation\">(</span>aux<span class=\"token punctuation\">,</span>size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>input_size<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>input_size<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>mode <span class=\"token operator\">=</span> <span class=\"token string\">'bilinear'</span><span class=\"token punctuation\">,</span>align_corners <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            main_loss <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>criterion<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span>\n            aux_loss <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>criterion<span class=\"token punctuation\">(</span>aux<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\"># x.max(1)[1]用于计算标准</span>\n            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>main_loss<span class=\"token punctuation\">,</span>aux_loss\n        <span class=\"token keyword\">return</span> x</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习之语义分割PSPNet-2016\"><a href=\"#深度学习之语义分割PSPNet-2016\" class=\"headerlink\" title=\"深度学习之语义分割PSPNet(2016)\"></a>深度学习之语义分割PSPNet(2016)</h2><h3 id=\"PSPNet网络简介\"><a href=\"#PSPNet网络简介\" class=\"headerlink\" title=\"PSPNet网络简介\"></a>PSPNet网络简介</h3><p>接续上一期的<code>FCN</code>语义分割网络，本章讲述在其后出现的又一较为流行的网络<code>PSPNet</code>。<code>PSPNet</code>相较于之前的<code>SegNet</code>和<code>U-Net</code>的改进还是比较明显的，改进的地方就在于引入了<code>PPM</code>模块。<br>什么是<code>PPM</code>模块？其实所谓的<code>PPM（pyramid pooling module）</code>顾名思义就是金字塔池化模型。和我们熟知的<code>FPN</code>特征金字塔比较相似，它通过对最后的特征层进行不同大小的平均池化，然后再将其堆叠起来，其中池化分为四个部分:1x1,2x2,3x3,6x6。将最后的18x18大小的特征层调整为对应的四个大小，然后进行特征提取。具体如下图。</p>\n<p><img src=\"http://39.106.34.39:4567/_20210512163417.png\" alt=\"PPM模型\"></p>\n<p>关于<code>PSPNet</code>的loss函数，本文将在代码中给出。其中主要分为两个部分，一个部分是主干特征提取网络的倒数第二层进行调整通道和大小，然后与对应的GT进行计算aux_loss，另一部分是经过<code>PPM</code>模块后再调整通道和大小的特征与对应的GT计算的main_loss。<br>此次文章使用的主干网络为<code>ResNet101</code>，下面给出代码：</p>\n<h3 id=\"ResNet101\"><a href=\"#ResNet101\" class=\"headerlink\" title=\"ResNet101\"></a>ResNet101</h3><pre><code class=\"python\">class Conv_block(nn.Module):\n    def __init__(self,input_channel,filters,stride=2):\n        super(Conv_block,self).__init__()\n        self.conv1 = nn.Conv2d(input_channel,filters[0],kernel_size=1,stride = stride,bias=True)\n        self.batch1 = nn.BatchNorm2d(filters[0])\n        self.relu1 = nn.ReLU()\n\n        self.conv2 = nn.Conv2d(filters[0],filters[1],kernel_size=3,stride=1,padding =1,bias =True)\n        self.batch2 = nn.BatchNorm2d(filters[1])\n        self.relu2 = nn.ReLU()\n\n        self.conv3 = nn.Conv2d(filters[1],filters[2],kernel_size=1,stride=1,bias =True)\n        self.batch3 = nn.BatchNorm2d(filters[2])\n\n        self.conv4 = nn.Conv2d(input_channel,filters[2],kernel_size=1,stride=stride,bias =True)\n        self.batch4 = nn.BatchNorm2d(filters[2])\n\n        self.relu3 = nn.ReLU()\n    def forward(self,x):\n        shortcut = x\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        x = self.conv3(x)\n        x = self.batch3(x)\n        shortcut = self.conv4(shortcut)\n        shortcut = self.batch4(shortcut)\n        x +=shortcut\n        x = self.relu3(x)\n        return x</code></pre>\n<pre><code class=\"python\">class Identity_block(nn.Module):\n    def __init__(self,input_channel,filters):\n        super(Identity_block,self).__init__()\n        self.conv1 = nn.Conv2d(input_channel,filters[0],kernel_size=1,stride=1,bias=True)\n        self.batch1 = nn.BatchNorm2d(filters[0])\n        self.relu1 = nn.ReLU()\n\n        self.conv2 = nn.Conv2d(filters[0],filters[1],kernel_size=3,padding=1,stride=1,bias=True)\n        self.batch2 = nn.BatchNorm2d(filters[1])\n        self.relu2 = nn.ReLU()\n\n        self.conv3 = nn.Conv2d(filters[1],filters[2],kernel_size=1,stride=1,bias=True)\n        self.batch3 = nn.BatchNorm2d(filters[2])\n\n        self.relu3 = nn.ReLU()\n\n    def forward(self,x):\n        shortcut = x\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        x = self.conv3(x)\n        x = self.batch3(x)\n        x +=shortcut\n        x = self.relu3(x)\n        return x\n</code></pre>\n<pre><code class=\"python\">class ResNet101(nn.Module):\n    def __init__(self,num_classes):\n        super(ResNet101,self).__init__()\n        self.model1 = nn.Sequential(\n            nn.Conv2d(3,64,kernel_size=7,padding=3,stride=2,bias=True),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=3,stride=2,padding=1)\n\n        )\n        self.model2 = nn.Sequential(\n            Conv_block(64,[64,64,256],stride=1),\n            Identity_block(256,[64,64,256]),\n            Identity_block(256,[64,64,256])\n        )\n        self.model3 = nn.Sequential(\n            Conv_block(256,[128,128,512]),\n            Identity_block(512,[128,128,512]),\n            Identity_block(512,[128,128,512]),\n            Identity_block(512,[128,128,512])\n        )\n\n        self.conv1 = Conv_block(512,[256,256,1024])\n        self.loop_identity = Identity_block(1024,[256,256,1024])\n        self.model4 = nn.Sequential(\n            Conv_block(1024,[512,512,2048]),\n            Identity_block(2048,[512,512,2048]),\n            Identity_block(2048,[512,512,2048])\n        )\n    def forward(self,x):\n        c1 = x = self.model1(x)\n        c2 = x = self.model2(x)\n        c3 = x = self.model3(x)\n        x = self.conv1(x)\n        for i in range(22):\n            x = self.loop_identity(x)\n        c4 = x\n        c5 = x = self.model4(x)\n        return c2,c3,c4,c5\n</code></pre>\n<h3 id=\"PPM模块\"><a href=\"#PPM模块\" class=\"headerlink\" title=\"PPM模块\"></a>PPM模块</h3><pre><code class=\"python\">class PPM(nn.Module):\n    def __init__(self,input_channel,reduction_dim,pool_size):\n        super(PPM,self).__init__()\n        self.features_pool = []\n        for i in pool_size:\n            self.features_pool.append(nn.Sequential(\n                nn.AdaptiveAvgPool2d(i),\n                nn.Conv2d(input_channel, reduction_dim, kernel_size=1, bias=False),\n                nn.BatchNorm2d(reduction_dim),\n                nn.ReLU(inplace=True)\n            ))\n        self.features_pool = nn.ModuleList(self.features_pool)\n    def forward(self,x):\n        x_size = x.size()\n        out = [x]\n        for f in self.features_pool:\n            out.append(F.interpolate(f(x),x_size[2:],mode = &#39;bilinear&#39;,align_corners =True))\n        return torch.cat(out,1)</code></pre>\n<h3 id=\"PSPNet网络结构\"><a href=\"#PSPNet网络结构\" class=\"headerlink\" title=\"PSPNet网络结构\"></a>PSPNet网络结构</h3><pre><code class=\"python\">class PSPNet(nn.Module):\n    def __init__(self,num_classes,training = True):\n        # input_shape = 576x576\n        super(PSPNet,self).__init__()\n        self.training = training\n        self.resnet = ResNet101(num_classes)\n        self.criterion = nn.CrossEntropyLoss(ignore_index=255)\n        self.ppm = PPM(2048,512,[1,2,3,6])\n        self.cls = nn.Sequential(\n            nn.Conv2d(4096, 512, kernel_size=3, padding=1, bias=False),\n            nn.BatchNorm2d(512),\n            nn.ReLU(inplace=True),\n            nn.Dropout2d(),\n            nn.Conv2d(512, num_classes, kernel_size=1)\n        )\n        self.aux = nn.Sequential(\n            nn.Conv2d(1024, 256, kernel_size=3, padding=1, bias=False),\n            nn.BatchNorm2d(256),\n            nn.ReLU(inplace=True),\n            nn.Dropout2d(),\n            nn.Conv2d(256, num_classes, kernel_size=1)\n        )\n    def forward(self,x,target=None):\n        input_size = x.size()\n        layer = self.resnet(x)\n        #取layer4层的特征层\n        x = layer[3]\n        #PPM金字塔池化模型\n        x = self.ppm(x)\n        # 调整通道数=num_classes，可以简单的认为就是将后续的全连接层换成卷积层进行学习\n        x = self.cls(x)\n        #双线性差值调整size\n        x = F.interpolate(x,size=(input_size[2],input_size[3]),mode = &#39;bilinear&#39;,align_corners = True)\n\n        # 辅助的loss计算\n        if self.training :\n            #调整辅助层通道数\n            aux = self.aux(layer[2])\n            aux = F.interpolate(aux,size=(input_size[2],input_size[3]),mode = &#39;bilinear&#39;,align_corners = True)\n            main_loss = self.criterion(x,y)\n            aux_loss = self.criterion(aux,y)\n            # x.max(1)[1]用于计算标准\n            return x.max(1)[1],main_loss,aux_loss\n        return x</code></pre>\n"},{"title":"DenseNet","date":"2021-05-13T04:14:52.000Z","top":true,"cover":true,"author":"Fanrencli","_content":"\n## 深度学习神经网络特征提取（八）\n\n### DenseNet网络介绍\n\n前几期文章针对当下流行的特征提取网络做了一些介绍，本章继续前期的特征提取网络的内容介绍一下传说比`ResNet`还要强大的网络——`DenseNet`。首先是`DenseNet`的特点：\n- 减轻了梯度消失的情况\n- 特征层的重复利用\n- 参数量减少\n\n`DenseNet`的网络结构也比较具有特点，通过密集的连接来实现特征的重复利用，网络结构主要如下图：\n\n![DenseNet网络结构](http://39.106.34.39:4567/_20210513122750.png)\n\n`DenseNet`网络中总共包含三个Block，Block之间通过卷积和池化层进行连接实现尺寸的缩减，而每个Block内部则保持特征层的大小尺寸不变，只修改通道数来进行特征提取，这样的实现方式在代码的书写上很方便。\n\n接下来我们就来实现一下`DenseNet`的代码吧，本文给出的`DenseNet`的代码包含有：`DenseNet-121`,`DenseNet-169`,`DenseNet-201``DenseNet-264`。\n\n![DenseNet不同类型的网络细节](http://39.106.34.39:4567/_20210513123403.png)\n\n### 基础层\n代码主要对应于dense_block中基础模块，进行特征提取和调整通道数\n```python\nclass conv_block(nn.Module):\n    def __init__(self,input_channel,growth_rate):\n        super(conv_block,self).__init__()\n        self.model = nn.Sequential(\n            nn.BatchNorm2d(input_channel),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,growth_rate*4,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(growth_rate*4),\n            nn.Conv2d(growth_rate*4,growth_rate,kernel_size=3,padding =1,stride=1,bias=False)\n        )\n    def forward(self,x):\n        out = self.model(x)\n        return torch.cat([x,out],1)\n```\n\n### Dense_Block模块 \n对应整个网络中的三个基础块，用于特征提取，网络的主要特征也在这里体现，需要结合基础层理解网络的特点。\n```python \nclass DenseNet_block(nn.Module):\n    def __init__(self,input_channel,blocks,growth_rate):\n        super(DenseNet_block,self).__init__()\n        self._dense_block = []\n        for i in range(blocks):\n            self._dense_block.append(conv_block(input_channel+i*growth_rate,growth_rate))\n        self._dense_block = nn.ModuleList(self._dense_block)\n    def forward(self,x):\n        for f in self._dense_block:\n            x = f(x)\n        return x\n\n```\n### 调整层\n用于调整特征层的尺寸以及降低一定的通道数\n```python \nclass transition_block(nn.Module):\n    def __init__(self,input_channel,reduction):\n        super(transition_block,self).__init__()\n        self.model1 = nn.Sequential(\n            nn.BatchNorm2d(input_channel),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,int(math.floor(input_channel*reduction)),kernel_size=1,stride=1,bias=False),\n            nn.AvgPool2d(kernel_size=2,stride=2)\n        )\n    def forward(self,x):\n        x = self.model1(x)\n        return x\n\n```\n### 网络主干结构\n```python \nclass DenseNet(nn.Module):\n    def __init__(self,num_classes,blocks):\n        # blocks 对应不同的DenseNet121,DenseNet169，DenseNet201，有[6, 12, 24, 16],[6, 12, 32, 32],[6, 12, 48, 32]\n        super(DenseNet,self).__init__()\n        # input_shape : 3,224,224\n        # 3,224,224 ->64,56,56\n        self.model1 = nn.Sequential(\n            nn.Conv2d(3,64,kernel_size=7,padding=3,stride=2,bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(kernel_size=2,padding=1,stride=2)\n        )\n        # 64,56,56 -> 256=64+32*blocks[0],56,56\n        self.dense_block1 = DenseNet_block(input_channel=64,blocks=blocks[0],growth_rate=32)\n        # 256,56,56 -> 128,28,28\n        self.transition_block1 = transition_block(256,0.5)\n        # 128,28,28 -> 512=128+32*block[1],28,28\n        self.dense_block2 = DenseNet_block(input_channel=128,blocks=blocks[1],growth_rate=32)\n        # 512,28,28 -> 256,14,14\n        self.transition_block2 = transition_block(512,0.5)\n        # 256,14,14 -> 1024=256+32*blocks[2],14,14\n        self.dense_block3 = DenseNet_block(input_channel=256,blocks=blocks[2],growth_rate=32)\n        # 1024,14,14 -> 512,7,7\n        self.transition_block3 = transition_block(1024,0.5)\n        # 512,7,7 -> 1024=512+32*block[3],7,7\n        self.dense_block4 = DenseNet_block(input_channel=512,blocks=blocks[3],growth_rate=32)\n\n        self.model2 = nn.Sequential(\n            nn.BatchNorm2d(1024),\n            nn.ReLU(inplace=True),\n            nn.AdaptiveAvgPool2d(1)\n        )\n        self.fc = nn.Linear(1024,num_classes)\n    def forward(self,x):\n        x = self.model1(x)\n        x = self.dense_block1(x)\n        x = self.transition_block1(x)\n        x = self.dense_block2(x)\n        x = self.transition_block2(x)\n        x = self.dense_block3(x)\n        x = self.transition_block3(x)\n        x = self.dense_block4(x)\n        x = self.model2(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.fc(x)\n        return x\n```\n下面给出测试代码，注意由于论文中提到对ImageNet数据集测试所用的growth_rate为32，所以本文所用的growth_rate都为32，如有需要自行修改。\n```python \nnet = DenseNet(10,[6,12,24,16]) #根据对应的层数进行修改\ninput = torch.randn(2,3,224,224)\nout = net(input)\nprint(net)\nprint(out.shape)\n```\n\n\n","source":"_posts/feature_extractor/DenseNet.md","raw":"---\ntitle: DenseNet\ndate: 2021-05-13 12:14:52\ntop: true\ncover: true\ncategories: \n- Deep Learning\ntags:\n- DenseNet\n- Pytorch\nauthor: Fanrencli\n---\n\n## 深度学习神经网络特征提取（八）\n\n### DenseNet网络介绍\n\n前几期文章针对当下流行的特征提取网络做了一些介绍，本章继续前期的特征提取网络的内容介绍一下传说比`ResNet`还要强大的网络——`DenseNet`。首先是`DenseNet`的特点：\n- 减轻了梯度消失的情况\n- 特征层的重复利用\n- 参数量减少\n\n`DenseNet`的网络结构也比较具有特点，通过密集的连接来实现特征的重复利用，网络结构主要如下图：\n\n![DenseNet网络结构](http://39.106.34.39:4567/_20210513122750.png)\n\n`DenseNet`网络中总共包含三个Block，Block之间通过卷积和池化层进行连接实现尺寸的缩减，而每个Block内部则保持特征层的大小尺寸不变，只修改通道数来进行特征提取，这样的实现方式在代码的书写上很方便。\n\n接下来我们就来实现一下`DenseNet`的代码吧，本文给出的`DenseNet`的代码包含有：`DenseNet-121`,`DenseNet-169`,`DenseNet-201``DenseNet-264`。\n\n![DenseNet不同类型的网络细节](http://39.106.34.39:4567/_20210513123403.png)\n\n### 基础层\n代码主要对应于dense_block中基础模块，进行特征提取和调整通道数\n```python\nclass conv_block(nn.Module):\n    def __init__(self,input_channel,growth_rate):\n        super(conv_block,self).__init__()\n        self.model = nn.Sequential(\n            nn.BatchNorm2d(input_channel),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,growth_rate*4,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(growth_rate*4),\n            nn.Conv2d(growth_rate*4,growth_rate,kernel_size=3,padding =1,stride=1,bias=False)\n        )\n    def forward(self,x):\n        out = self.model(x)\n        return torch.cat([x,out],1)\n```\n\n### Dense_Block模块 \n对应整个网络中的三个基础块，用于特征提取，网络的主要特征也在这里体现，需要结合基础层理解网络的特点。\n```python \nclass DenseNet_block(nn.Module):\n    def __init__(self,input_channel,blocks,growth_rate):\n        super(DenseNet_block,self).__init__()\n        self._dense_block = []\n        for i in range(blocks):\n            self._dense_block.append(conv_block(input_channel+i*growth_rate,growth_rate))\n        self._dense_block = nn.ModuleList(self._dense_block)\n    def forward(self,x):\n        for f in self._dense_block:\n            x = f(x)\n        return x\n\n```\n### 调整层\n用于调整特征层的尺寸以及降低一定的通道数\n```python \nclass transition_block(nn.Module):\n    def __init__(self,input_channel,reduction):\n        super(transition_block,self).__init__()\n        self.model1 = nn.Sequential(\n            nn.BatchNorm2d(input_channel),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,int(math.floor(input_channel*reduction)),kernel_size=1,stride=1,bias=False),\n            nn.AvgPool2d(kernel_size=2,stride=2)\n        )\n    def forward(self,x):\n        x = self.model1(x)\n        return x\n\n```\n### 网络主干结构\n```python \nclass DenseNet(nn.Module):\n    def __init__(self,num_classes,blocks):\n        # blocks 对应不同的DenseNet121,DenseNet169，DenseNet201，有[6, 12, 24, 16],[6, 12, 32, 32],[6, 12, 48, 32]\n        super(DenseNet,self).__init__()\n        # input_shape : 3,224,224\n        # 3,224,224 ->64,56,56\n        self.model1 = nn.Sequential(\n            nn.Conv2d(3,64,kernel_size=7,padding=3,stride=2,bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(kernel_size=2,padding=1,stride=2)\n        )\n        # 64,56,56 -> 256=64+32*blocks[0],56,56\n        self.dense_block1 = DenseNet_block(input_channel=64,blocks=blocks[0],growth_rate=32)\n        # 256,56,56 -> 128,28,28\n        self.transition_block1 = transition_block(256,0.5)\n        # 128,28,28 -> 512=128+32*block[1],28,28\n        self.dense_block2 = DenseNet_block(input_channel=128,blocks=blocks[1],growth_rate=32)\n        # 512,28,28 -> 256,14,14\n        self.transition_block2 = transition_block(512,0.5)\n        # 256,14,14 -> 1024=256+32*blocks[2],14,14\n        self.dense_block3 = DenseNet_block(input_channel=256,blocks=blocks[2],growth_rate=32)\n        # 1024,14,14 -> 512,7,7\n        self.transition_block3 = transition_block(1024,0.5)\n        # 512,7,7 -> 1024=512+32*block[3],7,7\n        self.dense_block4 = DenseNet_block(input_channel=512,blocks=blocks[3],growth_rate=32)\n\n        self.model2 = nn.Sequential(\n            nn.BatchNorm2d(1024),\n            nn.ReLU(inplace=True),\n            nn.AdaptiveAvgPool2d(1)\n        )\n        self.fc = nn.Linear(1024,num_classes)\n    def forward(self,x):\n        x = self.model1(x)\n        x = self.dense_block1(x)\n        x = self.transition_block1(x)\n        x = self.dense_block2(x)\n        x = self.transition_block2(x)\n        x = self.dense_block3(x)\n        x = self.transition_block3(x)\n        x = self.dense_block4(x)\n        x = self.model2(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.fc(x)\n        return x\n```\n下面给出测试代码，注意由于论文中提到对ImageNet数据集测试所用的growth_rate为32，所以本文所用的growth_rate都为32，如有需要自行修改。\n```python \nnet = DenseNet(10,[6,12,24,16]) #根据对应的层数进行修改\ninput = torch.randn(2,3,224,224)\nout = net(input)\nprint(net)\nprint(out.shape)\n```\n\n\n","slug":"feature_extractor/DenseNet","published":1,"updated":"2021-07-13T08:16:26.683Z","_id":"ckomxmpoa0000vkuoaer712n2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习神经网络特征提取（八）\"><a href=\"#深度学习神经网络特征提取（八）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（八）\"></a>深度学习神经网络特征提取（八）</h2><h3 id=\"DenseNet网络介绍\"><a href=\"#DenseNet网络介绍\" class=\"headerlink\" title=\"DenseNet网络介绍\"></a>DenseNet网络介绍</h3><p>前几期文章针对当下流行的特征提取网络做了一些介绍，本章继续前期的特征提取网络的内容介绍一下传说比<code>ResNet</code>还要强大的网络——<code>DenseNet</code>。首先是<code>DenseNet</code>的特点：</p>\n<ul>\n<li>减轻了梯度消失的情况</li>\n<li>特征层的重复利用</li>\n<li>参数量减少</li>\n</ul>\n<p><code>DenseNet</code>的网络结构也比较具有特点，通过密集的连接来实现特征的重复利用，网络结构主要如下图：</p>\n<p><img src=\"http://39.106.34.39:4567/_20210513122750.png\" alt=\"DenseNet网络结构\"></p>\n<p><code>DenseNet</code>网络中总共包含三个Block，Block之间通过卷积和池化层进行连接实现尺寸的缩减，而每个Block内部则保持特征层的大小尺寸不变，只修改通道数来进行特征提取，这样的实现方式在代码的书写上很方便。</p>\n<p>接下来我们就来实现一下<code>DenseNet</code>的代码吧，本文给出的<code>DenseNet</code>的代码包含有：<code>DenseNet-121</code>,<code>DenseNet-169</code>,<code>DenseNet-201``DenseNet-264</code>。</p>\n<p><img src=\"http://39.106.34.39:4567/_20210513123403.png\" alt=\"DenseNet不同类型的网络细节\"></p>\n<h3 id=\"基础层\"><a href=\"#基础层\" class=\"headerlink\" title=\"基础层\"></a>基础层</h3><p>代码主要对应于dense_block中基础模块，进行特征提取和调整通道数</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">conv_block</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>growth_rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>conv_block<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>growth_rate<span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>growth_rate<span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>growth_rate<span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>growth_rate<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span>out<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"Dense-Block模块\"><a href=\"#Dense-Block模块\" class=\"headerlink\" title=\"Dense_Block模块\"></a>Dense_Block模块</h3><p>对应整个网络中的三个基础块，用于特征提取，网络的主要特征也在这里体现，需要结合基础层理解网络的特点。</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DenseNet_block</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>blocks<span class=\"token punctuation\">,</span>growth_rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>DenseNet_block<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>_dense_block <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>blocks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>_dense_block<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>conv_block<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">+</span>i<span class=\"token operator\">*</span>growth_rate<span class=\"token punctuation\">,</span>growth_rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>_dense_block <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ModuleList<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_dense_block<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_dense_block<span class=\"token punctuation\">:</span>\n            x <span class=\"token operator\">=</span> f<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x\n</code></pre>\n<h3 id=\"调整层\"><a href=\"#调整层\" class=\"headerlink\" title=\"调整层\"></a>调整层</h3><p>用于调整特征层的尺寸以及降低一定的通道数</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">transition_block</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>reduction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>transition_block<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>model1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>int<span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>floor<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">*</span>reduction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>AvgPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x\n</code></pre>\n<h3 id=\"网络主干结构\"><a href=\"#网络主干结构\" class=\"headerlink\" title=\"网络主干结构\"></a>网络主干结构</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DenseNet</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">,</span>blocks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\"># blocks 对应不同的DenseNet121,DenseNet169，DenseNet201，有[6, 12, 24, 16],[6, 12, 32, 32],[6, 12, 48, 32]</span>\n        super<span class=\"token punctuation\">(</span>DenseNet<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># input_shape : 3,224,224</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 3,224,224 ->64,56,56</span>\n        self<span class=\"token punctuation\">.</span>model1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 64,56,56 -> 256=64+32*blocks[0],56,56</span>\n        self<span class=\"token punctuation\">.</span>dense_block1 <span class=\"token operator\">=</span> DenseNet_block<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>blocks<span class=\"token operator\">=</span>blocks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>growth_rate<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 256,56,56 -> 128,28,28</span>\n        self<span class=\"token punctuation\">.</span>transition_block1 <span class=\"token operator\">=</span> transition_block<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 128,28,28 -> 512=128+32*block[1],28,28</span>\n        self<span class=\"token punctuation\">.</span>dense_block2 <span class=\"token operator\">=</span> DenseNet_block<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span>blocks<span class=\"token operator\">=</span>blocks<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>growth_rate<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 512,28,28 -> 256,14,14</span>\n        self<span class=\"token punctuation\">.</span>transition_block2 <span class=\"token operator\">=</span> transition_block<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 256,14,14 -> 1024=256+32*blocks[2],14,14</span>\n        self<span class=\"token punctuation\">.</span>dense_block3 <span class=\"token operator\">=</span> DenseNet_block<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>blocks<span class=\"token operator\">=</span>blocks<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>growth_rate<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 1024,14,14 -> 512,7,7</span>\n        self<span class=\"token punctuation\">.</span>transition_block3 <span class=\"token operator\">=</span> transition_block<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 512,7,7 -> 1024=512+32*block[3],7,7</span>\n        self<span class=\"token punctuation\">.</span>dense_block4 <span class=\"token operator\">=</span> DenseNet_block<span class=\"token punctuation\">(</span>input_channel<span class=\"token operator\">=</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>blocks<span class=\"token operator\">=</span>blocks<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>growth_rate<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>model2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>fc <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dense_block1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>transition_block1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dense_block2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>transition_block2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dense_block3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>transition_block3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dense_block4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<p>下面给出测试代码，注意由于论文中提到对ImageNet数据集测试所用的growth_rate为32，所以本文所用的growth_rate都为32，如有需要自行修改。</p>\n<pre class=\" language-python\"><code class=\"language-python\">net <span class=\"token operator\">=</span> DenseNet<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#根据对应的层数进行修改</span>\ninput <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">)</span>\nout <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习神经网络特征提取（八）\"><a href=\"#深度学习神经网络特征提取（八）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（八）\"></a>深度学习神经网络特征提取（八）</h2><h3 id=\"DenseNet网络介绍\"><a href=\"#DenseNet网络介绍\" class=\"headerlink\" title=\"DenseNet网络介绍\"></a>DenseNet网络介绍</h3><p>前几期文章针对当下流行的特征提取网络做了一些介绍，本章继续前期的特征提取网络的内容介绍一下传说比<code>ResNet</code>还要强大的网络——<code>DenseNet</code>。首先是<code>DenseNet</code>的特点：</p>\n<ul>\n<li>减轻了梯度消失的情况</li>\n<li>特征层的重复利用</li>\n<li>参数量减少</li>\n</ul>\n<p><code>DenseNet</code>的网络结构也比较具有特点，通过密集的连接来实现特征的重复利用，网络结构主要如下图：</p>\n<p><img src=\"http://39.106.34.39:4567/_20210513122750.png\" alt=\"DenseNet网络结构\"></p>\n<p><code>DenseNet</code>网络中总共包含三个Block，Block之间通过卷积和池化层进行连接实现尺寸的缩减，而每个Block内部则保持特征层的大小尺寸不变，只修改通道数来进行特征提取，这样的实现方式在代码的书写上很方便。</p>\n<p>接下来我们就来实现一下<code>DenseNet</code>的代码吧，本文给出的<code>DenseNet</code>的代码包含有：<code>DenseNet-121</code>,<code>DenseNet-169</code>,<code>DenseNet-201``DenseNet-264</code>。</p>\n<p><img src=\"http://39.106.34.39:4567/_20210513123403.png\" alt=\"DenseNet不同类型的网络细节\"></p>\n<h3 id=\"基础层\"><a href=\"#基础层\" class=\"headerlink\" title=\"基础层\"></a>基础层</h3><p>代码主要对应于dense_block中基础模块，进行特征提取和调整通道数</p>\n<pre><code class=\"python\">class conv_block(nn.Module):\n    def __init__(self,input_channel,growth_rate):\n        super(conv_block,self).__init__()\n        self.model = nn.Sequential(\n            nn.BatchNorm2d(input_channel),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,growth_rate*4,kernel_size=1,stride=1,bias=False),\n            nn.BatchNorm2d(growth_rate*4),\n            nn.Conv2d(growth_rate*4,growth_rate,kernel_size=3,padding =1,stride=1,bias=False)\n        )\n    def forward(self,x):\n        out = self.model(x)\n        return torch.cat([x,out],1)</code></pre>\n<h3 id=\"Dense-Block模块\"><a href=\"#Dense-Block模块\" class=\"headerlink\" title=\"Dense_Block模块\"></a>Dense_Block模块</h3><p>对应整个网络中的三个基础块，用于特征提取，网络的主要特征也在这里体现，需要结合基础层理解网络的特点。</p>\n<pre><code class=\"python\">class DenseNet_block(nn.Module):\n    def __init__(self,input_channel,blocks,growth_rate):\n        super(DenseNet_block,self).__init__()\n        self._dense_block = []\n        for i in range(blocks):\n            self._dense_block.append(conv_block(input_channel+i*growth_rate,growth_rate))\n        self._dense_block = nn.ModuleList(self._dense_block)\n    def forward(self,x):\n        for f in self._dense_block:\n            x = f(x)\n        return x\n</code></pre>\n<h3 id=\"调整层\"><a href=\"#调整层\" class=\"headerlink\" title=\"调整层\"></a>调整层</h3><p>用于调整特征层的尺寸以及降低一定的通道数</p>\n<pre><code class=\"python\">class transition_block(nn.Module):\n    def __init__(self,input_channel,reduction):\n        super(transition_block,self).__init__()\n        self.model1 = nn.Sequential(\n            nn.BatchNorm2d(input_channel),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(input_channel,int(math.floor(input_channel*reduction)),kernel_size=1,stride=1,bias=False),\n            nn.AvgPool2d(kernel_size=2,stride=2)\n        )\n    def forward(self,x):\n        x = self.model1(x)\n        return x\n</code></pre>\n<h3 id=\"网络主干结构\"><a href=\"#网络主干结构\" class=\"headerlink\" title=\"网络主干结构\"></a>网络主干结构</h3><pre><code class=\"python\">class DenseNet(nn.Module):\n    def __init__(self,num_classes,blocks):\n        # blocks 对应不同的DenseNet121,DenseNet169，DenseNet201，有[6, 12, 24, 16],[6, 12, 32, 32],[6, 12, 48, 32]\n        super(DenseNet,self).__init__()\n        # input_shape : 3,224,224\n        # 3,224,224 -&gt;64,56,56\n        self.model1 = nn.Sequential(\n            nn.Conv2d(3,64,kernel_size=7,padding=3,stride=2,bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(kernel_size=2,padding=1,stride=2)\n        )\n        # 64,56,56 -&gt; 256=64+32*blocks[0],56,56\n        self.dense_block1 = DenseNet_block(input_channel=64,blocks=blocks[0],growth_rate=32)\n        # 256,56,56 -&gt; 128,28,28\n        self.transition_block1 = transition_block(256,0.5)\n        # 128,28,28 -&gt; 512=128+32*block[1],28,28\n        self.dense_block2 = DenseNet_block(input_channel=128,blocks=blocks[1],growth_rate=32)\n        # 512,28,28 -&gt; 256,14,14\n        self.transition_block2 = transition_block(512,0.5)\n        # 256,14,14 -&gt; 1024=256+32*blocks[2],14,14\n        self.dense_block3 = DenseNet_block(input_channel=256,blocks=blocks[2],growth_rate=32)\n        # 1024,14,14 -&gt; 512,7,7\n        self.transition_block3 = transition_block(1024,0.5)\n        # 512,7,7 -&gt; 1024=512+32*block[3],7,7\n        self.dense_block4 = DenseNet_block(input_channel=512,blocks=blocks[3],growth_rate=32)\n\n        self.model2 = nn.Sequential(\n            nn.BatchNorm2d(1024),\n            nn.ReLU(inplace=True),\n            nn.AdaptiveAvgPool2d(1)\n        )\n        self.fc = nn.Linear(1024,num_classes)\n    def forward(self,x):\n        x = self.model1(x)\n        x = self.dense_block1(x)\n        x = self.transition_block1(x)\n        x = self.dense_block2(x)\n        x = self.transition_block2(x)\n        x = self.dense_block3(x)\n        x = self.transition_block3(x)\n        x = self.dense_block4(x)\n        x = self.model2(x)\n        x = x.view(x.size(0),x.size(1))\n        x = self.fc(x)\n        return x</code></pre>\n<p>下面给出测试代码，注意由于论文中提到对ImageNet数据集测试所用的growth_rate为32，所以本文所用的growth_rate都为32，如有需要自行修改。</p>\n<pre><code class=\"python\">net = DenseNet(10,[6,12,24,16]) #根据对应的层数进行修改\ninput = torch.randn(2,3,224,224)\nout = net(input)\nprint(net)\nprint(out.shape)</code></pre>\n"},{"title":"ShuffleNetV2","date":"2021-05-15T02:18:02.000Z","top":true,"cover":true,"author":"Fanrencli","_content":"\n## 深度学习神经网络特征提取（九）\n\n### ShuffleNetV2网络介绍\n\n在之前的文章中我们介绍了轻量级的特征提取网络——`MobileNet`系列，从`MobileNetv1`到`MobileNetv3`从论文中的说法来看，是在不断提升的。但是在实际的应用中我们还是要综合考虑，因为用于提取特征的网络所适用的范围是不同的，并不存在万能的特征提取网络，也不一定说最新的网络比过去的网络一定更好，所以在实际的应用中，使用者需要自行判断。\n\n接续之前已经介绍过的轻量级特征提取网络，本文给出又一个较为流行的轻量级特征提取网络——`ShuffleNetV2`。首先介绍一下`ShuffleNetV2`的两个基本常用模块，一个步长为1，所以进行残差连接不需要进行降维，而当步长为2时，则需要对连接的通道进行降维。具体情况可以看下图：\n\n![ShuffleNetV2常用模块](http://39.106.34.39:4567/_20210517165212.png)\n\n了解了`ShuffleNetV2`的基本模块之后，我们来看看`ShuffleNetV2`的具体的网络结构。其中`ShuffleNetV2`分为四种模式，根据输出的通道判断属于那种形式。总体结构主要为以下几个流程：\n- 输入（3，224，224）大小的图像进行一次卷积一次池化进行降维，变为（3，56，56）\n- 然后进入`ShuffleNetV2`的三个阶段进行特征提取\n- 最后一次卷积进行通道数调整，然后平均池化和全连接输出\n\n![ShuffleNetV2网络总体结构](http://39.106.34.39:4567/_20210517165727.png)\n\n代码实现：\n```python\n#由于进行残差连接只是简单的堆叠，所以对于通道之间的信息交流缺少，通过特征重组可以解决\ndef channel_shuffle(x,group=2):\n    batch_size, num_channels, height, width =x.size()\n    assert num_channels % group == 0\n    x = x.view(batch_size, group, num_channels // group, height, width)\n\n    x = x.transpose(1,2).contiguous()\n    x = x.view(batch_size, -1, height, width)\n    return x\nclass BasicUnit(nn.Module):\n    def __init__(self, inplanes, outplanes, c_tag=0.5, groups=2):\n        super(BasicUnit, self).__init__()\n        self.left_part = round(c_tag * inplanes)\n        self.right_part_in = inplanes - self.left_part\n        self.right_part_out = outplanes - self.left_part\n        self.conv1 = nn.Conv2d(self.right_part_in, self.right_part_out, kernel_size=1, bias=False)\n        self.bn1 = nn.BatchNorm2d(self.right_part_out)\n        self.conv2 = nn.Conv2d(self.right_part_out, self.right_part_out, kernel_size=3, padding=1, bias=False,\n                               groups=self.right_part_out)\n        self.bn2 = nn.BatchNorm2d(self.right_part_out)\n        self.conv3 = nn.Conv2d(self.right_part_out, self.right_part_out, kernel_size=1, bias=False)\n        self.bn3 = nn.BatchNorm2d(self.right_part_out)\n        self.activation = nn.ReLU(inplace=True)\n\n        self.inplanes = inplanes\n        self.outplanes = outplanes\n        self.groups = groups\n\n    def forward(self, x):\n        left = x[:, :self.left_part, :, :]\n        right = x[:, self.left_part:, :, :]\n        out = self.conv1(right)\n        out = self.bn1(out)\n        out = self.activation(out)\n\n        out = self.conv2(out)\n        out = self.bn2(out)\n\n        out = self.conv3(out)\n        out = self.bn3(out)\n        out = self.activation(out)\n\n        if self.inplanes == self.outplanes:\n            out += right\n        return channel_shuffle(torch.cat((left, out), 1), self.groups)\nclass DownsampleUnit(nn.Module):\n    def __init__(self, inplanes, groups=2):\n        super(DownsampleUnit, self).__init__()\n\n        self.conv1r = nn.Conv2d(inplanes, inplanes, kernel_size=1, bias=False)\n        self.bn1r = nn.BatchNorm2d(inplanes)\n        self.conv2r = nn.Conv2d(inplanes, inplanes, kernel_size=3, stride=2, padding=1, bias=False, groups=inplanes)\n        self.bn2r = nn.BatchNorm2d(inplanes)\n        self.conv3r = nn.Conv2d(inplanes, inplanes, kernel_size=1, bias=False)\n        self.bn3r = nn.BatchNorm2d(inplanes)\n\n        self.conv1l = nn.Conv2d(inplanes, inplanes, kernel_size=3, stride=2, padding=1, bias=False, groups=inplanes)\n        self.bn1l = nn.BatchNorm2d(inplanes)\n        self.conv2l = nn.Conv2d(inplanes, inplanes, kernel_size=1, bias=False)\n        self.bn2l = nn.BatchNorm2d(inplanes)\n        self.activation = nn.ReLU(inplace=True)\n\n        self.groups = groups\n        self.inplanes = inplanes\n\n    def forward(self, x):\n        out_r = self.conv1r(x)\n        out_r = self.bn1r(out_r)\n        out_r = self.activation(out_r)\n\n        out_r = self.conv2r(out_r)\n        out_r = self.bn2r(out_r)\n\n        out_r = self.conv3r(out_r)\n        out_r = self.bn3r(out_r)\n        out_r = self.activation(out_r)\n\n        out_l = self.conv1l(x)\n        out_l = self.bn1l(out_l)\n\n        out_l = self.conv2l(out_l)\n        out_l = self.bn2l(out_l)\n        out_l = self.activation(out_l)\n\n        return channel_shuffle(torch.cat((out_r, out_l), 1))\nclass ShuffleNetV2(nn.Module):\n    def __init__(self, scale=1.0, in_channels=3, num_classes=10):\n        super(ShuffleNetV2, self).__init__()\n\n        self.activation = nn.ReLU(inplace=True)\n        self.num_classes = num_classes\n\n        self.num_of_channels = {0.5: [24, 48, 96, 192, 1024], 1: [24, 116, 232, 464, 1024],\n                                1.5: [24, 176, 352, 704, 1024], 2: [24, 244, 488, 976, 2048]}\n        self.c = self.num_of_channels[scale]\n        self.n = [3, 7, 3]\n        self.conv1 = nn.Conv2d(in_channels, self.c[0], kernel_size=3, bias=False, stride=2, padding=1)\n        self.bn1 = nn.BatchNorm2d(self.c[0])\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2)\n        self.shuffles = self._make_shuffles()\n\n        self.conv_last = nn.Conv2d(self.c[-2], self.c[-1], kernel_size=1, bias=False)\n        self.bn_last = nn.BatchNorm2d(self.c[-1])\n        self.avgpool = nn.AdaptiveAvgPool2d(1)\n        self.fc = nn.Linear(self.c[-1], self.num_classes)\n\n    def _make_stage(self, inplanes, outplanes, n, stage):\n        modules = OrderedDict()\n        stage_name = \"ShuffleUnit{}\".format(stage)\n\n        # First module is the only one utilizing stride\n        first_module = DownsampleUnit(inplanes=inplanes)\n        modules[\"DownsampleUnit\"] = first_module\n        second_module = BasicUnit(inplanes=inplanes * 2, outplanes=outplanes )\n        modules[stage_name + \"_{}\".format(0)] = second_module\n        # add more LinearBottleneck depending on number of repeats\n        for i in range(n - 1):\n            name = stage_name + \"_{}\".format(i + 1)\n            module = BasicUnit(inplanes=outplanes, outplanes=outplanes )\n            modules[name] = module\n\n        return nn.Sequential(modules)\n\n    def _make_shuffles(self):\n        modules = OrderedDict()\n        stage_name = \"ShuffleConvs\"\n\n        for i in range(len(self.c) - 2):\n            name = stage_name + \"_{}\".format(i)\n            module = self._make_stage(inplanes=self.c[i], outplanes=self.c[i + 1], n=self.n[i], stage=i)\n            modules[name] = module\n\n        return nn.Sequential(modules)\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.bn1(x)\n        x = self.activation(x)\n        x = self.maxpool(x)\n\n        x = self.shuffles(x)\n        x = self.conv_last(x)\n        x = self.bn_last(x)\n        x = self.activation(x)\n\n        # average pooling layer\n        x = self.avgpool(x)\n\n        # flatten for input to fully-connected layer\n        x = x.view(x.size(0), -1)\n        x = self.fc(x)\n        return x\n```\n\n至此本文给出了`ShuffleNetv2`的所有代码，其中所有的代码按照最简洁的方式给出，其中可能还有其他例如通过SELayer进行特征融合，设置channel split的阈值等等其他的细节参数，本文没有过多设计，如果读者需要，可在看懂本文代码的基础上自行添加。\n","source":"_posts/feature_extractor/shuffleNet.md","raw":"---\ntitle: ShuffleNetV2\ndate: 2021-05-15 10:18:02\ntop: true\ncover: true\ncategories: \n- Deep Learning\ntags:\n- ShuffleNetV2\n- Pytorch\nauthor: Fanrencli\n---\n\n## 深度学习神经网络特征提取（九）\n\n### ShuffleNetV2网络介绍\n\n在之前的文章中我们介绍了轻量级的特征提取网络——`MobileNet`系列，从`MobileNetv1`到`MobileNetv3`从论文中的说法来看，是在不断提升的。但是在实际的应用中我们还是要综合考虑，因为用于提取特征的网络所适用的范围是不同的，并不存在万能的特征提取网络，也不一定说最新的网络比过去的网络一定更好，所以在实际的应用中，使用者需要自行判断。\n\n接续之前已经介绍过的轻量级特征提取网络，本文给出又一个较为流行的轻量级特征提取网络——`ShuffleNetV2`。首先介绍一下`ShuffleNetV2`的两个基本常用模块，一个步长为1，所以进行残差连接不需要进行降维，而当步长为2时，则需要对连接的通道进行降维。具体情况可以看下图：\n\n![ShuffleNetV2常用模块](http://39.106.34.39:4567/_20210517165212.png)\n\n了解了`ShuffleNetV2`的基本模块之后，我们来看看`ShuffleNetV2`的具体的网络结构。其中`ShuffleNetV2`分为四种模式，根据输出的通道判断属于那种形式。总体结构主要为以下几个流程：\n- 输入（3，224，224）大小的图像进行一次卷积一次池化进行降维，变为（3，56，56）\n- 然后进入`ShuffleNetV2`的三个阶段进行特征提取\n- 最后一次卷积进行通道数调整，然后平均池化和全连接输出\n\n![ShuffleNetV2网络总体结构](http://39.106.34.39:4567/_20210517165727.png)\n\n代码实现：\n```python\n#由于进行残差连接只是简单的堆叠，所以对于通道之间的信息交流缺少，通过特征重组可以解决\ndef channel_shuffle(x,group=2):\n    batch_size, num_channels, height, width =x.size()\n    assert num_channels % group == 0\n    x = x.view(batch_size, group, num_channels // group, height, width)\n\n    x = x.transpose(1,2).contiguous()\n    x = x.view(batch_size, -1, height, width)\n    return x\nclass BasicUnit(nn.Module):\n    def __init__(self, inplanes, outplanes, c_tag=0.5, groups=2):\n        super(BasicUnit, self).__init__()\n        self.left_part = round(c_tag * inplanes)\n        self.right_part_in = inplanes - self.left_part\n        self.right_part_out = outplanes - self.left_part\n        self.conv1 = nn.Conv2d(self.right_part_in, self.right_part_out, kernel_size=1, bias=False)\n        self.bn1 = nn.BatchNorm2d(self.right_part_out)\n        self.conv2 = nn.Conv2d(self.right_part_out, self.right_part_out, kernel_size=3, padding=1, bias=False,\n                               groups=self.right_part_out)\n        self.bn2 = nn.BatchNorm2d(self.right_part_out)\n        self.conv3 = nn.Conv2d(self.right_part_out, self.right_part_out, kernel_size=1, bias=False)\n        self.bn3 = nn.BatchNorm2d(self.right_part_out)\n        self.activation = nn.ReLU(inplace=True)\n\n        self.inplanes = inplanes\n        self.outplanes = outplanes\n        self.groups = groups\n\n    def forward(self, x):\n        left = x[:, :self.left_part, :, :]\n        right = x[:, self.left_part:, :, :]\n        out = self.conv1(right)\n        out = self.bn1(out)\n        out = self.activation(out)\n\n        out = self.conv2(out)\n        out = self.bn2(out)\n\n        out = self.conv3(out)\n        out = self.bn3(out)\n        out = self.activation(out)\n\n        if self.inplanes == self.outplanes:\n            out += right\n        return channel_shuffle(torch.cat((left, out), 1), self.groups)\nclass DownsampleUnit(nn.Module):\n    def __init__(self, inplanes, groups=2):\n        super(DownsampleUnit, self).__init__()\n\n        self.conv1r = nn.Conv2d(inplanes, inplanes, kernel_size=1, bias=False)\n        self.bn1r = nn.BatchNorm2d(inplanes)\n        self.conv2r = nn.Conv2d(inplanes, inplanes, kernel_size=3, stride=2, padding=1, bias=False, groups=inplanes)\n        self.bn2r = nn.BatchNorm2d(inplanes)\n        self.conv3r = nn.Conv2d(inplanes, inplanes, kernel_size=1, bias=False)\n        self.bn3r = nn.BatchNorm2d(inplanes)\n\n        self.conv1l = nn.Conv2d(inplanes, inplanes, kernel_size=3, stride=2, padding=1, bias=False, groups=inplanes)\n        self.bn1l = nn.BatchNorm2d(inplanes)\n        self.conv2l = nn.Conv2d(inplanes, inplanes, kernel_size=1, bias=False)\n        self.bn2l = nn.BatchNorm2d(inplanes)\n        self.activation = nn.ReLU(inplace=True)\n\n        self.groups = groups\n        self.inplanes = inplanes\n\n    def forward(self, x):\n        out_r = self.conv1r(x)\n        out_r = self.bn1r(out_r)\n        out_r = self.activation(out_r)\n\n        out_r = self.conv2r(out_r)\n        out_r = self.bn2r(out_r)\n\n        out_r = self.conv3r(out_r)\n        out_r = self.bn3r(out_r)\n        out_r = self.activation(out_r)\n\n        out_l = self.conv1l(x)\n        out_l = self.bn1l(out_l)\n\n        out_l = self.conv2l(out_l)\n        out_l = self.bn2l(out_l)\n        out_l = self.activation(out_l)\n\n        return channel_shuffle(torch.cat((out_r, out_l), 1))\nclass ShuffleNetV2(nn.Module):\n    def __init__(self, scale=1.0, in_channels=3, num_classes=10):\n        super(ShuffleNetV2, self).__init__()\n\n        self.activation = nn.ReLU(inplace=True)\n        self.num_classes = num_classes\n\n        self.num_of_channels = {0.5: [24, 48, 96, 192, 1024], 1: [24, 116, 232, 464, 1024],\n                                1.5: [24, 176, 352, 704, 1024], 2: [24, 244, 488, 976, 2048]}\n        self.c = self.num_of_channels[scale]\n        self.n = [3, 7, 3]\n        self.conv1 = nn.Conv2d(in_channels, self.c[0], kernel_size=3, bias=False, stride=2, padding=1)\n        self.bn1 = nn.BatchNorm2d(self.c[0])\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2)\n        self.shuffles = self._make_shuffles()\n\n        self.conv_last = nn.Conv2d(self.c[-2], self.c[-1], kernel_size=1, bias=False)\n        self.bn_last = nn.BatchNorm2d(self.c[-1])\n        self.avgpool = nn.AdaptiveAvgPool2d(1)\n        self.fc = nn.Linear(self.c[-1], self.num_classes)\n\n    def _make_stage(self, inplanes, outplanes, n, stage):\n        modules = OrderedDict()\n        stage_name = \"ShuffleUnit{}\".format(stage)\n\n        # First module is the only one utilizing stride\n        first_module = DownsampleUnit(inplanes=inplanes)\n        modules[\"DownsampleUnit\"] = first_module\n        second_module = BasicUnit(inplanes=inplanes * 2, outplanes=outplanes )\n        modules[stage_name + \"_{}\".format(0)] = second_module\n        # add more LinearBottleneck depending on number of repeats\n        for i in range(n - 1):\n            name = stage_name + \"_{}\".format(i + 1)\n            module = BasicUnit(inplanes=outplanes, outplanes=outplanes )\n            modules[name] = module\n\n        return nn.Sequential(modules)\n\n    def _make_shuffles(self):\n        modules = OrderedDict()\n        stage_name = \"ShuffleConvs\"\n\n        for i in range(len(self.c) - 2):\n            name = stage_name + \"_{}\".format(i)\n            module = self._make_stage(inplanes=self.c[i], outplanes=self.c[i + 1], n=self.n[i], stage=i)\n            modules[name] = module\n\n        return nn.Sequential(modules)\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.bn1(x)\n        x = self.activation(x)\n        x = self.maxpool(x)\n\n        x = self.shuffles(x)\n        x = self.conv_last(x)\n        x = self.bn_last(x)\n        x = self.activation(x)\n\n        # average pooling layer\n        x = self.avgpool(x)\n\n        # flatten for input to fully-connected layer\n        x = x.view(x.size(0), -1)\n        x = self.fc(x)\n        return x\n```\n\n至此本文给出了`ShuffleNetv2`的所有代码，其中所有的代码按照最简洁的方式给出，其中可能还有其他例如通过SELayer进行特征融合，设置channel split的阈值等等其他的细节参数，本文没有过多设计，如果读者需要，可在看懂本文代码的基础上自行添加。\n","slug":"feature_extractor/shuffleNet","published":1,"updated":"2021-07-13T08:16:12.423Z","_id":"ckoso8pp90000lcuoht4d8fr1","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习神经网络特征提取（九）\"><a href=\"#深度学习神经网络特征提取（九）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（九）\"></a>深度学习神经网络特征提取（九）</h2><h3 id=\"ShuffleNetV2网络介绍\"><a href=\"#ShuffleNetV2网络介绍\" class=\"headerlink\" title=\"ShuffleNetV2网络介绍\"></a>ShuffleNetV2网络介绍</h3><p>在之前的文章中我们介绍了轻量级的特征提取网络——<code>MobileNet</code>系列，从<code>MobileNetv1</code>到<code>MobileNetv3</code>从论文中的说法来看，是在不断提升的。但是在实际的应用中我们还是要综合考虑，因为用于提取特征的网络所适用的范围是不同的，并不存在万能的特征提取网络，也不一定说最新的网络比过去的网络一定更好，所以在实际的应用中，使用者需要自行判断。</p>\n<p>接续之前已经介绍过的轻量级特征提取网络，本文给出又一个较为流行的轻量级特征提取网络——<code>ShuffleNetV2</code>。首先介绍一下<code>ShuffleNetV2</code>的两个基本常用模块，一个步长为1，所以进行残差连接不需要进行降维，而当步长为2时，则需要对连接的通道进行降维。具体情况可以看下图：</p>\n<p><img src=\"http://39.106.34.39:4567/_20210517165212.png\" alt=\"ShuffleNetV2常用模块\"></p>\n<p>了解了<code>ShuffleNetV2</code>的基本模块之后，我们来看看<code>ShuffleNetV2</code>的具体的网络结构。其中<code>ShuffleNetV2</code>分为四种模式，根据输出的通道判断属于那种形式。总体结构主要为以下几个流程：</p>\n<ul>\n<li>输入（3，224，224）大小的图像进行一次卷积一次池化进行降维，变为（3，56，56）</li>\n<li>然后进入<code>ShuffleNetV2</code>的三个阶段进行特征提取</li>\n<li>最后一次卷积进行通道数调整，然后平均池化和全连接输出</li>\n</ul>\n<p><img src=\"http://39.106.34.39:4567/_20210517165727.png\" alt=\"ShuffleNetV2网络总体结构\"></p>\n<p>代码实现：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#由于进行残差连接只是简单的堆叠，所以对于通道之间的信息交流缺少，通过特征重组可以解决</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">channel_shuffle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>group<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    batch_size<span class=\"token punctuation\">,</span> num_channels<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> num_channels <span class=\"token operator\">%</span> group <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n    x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">,</span> group<span class=\"token punctuation\">,</span> num_channels <span class=\"token operator\">//</span> group<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span>\n\n    x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contiguous<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BasicUnit</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inplanes<span class=\"token punctuation\">,</span> outplanes<span class=\"token punctuation\">,</span> c_tag<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> groups<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>BasicUnit<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>left_part <span class=\"token operator\">=</span> round<span class=\"token punctuation\">(</span>c_tag <span class=\"token operator\">*</span> inplanes<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>right_part_in <span class=\"token operator\">=</span> inplanes <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>left_part\n        self<span class=\"token punctuation\">.</span>right_part_out <span class=\"token operator\">=</span> outplanes <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>left_part\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>right_part_in<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>right_part_out<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>bn1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>right_part_out<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>right_part_out<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>right_part_out<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n                               groups<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>right_part_out<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>bn2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>right_part_out<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>right_part_out<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>right_part_out<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>bn3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>right_part_out<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>activation <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>inplanes <span class=\"token operator\">=</span> inplanes\n        self<span class=\"token punctuation\">.</span>outplanes <span class=\"token operator\">=</span> outplanes\n        self<span class=\"token punctuation\">.</span>groups <span class=\"token operator\">=</span> groups\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        left <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>left_part<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        right <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>left_part<span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span>\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn1<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>activation<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn2<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv3<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn3<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n        out <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>activation<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>inplanes <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>outplanes<span class=\"token punctuation\">:</span>\n            out <span class=\"token operator\">+=</span> right\n        <span class=\"token keyword\">return</span> channel_shuffle<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DownsampleUnit</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inplanes<span class=\"token punctuation\">,</span> groups<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>DownsampleUnit<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv1r <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>inplanes<span class=\"token punctuation\">,</span> inplanes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>bn1r <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>inplanes<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv2r <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>inplanes<span class=\"token punctuation\">,</span> inplanes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> groups<span class=\"token operator\">=</span>inplanes<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>bn2r <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>inplanes<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv3r <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>inplanes<span class=\"token punctuation\">,</span> inplanes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>bn3r <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>inplanes<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv1l <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>inplanes<span class=\"token punctuation\">,</span> inplanes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> groups<span class=\"token operator\">=</span>inplanes<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>bn1l <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>inplanes<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv2l <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>inplanes<span class=\"token punctuation\">,</span> inplanes<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>bn2l <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>inplanes<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>activation <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>groups <span class=\"token operator\">=</span> groups\n        self<span class=\"token punctuation\">.</span>inplanes <span class=\"token operator\">=</span> inplanes\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        out_r <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1r<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        out_r <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn1r<span class=\"token punctuation\">(</span>out_r<span class=\"token punctuation\">)</span>\n        out_r <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>activation<span class=\"token punctuation\">(</span>out_r<span class=\"token punctuation\">)</span>\n\n        out_r <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2r<span class=\"token punctuation\">(</span>out_r<span class=\"token punctuation\">)</span>\n        out_r <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn2r<span class=\"token punctuation\">(</span>out_r<span class=\"token punctuation\">)</span>\n\n        out_r <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv3r<span class=\"token punctuation\">(</span>out_r<span class=\"token punctuation\">)</span>\n        out_r <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn3r<span class=\"token punctuation\">(</span>out_r<span class=\"token punctuation\">)</span>\n        out_r <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>activation<span class=\"token punctuation\">(</span>out_r<span class=\"token punctuation\">)</span>\n\n        out_l <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1l<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        out_l <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn1l<span class=\"token punctuation\">(</span>out_l<span class=\"token punctuation\">)</span>\n\n        out_l <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2l<span class=\"token punctuation\">(</span>out_l<span class=\"token punctuation\">)</span>\n        out_l <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn2l<span class=\"token punctuation\">(</span>out_l<span class=\"token punctuation\">)</span>\n        out_l <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>activation<span class=\"token punctuation\">(</span>out_l<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> channel_shuffle<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>out_r<span class=\"token punctuation\">,</span> out_l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ShuffleNetV2</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> scale<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> in_channels<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> num_classes<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>ShuffleNetV2<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>activation <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>num_classes <span class=\"token operator\">=</span> num_classes\n\n        self<span class=\"token punctuation\">.</span>num_of_channels <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">192</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">116</span><span class=\"token punctuation\">,</span> <span class=\"token number\">232</span><span class=\"token punctuation\">,</span> <span class=\"token number\">464</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token number\">1.5</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">176</span><span class=\"token punctuation\">,</span> <span class=\"token number\">352</span><span class=\"token punctuation\">,</span> <span class=\"token number\">704</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">244</span><span class=\"token punctuation\">,</span> <span class=\"token number\">488</span><span class=\"token punctuation\">,</span> <span class=\"token number\">976</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n        self<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>num_of_channels<span class=\"token punctuation\">[</span>scale<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>in_channels<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>bn1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxpool <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>MaxPool2d<span class=\"token punctuation\">(</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>shuffles <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_make_shuffles<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv_last <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>bn_last <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>avgpool <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>fc <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>num_classes<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_make_stage</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> inplanes<span class=\"token punctuation\">,</span> outplanes<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        modules <span class=\"token operator\">=</span> OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        stage_name <span class=\"token operator\">=</span> <span class=\"token string\">\"ShuffleUnit{}\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># First module is the only one utilizing stride</span>\n        first_module <span class=\"token operator\">=</span> DownsampleUnit<span class=\"token punctuation\">(</span>inplanes<span class=\"token operator\">=</span>inplanes<span class=\"token punctuation\">)</span>\n        modules<span class=\"token punctuation\">[</span><span class=\"token string\">\"DownsampleUnit\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> first_module\n        second_module <span class=\"token operator\">=</span> BasicUnit<span class=\"token punctuation\">(</span>inplanes<span class=\"token operator\">=</span>inplanes <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> outplanes<span class=\"token operator\">=</span>outplanes <span class=\"token punctuation\">)</span>\n        modules<span class=\"token punctuation\">[</span>stage_name <span class=\"token operator\">+</span> <span class=\"token string\">\"_{}\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> second_module\n        <span class=\"token comment\" spellcheck=\"true\"># add more LinearBottleneck depending on number of repeats</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            name <span class=\"token operator\">=</span> stage_name <span class=\"token operator\">+</span> <span class=\"token string\">\"_{}\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            module <span class=\"token operator\">=</span> BasicUnit<span class=\"token punctuation\">(</span>inplanes<span class=\"token operator\">=</span>outplanes<span class=\"token punctuation\">,</span> outplanes<span class=\"token operator\">=</span>outplanes <span class=\"token punctuation\">)</span>\n            modules<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> module\n\n        <span class=\"token keyword\">return</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>modules<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_make_shuffles</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        modules <span class=\"token operator\">=</span> OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        stage_name <span class=\"token operator\">=</span> <span class=\"token string\">\"ShuffleConvs\"</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            name <span class=\"token operator\">=</span> stage_name <span class=\"token operator\">+</span> <span class=\"token string\">\"_{}\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n            module <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_make_stage<span class=\"token punctuation\">(</span>inplanes<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> outplanes<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stage<span class=\"token operator\">=</span>i<span class=\"token punctuation\">)</span>\n            modules<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> module\n\n        <span class=\"token keyword\">return</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>modules<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>activation<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>maxpool<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>shuffles<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv_last<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bn_last<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>activation<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># average pooling layer</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>avgpool<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># flatten for input to fully-connected layer</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>fc<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<p>至此本文给出了<code>ShuffleNetv2</code>的所有代码，其中所有的代码按照最简洁的方式给出，其中可能还有其他例如通过SELayer进行特征融合，设置channel split的阈值等等其他的细节参数，本文没有过多设计，如果读者需要，可在看懂本文代码的基础上自行添加。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习神经网络特征提取（九）\"><a href=\"#深度学习神经网络特征提取（九）\" class=\"headerlink\" title=\"深度学习神经网络特征提取（九）\"></a>深度学习神经网络特征提取（九）</h2><h3 id=\"ShuffleNetV2网络介绍\"><a href=\"#ShuffleNetV2网络介绍\" class=\"headerlink\" title=\"ShuffleNetV2网络介绍\"></a>ShuffleNetV2网络介绍</h3><p>在之前的文章中我们介绍了轻量级的特征提取网络——<code>MobileNet</code>系列，从<code>MobileNetv1</code>到<code>MobileNetv3</code>从论文中的说法来看，是在不断提升的。但是在实际的应用中我们还是要综合考虑，因为用于提取特征的网络所适用的范围是不同的，并不存在万能的特征提取网络，也不一定说最新的网络比过去的网络一定更好，所以在实际的应用中，使用者需要自行判断。</p>\n<p>接续之前已经介绍过的轻量级特征提取网络，本文给出又一个较为流行的轻量级特征提取网络——<code>ShuffleNetV2</code>。首先介绍一下<code>ShuffleNetV2</code>的两个基本常用模块，一个步长为1，所以进行残差连接不需要进行降维，而当步长为2时，则需要对连接的通道进行降维。具体情况可以看下图：</p>\n<p><img src=\"http://39.106.34.39:4567/_20210517165212.png\" alt=\"ShuffleNetV2常用模块\"></p>\n<p>了解了<code>ShuffleNetV2</code>的基本模块之后，我们来看看<code>ShuffleNetV2</code>的具体的网络结构。其中<code>ShuffleNetV2</code>分为四种模式，根据输出的通道判断属于那种形式。总体结构主要为以下几个流程：</p>\n<ul>\n<li>输入（3，224，224）大小的图像进行一次卷积一次池化进行降维，变为（3，56，56）</li>\n<li>然后进入<code>ShuffleNetV2</code>的三个阶段进行特征提取</li>\n<li>最后一次卷积进行通道数调整，然后平均池化和全连接输出</li>\n</ul>\n<p><img src=\"http://39.106.34.39:4567/_20210517165727.png\" alt=\"ShuffleNetV2网络总体结构\"></p>\n<p>代码实现：</p>\n<pre><code class=\"python\">#由于进行残差连接只是简单的堆叠，所以对于通道之间的信息交流缺少，通过特征重组可以解决\ndef channel_shuffle(x,group=2):\n    batch_size, num_channels, height, width =x.size()\n    assert num_channels % group == 0\n    x = x.view(batch_size, group, num_channels // group, height, width)\n\n    x = x.transpose(1,2).contiguous()\n    x = x.view(batch_size, -1, height, width)\n    return x\nclass BasicUnit(nn.Module):\n    def __init__(self, inplanes, outplanes, c_tag=0.5, groups=2):\n        super(BasicUnit, self).__init__()\n        self.left_part = round(c_tag * inplanes)\n        self.right_part_in = inplanes - self.left_part\n        self.right_part_out = outplanes - self.left_part\n        self.conv1 = nn.Conv2d(self.right_part_in, self.right_part_out, kernel_size=1, bias=False)\n        self.bn1 = nn.BatchNorm2d(self.right_part_out)\n        self.conv2 = nn.Conv2d(self.right_part_out, self.right_part_out, kernel_size=3, padding=1, bias=False,\n                               groups=self.right_part_out)\n        self.bn2 = nn.BatchNorm2d(self.right_part_out)\n        self.conv3 = nn.Conv2d(self.right_part_out, self.right_part_out, kernel_size=1, bias=False)\n        self.bn3 = nn.BatchNorm2d(self.right_part_out)\n        self.activation = nn.ReLU(inplace=True)\n\n        self.inplanes = inplanes\n        self.outplanes = outplanes\n        self.groups = groups\n\n    def forward(self, x):\n        left = x[:, :self.left_part, :, :]\n        right = x[:, self.left_part:, :, :]\n        out = self.conv1(right)\n        out = self.bn1(out)\n        out = self.activation(out)\n\n        out = self.conv2(out)\n        out = self.bn2(out)\n\n        out = self.conv3(out)\n        out = self.bn3(out)\n        out = self.activation(out)\n\n        if self.inplanes == self.outplanes:\n            out += right\n        return channel_shuffle(torch.cat((left, out), 1), self.groups)\nclass DownsampleUnit(nn.Module):\n    def __init__(self, inplanes, groups=2):\n        super(DownsampleUnit, self).__init__()\n\n        self.conv1r = nn.Conv2d(inplanes, inplanes, kernel_size=1, bias=False)\n        self.bn1r = nn.BatchNorm2d(inplanes)\n        self.conv2r = nn.Conv2d(inplanes, inplanes, kernel_size=3, stride=2, padding=1, bias=False, groups=inplanes)\n        self.bn2r = nn.BatchNorm2d(inplanes)\n        self.conv3r = nn.Conv2d(inplanes, inplanes, kernel_size=1, bias=False)\n        self.bn3r = nn.BatchNorm2d(inplanes)\n\n        self.conv1l = nn.Conv2d(inplanes, inplanes, kernel_size=3, stride=2, padding=1, bias=False, groups=inplanes)\n        self.bn1l = nn.BatchNorm2d(inplanes)\n        self.conv2l = nn.Conv2d(inplanes, inplanes, kernel_size=1, bias=False)\n        self.bn2l = nn.BatchNorm2d(inplanes)\n        self.activation = nn.ReLU(inplace=True)\n\n        self.groups = groups\n        self.inplanes = inplanes\n\n    def forward(self, x):\n        out_r = self.conv1r(x)\n        out_r = self.bn1r(out_r)\n        out_r = self.activation(out_r)\n\n        out_r = self.conv2r(out_r)\n        out_r = self.bn2r(out_r)\n\n        out_r = self.conv3r(out_r)\n        out_r = self.bn3r(out_r)\n        out_r = self.activation(out_r)\n\n        out_l = self.conv1l(x)\n        out_l = self.bn1l(out_l)\n\n        out_l = self.conv2l(out_l)\n        out_l = self.bn2l(out_l)\n        out_l = self.activation(out_l)\n\n        return channel_shuffle(torch.cat((out_r, out_l), 1))\nclass ShuffleNetV2(nn.Module):\n    def __init__(self, scale=1.0, in_channels=3, num_classes=10):\n        super(ShuffleNetV2, self).__init__()\n\n        self.activation = nn.ReLU(inplace=True)\n        self.num_classes = num_classes\n\n        self.num_of_channels = &#123;0.5: [24, 48, 96, 192, 1024], 1: [24, 116, 232, 464, 1024],\n                                1.5: [24, 176, 352, 704, 1024], 2: [24, 244, 488, 976, 2048]&#125;\n        self.c = self.num_of_channels[scale]\n        self.n = [3, 7, 3]\n        self.conv1 = nn.Conv2d(in_channels, self.c[0], kernel_size=3, bias=False, stride=2, padding=1)\n        self.bn1 = nn.BatchNorm2d(self.c[0])\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2)\n        self.shuffles = self._make_shuffles()\n\n        self.conv_last = nn.Conv2d(self.c[-2], self.c[-1], kernel_size=1, bias=False)\n        self.bn_last = nn.BatchNorm2d(self.c[-1])\n        self.avgpool = nn.AdaptiveAvgPool2d(1)\n        self.fc = nn.Linear(self.c[-1], self.num_classes)\n\n    def _make_stage(self, inplanes, outplanes, n, stage):\n        modules = OrderedDict()\n        stage_name = &quot;ShuffleUnit&#123;&#125;&quot;.format(stage)\n\n        # First module is the only one utilizing stride\n        first_module = DownsampleUnit(inplanes=inplanes)\n        modules[&quot;DownsampleUnit&quot;] = first_module\n        second_module = BasicUnit(inplanes=inplanes * 2, outplanes=outplanes )\n        modules[stage_name + &quot;_&#123;&#125;&quot;.format(0)] = second_module\n        # add more LinearBottleneck depending on number of repeats\n        for i in range(n - 1):\n            name = stage_name + &quot;_&#123;&#125;&quot;.format(i + 1)\n            module = BasicUnit(inplanes=outplanes, outplanes=outplanes )\n            modules[name] = module\n\n        return nn.Sequential(modules)\n\n    def _make_shuffles(self):\n        modules = OrderedDict()\n        stage_name = &quot;ShuffleConvs&quot;\n\n        for i in range(len(self.c) - 2):\n            name = stage_name + &quot;_&#123;&#125;&quot;.format(i)\n            module = self._make_stage(inplanes=self.c[i], outplanes=self.c[i + 1], n=self.n[i], stage=i)\n            modules[name] = module\n\n        return nn.Sequential(modules)\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.bn1(x)\n        x = self.activation(x)\n        x = self.maxpool(x)\n\n        x = self.shuffles(x)\n        x = self.conv_last(x)\n        x = self.bn_last(x)\n        x = self.activation(x)\n\n        # average pooling layer\n        x = self.avgpool(x)\n\n        # flatten for input to fully-connected layer\n        x = x.view(x.size(0), -1)\n        x = self.fc(x)\n        return x</code></pre>\n<p>至此本文给出了<code>ShuffleNetv2</code>的所有代码，其中所有的代码按照最简洁的方式给出，其中可能还有其他例如通过SELayer进行特征融合，设置channel split的阈值等等其他的细节参数，本文没有过多设计，如果读者需要，可在看懂本文代码的基础上自行添加。</p>\n"},{"title":"Life Know first year","date":"2021-05-16T06:58:06.000Z","_content":"### Life, you know fisrt year what?\n<p style=\"text-indent:2em\">\n2021年5月16日\n\n</p> \n<p style=\"text-indent:2em\">\n研究生第一年的生活就这么快结束了，似乎还未来得及与新生活挥手致意，就已经快要毕业离去了。\n</p> \n<p style=\"text-indent:2em\">\n研究生的生活是飞快的，特别是在当下的环境中，两年的生活似乎转瞬即逝。时间飞快的流逝，也为研究生带来的极大的身心压力，生活是在不停的前进的，总有人在你的前方，当你接触到同行者时，你会发现压力永远存在。“内卷”这个词感觉并不能描述当下环境中每个人的状态，相比于“内卷”这个词，我更喜欢“挣扎”这个词来描述这个层次的大多数人的状态。越是在某个方向上前进，越能接触到这个领域中的同行者，也越能感受到同行者中的共同点。这条路上的人处于一种非常奇怪的状态，他们对未来充满希望，也对未来充满迷茫，有时想前进一步，却又因为各种各样的顾虑犹豫不决，知道方向在哪，但却不知下一步该如何迈出。在彷徨的徘徊中，可能会失去某些看似很好的机会，最后选择一个看似最为稳妥却已经偏离理想的方法，但从整体看来这个方法确实是他们生活的唯一正解。\n</p> \n<p style=\"text-indent:2em\">\n2021年12月28日\n</p> \n<p style=\"text-indent:2em\">\n现在也许是总结第一年的最佳时间。\n</p> \n\n<p style=\"text-indent:2em\">\n在我的记忆中，研究生的生活开始于本科毕业的暑假，对于研究生来讲似乎寒暑假已经变成了一种形式。现在回想起研究生开学前的暑假，仿佛就在昨天，每每想到此处，内心总会产生一种难有的惬意，一种刚从压抑的生活中解放的自由。感觉那时的生活应该类似于喝着下午茶，坐在咖啡馆，暖暖的阳光铺在书面上，总的来说那时的我处于两个阶段的过渡期，无事，闲暇，自由，惬意，能有这样的感觉，可能大部分来源于之前的生活太操蛋，相比之下现在的我即将前往新的生活。虽然研究生的生活令人向往，但真正开始研究生的生活时，我发现这个暑假更值得关注。这个暑假开始于7月份左右，刚回到家，面临的第一个问题就是考驾照-!-。由于第一次考科目二挂了，所以还得重新考一下，不过感觉还是挺好的，就是天气有点热。每天早上需要集合由教练开车载到驾校，人有点多，有男有女，男生主要是中年人为主，女生一部分大学生，一部分中年妇女。大家有说有笑，一起打打牌，聊聊天，在树荫下乘凉，每个人轮换着上车练习。破旧的驾校中，还有着一片菜园，无事时随地拔棵葱，摘个桃子，家长里短好不热闹。可惜就是苦了教练的车子，三伏天里不眠不休的陪我们练习，期间还罢工了好几次。练习开车的时间是短暂的，因缘而聚的练车人最终都要走向考场，不过最终大家的结果基本都是好的，最可惜的就是那对双胞胎姐妹都没考过emmmm，好像是妹妹先考没过，然后姐姐跟着也就没了，果然双胞胎还是心有灵犀- -！。\n</p>\n<p style=\"text-indent:2em\">\n这个夏天最值得回忆的就是在夏日阳光的余威下骑着单车去健身，穿过两旁树木高大的公路，放眼望去耕田遍地，杨树林立；穿过乡镇，村路边商店小吃店鳞次栉比，行人往来，络绎不绝；穿越水库，堤岸两旁，一边农园，一边戏水，路边车辆横陈，暖风铺面而来彰显夏日余威；再入城镇，人声逐渐沸腾，摊位随处可见，最终抵达健身房。夏日的健身房是炎热的，更别说生意冷清的乡镇健身房了，连电风扇都舍不得开，汗如雨下是健身房中每个人的写照，但是这种感觉也让人沉迷。但是从根本上来说，健身其实是一件很难坚持的事情，因为锻炼本身就是一件让人痛苦的事情，但是能坚持的人一定有他的理由，有的是为了健康，有的是为了塑性，为了漂亮或者是帅气，而对于我来说，健身还可以让我的时间流逝变得更慢些，给予自己更多的思考的时间，给予自己一些灵感。健身完后骑上单车去超市shopping，然后披着夕阳的余晖回家。回程的路途似乎显得更加快速，夕阳西下，光影转换间，已至终点。夏日的天气有时也是阴晴不定，去时万里无云，返时磅礴大雨。夏日的夜晚有时也显得很漫长，开始研究生生活之前，已经开始研究生的任务了。\n</p>\n<p style=\"text-indent:2em\">\n研究生的生活来的似乎很快，乘上去往北京的火车，一觉便到了北京，当下的北京给人一种充满活力的感受。没有那种高楼林立的现代都市感，却有一些复古的意味（海淀区），听说北京一直流传：“海淀没有时尚，朝阳没有存款”。坐上公交车辗转之间便来到了校门口，在学生的带领下办理了相关的手续便结束了入校的旅程，然后去见一下导师。研究生的生活是单调的，因为无论何时都在写论文或者在去写论文的路上，第一年上课的时间还是很集中，有时候坐在教室里还是很有学生的感觉，自从本科大三下学期开始基本就没有课程了，突然回归到课堂上，有老师讲课还是有点怀念的，可是课程作业就不让人怀念了。到了研究生阶段，课堂能学到的东西都是有限了，极大部分都需要自己去扩展学习，自学自然而然就成为了主流，也成为了一种习惯。就这样研究生生活是一种重复，每天都朝着既定的目标前进，不论是平时还是节假日，但是有的时候突然非常想出去转转。北京的10月份的香山是漫山红叶的前奏，我似乎去的早了一点，蜿蜒的山道，陡峭的坡路，上山的过程中可以放眼全山，火红的枫叶参杂着一些绿意，有遗憾没有看到漫山红叶的风景。到了山顶时，夕阳已经快要隐入群山之中，只有下一丝微茫，乘着余光拍了几张不错的照片留作纪念，尚未细细回味群山的风景，夕阳已经离去。再回头时，北京的夜景又给了我一份惊喜，橙黄色的灯光在夜幕的承托下显得格外明亮，流动的灯光在黑夜中犹如灵动的精灵，连接在一起如同一条蜿蜒的巨龙。这一年去过香山，北京植物园，颐和园，圆明园，处处留影，处处驻凝，但能清楚回忆起来的却没有多少。临近寒假却疫情反复，最终也决定在校过年，过年的学校装饰的很漂亮，年夜饭集合了全国各地的菜肴，让没有回家的同学能吃到各地的美味。最终新年也就在电视剧中度过。年后的日子过的很快，转眼就到了暑假。这一年就这样结束了，明年再见吧。\n</p>\n\n![香山夜景](http://39.106.34.39:4567/5329f51ab6247a8a9727e3260aef908.jpg)\n![香山夜景](http://39.106.34.39:4567/812fad9217ebead78391a2ca747fca8.jpg)\n\n<video id=\"video\" controls=\"\" preload=\"none\" poster=\"http://39.106.34.39:4567/_20211231205448.png\">\n<source id=\"mp4\" src=\"http://39.106.34.39:4567/7537aa3811fb2b3265be120d10c92ba7.mp4\" type=\"video/mp4\">\n</video>\n\n\n\n\n","source":"_posts/lifeknow/lifeknow1.md","raw":"---\ntitle: Life Know first year\ndate: 2021-05-16 14:58:06\ncategories:\n    - Life Know\n---\n### Life, you know fisrt year what?\n<p style=\"text-indent:2em\">\n2021年5月16日\n\n</p> \n<p style=\"text-indent:2em\">\n研究生第一年的生活就这么快结束了，似乎还未来得及与新生活挥手致意，就已经快要毕业离去了。\n</p> \n<p style=\"text-indent:2em\">\n研究生的生活是飞快的，特别是在当下的环境中，两年的生活似乎转瞬即逝。时间飞快的流逝，也为研究生带来的极大的身心压力，生活是在不停的前进的，总有人在你的前方，当你接触到同行者时，你会发现压力永远存在。“内卷”这个词感觉并不能描述当下环境中每个人的状态，相比于“内卷”这个词，我更喜欢“挣扎”这个词来描述这个层次的大多数人的状态。越是在某个方向上前进，越能接触到这个领域中的同行者，也越能感受到同行者中的共同点。这条路上的人处于一种非常奇怪的状态，他们对未来充满希望，也对未来充满迷茫，有时想前进一步，却又因为各种各样的顾虑犹豫不决，知道方向在哪，但却不知下一步该如何迈出。在彷徨的徘徊中，可能会失去某些看似很好的机会，最后选择一个看似最为稳妥却已经偏离理想的方法，但从整体看来这个方法确实是他们生活的唯一正解。\n</p> \n<p style=\"text-indent:2em\">\n2021年12月28日\n</p> \n<p style=\"text-indent:2em\">\n现在也许是总结第一年的最佳时间。\n</p> \n\n<p style=\"text-indent:2em\">\n在我的记忆中，研究生的生活开始于本科毕业的暑假，对于研究生来讲似乎寒暑假已经变成了一种形式。现在回想起研究生开学前的暑假，仿佛就在昨天，每每想到此处，内心总会产生一种难有的惬意，一种刚从压抑的生活中解放的自由。感觉那时的生活应该类似于喝着下午茶，坐在咖啡馆，暖暖的阳光铺在书面上，总的来说那时的我处于两个阶段的过渡期，无事，闲暇，自由，惬意，能有这样的感觉，可能大部分来源于之前的生活太操蛋，相比之下现在的我即将前往新的生活。虽然研究生的生活令人向往，但真正开始研究生的生活时，我发现这个暑假更值得关注。这个暑假开始于7月份左右，刚回到家，面临的第一个问题就是考驾照-!-。由于第一次考科目二挂了，所以还得重新考一下，不过感觉还是挺好的，就是天气有点热。每天早上需要集合由教练开车载到驾校，人有点多，有男有女，男生主要是中年人为主，女生一部分大学生，一部分中年妇女。大家有说有笑，一起打打牌，聊聊天，在树荫下乘凉，每个人轮换着上车练习。破旧的驾校中，还有着一片菜园，无事时随地拔棵葱，摘个桃子，家长里短好不热闹。可惜就是苦了教练的车子，三伏天里不眠不休的陪我们练习，期间还罢工了好几次。练习开车的时间是短暂的，因缘而聚的练车人最终都要走向考场，不过最终大家的结果基本都是好的，最可惜的就是那对双胞胎姐妹都没考过emmmm，好像是妹妹先考没过，然后姐姐跟着也就没了，果然双胞胎还是心有灵犀- -！。\n</p>\n<p style=\"text-indent:2em\">\n这个夏天最值得回忆的就是在夏日阳光的余威下骑着单车去健身，穿过两旁树木高大的公路，放眼望去耕田遍地，杨树林立；穿过乡镇，村路边商店小吃店鳞次栉比，行人往来，络绎不绝；穿越水库，堤岸两旁，一边农园，一边戏水，路边车辆横陈，暖风铺面而来彰显夏日余威；再入城镇，人声逐渐沸腾，摊位随处可见，最终抵达健身房。夏日的健身房是炎热的，更别说生意冷清的乡镇健身房了，连电风扇都舍不得开，汗如雨下是健身房中每个人的写照，但是这种感觉也让人沉迷。但是从根本上来说，健身其实是一件很难坚持的事情，因为锻炼本身就是一件让人痛苦的事情，但是能坚持的人一定有他的理由，有的是为了健康，有的是为了塑性，为了漂亮或者是帅气，而对于我来说，健身还可以让我的时间流逝变得更慢些，给予自己更多的思考的时间，给予自己一些灵感。健身完后骑上单车去超市shopping，然后披着夕阳的余晖回家。回程的路途似乎显得更加快速，夕阳西下，光影转换间，已至终点。夏日的天气有时也是阴晴不定，去时万里无云，返时磅礴大雨。夏日的夜晚有时也显得很漫长，开始研究生生活之前，已经开始研究生的任务了。\n</p>\n<p style=\"text-indent:2em\">\n研究生的生活来的似乎很快，乘上去往北京的火车，一觉便到了北京，当下的北京给人一种充满活力的感受。没有那种高楼林立的现代都市感，却有一些复古的意味（海淀区），听说北京一直流传：“海淀没有时尚，朝阳没有存款”。坐上公交车辗转之间便来到了校门口，在学生的带领下办理了相关的手续便结束了入校的旅程，然后去见一下导师。研究生的生活是单调的，因为无论何时都在写论文或者在去写论文的路上，第一年上课的时间还是很集中，有时候坐在教室里还是很有学生的感觉，自从本科大三下学期开始基本就没有课程了，突然回归到课堂上，有老师讲课还是有点怀念的，可是课程作业就不让人怀念了。到了研究生阶段，课堂能学到的东西都是有限了，极大部分都需要自己去扩展学习，自学自然而然就成为了主流，也成为了一种习惯。就这样研究生生活是一种重复，每天都朝着既定的目标前进，不论是平时还是节假日，但是有的时候突然非常想出去转转。北京的10月份的香山是漫山红叶的前奏，我似乎去的早了一点，蜿蜒的山道，陡峭的坡路，上山的过程中可以放眼全山，火红的枫叶参杂着一些绿意，有遗憾没有看到漫山红叶的风景。到了山顶时，夕阳已经快要隐入群山之中，只有下一丝微茫，乘着余光拍了几张不错的照片留作纪念，尚未细细回味群山的风景，夕阳已经离去。再回头时，北京的夜景又给了我一份惊喜，橙黄色的灯光在夜幕的承托下显得格外明亮，流动的灯光在黑夜中犹如灵动的精灵，连接在一起如同一条蜿蜒的巨龙。这一年去过香山，北京植物园，颐和园，圆明园，处处留影，处处驻凝，但能清楚回忆起来的却没有多少。临近寒假却疫情反复，最终也决定在校过年，过年的学校装饰的很漂亮，年夜饭集合了全国各地的菜肴，让没有回家的同学能吃到各地的美味。最终新年也就在电视剧中度过。年后的日子过的很快，转眼就到了暑假。这一年就这样结束了，明年再见吧。\n</p>\n\n![香山夜景](http://39.106.34.39:4567/5329f51ab6247a8a9727e3260aef908.jpg)\n![香山夜景](http://39.106.34.39:4567/812fad9217ebead78391a2ca747fca8.jpg)\n\n<video id=\"video\" controls=\"\" preload=\"none\" poster=\"http://39.106.34.39:4567/_20211231205448.png\">\n<source id=\"mp4\" src=\"http://39.106.34.39:4567/7537aa3811fb2b3265be120d10c92ba7.mp4\" type=\"video/mp4\">\n</video>\n\n\n\n\n","slug":"lifeknow/lifeknow1","published":1,"updated":"2021-12-31T14:20:43.363Z","_id":"ckoso8psb0005lcuo0mmzb5e0","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Life-you-know-fisrt-year-what\"><a href=\"#Life-you-know-fisrt-year-what\" class=\"headerlink\" title=\"Life, you know fisrt year what?\"></a>Life, you know fisrt year what?</h3><p style=\"text-indent:2em\">\n2021年5月16日\n\n</p> \n<p style=\"text-indent:2em\">\n研究生第一年的生活就这么快结束了，似乎还未来得及与新生活挥手致意，就已经快要毕业离去了。\n</p> \n<p style=\"text-indent:2em\">\n研究生的生活是飞快的，特别是在当下的环境中，两年的生活似乎转瞬即逝。时间飞快的流逝，也为研究生带来的极大的身心压力，生活是在不停的前进的，总有人在你的前方，当你接触到同行者时，你会发现压力永远存在。“内卷”这个词感觉并不能描述当下环境中每个人的状态，相比于“内卷”这个词，我更喜欢“挣扎”这个词来描述这个层次的大多数人的状态。越是在某个方向上前进，越能接触到这个领域中的同行者，也越能感受到同行者中的共同点。这条路上的人处于一种非常奇怪的状态，他们对未来充满希望，也对未来充满迷茫，有时想前进一步，却又因为各种各样的顾虑犹豫不决，知道方向在哪，但却不知下一步该如何迈出。在彷徨的徘徊中，可能会失去某些看似很好的机会，最后选择一个看似最为稳妥却已经偏离理想的方法，但从整体看来这个方法确实是他们生活的唯一正解。\n</p> \n<p style=\"text-indent:2em\">\n2021年12月28日\n</p> \n<p style=\"text-indent:2em\">\n现在也许是总结第一年的最佳时间。\n</p> \n\n<p style=\"text-indent:2em\">\n在我的记忆中，研究生的生活开始于本科毕业的暑假，对于研究生来讲似乎寒暑假已经变成了一种形式。现在回想起研究生开学前的暑假，仿佛就在昨天，每每想到此处，内心总会产生一种难有的惬意，一种刚从压抑的生活中解放的自由。感觉那时的生活应该类似于喝着下午茶，坐在咖啡馆，暖暖的阳光铺在书面上，总的来说那时的我处于两个阶段的过渡期，无事，闲暇，自由，惬意，能有这样的感觉，可能大部分来源于之前的生活太操蛋，相比之下现在的我即将前往新的生活。虽然研究生的生活令人向往，但真正开始研究生的生活时，我发现这个暑假更值得关注。这个暑假开始于7月份左右，刚回到家，面临的第一个问题就是考驾照-!-。由于第一次考科目二挂了，所以还得重新考一下，不过感觉还是挺好的，就是天气有点热。每天早上需要集合由教练开车载到驾校，人有点多，有男有女，男生主要是中年人为主，女生一部分大学生，一部分中年妇女。大家有说有笑，一起打打牌，聊聊天，在树荫下乘凉，每个人轮换着上车练习。破旧的驾校中，还有着一片菜园，无事时随地拔棵葱，摘个桃子，家长里短好不热闹。可惜就是苦了教练的车子，三伏天里不眠不休的陪我们练习，期间还罢工了好几次。练习开车的时间是短暂的，因缘而聚的练车人最终都要走向考场，不过最终大家的结果基本都是好的，最可惜的就是那对双胞胎姐妹都没考过emmmm，好像是妹妹先考没过，然后姐姐跟着也就没了，果然双胞胎还是心有灵犀- -！。\n</p>\n<p style=\"text-indent:2em\">\n这个夏天最值得回忆的就是在夏日阳光的余威下骑着单车去健身，穿过两旁树木高大的公路，放眼望去耕田遍地，杨树林立；穿过乡镇，村路边商店小吃店鳞次栉比，行人往来，络绎不绝；穿越水库，堤岸两旁，一边农园，一边戏水，路边车辆横陈，暖风铺面而来彰显夏日余威；再入城镇，人声逐渐沸腾，摊位随处可见，最终抵达健身房。夏日的健身房是炎热的，更别说生意冷清的乡镇健身房了，连电风扇都舍不得开，汗如雨下是健身房中每个人的写照，但是这种感觉也让人沉迷。但是从根本上来说，健身其实是一件很难坚持的事情，因为锻炼本身就是一件让人痛苦的事情，但是能坚持的人一定有他的理由，有的是为了健康，有的是为了塑性，为了漂亮或者是帅气，而对于我来说，健身还可以让我的时间流逝变得更慢些，给予自己更多的思考的时间，给予自己一些灵感。健身完后骑上单车去超市shopping，然后披着夕阳的余晖回家。回程的路途似乎显得更加快速，夕阳西下，光影转换间，已至终点。夏日的天气有时也是阴晴不定，去时万里无云，返时磅礴大雨。夏日的夜晚有时也显得很漫长，开始研究生生活之前，已经开始研究生的任务了。\n</p>\n<p style=\"text-indent:2em\">\n研究生的生活来的似乎很快，乘上去往北京的火车，一觉便到了北京，当下的北京给人一种充满活力的感受。没有那种高楼林立的现代都市感，却有一些复古的意味（海淀区），听说北京一直流传：“海淀没有时尚，朝阳没有存款”。坐上公交车辗转之间便来到了校门口，在学生的带领下办理了相关的手续便结束了入校的旅程，然后去见一下导师。研究生的生活是单调的，因为无论何时都在写论文或者在去写论文的路上，第一年上课的时间还是很集中，有时候坐在教室里还是很有学生的感觉，自从本科大三下学期开始基本就没有课程了，突然回归到课堂上，有老师讲课还是有点怀念的，可是课程作业就不让人怀念了。到了研究生阶段，课堂能学到的东西都是有限了，极大部分都需要自己去扩展学习，自学自然而然就成为了主流，也成为了一种习惯。就这样研究生生活是一种重复，每天都朝着既定的目标前进，不论是平时还是节假日，但是有的时候突然非常想出去转转。北京的10月份的香山是漫山红叶的前奏，我似乎去的早了一点，蜿蜒的山道，陡峭的坡路，上山的过程中可以放眼全山，火红的枫叶参杂着一些绿意，有遗憾没有看到漫山红叶的风景。到了山顶时，夕阳已经快要隐入群山之中，只有下一丝微茫，乘着余光拍了几张不错的照片留作纪念，尚未细细回味群山的风景，夕阳已经离去。再回头时，北京的夜景又给了我一份惊喜，橙黄色的灯光在夜幕的承托下显得格外明亮，流动的灯光在黑夜中犹如灵动的精灵，连接在一起如同一条蜿蜒的巨龙。这一年去过香山，北京植物园，颐和园，圆明园，处处留影，处处驻凝，但能清楚回忆起来的却没有多少。临近寒假却疫情反复，最终也决定在校过年，过年的学校装饰的很漂亮，年夜饭集合了全国各地的菜肴，让没有回家的同学能吃到各地的美味。最终新年也就在电视剧中度过。年后的日子过的很快，转眼就到了暑假。这一年就这样结束了，明年再见吧。\n</p>\n\n<p><img src=\"http://39.106.34.39:4567/5329f51ab6247a8a9727e3260aef908.jpg\" alt=\"香山夜景\"><br><img src=\"http://39.106.34.39:4567/812fad9217ebead78391a2ca747fca8.jpg\" alt=\"香山夜景\"></p>\n<video id=\"video\" controls=\"\" preload=\"none\" poster=\"http://39.106.34.39:4567/_20211231205448.png\">\n<source id=\"mp4\" src=\"http://39.106.34.39:4567/7537aa3811fb2b3265be120d10c92ba7.mp4\" type=\"video/mp4\">\n</video>\n\n\n\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"Life-you-know-fisrt-year-what\"><a href=\"#Life-you-know-fisrt-year-what\" class=\"headerlink\" title=\"Life, you know fisrt year what?\"></a>Life, you know fisrt year what?</h3><p style=\"text-indent:2em\">\n2021年5月16日\n\n</p> \n<p style=\"text-indent:2em\">\n研究生第一年的生活就这么快结束了，似乎还未来得及与新生活挥手致意，就已经快要毕业离去了。\n</p> \n<p style=\"text-indent:2em\">\n研究生的生活是飞快的，特别是在当下的环境中，两年的生活似乎转瞬即逝。时间飞快的流逝，也为研究生带来的极大的身心压力，生活是在不停的前进的，总有人在你的前方，当你接触到同行者时，你会发现压力永远存在。“内卷”这个词感觉并不能描述当下环境中每个人的状态，相比于“内卷”这个词，我更喜欢“挣扎”这个词来描述这个层次的大多数人的状态。越是在某个方向上前进，越能接触到这个领域中的同行者，也越能感受到同行者中的共同点。这条路上的人处于一种非常奇怪的状态，他们对未来充满希望，也对未来充满迷茫，有时想前进一步，却又因为各种各样的顾虑犹豫不决，知道方向在哪，但却不知下一步该如何迈出。在彷徨的徘徊中，可能会失去某些看似很好的机会，最后选择一个看似最为稳妥却已经偏离理想的方法，但从整体看来这个方法确实是他们生活的唯一正解。\n</p> \n<p style=\"text-indent:2em\">\n2021年12月28日\n</p> \n<p style=\"text-indent:2em\">\n现在也许是总结第一年的最佳时间。\n</p> \n\n<p style=\"text-indent:2em\">\n在我的记忆中，研究生的生活开始于本科毕业的暑假，对于研究生来讲似乎寒暑假已经变成了一种形式。现在回想起研究生开学前的暑假，仿佛就在昨天，每每想到此处，内心总会产生一种难有的惬意，一种刚从压抑的生活中解放的自由。感觉那时的生活应该类似于喝着下午茶，坐在咖啡馆，暖暖的阳光铺在书面上，总的来说那时的我处于两个阶段的过渡期，无事，闲暇，自由，惬意，能有这样的感觉，可能大部分来源于之前的生活太操蛋，相比之下现在的我即将前往新的生活。虽然研究生的生活令人向往，但真正开始研究生的生活时，我发现这个暑假更值得关注。这个暑假开始于7月份左右，刚回到家，面临的第一个问题就是考驾照-!-。由于第一次考科目二挂了，所以还得重新考一下，不过感觉还是挺好的，就是天气有点热。每天早上需要集合由教练开车载到驾校，人有点多，有男有女，男生主要是中年人为主，女生一部分大学生，一部分中年妇女。大家有说有笑，一起打打牌，聊聊天，在树荫下乘凉，每个人轮换着上车练习。破旧的驾校中，还有着一片菜园，无事时随地拔棵葱，摘个桃子，家长里短好不热闹。可惜就是苦了教练的车子，三伏天里不眠不休的陪我们练习，期间还罢工了好几次。练习开车的时间是短暂的，因缘而聚的练车人最终都要走向考场，不过最终大家的结果基本都是好的，最可惜的就是那对双胞胎姐妹都没考过emmmm，好像是妹妹先考没过，然后姐姐跟着也就没了，果然双胞胎还是心有灵犀- -！。\n</p>\n<p style=\"text-indent:2em\">\n这个夏天最值得回忆的就是在夏日阳光的余威下骑着单车去健身，穿过两旁树木高大的公路，放眼望去耕田遍地，杨树林立；穿过乡镇，村路边商店小吃店鳞次栉比，行人往来，络绎不绝；穿越水库，堤岸两旁，一边农园，一边戏水，路边车辆横陈，暖风铺面而来彰显夏日余威；再入城镇，人声逐渐沸腾，摊位随处可见，最终抵达健身房。夏日的健身房是炎热的，更别说生意冷清的乡镇健身房了，连电风扇都舍不得开，汗如雨下是健身房中每个人的写照，但是这种感觉也让人沉迷。但是从根本上来说，健身其实是一件很难坚持的事情，因为锻炼本身就是一件让人痛苦的事情，但是能坚持的人一定有他的理由，有的是为了健康，有的是为了塑性，为了漂亮或者是帅气，而对于我来说，健身还可以让我的时间流逝变得更慢些，给予自己更多的思考的时间，给予自己一些灵感。健身完后骑上单车去超市shopping，然后披着夕阳的余晖回家。回程的路途似乎显得更加快速，夕阳西下，光影转换间，已至终点。夏日的天气有时也是阴晴不定，去时万里无云，返时磅礴大雨。夏日的夜晚有时也显得很漫长，开始研究生生活之前，已经开始研究生的任务了。\n</p>\n<p style=\"text-indent:2em\">\n研究生的生活来的似乎很快，乘上去往北京的火车，一觉便到了北京，当下的北京给人一种充满活力的感受。没有那种高楼林立的现代都市感，却有一些复古的意味（海淀区），听说北京一直流传：“海淀没有时尚，朝阳没有存款”。坐上公交车辗转之间便来到了校门口，在学生的带领下办理了相关的手续便结束了入校的旅程，然后去见一下导师。研究生的生活是单调的，因为无论何时都在写论文或者在去写论文的路上，第一年上课的时间还是很集中，有时候坐在教室里还是很有学生的感觉，自从本科大三下学期开始基本就没有课程了，突然回归到课堂上，有老师讲课还是有点怀念的，可是课程作业就不让人怀念了。到了研究生阶段，课堂能学到的东西都是有限了，极大部分都需要自己去扩展学习，自学自然而然就成为了主流，也成为了一种习惯。就这样研究生生活是一种重复，每天都朝着既定的目标前进，不论是平时还是节假日，但是有的时候突然非常想出去转转。北京的10月份的香山是漫山红叶的前奏，我似乎去的早了一点，蜿蜒的山道，陡峭的坡路，上山的过程中可以放眼全山，火红的枫叶参杂着一些绿意，有遗憾没有看到漫山红叶的风景。到了山顶时，夕阳已经快要隐入群山之中，只有下一丝微茫，乘着余光拍了几张不错的照片留作纪念，尚未细细回味群山的风景，夕阳已经离去。再回头时，北京的夜景又给了我一份惊喜，橙黄色的灯光在夜幕的承托下显得格外明亮，流动的灯光在黑夜中犹如灵动的精灵，连接在一起如同一条蜿蜒的巨龙。这一年去过香山，北京植物园，颐和园，圆明园，处处留影，处处驻凝，但能清楚回忆起来的却没有多少。临近寒假却疫情反复，最终也决定在校过年，过年的学校装饰的很漂亮，年夜饭集合了全国各地的菜肴，让没有回家的同学能吃到各地的美味。最终新年也就在电视剧中度过。年后的日子过的很快，转眼就到了暑假。这一年就这样结束了，明年再见吧。\n</p>\n\n<p><img src=\"http://39.106.34.39:4567/5329f51ab6247a8a9727e3260aef908.jpg\" alt=\"香山夜景\"><br><img src=\"http://39.106.34.39:4567/812fad9217ebead78391a2ca747fca8.jpg\" alt=\"香山夜景\"></p>\n<video id=\"video\" controls=\"\" preload=\"none\" poster=\"http://39.106.34.39:4567/_20211231205448.png\">\n<source id=\"mp4\" src=\"http://39.106.34.39:4567/7537aa3811fb2b3265be120d10c92ba7.mp4\" type=\"video/mp4\">\n</video>\n\n\n\n\n"},{"title":"jsis3d","date":"2021-02-06T11:50:17.000Z","author":"Fanrencli","_content":"## JSIS3D 论文学习记录\n\n论文地址：\n\n- https://gitee.com/FanrenCLI/jsis3d\n- https://github.com/pqhieu/jsis3d\n  \n## 环境准备\n- CUDA 10\n- Python 3.5+\n- Pytorch 0.4.0+\n\n### Installation\n首先需要编译`MV-CRF`,在下载的文件根目录中运行一下命令：\n```sh\n    cd external/densecrf\n    mkdir build\n    cd build\n    cmake -D CMAKE_BUILD_TYPE=Release ..\n    make\n    cd ../../.. # You should be at the root folder here\n    make\n```\n\n\n### Dataset\n1. 如果想自己准备数据集：\n- 数据集准备，JSIS3D论文使用的是开源的[S3DIS](http://buildingparser.stanford.edu/dataset.html)数据集，所以需要下载`S3DIS`数据集,这个数据集下载之后大约4个G，解压之后16G。\n- 在`data/s3dis`文件夹下创建`raw`和`processed`两个空文件夹用于存放原始数据和处理的过程数据\n- 创建完`raw`和`processed`两个空文件夹之后，将我们下载的`S3DIS`数据集解压之后放入`raw`文件夹下\n- 进入根目录下的`script`文件夹中，里面包含四个`py`文件，先运行`collect_annotations.py`文件，之后再运行`prepare_h5.py`\n- 运行`prepare_h5.py`文件时，首先需要修改文件中`91`行的代码，将其中`num_points`改成`4096`,这是根据`pointnet`作者代码设置的参数进行设置的\n- 运行完`prepare_h5.py`文件之后，接着运行`estimate_mean_size.py`和`estimate_median_freq.py`文件，数据集这样就制作完毕了。\n2. 如果想使用作者提供的数据集：\n- 作者提供了已经处理好的`S3DIS`数据集，[文件地址](https://drive.google.com/open?id=1s1cFfb8cInM-SNHQoTGxN9BIyNpNQK6x)\n- 下载了作者的数据集之后，将解压后的数据集放入`data/s3dis/h5`即可\n\n\n### Training & Evaluation\n\n准备数据集之后，开始训练数据：\n```sh\n    python train.py --config configs/s3dis.json --logdir logs/s3dis\n```\n数据训练完成之后，模型相关的数据将会放在`logs/s3dis`文件夹下。\n\n运行训练完的模型进行预测：\n```sh\n    python pred.py --logdir logs/s3dis --mvcrf\n```\n\n预测代码运行之后，会在`logs/s3dis`文件夹下生成`pred.npz`文件，之后想要对预测的结果进行可视化以及评价精度，运行以下代码：\n```sh\n    python eval.py --logdir logs/s3dis --visualize\n```\n运行完以上代码之后，将会在`logs/s3dis`文件夹中，生成ply文件，运用相关程序打开ply文件可以，发现里面有各个点运行的class和label信息。本文结合`open3d`和`plyfile`两个python库，对ply文件进行了处理与可视化，代码如下：\n```python\n    import open3d as o3d\n    import numpy as np\n    from plyfile import PlyData, PlyElement\n    plydata = PlyData.read(\n        r'F:\\python_work\\open3d_work\\Area_5_conferenceRoom_1.ply')\n    pc = plydata['vertex'].data\n    pcd_array = []\n    for i in range(pc.size):\n        pcd_array.append(list(pc[i]))\n    pcd_array = np.array(pcd_array)\n    colors=pcd_array[:, 3:6]\n    class_label = pcd_array[:, 6]\n    t=class_label.tolist()\n    s=set(t)\n    class_label_pro = list(s)\n    colors_list=[[152, 0, 0],[255, 0, 0],[255, 153, 0],[255, 255, 0],[0, 255, 0],[0, 255, 255],[74, 134, 232],[0, 0, 255],[255, 0, 255],[230, 184, 175],[252, 229, 205],[208, 224, 227],[221, 126, 107]]\n    for i in range(class_label.size):\n        colors[i]=colors_list[class_label_pro.index(class_label[i])]\n    pointcloud = o3d.geometry.PointCloud()\n    pointcloud.points = o3d.utility.Vector3dVector(pcd_array[:, 0:3])\n    pointcloud.colors = o3d.utility.Vector3dVector(colors/255)\n    o3d.io.write_point_cloud(\"copy_of_fragment.pcd\", pointcloud)\n    o3d.visualization.draw_geometries([pointcloud])\n    print('ok')\n```\n针对以上代码可以在理解的基础上进行修改。结果图展示：\n\n![结果图](http://39.106.34.39:4567/1.png)\n![数据图](http://39.106.34.39:4567/2.png)\n\n> **注意**:论文中针对S3DIS数据集，以区域1,2,3,4,6作为训练集，区域5作为测试集 \n\n","source":"_posts/other/jsis3d.md","raw":"---\ntitle: jsis3d\ndate: 2021-02-06 19:50:17\ncategories:\n  - Deep Learning\ntags:\n  - Jsis3d\n  - Fanrencli\nauthor: Fanrencli\n---\n## JSIS3D 论文学习记录\n\n论文地址：\n\n- https://gitee.com/FanrenCLI/jsis3d\n- https://github.com/pqhieu/jsis3d\n  \n## 环境准备\n- CUDA 10\n- Python 3.5+\n- Pytorch 0.4.0+\n\n### Installation\n首先需要编译`MV-CRF`,在下载的文件根目录中运行一下命令：\n```sh\n    cd external/densecrf\n    mkdir build\n    cd build\n    cmake -D CMAKE_BUILD_TYPE=Release ..\n    make\n    cd ../../.. # You should be at the root folder here\n    make\n```\n\n\n### Dataset\n1. 如果想自己准备数据集：\n- 数据集准备，JSIS3D论文使用的是开源的[S3DIS](http://buildingparser.stanford.edu/dataset.html)数据集，所以需要下载`S3DIS`数据集,这个数据集下载之后大约4个G，解压之后16G。\n- 在`data/s3dis`文件夹下创建`raw`和`processed`两个空文件夹用于存放原始数据和处理的过程数据\n- 创建完`raw`和`processed`两个空文件夹之后，将我们下载的`S3DIS`数据集解压之后放入`raw`文件夹下\n- 进入根目录下的`script`文件夹中，里面包含四个`py`文件，先运行`collect_annotations.py`文件，之后再运行`prepare_h5.py`\n- 运行`prepare_h5.py`文件时，首先需要修改文件中`91`行的代码，将其中`num_points`改成`4096`,这是根据`pointnet`作者代码设置的参数进行设置的\n- 运行完`prepare_h5.py`文件之后，接着运行`estimate_mean_size.py`和`estimate_median_freq.py`文件，数据集这样就制作完毕了。\n2. 如果想使用作者提供的数据集：\n- 作者提供了已经处理好的`S3DIS`数据集，[文件地址](https://drive.google.com/open?id=1s1cFfb8cInM-SNHQoTGxN9BIyNpNQK6x)\n- 下载了作者的数据集之后，将解压后的数据集放入`data/s3dis/h5`即可\n\n\n### Training & Evaluation\n\n准备数据集之后，开始训练数据：\n```sh\n    python train.py --config configs/s3dis.json --logdir logs/s3dis\n```\n数据训练完成之后，模型相关的数据将会放在`logs/s3dis`文件夹下。\n\n运行训练完的模型进行预测：\n```sh\n    python pred.py --logdir logs/s3dis --mvcrf\n```\n\n预测代码运行之后，会在`logs/s3dis`文件夹下生成`pred.npz`文件，之后想要对预测的结果进行可视化以及评价精度，运行以下代码：\n```sh\n    python eval.py --logdir logs/s3dis --visualize\n```\n运行完以上代码之后，将会在`logs/s3dis`文件夹中，生成ply文件，运用相关程序打开ply文件可以，发现里面有各个点运行的class和label信息。本文结合`open3d`和`plyfile`两个python库，对ply文件进行了处理与可视化，代码如下：\n```python\n    import open3d as o3d\n    import numpy as np\n    from plyfile import PlyData, PlyElement\n    plydata = PlyData.read(\n        r'F:\\python_work\\open3d_work\\Area_5_conferenceRoom_1.ply')\n    pc = plydata['vertex'].data\n    pcd_array = []\n    for i in range(pc.size):\n        pcd_array.append(list(pc[i]))\n    pcd_array = np.array(pcd_array)\n    colors=pcd_array[:, 3:6]\n    class_label = pcd_array[:, 6]\n    t=class_label.tolist()\n    s=set(t)\n    class_label_pro = list(s)\n    colors_list=[[152, 0, 0],[255, 0, 0],[255, 153, 0],[255, 255, 0],[0, 255, 0],[0, 255, 255],[74, 134, 232],[0, 0, 255],[255, 0, 255],[230, 184, 175],[252, 229, 205],[208, 224, 227],[221, 126, 107]]\n    for i in range(class_label.size):\n        colors[i]=colors_list[class_label_pro.index(class_label[i])]\n    pointcloud = o3d.geometry.PointCloud()\n    pointcloud.points = o3d.utility.Vector3dVector(pcd_array[:, 0:3])\n    pointcloud.colors = o3d.utility.Vector3dVector(colors/255)\n    o3d.io.write_point_cloud(\"copy_of_fragment.pcd\", pointcloud)\n    o3d.visualization.draw_geometries([pointcloud])\n    print('ok')\n```\n针对以上代码可以在理解的基础上进行修改。结果图展示：\n\n![结果图](http://39.106.34.39:4567/1.png)\n![数据图](http://39.106.34.39:4567/2.png)\n\n> **注意**:论文中针对S3DIS数据集，以区域1,2,3,4,6作为训练集，区域5作为测试集 \n\n","slug":"other/jsis3d","published":1,"updated":"2021-07-13T08:16:16.444Z","_id":"ckoy06sni0000hguod97lcsry","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"JSIS3D-论文学习记录\"><a href=\"#JSIS3D-论文学习记录\" class=\"headerlink\" title=\"JSIS3D 论文学习记录\"></a>JSIS3D 论文学习记录</h2><p>论文地址：</p>\n<ul>\n<li><a href=\"https://gitee.com/FanrenCLI/jsis3d\">https://gitee.com/FanrenCLI/jsis3d</a></li>\n<li><a href=\"https://github.com/pqhieu/jsis3d\">https://github.com/pqhieu/jsis3d</a></li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li>CUDA 10</li>\n<li>Python 3.5+</li>\n<li>Pytorch 0.4.0+</li>\n</ul>\n<h3 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h3><p>首先需要编译<code>MV-CRF</code>,在下载的文件根目录中运行一下命令：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">    cd external/densecrf\n    mkdir build\n    cd build\n    cmake -D CMAKE_BUILD_TYPE=Release ..\n    make\n    cd ../../.. # You should be at the root folder here\n    make</code></pre>\n<h3 id=\"Dataset\"><a href=\"#Dataset\" class=\"headerlink\" title=\"Dataset\"></a>Dataset</h3><ol>\n<li>如果想自己准备数据集：</li>\n</ol>\n<ul>\n<li>数据集准备，JSIS3D论文使用的是开源的<a href=\"http://buildingparser.stanford.edu/dataset.html\">S3DIS</a>数据集，所以需要下载<code>S3DIS</code>数据集,这个数据集下载之后大约4个G，解压之后16G。</li>\n<li>在<code>data/s3dis</code>文件夹下创建<code>raw</code>和<code>processed</code>两个空文件夹用于存放原始数据和处理的过程数据</li>\n<li>创建完<code>raw</code>和<code>processed</code>两个空文件夹之后，将我们下载的<code>S3DIS</code>数据集解压之后放入<code>raw</code>文件夹下</li>\n<li>进入根目录下的<code>script</code>文件夹中，里面包含四个<code>py</code>文件，先运行<code>collect_annotations.py</code>文件，之后再运行<code>prepare_h5.py</code></li>\n<li>运行<code>prepare_h5.py</code>文件时，首先需要修改文件中<code>91</code>行的代码，将其中<code>num_points</code>改成<code>4096</code>,这是根据<code>pointnet</code>作者代码设置的参数进行设置的</li>\n<li>运行完<code>prepare_h5.py</code>文件之后，接着运行<code>estimate_mean_size.py</code>和<code>estimate_median_freq.py</code>文件，数据集这样就制作完毕了。</li>\n</ul>\n<ol start=\"2\">\n<li>如果想使用作者提供的数据集：</li>\n</ol>\n<ul>\n<li>作者提供了已经处理好的<code>S3DIS</code>数据集，<a href=\"https://drive.google.com/open?id=1s1cFfb8cInM-SNHQoTGxN9BIyNpNQK6x\">文件地址</a></li>\n<li>下载了作者的数据集之后，将解压后的数据集放入<code>data/s3dis/h5</code>即可</li>\n</ul>\n<h3 id=\"Training-amp-Evaluation\"><a href=\"#Training-amp-Evaluation\" class=\"headerlink\" title=\"Training &amp; Evaluation\"></a>Training &amp; Evaluation</h3><p>准备数据集之后，开始训练数据：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">    python train.py --config configs/s3dis.json --logdir logs/s3dis</code></pre>\n<p>数据训练完成之后，模型相关的数据将会放在<code>logs/s3dis</code>文件夹下。</p>\n<p>运行训练完的模型进行预测：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">    python pred.py --logdir logs/s3dis --mvcrf</code></pre>\n<p>预测代码运行之后，会在<code>logs/s3dis</code>文件夹下生成<code>pred.npz</code>文件，之后想要对预测的结果进行可视化以及评价精度，运行以下代码：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">    python eval.py --logdir logs/s3dis --visualize</code></pre>\n<p>运行完以上代码之后，将会在<code>logs/s3dis</code>文件夹中，生成ply文件，运用相关程序打开ply文件可以，发现里面有各个点运行的class和label信息。本文结合<code>open3d</code>和<code>plyfile</code>两个python库，对ply文件进行了处理与可视化，代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">    <span class=\"token keyword\">import</span> open3d <span class=\"token keyword\">as</span> o3d\n    <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n    <span class=\"token keyword\">from</span> plyfile <span class=\"token keyword\">import</span> PlyData<span class=\"token punctuation\">,</span> PlyElement\n    plydata <span class=\"token operator\">=</span> PlyData<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>\n        r<span class=\"token string\">'F:\\python_work\\open3d_work\\Area_5_conferenceRoom_1.ply'</span><span class=\"token punctuation\">)</span>\n    pc <span class=\"token operator\">=</span> plydata<span class=\"token punctuation\">[</span><span class=\"token string\">'vertex'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data\n    pcd_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        pcd_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    pcd_array <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>pcd_array<span class=\"token punctuation\">)</span>\n    colors<span class=\"token operator\">=</span>pcd_array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n    class_label <span class=\"token operator\">=</span> pcd_array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n    t<span class=\"token operator\">=</span>class_label<span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    s<span class=\"token operator\">=</span>set<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n    class_label_pro <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    colors_list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">152</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">153</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">74</span><span class=\"token punctuation\">,</span> <span class=\"token number\">134</span><span class=\"token punctuation\">,</span> <span class=\"token number\">232</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">230</span><span class=\"token punctuation\">,</span> <span class=\"token number\">184</span><span class=\"token punctuation\">,</span> <span class=\"token number\">175</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">252</span><span class=\"token punctuation\">,</span> <span class=\"token number\">229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">205</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">208</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">227</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">221</span><span class=\"token punctuation\">,</span> <span class=\"token number\">126</span><span class=\"token punctuation\">,</span> <span class=\"token number\">107</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>class_label<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        colors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>colors_list<span class=\"token punctuation\">[</span>class_label_pro<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>class_label<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    pointcloud <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>PointCloud<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pointcloud<span class=\"token punctuation\">.</span>points <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>utility<span class=\"token punctuation\">.</span>Vector3dVector<span class=\"token punctuation\">(</span>pcd_array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    pointcloud<span class=\"token punctuation\">.</span>colors <span class=\"token operator\">=</span> o3d<span class=\"token punctuation\">.</span>utility<span class=\"token punctuation\">.</span>Vector3dVector<span class=\"token punctuation\">(</span>colors<span class=\"token operator\">/</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n    o3d<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>write_point_cloud<span class=\"token punctuation\">(</span><span class=\"token string\">\"copy_of_fragment.pcd\"</span><span class=\"token punctuation\">,</span> pointcloud<span class=\"token punctuation\">)</span>\n    o3d<span class=\"token punctuation\">.</span>visualization<span class=\"token punctuation\">.</span>draw_geometries<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pointcloud<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>针对以上代码可以在理解的基础上进行修改。结果图展示：</p>\n<p><img src=\"http://39.106.34.39:4567/1.png\" alt=\"结果图\"><br><img src=\"http://39.106.34.39:4567/2.png\" alt=\"数据图\"></p>\n<blockquote>\n<p><strong>注意</strong>:论文中针对S3DIS数据集，以区域1,2,3,4,6作为训练集，区域5作为测试集 </p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"JSIS3D-论文学习记录\"><a href=\"#JSIS3D-论文学习记录\" class=\"headerlink\" title=\"JSIS3D 论文学习记录\"></a>JSIS3D 论文学习记录</h2><p>论文地址：</p>\n<ul>\n<li><a href=\"https://gitee.com/FanrenCLI/jsis3d\">https://gitee.com/FanrenCLI/jsis3d</a></li>\n<li><a href=\"https://github.com/pqhieu/jsis3d\">https://github.com/pqhieu/jsis3d</a></li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li>CUDA 10</li>\n<li>Python 3.5+</li>\n<li>Pytorch 0.4.0+</li>\n</ul>\n<h3 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h3><p>首先需要编译<code>MV-CRF</code>,在下载的文件根目录中运行一下命令：</p>\n<pre><code class=\"sh\">    cd external/densecrf\n    mkdir build\n    cd build\n    cmake -D CMAKE_BUILD_TYPE=Release ..\n    make\n    cd ../../.. # You should be at the root folder here\n    make</code></pre>\n<h3 id=\"Dataset\"><a href=\"#Dataset\" class=\"headerlink\" title=\"Dataset\"></a>Dataset</h3><ol>\n<li>如果想自己准备数据集：</li>\n</ol>\n<ul>\n<li>数据集准备，JSIS3D论文使用的是开源的<a href=\"http://buildingparser.stanford.edu/dataset.html\">S3DIS</a>数据集，所以需要下载<code>S3DIS</code>数据集,这个数据集下载之后大约4个G，解压之后16G。</li>\n<li>在<code>data/s3dis</code>文件夹下创建<code>raw</code>和<code>processed</code>两个空文件夹用于存放原始数据和处理的过程数据</li>\n<li>创建完<code>raw</code>和<code>processed</code>两个空文件夹之后，将我们下载的<code>S3DIS</code>数据集解压之后放入<code>raw</code>文件夹下</li>\n<li>进入根目录下的<code>script</code>文件夹中，里面包含四个<code>py</code>文件，先运行<code>collect_annotations.py</code>文件，之后再运行<code>prepare_h5.py</code></li>\n<li>运行<code>prepare_h5.py</code>文件时，首先需要修改文件中<code>91</code>行的代码，将其中<code>num_points</code>改成<code>4096</code>,这是根据<code>pointnet</code>作者代码设置的参数进行设置的</li>\n<li>运行完<code>prepare_h5.py</code>文件之后，接着运行<code>estimate_mean_size.py</code>和<code>estimate_median_freq.py</code>文件，数据集这样就制作完毕了。</li>\n</ul>\n<ol start=\"2\">\n<li>如果想使用作者提供的数据集：</li>\n</ol>\n<ul>\n<li>作者提供了已经处理好的<code>S3DIS</code>数据集，<a href=\"https://drive.google.com/open?id=1s1cFfb8cInM-SNHQoTGxN9BIyNpNQK6x\">文件地址</a></li>\n<li>下载了作者的数据集之后，将解压后的数据集放入<code>data/s3dis/h5</code>即可</li>\n</ul>\n<h3 id=\"Training-amp-Evaluation\"><a href=\"#Training-amp-Evaluation\" class=\"headerlink\" title=\"Training &amp; Evaluation\"></a>Training &amp; Evaluation</h3><p>准备数据集之后，开始训练数据：</p>\n<pre><code class=\"sh\">    python train.py --config configs/s3dis.json --logdir logs/s3dis</code></pre>\n<p>数据训练完成之后，模型相关的数据将会放在<code>logs/s3dis</code>文件夹下。</p>\n<p>运行训练完的模型进行预测：</p>\n<pre><code class=\"sh\">    python pred.py --logdir logs/s3dis --mvcrf</code></pre>\n<p>预测代码运行之后，会在<code>logs/s3dis</code>文件夹下生成<code>pred.npz</code>文件，之后想要对预测的结果进行可视化以及评价精度，运行以下代码：</p>\n<pre><code class=\"sh\">    python eval.py --logdir logs/s3dis --visualize</code></pre>\n<p>运行完以上代码之后，将会在<code>logs/s3dis</code>文件夹中，生成ply文件，运用相关程序打开ply文件可以，发现里面有各个点运行的class和label信息。本文结合<code>open3d</code>和<code>plyfile</code>两个python库，对ply文件进行了处理与可视化，代码如下：</p>\n<pre><code class=\"python\">    import open3d as o3d\n    import numpy as np\n    from plyfile import PlyData, PlyElement\n    plydata = PlyData.read(\n        r&#39;F:\\python_work\\open3d_work\\Area_5_conferenceRoom_1.ply&#39;)\n    pc = plydata[&#39;vertex&#39;].data\n    pcd_array = []\n    for i in range(pc.size):\n        pcd_array.append(list(pc[i]))\n    pcd_array = np.array(pcd_array)\n    colors=pcd_array[:, 3:6]\n    class_label = pcd_array[:, 6]\n    t=class_label.tolist()\n    s=set(t)\n    class_label_pro = list(s)\n    colors_list=[[152, 0, 0],[255, 0, 0],[255, 153, 0],[255, 255, 0],[0, 255, 0],[0, 255, 255],[74, 134, 232],[0, 0, 255],[255, 0, 255],[230, 184, 175],[252, 229, 205],[208, 224, 227],[221, 126, 107]]\n    for i in range(class_label.size):\n        colors[i]=colors_list[class_label_pro.index(class_label[i])]\n    pointcloud = o3d.geometry.PointCloud()\n    pointcloud.points = o3d.utility.Vector3dVector(pcd_array[:, 0:3])\n    pointcloud.colors = o3d.utility.Vector3dVector(colors/255)\n    o3d.io.write_point_cloud(&quot;copy_of_fragment.pcd&quot;, pointcloud)\n    o3d.visualization.draw_geometries([pointcloud])\n    print(&#39;ok&#39;)</code></pre>\n<p>针对以上代码可以在理解的基础上进行修改。结果图展示：</p>\n<p><img src=\"http://39.106.34.39:4567/1.png\" alt=\"结果图\"><br><img src=\"http://39.106.34.39:4567/2.png\" alt=\"数据图\"></p>\n<blockquote>\n<p><strong>注意</strong>:论文中针对S3DIS数据集，以区域1,2,3,4,6作为训练集，区域5作为测试集 </p>\n</blockquote>\n"},{"title":"基于pytorch的代码完整流程","date":"2021-05-20T02:37:31.000Z","top":true,"cover":true,"author":"Fanrencli","_content":"## 基于Pytorch深度学习完整训练过程展示\n\n过去文章只涉及相关的主干特征提取网络的介绍以及一些经典算法的关键代码复现，并没有涉及到整个训练过程的代码展示，而本文就之前给出的特征提取网络，选取其中一种特征提取网络进行经典的网络分类。\n\n### 数据处理\n\n首先定义我们的数据类`MydataLoader`,注意这个类必须要继承`torch.utils.data.Dataset`类，然后必须要实现三个方法：`__init__(self)`、`__len__(self)`、`__getitem__(self,idx)`：\n- 第一个方式用于类的初始化，数据加载和处理过程都在这个方法中实现\n- 第二个方法用于获取数据的数量\n- 第三个方法用于根据索引获取数据\n\n由于做深度学习时候的数据量通常很大，我们不能一次性加载到内存中，所以我们需要数据的时候就获取数据的路径和类别，然后在第三个方法中实现根据路径和类别来读取图片并进行一系列的操作，通过这样实现数据的输入。\n\n本文的数据放在`UECFOOD256`文件夹下，里面包含256类的数据，每一类数据在一个文件夹下，每个文件夹的名称就是数据的类别。按照这个标准准备好数据，之后再初始化方法中对根目录的文件夹中内容进行读取，获取所有文件夹下的图片路径和类别（就是文件夹的名称），写入txt文件中。这样所有的数据相关的路径和类别就存入了txt文件中，当我们需要读取数据时，就读入txt文件中的内容，每一行就是一个图片路径，通过索引将数据输入到网络中。\n```python\nclass MydataLoader(Dataset):\n    # resize用于将数据统一到相同的尺寸大小，mode用于区别数据是用于训练or验证or测试，root用于表示根目录\n    def __init__(self, root='UECFOOD256\\\\', resize=(224,224), mode=\"train\"):\n        super(MydataLoader,self).__init__()\n        self.root = root\n        self.resize = resize\n        self.name2label = {}\n        for name in sorted(os.listdir(os.path.join(root))):\n            if not os.path.isdir(os.path.join(root,name)):\n                continue\n            self.name2label[name] = len(self.name2label.keys())\n        self.images,self.labels = self.loadCSV()\n        print(len(self.images))\n        if mode == 'Training':\n            self.images = self.images[:int(0.6*len(self.images))]\n            self.labels = self.labels[:int(0.6*len(self.labels))]\n        if mode == 'val':\n            self.images = self.images[int(0.6*len(self.images)):int(0.8*len(self.images))]\n            self.labels = self.labels[int(0.6*len(self.labels)):int(0.8*len(self.labels))]\n        if mode == 'test':\n            self.images = self.images[int(0.8*len(self.images)):]\n            self.labels = self.labels[int(0.8*len(self.labels)):]\n    #第一次训练时会将数据保存到txt，如果txt存在则世界读取数据\n    def loadtxt(self):\n        if not os.path.exists('train.txt'):\n            img = []\n            for name in self.name2label.keys():\n                img += glob.glob(os.path.join(self.root, name, \"*.jpg\" ))\n            random.shuffle(img)\n            with open('train.txt','a') as f:\n                for i in img:\n                    name = i.split(os.sep)[-2]\n                    label = self.name2label[name]\n                    f.write(i+\",\"+str(label)+'\\n')\n                print('save the data into train.txt')\n            images ,labels= [],[]\n            with open('train.txt','r') as f:\n                while True:\n                    data = f.readline()\n                    if data=='':\n                        break\n                    [img,label] = data.split(',')\n                    images.append(img)\n                    labels.append(int(label))\n        images ,labels= [],[]\n        with open('train.txt','r') as f:\n            while True:\n                data = f.readline()\n                if data=='':\n                    break\n                img,label = data.split(',')\n                images.append(img)\n                labels.append(int(label))\n        return images,labels\n    def __len__(self):\n        return len(self.images)\n    # 根据素银获取图片的路径，并对图片进行才做包括调整尺寸，旋转，中心剪切，归一化等等\n    def __getitem__(self,idx):\n        img ,label = self.images[idx],self.labels[idx]\n        tf = transforms.Compose([\n            lambda x: Image.open(img),\n            transforms.Resize((int(self.resize[0]*1.25),int(self.resize[1]*1.25))),\n            transforms.RandomRotation(15),\n            transforms.CenterCrop(self.resize[0]),\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.485,0.456,0.406],std=[0.229,0.224,0.225])\n        ])\n        img = tf(img)\n        label = torch.tensor(label)\n        return img,label\n\n```\n\n### 模型训练\n\n模型训练的过程通常按照固有的流程，首先我们要设置一些参数：batch_size（每批次训练数据大小，根据GPU的等级设计），学习率lr（这个是深度学习的概念，通常设置为1e-3），迭代次数epochs等等。\n\n然后就是固有的流程：初始化模型、优化器选择、loss函数设计、开始训练。在训练的过程中，我们通过引入`tqdm`库来实时跟踪模型的训练进度。关于这个方式的使用请读者自行百度。其中每一个迭代我们都进行计算一下精度，评估验证集的数据准确性，评估的过程我们不需要计算梯度。\n\n```python\ndef evaluate(model,db):\n    correct = 0\n    total = len(db.dataset)\n    for x,y in db:\n        x,y = x.to(device),y.to(device)\n        with torch.no_grad():\n            logits = model(x)\n            pred = logits.argmax(dim=1)\n        correct += torch.eq(pred,y).sum().float().item()\n    return correct/total\n\n# 设置训练的相关参数\nbatch_size = 1\nlr = 1e-3\nepochs = 100\ndevice = torch.device('cuda')\n\n# 加载三种数据\ntrain_db = MydataLoader()\nval_db = MydataLoader(mode = 'val')\ntest_db = MydataLoader(mode = 'test')\ntrain_loader = DataLoader(train_db,batch_size = batch_size,shuffle = True)\nval_loader = DataLoader(val_db,batch_size = batch_size,shuffle = True)\ntest_loader = DataLoader(test_db,batch_size = batch_size,shuffle = True)\n\n# 模型初始化以及设置训练的次数和相关参数\nbest_acc = 0\nmodel = ResNet101(256).to(device)\noptimizer = optim.Adam(model.parameters(),lr=lr)\ncriteon = nn.CrossEntropyLoss()\nwith open(\"train.txt\",\"r\") as f:\n    train_lines = f.readlines()\nepoch_size = len(train_lines)//batch_size\n\n# 开始训练\nfor epoch in range(epochs):\n    with tqdm(total = epoch_size, desc = f'Epoch {epoch + 1}/{epochs}',mininterval=0.3 ) as pbar:\n        for step,(x,y) in enumerate(train_loader):\n            if step>epoch_size:\n                break\n            x,y = x.to(device),y.to(device)\n            optimizer.zero_grad()\n            logits = model(x)\n            loss = criteon(logits,y)\n\n            loss.backward()\n            optimizer.step()\n            pbar.update(1)\n        val_acc = evaluate(model,val_loader)\n        if val_acc>best_acc:\n            best_acc = val_acc\n            torch.save(model.state_dict(),'best_model.h5')\n\nprint(\"best_acc:\",best_acc)\nmodel.load_state_dict(torch.load('best_model.h5'))\nprint('load the model')\ntest_acc = evaluate(model,test_loader)\n```","source":"_posts/pytorch/pytorch-data.md","raw":"---\ntitle: 基于pytorch的代码完整流程\ndate: 2021-05-20 10:37:31\ntop: true\ncover: true\ncategories: Deep Learning\ntags:\n- Pytorch\n- Training Methods\nauthor: Fanrencli\n---\n## 基于Pytorch深度学习完整训练过程展示\n\n过去文章只涉及相关的主干特征提取网络的介绍以及一些经典算法的关键代码复现，并没有涉及到整个训练过程的代码展示，而本文就之前给出的特征提取网络，选取其中一种特征提取网络进行经典的网络分类。\n\n### 数据处理\n\n首先定义我们的数据类`MydataLoader`,注意这个类必须要继承`torch.utils.data.Dataset`类，然后必须要实现三个方法：`__init__(self)`、`__len__(self)`、`__getitem__(self,idx)`：\n- 第一个方式用于类的初始化，数据加载和处理过程都在这个方法中实现\n- 第二个方法用于获取数据的数量\n- 第三个方法用于根据索引获取数据\n\n由于做深度学习时候的数据量通常很大，我们不能一次性加载到内存中，所以我们需要数据的时候就获取数据的路径和类别，然后在第三个方法中实现根据路径和类别来读取图片并进行一系列的操作，通过这样实现数据的输入。\n\n本文的数据放在`UECFOOD256`文件夹下，里面包含256类的数据，每一类数据在一个文件夹下，每个文件夹的名称就是数据的类别。按照这个标准准备好数据，之后再初始化方法中对根目录的文件夹中内容进行读取，获取所有文件夹下的图片路径和类别（就是文件夹的名称），写入txt文件中。这样所有的数据相关的路径和类别就存入了txt文件中，当我们需要读取数据时，就读入txt文件中的内容，每一行就是一个图片路径，通过索引将数据输入到网络中。\n```python\nclass MydataLoader(Dataset):\n    # resize用于将数据统一到相同的尺寸大小，mode用于区别数据是用于训练or验证or测试，root用于表示根目录\n    def __init__(self, root='UECFOOD256\\\\', resize=(224,224), mode=\"train\"):\n        super(MydataLoader,self).__init__()\n        self.root = root\n        self.resize = resize\n        self.name2label = {}\n        for name in sorted(os.listdir(os.path.join(root))):\n            if not os.path.isdir(os.path.join(root,name)):\n                continue\n            self.name2label[name] = len(self.name2label.keys())\n        self.images,self.labels = self.loadCSV()\n        print(len(self.images))\n        if mode == 'Training':\n            self.images = self.images[:int(0.6*len(self.images))]\n            self.labels = self.labels[:int(0.6*len(self.labels))]\n        if mode == 'val':\n            self.images = self.images[int(0.6*len(self.images)):int(0.8*len(self.images))]\n            self.labels = self.labels[int(0.6*len(self.labels)):int(0.8*len(self.labels))]\n        if mode == 'test':\n            self.images = self.images[int(0.8*len(self.images)):]\n            self.labels = self.labels[int(0.8*len(self.labels)):]\n    #第一次训练时会将数据保存到txt，如果txt存在则世界读取数据\n    def loadtxt(self):\n        if not os.path.exists('train.txt'):\n            img = []\n            for name in self.name2label.keys():\n                img += glob.glob(os.path.join(self.root, name, \"*.jpg\" ))\n            random.shuffle(img)\n            with open('train.txt','a') as f:\n                for i in img:\n                    name = i.split(os.sep)[-2]\n                    label = self.name2label[name]\n                    f.write(i+\",\"+str(label)+'\\n')\n                print('save the data into train.txt')\n            images ,labels= [],[]\n            with open('train.txt','r') as f:\n                while True:\n                    data = f.readline()\n                    if data=='':\n                        break\n                    [img,label] = data.split(',')\n                    images.append(img)\n                    labels.append(int(label))\n        images ,labels= [],[]\n        with open('train.txt','r') as f:\n            while True:\n                data = f.readline()\n                if data=='':\n                    break\n                img,label = data.split(',')\n                images.append(img)\n                labels.append(int(label))\n        return images,labels\n    def __len__(self):\n        return len(self.images)\n    # 根据素银获取图片的路径，并对图片进行才做包括调整尺寸，旋转，中心剪切，归一化等等\n    def __getitem__(self,idx):\n        img ,label = self.images[idx],self.labels[idx]\n        tf = transforms.Compose([\n            lambda x: Image.open(img),\n            transforms.Resize((int(self.resize[0]*1.25),int(self.resize[1]*1.25))),\n            transforms.RandomRotation(15),\n            transforms.CenterCrop(self.resize[0]),\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.485,0.456,0.406],std=[0.229,0.224,0.225])\n        ])\n        img = tf(img)\n        label = torch.tensor(label)\n        return img,label\n\n```\n\n### 模型训练\n\n模型训练的过程通常按照固有的流程，首先我们要设置一些参数：batch_size（每批次训练数据大小，根据GPU的等级设计），学习率lr（这个是深度学习的概念，通常设置为1e-3），迭代次数epochs等等。\n\n然后就是固有的流程：初始化模型、优化器选择、loss函数设计、开始训练。在训练的过程中，我们通过引入`tqdm`库来实时跟踪模型的训练进度。关于这个方式的使用请读者自行百度。其中每一个迭代我们都进行计算一下精度，评估验证集的数据准确性，评估的过程我们不需要计算梯度。\n\n```python\ndef evaluate(model,db):\n    correct = 0\n    total = len(db.dataset)\n    for x,y in db:\n        x,y = x.to(device),y.to(device)\n        with torch.no_grad():\n            logits = model(x)\n            pred = logits.argmax(dim=1)\n        correct += torch.eq(pred,y).sum().float().item()\n    return correct/total\n\n# 设置训练的相关参数\nbatch_size = 1\nlr = 1e-3\nepochs = 100\ndevice = torch.device('cuda')\n\n# 加载三种数据\ntrain_db = MydataLoader()\nval_db = MydataLoader(mode = 'val')\ntest_db = MydataLoader(mode = 'test')\ntrain_loader = DataLoader(train_db,batch_size = batch_size,shuffle = True)\nval_loader = DataLoader(val_db,batch_size = batch_size,shuffle = True)\ntest_loader = DataLoader(test_db,batch_size = batch_size,shuffle = True)\n\n# 模型初始化以及设置训练的次数和相关参数\nbest_acc = 0\nmodel = ResNet101(256).to(device)\noptimizer = optim.Adam(model.parameters(),lr=lr)\ncriteon = nn.CrossEntropyLoss()\nwith open(\"train.txt\",\"r\") as f:\n    train_lines = f.readlines()\nepoch_size = len(train_lines)//batch_size\n\n# 开始训练\nfor epoch in range(epochs):\n    with tqdm(total = epoch_size, desc = f'Epoch {epoch + 1}/{epochs}',mininterval=0.3 ) as pbar:\n        for step,(x,y) in enumerate(train_loader):\n            if step>epoch_size:\n                break\n            x,y = x.to(device),y.to(device)\n            optimizer.zero_grad()\n            logits = model(x)\n            loss = criteon(logits,y)\n\n            loss.backward()\n            optimizer.step()\n            pbar.update(1)\n        val_acc = evaluate(model,val_loader)\n        if val_acc>best_acc:\n            best_acc = val_acc\n            torch.save(model.state_dict(),'best_model.h5')\n\nprint(\"best_acc:\",best_acc)\nmodel.load_state_dict(torch.load('best_model.h5'))\nprint('load the model')\ntest_acc = evaluate(model,test_loader)\n```","slug":"pytorch/pytorch-data","published":1,"updated":"2021-05-21T07:29:43.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckoy06sq60004hguo7772fmk1","content":"<h2 id=\"基于Pytorch深度学习完整训练过程展示\"><a href=\"#基于Pytorch深度学习完整训练过程展示\" class=\"headerlink\" title=\"基于Pytorch深度学习完整训练过程展示\"></a>基于Pytorch深度学习完整训练过程展示</h2><p>过去文章只涉及相关的主干特征提取网络的介绍以及一些经典算法的关键代码复现，并没有涉及到整个训练过程的代码展示，而本文就之前给出的特征提取网络，选取其中一种特征提取网络进行经典的网络分类。</p>\n<h3 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h3><p>首先定义我们的数据类<code>MydataLoader</code>,注意这个类必须要继承<code>torch.utils.data.Dataset</code>类，然后必须要实现三个方法：<code>__init__(self)</code>、<code>__len__(self)</code>、<code>__getitem__(self,idx)</code>：</p>\n<ul>\n<li>第一个方式用于类的初始化，数据加载和处理过程都在这个方法中实现</li>\n<li>第二个方法用于获取数据的数量</li>\n<li>第三个方法用于根据索引获取数据</li>\n</ul>\n<p>由于做深度学习时候的数据量通常很大，我们不能一次性加载到内存中，所以我们需要数据的时候就获取数据的路径和类别，然后在第三个方法中实现根据路径和类别来读取图片并进行一系列的操作，通过这样实现数据的输入。</p>\n<p>本文的数据放在<code>UECFOOD256</code>文件夹下，里面包含256类的数据，每一类数据在一个文件夹下，每个文件夹的名称就是数据的类别。按照这个标准准备好数据，之后再初始化方法中对根目录的文件夹中内容进行读取，获取所有文件夹下的图片路径和类别（就是文件夹的名称），写入txt文件中。这样所有的数据相关的路径和类别就存入了txt文件中，当我们需要读取数据时，就读入txt文件中的内容，每一行就是一个图片路径，通过索引将数据输入到网络中。</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MydataLoader</span><span class=\"token punctuation\">(</span>Dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># resize用于将数据统一到相同的尺寸大小，mode用于区别数据是用于训练or验证or测试，root用于表示根目录</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token operator\">=</span><span class=\"token string\">'UECFOOD256\\\\'</span><span class=\"token punctuation\">,</span> resize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span><span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">\"train\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>MydataLoader<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root\n        self<span class=\"token punctuation\">.</span>resize <span class=\"token operator\">=</span> resize\n        self<span class=\"token punctuation\">.</span>name2label <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> sorted<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n            self<span class=\"token punctuation\">.</span>name2label<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name2label<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>labels <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>loadCSV<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> mode <span class=\"token operator\">==</span> <span class=\"token string\">'Training'</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>images <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>int<span class=\"token punctuation\">(</span><span class=\"token number\">0.6</span><span class=\"token operator\">*</span>len<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n            self<span class=\"token punctuation\">.</span>labels <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>int<span class=\"token punctuation\">(</span><span class=\"token number\">0.6</span><span class=\"token operator\">*</span>len<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> mode <span class=\"token operator\">==</span> <span class=\"token string\">'val'</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>images <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">(</span><span class=\"token number\">0.6</span><span class=\"token operator\">*</span>len<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>int<span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token operator\">*</span>len<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n            self<span class=\"token punctuation\">.</span>labels <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">(</span><span class=\"token number\">0.6</span><span class=\"token operator\">*</span>len<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>int<span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token operator\">*</span>len<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> mode <span class=\"token operator\">==</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>images <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token operator\">*</span>len<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n            self<span class=\"token punctuation\">.</span>labels <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token operator\">*</span>len<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\">#第一次训练时会将数据保存到txt，如果txt存在则世界读取数据</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">loadtxt</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token string\">'train.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            img <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>name2label<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                img <span class=\"token operator\">+=</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.jpg\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">with</span> open<span class=\"token punctuation\">(</span><span class=\"token string\">'train.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> img<span class=\"token punctuation\">:</span>\n                    name <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n                    label <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>name2label<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n                    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'save the data into train.txt'</span><span class=\"token punctuation\">)</span>\n            images <span class=\"token punctuation\">,</span>labels<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">with</span> open<span class=\"token punctuation\">(</span><span class=\"token string\">'train.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                    data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> data<span class=\"token operator\">==</span><span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">break</span>\n                    <span class=\"token punctuation\">[</span>img<span class=\"token punctuation\">,</span>label<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span>\n                    images<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n                    labels<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        images <span class=\"token punctuation\">,</span>labels<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">with</span> open<span class=\"token punctuation\">(</span><span class=\"token string\">'train.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> data<span class=\"token operator\">==</span><span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span>\n                img<span class=\"token punctuation\">,</span>label <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span>\n                images<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n                labels<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> images<span class=\"token punctuation\">,</span>labels\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> len<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 根据素银获取图片的路径，并对图片进行才做包括调整尺寸，旋转，中心剪切，归一化等等</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        img <span class=\"token punctuation\">,</span>label <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>labels<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n        tf <span class=\"token operator\">=</span> transforms<span class=\"token punctuation\">.</span>Compose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> Image<span class=\"token punctuation\">.</span>open<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            transforms<span class=\"token punctuation\">.</span>Resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">1.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>int<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">1.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            transforms<span class=\"token punctuation\">.</span>RandomRotation<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            transforms<span class=\"token punctuation\">.</span>CenterCrop<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            transforms<span class=\"token punctuation\">.</span>Normalize<span class=\"token punctuation\">(</span>mean<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.485</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.456</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.406</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>std<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.229</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.224</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.225</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        img <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n        label <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> img<span class=\"token punctuation\">,</span>label\n</code></pre>\n<h3 id=\"模型训练\"><a href=\"#模型训练\" class=\"headerlink\" title=\"模型训练\"></a>模型训练</h3><p>模型训练的过程通常按照固有的流程，首先我们要设置一些参数：batch_size（每批次训练数据大小，根据GPU的等级设计），学习率lr（这个是深度学习的概念，通常设置为1e-3），迭代次数epochs等等。</p>\n<p>然后就是固有的流程：初始化模型、优化器选择、loss函数设计、开始训练。在训练的过程中，我们通过引入<code>tqdm</code>库来实时跟踪模型的训练进度。关于这个方式的使用请读者自行百度。其中每一个迭代我们都进行计算一下精度，评估验证集的数据准确性，评估的过程我们不需要计算梯度。</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    correct <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    total <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> x<span class=\"token punctuation\">,</span>y <span class=\"token keyword\">in</span> db<span class=\"token punctuation\">:</span>\n        x<span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> torch<span class=\"token punctuation\">.</span>no_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            logits <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n            pred <span class=\"token operator\">=</span> logits<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>dim<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        correct <span class=\"token operator\">+=</span> torch<span class=\"token punctuation\">.</span>eq<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>float<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> correct<span class=\"token operator\">/</span>total\n\n<span class=\"token comment\" spellcheck=\"true\"># 设置训练的相关参数</span>\nbatch_size <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nlr <span class=\"token operator\">=</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span>\nepochs <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\ndevice <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">'cuda'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 加载三种数据</span>\ntrain_db <span class=\"token operator\">=</span> MydataLoader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nval_db <span class=\"token operator\">=</span> MydataLoader<span class=\"token punctuation\">(</span>mode <span class=\"token operator\">=</span> <span class=\"token string\">'val'</span><span class=\"token punctuation\">)</span>\ntest_db <span class=\"token operator\">=</span> MydataLoader<span class=\"token punctuation\">(</span>mode <span class=\"token operator\">=</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span>\ntrain_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>train_db<span class=\"token punctuation\">,</span>batch_size <span class=\"token operator\">=</span> batch_size<span class=\"token punctuation\">,</span>shuffle <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nval_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>val_db<span class=\"token punctuation\">,</span>batch_size <span class=\"token operator\">=</span> batch_size<span class=\"token punctuation\">,</span>shuffle <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\ntest_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>test_db<span class=\"token punctuation\">,</span>batch_size <span class=\"token operator\">=</span> batch_size<span class=\"token punctuation\">,</span>shuffle <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 模型初始化以及设置训练的次数和相关参数</span>\nbest_acc <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nmodel <span class=\"token operator\">=</span> ResNet101<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\noptimizer <span class=\"token operator\">=</span> optim<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>lr<span class=\"token operator\">=</span>lr<span class=\"token punctuation\">)</span>\ncriteon <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> open<span class=\"token punctuation\">(</span><span class=\"token string\">\"train.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    train_lines <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nepoch_size <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>train_lines<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span>batch_size\n\n<span class=\"token comment\" spellcheck=\"true\"># 开始训练</span>\n<span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>epochs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> tqdm<span class=\"token punctuation\">(</span>total <span class=\"token operator\">=</span> epoch_size<span class=\"token punctuation\">,</span> desc <span class=\"token operator\">=</span> f<span class=\"token string\">'Epoch {epoch + 1}/{epochs}'</span><span class=\"token punctuation\">,</span>mininterval<span class=\"token operator\">=</span><span class=\"token number\">0.3</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> pbar<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> step<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> step<span class=\"token operator\">></span>epoch_size<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n            x<span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\n            optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            logits <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n            loss <span class=\"token operator\">=</span> criteon<span class=\"token punctuation\">(</span>logits<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span>\n\n            loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            pbar<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        val_acc <span class=\"token operator\">=</span> evaluate<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span>val_loader<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> val_acc<span class=\"token operator\">></span>best_acc<span class=\"token punctuation\">:</span>\n            best_acc <span class=\"token operator\">=</span> val_acc\n            torch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'best_model.h5'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"best_acc:\"</span><span class=\"token punctuation\">,</span>best_acc<span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">'best_model.h5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load the model'</span><span class=\"token punctuation\">)</span>\ntest_acc <span class=\"token operator\">=</span> evaluate<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span>test_loader<span class=\"token punctuation\">)</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"基于Pytorch深度学习完整训练过程展示\"><a href=\"#基于Pytorch深度学习完整训练过程展示\" class=\"headerlink\" title=\"基于Pytorch深度学习完整训练过程展示\"></a>基于Pytorch深度学习完整训练过程展示</h2><p>过去文章只涉及相关的主干特征提取网络的介绍以及一些经典算法的关键代码复现，并没有涉及到整个训练过程的代码展示，而本文就之前给出的特征提取网络，选取其中一种特征提取网络进行经典的网络分类。</p>\n<h3 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h3><p>首先定义我们的数据类<code>MydataLoader</code>,注意这个类必须要继承<code>torch.utils.data.Dataset</code>类，然后必须要实现三个方法：<code>__init__(self)</code>、<code>__len__(self)</code>、<code>__getitem__(self,idx)</code>：</p>\n<ul>\n<li>第一个方式用于类的初始化，数据加载和处理过程都在这个方法中实现</li>\n<li>第二个方法用于获取数据的数量</li>\n<li>第三个方法用于根据索引获取数据</li>\n</ul>\n<p>由于做深度学习时候的数据量通常很大，我们不能一次性加载到内存中，所以我们需要数据的时候就获取数据的路径和类别，然后在第三个方法中实现根据路径和类别来读取图片并进行一系列的操作，通过这样实现数据的输入。</p>\n<p>本文的数据放在<code>UECFOOD256</code>文件夹下，里面包含256类的数据，每一类数据在一个文件夹下，每个文件夹的名称就是数据的类别。按照这个标准准备好数据，之后再初始化方法中对根目录的文件夹中内容进行读取，获取所有文件夹下的图片路径和类别（就是文件夹的名称），写入txt文件中。这样所有的数据相关的路径和类别就存入了txt文件中，当我们需要读取数据时，就读入txt文件中的内容，每一行就是一个图片路径，通过索引将数据输入到网络中。</p>\n<pre><code class=\"python\">class MydataLoader(Dataset):\n    # resize用于将数据统一到相同的尺寸大小，mode用于区别数据是用于训练or验证or测试，root用于表示根目录\n    def __init__(self, root=&#39;UECFOOD256\\\\&#39;, resize=(224,224), mode=&quot;train&quot;):\n        super(MydataLoader,self).__init__()\n        self.root = root\n        self.resize = resize\n        self.name2label = &#123;&#125;\n        for name in sorted(os.listdir(os.path.join(root))):\n            if not os.path.isdir(os.path.join(root,name)):\n                continue\n            self.name2label[name] = len(self.name2label.keys())\n        self.images,self.labels = self.loadCSV()\n        print(len(self.images))\n        if mode == &#39;Training&#39;:\n            self.images = self.images[:int(0.6*len(self.images))]\n            self.labels = self.labels[:int(0.6*len(self.labels))]\n        if mode == &#39;val&#39;:\n            self.images = self.images[int(0.6*len(self.images)):int(0.8*len(self.images))]\n            self.labels = self.labels[int(0.6*len(self.labels)):int(0.8*len(self.labels))]\n        if mode == &#39;test&#39;:\n            self.images = self.images[int(0.8*len(self.images)):]\n            self.labels = self.labels[int(0.8*len(self.labels)):]\n    #第一次训练时会将数据保存到txt，如果txt存在则世界读取数据\n    def loadtxt(self):\n        if not os.path.exists(&#39;train.txt&#39;):\n            img = []\n            for name in self.name2label.keys():\n                img += glob.glob(os.path.join(self.root, name, &quot;*.jpg&quot; ))\n            random.shuffle(img)\n            with open(&#39;train.txt&#39;,&#39;a&#39;) as f:\n                for i in img:\n                    name = i.split(os.sep)[-2]\n                    label = self.name2label[name]\n                    f.write(i+&quot;,&quot;+str(label)+&#39;\\n&#39;)\n                print(&#39;save the data into train.txt&#39;)\n            images ,labels= [],[]\n            with open(&#39;train.txt&#39;,&#39;r&#39;) as f:\n                while True:\n                    data = f.readline()\n                    if data==&#39;&#39;:\n                        break\n                    [img,label] = data.split(&#39;,&#39;)\n                    images.append(img)\n                    labels.append(int(label))\n        images ,labels= [],[]\n        with open(&#39;train.txt&#39;,&#39;r&#39;) as f:\n            while True:\n                data = f.readline()\n                if data==&#39;&#39;:\n                    break\n                img,label = data.split(&#39;,&#39;)\n                images.append(img)\n                labels.append(int(label))\n        return images,labels\n    def __len__(self):\n        return len(self.images)\n    # 根据素银获取图片的路径，并对图片进行才做包括调整尺寸，旋转，中心剪切，归一化等等\n    def __getitem__(self,idx):\n        img ,label = self.images[idx],self.labels[idx]\n        tf = transforms.Compose([\n            lambda x: Image.open(img),\n            transforms.Resize((int(self.resize[0]*1.25),int(self.resize[1]*1.25))),\n            transforms.RandomRotation(15),\n            transforms.CenterCrop(self.resize[0]),\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.485,0.456,0.406],std=[0.229,0.224,0.225])\n        ])\n        img = tf(img)\n        label = torch.tensor(label)\n        return img,label\n</code></pre>\n<h3 id=\"模型训练\"><a href=\"#模型训练\" class=\"headerlink\" title=\"模型训练\"></a>模型训练</h3><p>模型训练的过程通常按照固有的流程，首先我们要设置一些参数：batch_size（每批次训练数据大小，根据GPU的等级设计），学习率lr（这个是深度学习的概念，通常设置为1e-3），迭代次数epochs等等。</p>\n<p>然后就是固有的流程：初始化模型、优化器选择、loss函数设计、开始训练。在训练的过程中，我们通过引入<code>tqdm</code>库来实时跟踪模型的训练进度。关于这个方式的使用请读者自行百度。其中每一个迭代我们都进行计算一下精度，评估验证集的数据准确性，评估的过程我们不需要计算梯度。</p>\n<pre><code class=\"python\">def evaluate(model,db):\n    correct = 0\n    total = len(db.dataset)\n    for x,y in db:\n        x,y = x.to(device),y.to(device)\n        with torch.no_grad():\n            logits = model(x)\n            pred = logits.argmax(dim=1)\n        correct += torch.eq(pred,y).sum().float().item()\n    return correct/total\n\n# 设置训练的相关参数\nbatch_size = 1\nlr = 1e-3\nepochs = 100\ndevice = torch.device(&#39;cuda&#39;)\n\n# 加载三种数据\ntrain_db = MydataLoader()\nval_db = MydataLoader(mode = &#39;val&#39;)\ntest_db = MydataLoader(mode = &#39;test&#39;)\ntrain_loader = DataLoader(train_db,batch_size = batch_size,shuffle = True)\nval_loader = DataLoader(val_db,batch_size = batch_size,shuffle = True)\ntest_loader = DataLoader(test_db,batch_size = batch_size,shuffle = True)\n\n# 模型初始化以及设置训练的次数和相关参数\nbest_acc = 0\nmodel = ResNet101(256).to(device)\noptimizer = optim.Adam(model.parameters(),lr=lr)\ncriteon = nn.CrossEntropyLoss()\nwith open(&quot;train.txt&quot;,&quot;r&quot;) as f:\n    train_lines = f.readlines()\nepoch_size = len(train_lines)//batch_size\n\n# 开始训练\nfor epoch in range(epochs):\n    with tqdm(total = epoch_size, desc = f&#39;Epoch &#123;epoch + 1&#125;/&#123;epochs&#125;&#39;,mininterval=0.3 ) as pbar:\n        for step,(x,y) in enumerate(train_loader):\n            if step&gt;epoch_size:\n                break\n            x,y = x.to(device),y.to(device)\n            optimizer.zero_grad()\n            logits = model(x)\n            loss = criteon(logits,y)\n\n            loss.backward()\n            optimizer.step()\n            pbar.update(1)\n        val_acc = evaluate(model,val_loader)\n        if val_acc&gt;best_acc:\n            best_acc = val_acc\n            torch.save(model.state_dict(),&#39;best_model.h5&#39;)\n\nprint(&quot;best_acc:&quot;,best_acc)\nmodel.load_state_dict(torch.load(&#39;best_model.h5&#39;))\nprint(&#39;load the model&#39;)\ntest_acc = evaluate(model,test_loader)</code></pre>\n"},{"title":"DeepLabV3+","date":"2021-05-18T01:38:23.000Z","top":true,"cover":true,"author":"Fanrencli","_content":"\n## 深度学习之语义分割DeepLabV3+(2018)\n\n\n### DeepLabV3+网络简介\n\n在传统领域的语义分割中，从`FCN`开始提出的全卷积网络，到`DeepLabv3+`网络的提出，基本上语义分割领域中大部分的问题都可以得到解决。在此之后的语义分割领域中出现的文章大部分都是结合了注意力机制提出来的，本文针对传统语义分割的发展过程的新高峰——`DeepLabV3+`进行介绍，针对其本身的优点进行说明。\n\n首先我们来看一下`DeepLabv3+`所作出的优化：\n- `DeepLabv3+`是在`DeepLabv3`的编码与解码的基础上，应用了`DeepLabv3`的编码结构，在解码部分进行了改进\n- `DeepLabv3+`使用了空洞卷积进行特征提取，能够随意控制特征的提取的分辨率\n- `DeepLabv3+`使用了`Xception`作为主干特征提取网络，采用深度可分离卷积和ASPP模块\n\n通过`DeepLabv3+`论文中的阐述，我们可以大致了解整个`DeepLabv3+`的网络结构，如下图：\n\n![DeepLabv3+网络结构](http://39.106.34.39:4567/_20210523162658.png)\n\n### Xception网络优化\n\n`DeepLabv3+`采用了`Xception`作为主干特征提取的网络，并对其进行了优化改进，改进主要包括两个方面：\n- `DeepLabv3+`在`Xception`中引入了空洞卷积\n- `DeepLabv3+`对`Xception`的基础块进行了增加，中间块从原来的8次重复加深变成16次重复加深\n\n具体改进后的网络如下图所示：\n\n![DeepLabv3+网络结构](http://39.106.34.39:4567/_20210523175240.png)\n\n代码展示如下：\n```python\nclass DepthwiseSeparabel(nn.Module):\n    def __init__(self,input_channel,output,stride=1, dilation = 1,kernel_size = 1, padding = 0, activate_first = False):\n        super(DepthwiseSeparabel,self).__init__()\n        self.relu0 = nn.ReLU(inplace=True)\n        self.depth_wise = nn.Conv2d(input_channel,input_channel,kernel_size=kernel_size, stride = stride, padding =padding,dilation =dilation, groups = input_channel,bias =False)\n        self.batch1 = nn.BatchNorm2d(input_channel)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.separable = nn.Conv2d(input_channel,output,kernel_size=1,stride = 1,bias =False)\n        self.batch2 = nn.BatchNorm2d(output)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.activate_first = activate_first\n    def forward(self,x):\n        if self.activate_first:\n            x = self.relu0(x)\n        x = self.depth_wise(x)\n        x = self.batch1(x)\n        if not self.activate_first:\n            x = self.relu1(x)\n        x = self.separable(x)\n        x = self.batch2(x)\n        if not self.activate_first:\n            x = self.relu2(x)\n        return x\n\n```\n```python\nclass Xception_Entry_flow(nn.Module):\n    def __init__(self,input_channel,output_channel,stride=1):\n        super(Xception_Entry_flow,self).__init__()\n        self.shortcut = nn.Conv2d(input_channel,output_channel,1,stride=stride, bias=False)\n        self.shortcutbn = nn.BatchNorm2d(output_channel)\n        self.hook_layer = None\n        self.sepconv1 = DepthwiseSeparabel(input_channel,output_channel,kernel_size = 3,stride=1,padding=1,dilation=1,activate_first=True)\n        self.sepconv2 = DepthwiseSeparabel(output_channel,output_channel,kernel_size = 3,stride=1,padding=1,dilation=1,activate_first=True)\n        self.sepconv3 = DepthwiseSeparabel(output_channel,output_channel,kernel_size = 3,stride=stride,padding=1,dilation=1,activate_first=True)\n    def forward(self,x):\n        shortcut = self.shortcut(x)\n        shortcut = self.shortcutbn(shortcut)\n        x = self.sepconv1(x)\n        x = self.sepconv2(x)\n        self.hook_layer = x\n        x = self.sepconv3(x)\n        x+=shortcut\n        return x\n```\n```python\nclass Xception_Middle_flow(nn.Module):\n    def __init__(self,input_channel,atrous):\n        super(Xception_Middle_flow,self).__init__()\n        self.sepconv1 = DepthwiseSeparabel(input_channel,input_channel,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n        self.sepconv2 = DepthwiseSeparabel(input_channel,input_channel,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n        self.sepconv3 = DepthwiseSeparabel(input_channel,input_channel,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n    def forward(self,x):\n        skip = x\n        x = self.sepconv1(x)\n        x = self.sepconv2(x)\n        x = self.sepconv3(x)\n        x+=skip\n        return x\n```\n```python\nclass Xception_Exit_flow(nn.Module):\n    def __init__(self,in_filters,out_filters,strides=1,atrous=1):\n        super(Xception_Exit_flow,self).__init__()\n        self.shortcut = nn.Conv2d(in_filters,out_filters,1,stride=strides, bias=False)\n        self.shortcutbn = nn.BatchNorm2d(out_filters)\n        self.hook_layer = None\n        self.sepconv1 = DepthwiseSeparabel(in_filters,in_filters,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n        self.sepconv2 = DepthwiseSeparabel(in_filters,out_filters,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n        self.sepconv3 = DepthwiseSeparabel(out_filters,out_filters,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n\n    def forward(self,x):\n        shortcut = self.shortcut(x)\n        shortcut = self.shortcutbn(shortcut)\n\n        x = self.sepconv1(x)\n        x = self.sepconv2(x)\n        self.hook_layer = x\n        x = self.sepconv3(x)\n\n        x+=shortcut\n        return x\n```\n```python\nclass Xception(nn.Module):\n    def __init__(self,os):\n        super(Xception,self).__init__()\n        if os == 8:\n            stride_list = [2,1,1]\n        elif os == 16:\n            stride_list = [2,2,1]\n        # input shape  = 512,512,3\n        self.first_block = nn.Sequential(\n            nn.Conv2d(3,32,kernel_size=3,stride=2, padding = 1, bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(32,64,kernel_size=3,stride=1,padding=1,bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True)\n        )\n        self.Entry_flow0 = Xception_Entry_flow(64,128,2)\n        self.Entry_flow1 = Xception_Entry_flow(128,256,stride_list[0])\n        self.Entry_flow2 = Xception_Entry_flow(256,728,stride_list[1])\n        rate = 16//os\n        self.Middle_flow = nn.Sequential(\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate)\n        )\n        self.Exit_flow = Xception_Exit_flow(728,1024,stride_list[2],atrous=rate)\n\n        self.conv0 = DepthwiseSeparabel(1024,1536,kernel_size = 3,stride = 1,padding = rate,dilation=rate,activate_first=False)\n        self.batch0 = nn.BatchNorm2d(1536)\n        self.relu0 = nn.ReLU(inplace=True)\n        self.conv1 = DepthwiseSeparabel(1536,1536,kernel_size = 3,stride = 1,padding = rate,dilation=rate,activate_first=False)\n        self.batch1 = nn.BatchNorm2d(1536)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.conv2 = DepthwiseSeparabel(1536,2048,kernel_size = 3,stride = 1,padding = rate,dilation=rate,activate_first=False)\n        self.batch2 = nn.BatchNorm2d(2048)\n        self.relu2 = nn.ReLU(inplace=True)\n    def forward(self,x):\n        x = self.first_block(x)\n        x = self.Entry_flow0(x)\n        x = self.Entry_flow1(x)\n        x = self.Entry_flow2(x)\n        skip = self.Entry_flow1.hook_layer\n        x = self.Middle_flow(x)\n        x = self.Exit_flow(x)\n\n        x = self.conv0(x)\n        x = self.batch0(x)\n        x = self.relu0(x)\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        return x,skip\n```\n\n以上就是`DeepLabv3+`针对`Xception`作出的所有改进，主干网络输出为一个4倍下采样的特征和最后的特征层，接着后面就是`DeepLabv3+`的解码部分\n### DeepLabV3解码部分\n\n`DeepLabv3+`的解码部分主要就是将主干网络输出的两个特征层进行处理，对4倍下采样的特征进行通道调整，最后的特征层进行ASPP模块处理以及上采样，然后将两个特征层进行融合后再进行上采样，具体代码如下：\n\n```python\nclass ASPP(nn.Module):\n    def __init__(self,input_channel,output_channel,atrous_rate):\n        super(ASPP,self).__init__()\n        self.avg = nn.AdaptiveAvgPool2d(1)\n        self.conv0 = nn.Conv2d(input_channel,output_channel,kernel_size=1,stride=1,bias=False)\n        self.batch0 = nn.BatchNorm2d(output_channel)\n        self.relu0 = nn.ReLU(inplace=True)\n        # resize the globalFeature\n        self.branch1 = nn.Sequential(\n            nn.Conv2d(input_channel,output_channel,kernel_size=1,stride=1,bias =False),\n            nn.BatchNorm2d(output_channel),\n            nn.ReLU(inplace=True)\n        )\n        self.branch2 = nn.Sequential(\n            nn.Conv2d(input_channel, output_channel,kernel_size = 3, stride=1, padding=atrous_rate[0], dilation=atrous_rate[0],bias=False),\n            nn.BatchNorm2d(output_channel),\n            nn.ReLU(inplace=True),\t\n        )\n        self.branch3 = nn.Sequential(\n            nn.Conv2d(input_channel, output_channel,kernel_size = 3, stride=1, padding=atrous_rate[1], dilation=atrous_rate[1],bias=False),\n            nn.BatchNorm2d(output_channel),\n            nn.ReLU(inplace=True),\t\n        )\n        self.branch4 = nn.Sequential(\n            nn.Conv2d(input_channel, output_channel,kernel_size = 3, stride=1, padding=atrous_rate[2], dilation=atrous_rate[2],bias=False),\n            nn.BatchNorm2d(output_channel),\n            nn.ReLU(inplace=True),\t\n        )\n        self.conv1 = nn.Conv2d(output_channel*5, output_channel,kernel_size=1,stride=1)\n        self.batch1 = nn.BatchNorm2d(output_channel)\n        self.relu1 = nn.ReLU(inplace=True)\n    def forward(self,x):\n        [b,c,h,w] = x.size()\n        global_features = self.avg(x)\n        global_features = self.conv0(global_features)\n        global_features = self.batch0(global_features)\n        global_features = self.relu0(global_features)\n        global_features = F.interpolate(global_features,(h,w),None,'bilinear',True)\n\n        p1 = self.branch1(x)\n        p2 = self.branch2(x)\n        p3 = self.branch3(x)\n        p4 = self.branch4(x)\n        x = torch.cat([global_features,p1,p2,p3,p4],dim=1)\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        return x\n```\n\n```python\nclass Deeplabv3plus(nn.Module):\n    def __init__(self,os,num_classes):\n        super(Deeplabv3plus,self).__init__()\n        if os == 16:\n            atrous_rate = [6,12,18]\n        else:\n            atrous_rate = [12,24,36]\n        self.Xception = Xception(os)\n        self.aspp = ASPP(2048,256,atrous_rate)\n        self.dropout0 = nn.Dropout(0.5)\n        self.upsample0 = nn.UpsamplingBilinear2d(scale_factor=4)\n\n        self.conv0 = nn.Conv2d(256,48,kernel_size=1,stride=1,padding = 0,bias=False)\n        self.batch0 = nn.BatchNorm2d(48)\n        self.relu0 = nn.ReLU(inplace=True)\n\n        self.conv1 = nn.Conv2d(256+48,256,kernel_size=3,stride=1,padding=1,bias=False)\n        self.batch1 = nn.BatchNorm2d(256)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.dropout1 = nn.Dropout(0.5)\n        self.conv2 = nn.Conv2d(256,256,kernel_size=3,stride=1,padding=1,bias=False)\n        self.batch2 = nn.BatchNorm2d(256)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.dropout2 = nn.Dropout(0.1)\n\n        self.last_conv = nn.Conv2d(256,num_classes,kernel_size=1,stride=1,padding=0,bias=False)\n        self.upsample1 = nn.UpsamplingBilinear2d(scale_factor=4)\n    def forward(self,x):\n        x,skip  = self.Xception(x)\n        x = self.aspp(x)\n        x = self.dropout0(x)\n        x = self.upsample0(x)\n        # 处理skip\n        skip = self.conv0(skip)\n        skip = self.batch0(skip)\n        skip = self.relu0(skip)\n\n        x = torch.cat([x,skip],dim=1)\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.dropout1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        x = self.dropout2(x)\n        x = self.last_conv(x)\n        x = self.upsample1(x)\n        return x\n\n```\n至此关于`DeepLabv3+`的主要代码全部给出，至于其他的学习的超参数需要读者自行调整。","source":"_posts/semantic_segmentation/DeepLabV3.md","raw":"---\ntitle: DeepLabV3+\ndate: 2021-05-18 09:38:23\ntop: true\ncover: true\ncategories:\n- Deep Learning\ntags:\n- semantic segmentation\n- DeepLabv3+\nauthor: Fanrencli\n---\n\n## 深度学习之语义分割DeepLabV3+(2018)\n\n\n### DeepLabV3+网络简介\n\n在传统领域的语义分割中，从`FCN`开始提出的全卷积网络，到`DeepLabv3+`网络的提出，基本上语义分割领域中大部分的问题都可以得到解决。在此之后的语义分割领域中出现的文章大部分都是结合了注意力机制提出来的，本文针对传统语义分割的发展过程的新高峰——`DeepLabV3+`进行介绍，针对其本身的优点进行说明。\n\n首先我们来看一下`DeepLabv3+`所作出的优化：\n- `DeepLabv3+`是在`DeepLabv3`的编码与解码的基础上，应用了`DeepLabv3`的编码结构，在解码部分进行了改进\n- `DeepLabv3+`使用了空洞卷积进行特征提取，能够随意控制特征的提取的分辨率\n- `DeepLabv3+`使用了`Xception`作为主干特征提取网络，采用深度可分离卷积和ASPP模块\n\n通过`DeepLabv3+`论文中的阐述，我们可以大致了解整个`DeepLabv3+`的网络结构，如下图：\n\n![DeepLabv3+网络结构](http://39.106.34.39:4567/_20210523162658.png)\n\n### Xception网络优化\n\n`DeepLabv3+`采用了`Xception`作为主干特征提取的网络，并对其进行了优化改进，改进主要包括两个方面：\n- `DeepLabv3+`在`Xception`中引入了空洞卷积\n- `DeepLabv3+`对`Xception`的基础块进行了增加，中间块从原来的8次重复加深变成16次重复加深\n\n具体改进后的网络如下图所示：\n\n![DeepLabv3+网络结构](http://39.106.34.39:4567/_20210523175240.png)\n\n代码展示如下：\n```python\nclass DepthwiseSeparabel(nn.Module):\n    def __init__(self,input_channel,output,stride=1, dilation = 1,kernel_size = 1, padding = 0, activate_first = False):\n        super(DepthwiseSeparabel,self).__init__()\n        self.relu0 = nn.ReLU(inplace=True)\n        self.depth_wise = nn.Conv2d(input_channel,input_channel,kernel_size=kernel_size, stride = stride, padding =padding,dilation =dilation, groups = input_channel,bias =False)\n        self.batch1 = nn.BatchNorm2d(input_channel)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.separable = nn.Conv2d(input_channel,output,kernel_size=1,stride = 1,bias =False)\n        self.batch2 = nn.BatchNorm2d(output)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.activate_first = activate_first\n    def forward(self,x):\n        if self.activate_first:\n            x = self.relu0(x)\n        x = self.depth_wise(x)\n        x = self.batch1(x)\n        if not self.activate_first:\n            x = self.relu1(x)\n        x = self.separable(x)\n        x = self.batch2(x)\n        if not self.activate_first:\n            x = self.relu2(x)\n        return x\n\n```\n```python\nclass Xception_Entry_flow(nn.Module):\n    def __init__(self,input_channel,output_channel,stride=1):\n        super(Xception_Entry_flow,self).__init__()\n        self.shortcut = nn.Conv2d(input_channel,output_channel,1,stride=stride, bias=False)\n        self.shortcutbn = nn.BatchNorm2d(output_channel)\n        self.hook_layer = None\n        self.sepconv1 = DepthwiseSeparabel(input_channel,output_channel,kernel_size = 3,stride=1,padding=1,dilation=1,activate_first=True)\n        self.sepconv2 = DepthwiseSeparabel(output_channel,output_channel,kernel_size = 3,stride=1,padding=1,dilation=1,activate_first=True)\n        self.sepconv3 = DepthwiseSeparabel(output_channel,output_channel,kernel_size = 3,stride=stride,padding=1,dilation=1,activate_first=True)\n    def forward(self,x):\n        shortcut = self.shortcut(x)\n        shortcut = self.shortcutbn(shortcut)\n        x = self.sepconv1(x)\n        x = self.sepconv2(x)\n        self.hook_layer = x\n        x = self.sepconv3(x)\n        x+=shortcut\n        return x\n```\n```python\nclass Xception_Middle_flow(nn.Module):\n    def __init__(self,input_channel,atrous):\n        super(Xception_Middle_flow,self).__init__()\n        self.sepconv1 = DepthwiseSeparabel(input_channel,input_channel,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n        self.sepconv2 = DepthwiseSeparabel(input_channel,input_channel,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n        self.sepconv3 = DepthwiseSeparabel(input_channel,input_channel,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n    def forward(self,x):\n        skip = x\n        x = self.sepconv1(x)\n        x = self.sepconv2(x)\n        x = self.sepconv3(x)\n        x+=skip\n        return x\n```\n```python\nclass Xception_Exit_flow(nn.Module):\n    def __init__(self,in_filters,out_filters,strides=1,atrous=1):\n        super(Xception_Exit_flow,self).__init__()\n        self.shortcut = nn.Conv2d(in_filters,out_filters,1,stride=strides, bias=False)\n        self.shortcutbn = nn.BatchNorm2d(out_filters)\n        self.hook_layer = None\n        self.sepconv1 = DepthwiseSeparabel(in_filters,in_filters,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n        self.sepconv2 = DepthwiseSeparabel(in_filters,out_filters,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n        self.sepconv3 = DepthwiseSeparabel(out_filters,out_filters,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n\n    def forward(self,x):\n        shortcut = self.shortcut(x)\n        shortcut = self.shortcutbn(shortcut)\n\n        x = self.sepconv1(x)\n        x = self.sepconv2(x)\n        self.hook_layer = x\n        x = self.sepconv3(x)\n\n        x+=shortcut\n        return x\n```\n```python\nclass Xception(nn.Module):\n    def __init__(self,os):\n        super(Xception,self).__init__()\n        if os == 8:\n            stride_list = [2,1,1]\n        elif os == 16:\n            stride_list = [2,2,1]\n        # input shape  = 512,512,3\n        self.first_block = nn.Sequential(\n            nn.Conv2d(3,32,kernel_size=3,stride=2, padding = 1, bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(32,64,kernel_size=3,stride=1,padding=1,bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True)\n        )\n        self.Entry_flow0 = Xception_Entry_flow(64,128,2)\n        self.Entry_flow1 = Xception_Entry_flow(128,256,stride_list[0])\n        self.Entry_flow2 = Xception_Entry_flow(256,728,stride_list[1])\n        rate = 16//os\n        self.Middle_flow = nn.Sequential(\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate)\n        )\n        self.Exit_flow = Xception_Exit_flow(728,1024,stride_list[2],atrous=rate)\n\n        self.conv0 = DepthwiseSeparabel(1024,1536,kernel_size = 3,stride = 1,padding = rate,dilation=rate,activate_first=False)\n        self.batch0 = nn.BatchNorm2d(1536)\n        self.relu0 = nn.ReLU(inplace=True)\n        self.conv1 = DepthwiseSeparabel(1536,1536,kernel_size = 3,stride = 1,padding = rate,dilation=rate,activate_first=False)\n        self.batch1 = nn.BatchNorm2d(1536)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.conv2 = DepthwiseSeparabel(1536,2048,kernel_size = 3,stride = 1,padding = rate,dilation=rate,activate_first=False)\n        self.batch2 = nn.BatchNorm2d(2048)\n        self.relu2 = nn.ReLU(inplace=True)\n    def forward(self,x):\n        x = self.first_block(x)\n        x = self.Entry_flow0(x)\n        x = self.Entry_flow1(x)\n        x = self.Entry_flow2(x)\n        skip = self.Entry_flow1.hook_layer\n        x = self.Middle_flow(x)\n        x = self.Exit_flow(x)\n\n        x = self.conv0(x)\n        x = self.batch0(x)\n        x = self.relu0(x)\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        return x,skip\n```\n\n以上就是`DeepLabv3+`针对`Xception`作出的所有改进，主干网络输出为一个4倍下采样的特征和最后的特征层，接着后面就是`DeepLabv3+`的解码部分\n### DeepLabV3解码部分\n\n`DeepLabv3+`的解码部分主要就是将主干网络输出的两个特征层进行处理，对4倍下采样的特征进行通道调整，最后的特征层进行ASPP模块处理以及上采样，然后将两个特征层进行融合后再进行上采样，具体代码如下：\n\n```python\nclass ASPP(nn.Module):\n    def __init__(self,input_channel,output_channel,atrous_rate):\n        super(ASPP,self).__init__()\n        self.avg = nn.AdaptiveAvgPool2d(1)\n        self.conv0 = nn.Conv2d(input_channel,output_channel,kernel_size=1,stride=1,bias=False)\n        self.batch0 = nn.BatchNorm2d(output_channel)\n        self.relu0 = nn.ReLU(inplace=True)\n        # resize the globalFeature\n        self.branch1 = nn.Sequential(\n            nn.Conv2d(input_channel,output_channel,kernel_size=1,stride=1,bias =False),\n            nn.BatchNorm2d(output_channel),\n            nn.ReLU(inplace=True)\n        )\n        self.branch2 = nn.Sequential(\n            nn.Conv2d(input_channel, output_channel,kernel_size = 3, stride=1, padding=atrous_rate[0], dilation=atrous_rate[0],bias=False),\n            nn.BatchNorm2d(output_channel),\n            nn.ReLU(inplace=True),\t\n        )\n        self.branch3 = nn.Sequential(\n            nn.Conv2d(input_channel, output_channel,kernel_size = 3, stride=1, padding=atrous_rate[1], dilation=atrous_rate[1],bias=False),\n            nn.BatchNorm2d(output_channel),\n            nn.ReLU(inplace=True),\t\n        )\n        self.branch4 = nn.Sequential(\n            nn.Conv2d(input_channel, output_channel,kernel_size = 3, stride=1, padding=atrous_rate[2], dilation=atrous_rate[2],bias=False),\n            nn.BatchNorm2d(output_channel),\n            nn.ReLU(inplace=True),\t\n        )\n        self.conv1 = nn.Conv2d(output_channel*5, output_channel,kernel_size=1,stride=1)\n        self.batch1 = nn.BatchNorm2d(output_channel)\n        self.relu1 = nn.ReLU(inplace=True)\n    def forward(self,x):\n        [b,c,h,w] = x.size()\n        global_features = self.avg(x)\n        global_features = self.conv0(global_features)\n        global_features = self.batch0(global_features)\n        global_features = self.relu0(global_features)\n        global_features = F.interpolate(global_features,(h,w),None,'bilinear',True)\n\n        p1 = self.branch1(x)\n        p2 = self.branch2(x)\n        p3 = self.branch3(x)\n        p4 = self.branch4(x)\n        x = torch.cat([global_features,p1,p2,p3,p4],dim=1)\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        return x\n```\n\n```python\nclass Deeplabv3plus(nn.Module):\n    def __init__(self,os,num_classes):\n        super(Deeplabv3plus,self).__init__()\n        if os == 16:\n            atrous_rate = [6,12,18]\n        else:\n            atrous_rate = [12,24,36]\n        self.Xception = Xception(os)\n        self.aspp = ASPP(2048,256,atrous_rate)\n        self.dropout0 = nn.Dropout(0.5)\n        self.upsample0 = nn.UpsamplingBilinear2d(scale_factor=4)\n\n        self.conv0 = nn.Conv2d(256,48,kernel_size=1,stride=1,padding = 0,bias=False)\n        self.batch0 = nn.BatchNorm2d(48)\n        self.relu0 = nn.ReLU(inplace=True)\n\n        self.conv1 = nn.Conv2d(256+48,256,kernel_size=3,stride=1,padding=1,bias=False)\n        self.batch1 = nn.BatchNorm2d(256)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.dropout1 = nn.Dropout(0.5)\n        self.conv2 = nn.Conv2d(256,256,kernel_size=3,stride=1,padding=1,bias=False)\n        self.batch2 = nn.BatchNorm2d(256)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.dropout2 = nn.Dropout(0.1)\n\n        self.last_conv = nn.Conv2d(256,num_classes,kernel_size=1,stride=1,padding=0,bias=False)\n        self.upsample1 = nn.UpsamplingBilinear2d(scale_factor=4)\n    def forward(self,x):\n        x,skip  = self.Xception(x)\n        x = self.aspp(x)\n        x = self.dropout0(x)\n        x = self.upsample0(x)\n        # 处理skip\n        skip = self.conv0(skip)\n        skip = self.batch0(skip)\n        skip = self.relu0(skip)\n\n        x = torch.cat([x,skip],dim=1)\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.dropout1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        x = self.dropout2(x)\n        x = self.last_conv(x)\n        x = self.upsample1(x)\n        return x\n\n```\n至此关于`DeepLabv3+`的主要代码全部给出，至于其他的学习的超参数需要读者自行调整。","slug":"semantic_segmentation/DeepLabV3","published":1,"updated":"2021-07-13T08:16:14.348Z","_id":"ckoy06sq70005hguo3lxp3k5l","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"深度学习之语义分割DeepLabV3-2018\"><a href=\"#深度学习之语义分割DeepLabV3-2018\" class=\"headerlink\" title=\"深度学习之语义分割DeepLabV3+(2018)\"></a>深度学习之语义分割DeepLabV3+(2018)</h2><h3 id=\"DeepLabV3-网络简介\"><a href=\"#DeepLabV3-网络简介\" class=\"headerlink\" title=\"DeepLabV3+网络简介\"></a>DeepLabV3+网络简介</h3><p>在传统领域的语义分割中，从<code>FCN</code>开始提出的全卷积网络，到<code>DeepLabv3+</code>网络的提出，基本上语义分割领域中大部分的问题都可以得到解决。在此之后的语义分割领域中出现的文章大部分都是结合了注意力机制提出来的，本文针对传统语义分割的发展过程的新高峰——<code>DeepLabV3+</code>进行介绍，针对其本身的优点进行说明。</p>\n<p>首先我们来看一下<code>DeepLabv3+</code>所作出的优化：</p>\n<ul>\n<li><code>DeepLabv3+</code>是在<code>DeepLabv3</code>的编码与解码的基础上，应用了<code>DeepLabv3</code>的编码结构，在解码部分进行了改进</li>\n<li><code>DeepLabv3+</code>使用了空洞卷积进行特征提取，能够随意控制特征的提取的分辨率</li>\n<li><code>DeepLabv3+</code>使用了<code>Xception</code>作为主干特征提取网络，采用深度可分离卷积和ASPP模块</li>\n</ul>\n<p>通过<code>DeepLabv3+</code>论文中的阐述，我们可以大致了解整个<code>DeepLabv3+</code>的网络结构，如下图：</p>\n<p><img src=\"http://39.106.34.39:4567/_20210523162658.png\" alt=\"DeepLabv3+网络结构\"></p>\n<h3 id=\"Xception网络优化\"><a href=\"#Xception网络优化\" class=\"headerlink\" title=\"Xception网络优化\"></a>Xception网络优化</h3><p><code>DeepLabv3+</code>采用了<code>Xception</code>作为主干特征提取的网络，并对其进行了优化改进，改进主要包括两个方面：</p>\n<ul>\n<li><code>DeepLabv3+</code>在<code>Xception</code>中引入了空洞卷积</li>\n<li><code>DeepLabv3+</code>对<code>Xception</code>的基础块进行了增加，中间块从原来的8次重复加深变成16次重复加深</li>\n</ul>\n<p>具体改进后的网络如下图所示：</p>\n<p><img src=\"http://39.106.34.39:4567/_20210523175240.png\" alt=\"DeepLabv3+网络结构\"></p>\n<p>代码展示如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DepthwiseSeparabel</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> dilation <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> activate_first <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>DepthwiseSeparabel<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu0 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>depth_wise <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span>kernel_size<span class=\"token punctuation\">,</span> stride <span class=\"token operator\">=</span> stride<span class=\"token punctuation\">,</span> padding <span class=\"token operator\">=</span>padding<span class=\"token punctuation\">,</span>dilation <span class=\"token operator\">=</span>dilation<span class=\"token punctuation\">,</span> groups <span class=\"token operator\">=</span> input_channel<span class=\"token punctuation\">,</span>bias <span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>separable <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>output<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias <span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>activate_first <span class=\"token operator\">=</span> activate_first\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>activate_first<span class=\"token punctuation\">:</span>\n            x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu0<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>depth_wise<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> self<span class=\"token punctuation\">.</span>activate_first<span class=\"token punctuation\">:</span>\n            x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>separable<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> self<span class=\"token punctuation\">.</span>activate_first<span class=\"token punctuation\">:</span>\n            x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x\n</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Xception_Entry_flow</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Xception_Entry_flow<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>shortcut <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span>stride<span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>shortcutbn <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>output_channel<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>hook_layer <span class=\"token operator\">=</span> None\n        self<span class=\"token punctuation\">.</span>sepconv1 <span class=\"token operator\">=</span> DepthwiseSeparabel<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>dilation<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>activate_first<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sepconv2 <span class=\"token operator\">=</span> DepthwiseSeparabel<span class=\"token punctuation\">(</span>output_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>dilation<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>activate_first<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sepconv3 <span class=\"token operator\">=</span> DepthwiseSeparabel<span class=\"token punctuation\">(</span>output_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span>stride<span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>dilation<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>activate_first<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        shortcut <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>shortcut<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        shortcut <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>shortcutbn<span class=\"token punctuation\">(</span>shortcut<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sepconv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sepconv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>hook_layer <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sepconv3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x<span class=\"token operator\">+=</span>shortcut\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Xception_Middle_flow</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>atrous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Xception_Middle_flow<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sepconv1 <span class=\"token operator\">=</span> DepthwiseSeparabel<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span>atrous<span class=\"token punctuation\">,</span>dilation<span class=\"token operator\">=</span>atrous<span class=\"token punctuation\">,</span>activate_first<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sepconv2 <span class=\"token operator\">=</span> DepthwiseSeparabel<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span>atrous<span class=\"token punctuation\">,</span>dilation<span class=\"token operator\">=</span>atrous<span class=\"token punctuation\">,</span>activate_first<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sepconv3 <span class=\"token operator\">=</span> DepthwiseSeparabel<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span>atrous<span class=\"token punctuation\">,</span>dilation<span class=\"token operator\">=</span>atrous<span class=\"token punctuation\">,</span>activate_first<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        skip <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sepconv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sepconv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sepconv3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x<span class=\"token operator\">+=</span>skip\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Xception_Exit_flow</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>in_filters<span class=\"token punctuation\">,</span>out_filters<span class=\"token punctuation\">,</span>strides<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>atrous<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Xception_Exit_flow<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>shortcut <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>in_filters<span class=\"token punctuation\">,</span>out_filters<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span>strides<span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>shortcutbn <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>out_filters<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>hook_layer <span class=\"token operator\">=</span> None\n        self<span class=\"token punctuation\">.</span>sepconv1 <span class=\"token operator\">=</span> DepthwiseSeparabel<span class=\"token punctuation\">(</span>in_filters<span class=\"token punctuation\">,</span>in_filters<span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span>atrous<span class=\"token punctuation\">,</span>dilation<span class=\"token operator\">=</span>atrous<span class=\"token punctuation\">,</span>activate_first<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sepconv2 <span class=\"token operator\">=</span> DepthwiseSeparabel<span class=\"token punctuation\">(</span>in_filters<span class=\"token punctuation\">,</span>out_filters<span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span>atrous<span class=\"token punctuation\">,</span>dilation<span class=\"token operator\">=</span>atrous<span class=\"token punctuation\">,</span>activate_first<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>sepconv3 <span class=\"token operator\">=</span> DepthwiseSeparabel<span class=\"token punctuation\">(</span>out_filters<span class=\"token punctuation\">,</span>out_filters<span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span>atrous<span class=\"token punctuation\">,</span>dilation<span class=\"token operator\">=</span>atrous<span class=\"token punctuation\">,</span>activate_first<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        shortcut <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>shortcut<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        shortcut <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>shortcutbn<span class=\"token punctuation\">(</span>shortcut<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sepconv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sepconv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>hook_layer <span class=\"token operator\">=</span> x\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sepconv3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x<span class=\"token operator\">+=</span>shortcut\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Xception</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>os<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Xception<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> os <span class=\"token operator\">==</span> <span class=\"token number\">8</span><span class=\"token punctuation\">:</span>\n            stride_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">elif</span> os <span class=\"token operator\">==</span> <span class=\"token number\">16</span><span class=\"token punctuation\">:</span>\n            stride_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\" spellcheck=\"true\"># input shape  = 512,512,3</span>\n        self<span class=\"token punctuation\">.</span>first_block <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> padding <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>Entry_flow0 <span class=\"token operator\">=</span> Xception_Entry_flow<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>Entry_flow1 <span class=\"token operator\">=</span> Xception_Entry_flow<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>stride_list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>Entry_flow2 <span class=\"token operator\">=</span> Xception_Entry_flow<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>stride_list<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        rate <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token operator\">//</span>os\n        self<span class=\"token punctuation\">.</span>Middle_flow <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Xception_Middle_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span>atrous <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>Exit_flow <span class=\"token operator\">=</span> Xception_Exit_flow<span class=\"token punctuation\">(</span><span class=\"token number\">728</span><span class=\"token punctuation\">,</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>stride_list<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>atrous<span class=\"token operator\">=</span>rate<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv0 <span class=\"token operator\">=</span> DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span><span class=\"token number\">1536</span><span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">,</span>dilation<span class=\"token operator\">=</span>rate<span class=\"token punctuation\">,</span>activate_first<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch0 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">1536</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu0 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">1536</span><span class=\"token punctuation\">,</span><span class=\"token number\">1536</span><span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">,</span>dilation<span class=\"token operator\">=</span>rate<span class=\"token punctuation\">,</span>activate_first<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">1536</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> DepthwiseSeparabel<span class=\"token punctuation\">(</span><span class=\"token number\">1536</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">,</span>dilation<span class=\"token operator\">=</span>rate<span class=\"token punctuation\">,</span>activate_first<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>first_block<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>Entry_flow0<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>Entry_flow1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>Entry_flow2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        skip <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>Entry_flow1<span class=\"token punctuation\">.</span>hook_layer\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>Middle_flow<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>Exit_flow<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv0<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch0<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu0<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">,</span>skip</code></pre>\n<p>以上就是<code>DeepLabv3+</code>针对<code>Xception</code>作出的所有改进，主干网络输出为一个4倍下采样的特征和最后的特征层，接着后面就是<code>DeepLabv3+</code>的解码部分</p>\n<h3 id=\"DeepLabV3解码部分\"><a href=\"#DeepLabV3解码部分\" class=\"headerlink\" title=\"DeepLabV3解码部分\"></a>DeepLabV3解码部分</h3><p><code>DeepLabv3+</code>的解码部分主要就是将主干网络输出的两个特征层进行处理，对4倍下采样的特征进行通道调整，最后的特征层进行ASPP模块处理以及上采样，然后将两个特征层进行融合后再进行上采样，具体代码如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ASPP</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token punctuation\">,</span>atrous_rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>ASPP<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>avg <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>AdaptiveAvgPool2d<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv0 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch0 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>output_channel<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu0 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># resize the globalFeature</span>\n        self<span class=\"token punctuation\">.</span>branch1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span>output_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias <span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>output_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>branch2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span> output_channel<span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span>atrous_rate<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dilation<span class=\"token operator\">=</span>atrous_rate<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>output_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    \n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>branch3 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span> output_channel<span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span>atrous_rate<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dilation<span class=\"token operator\">=</span>atrous_rate<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>output_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    \n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>branch4 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>input_channel<span class=\"token punctuation\">,</span> output_channel<span class=\"token punctuation\">,</span>kernel_size <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span>atrous_rate<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dilation<span class=\"token operator\">=</span>atrous_rate<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>output_channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    \n        <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span>output_channel<span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> output_channel<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span>output_channel<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        global_features <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>avg<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        global_features <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv0<span class=\"token punctuation\">(</span>global_features<span class=\"token punctuation\">)</span>\n        global_features <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch0<span class=\"token punctuation\">(</span>global_features<span class=\"token punctuation\">)</span>\n        global_features <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu0<span class=\"token punctuation\">(</span>global_features<span class=\"token punctuation\">)</span>\n        global_features <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span>interpolate<span class=\"token punctuation\">(</span>global_features<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>None<span class=\"token punctuation\">,</span><span class=\"token string\">'bilinear'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n        p1 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>branch1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        p2 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>branch2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        p3 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>branch3<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        p4 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>branch4<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>global_features<span class=\"token punctuation\">,</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">,</span>p4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dim<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x</code></pre>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Deeplabv3plus</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>os<span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>Deeplabv3plus<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> os <span class=\"token operator\">==</span> <span class=\"token number\">16</span><span class=\"token punctuation\">:</span>\n            atrous_rate <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            atrous_rate <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">36</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>Xception <span class=\"token operator\">=</span> Xception<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>aspp <span class=\"token operator\">=</span> ASPP<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>atrous_rate<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dropout0 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>upsample0 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>UpsamplingBilinear2d<span class=\"token punctuation\">(</span>scale_factor<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv0 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch0 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu0 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>conv1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token operator\">+</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dropout1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>conv2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batch2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>BatchNorm2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>relu2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span>inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dropout2 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>last_conv <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Conv2d<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>num_classes<span class=\"token punctuation\">,</span>kernel_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>padding<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>bias<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>upsample1 <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>UpsamplingBilinear2d<span class=\"token punctuation\">(</span>scale_factor<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x<span class=\"token punctuation\">,</span>skip  <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>Xception<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>aspp<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dropout0<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>upsample0<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 处理skip</span>\n        skip <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv0<span class=\"token punctuation\">(</span>skip<span class=\"token punctuation\">)</span>\n        skip <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch0<span class=\"token punctuation\">(</span>skip<span class=\"token punctuation\">)</span>\n        skip <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu0<span class=\"token punctuation\">(</span>skip<span class=\"token punctuation\">)</span>\n\n        x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span>skip<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dim<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dropout1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conv2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>batch2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>relu2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dropout2<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>last_conv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>upsample1<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> x\n</code></pre>\n<p>至此关于<code>DeepLabv3+</code>的主要代码全部给出，至于其他的学习的超参数需要读者自行调整。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"深度学习之语义分割DeepLabV3-2018\"><a href=\"#深度学习之语义分割DeepLabV3-2018\" class=\"headerlink\" title=\"深度学习之语义分割DeepLabV3+(2018)\"></a>深度学习之语义分割DeepLabV3+(2018)</h2><h3 id=\"DeepLabV3-网络简介\"><a href=\"#DeepLabV3-网络简介\" class=\"headerlink\" title=\"DeepLabV3+网络简介\"></a>DeepLabV3+网络简介</h3><p>在传统领域的语义分割中，从<code>FCN</code>开始提出的全卷积网络，到<code>DeepLabv3+</code>网络的提出，基本上语义分割领域中大部分的问题都可以得到解决。在此之后的语义分割领域中出现的文章大部分都是结合了注意力机制提出来的，本文针对传统语义分割的发展过程的新高峰——<code>DeepLabV3+</code>进行介绍，针对其本身的优点进行说明。</p>\n<p>首先我们来看一下<code>DeepLabv3+</code>所作出的优化：</p>\n<ul>\n<li><code>DeepLabv3+</code>是在<code>DeepLabv3</code>的编码与解码的基础上，应用了<code>DeepLabv3</code>的编码结构，在解码部分进行了改进</li>\n<li><code>DeepLabv3+</code>使用了空洞卷积进行特征提取，能够随意控制特征的提取的分辨率</li>\n<li><code>DeepLabv3+</code>使用了<code>Xception</code>作为主干特征提取网络，采用深度可分离卷积和ASPP模块</li>\n</ul>\n<p>通过<code>DeepLabv3+</code>论文中的阐述，我们可以大致了解整个<code>DeepLabv3+</code>的网络结构，如下图：</p>\n<p><img src=\"http://39.106.34.39:4567/_20210523162658.png\" alt=\"DeepLabv3+网络结构\"></p>\n<h3 id=\"Xception网络优化\"><a href=\"#Xception网络优化\" class=\"headerlink\" title=\"Xception网络优化\"></a>Xception网络优化</h3><p><code>DeepLabv3+</code>采用了<code>Xception</code>作为主干特征提取的网络，并对其进行了优化改进，改进主要包括两个方面：</p>\n<ul>\n<li><code>DeepLabv3+</code>在<code>Xception</code>中引入了空洞卷积</li>\n<li><code>DeepLabv3+</code>对<code>Xception</code>的基础块进行了增加，中间块从原来的8次重复加深变成16次重复加深</li>\n</ul>\n<p>具体改进后的网络如下图所示：</p>\n<p><img src=\"http://39.106.34.39:4567/_20210523175240.png\" alt=\"DeepLabv3+网络结构\"></p>\n<p>代码展示如下：</p>\n<pre><code class=\"python\">class DepthwiseSeparabel(nn.Module):\n    def __init__(self,input_channel,output,stride=1, dilation = 1,kernel_size = 1, padding = 0, activate_first = False):\n        super(DepthwiseSeparabel,self).__init__()\n        self.relu0 = nn.ReLU(inplace=True)\n        self.depth_wise = nn.Conv2d(input_channel,input_channel,kernel_size=kernel_size, stride = stride, padding =padding,dilation =dilation, groups = input_channel,bias =False)\n        self.batch1 = nn.BatchNorm2d(input_channel)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.separable = nn.Conv2d(input_channel,output,kernel_size=1,stride = 1,bias =False)\n        self.batch2 = nn.BatchNorm2d(output)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.activate_first = activate_first\n    def forward(self,x):\n        if self.activate_first:\n            x = self.relu0(x)\n        x = self.depth_wise(x)\n        x = self.batch1(x)\n        if not self.activate_first:\n            x = self.relu1(x)\n        x = self.separable(x)\n        x = self.batch2(x)\n        if not self.activate_first:\n            x = self.relu2(x)\n        return x\n</code></pre>\n<pre><code class=\"python\">class Xception_Entry_flow(nn.Module):\n    def __init__(self,input_channel,output_channel,stride=1):\n        super(Xception_Entry_flow,self).__init__()\n        self.shortcut = nn.Conv2d(input_channel,output_channel,1,stride=stride, bias=False)\n        self.shortcutbn = nn.BatchNorm2d(output_channel)\n        self.hook_layer = None\n        self.sepconv1 = DepthwiseSeparabel(input_channel,output_channel,kernel_size = 3,stride=1,padding=1,dilation=1,activate_first=True)\n        self.sepconv2 = DepthwiseSeparabel(output_channel,output_channel,kernel_size = 3,stride=1,padding=1,dilation=1,activate_first=True)\n        self.sepconv3 = DepthwiseSeparabel(output_channel,output_channel,kernel_size = 3,stride=stride,padding=1,dilation=1,activate_first=True)\n    def forward(self,x):\n        shortcut = self.shortcut(x)\n        shortcut = self.shortcutbn(shortcut)\n        x = self.sepconv1(x)\n        x = self.sepconv2(x)\n        self.hook_layer = x\n        x = self.sepconv3(x)\n        x+=shortcut\n        return x</code></pre>\n<pre><code class=\"python\">class Xception_Middle_flow(nn.Module):\n    def __init__(self,input_channel,atrous):\n        super(Xception_Middle_flow,self).__init__()\n        self.sepconv1 = DepthwiseSeparabel(input_channel,input_channel,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n        self.sepconv2 = DepthwiseSeparabel(input_channel,input_channel,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n        self.sepconv3 = DepthwiseSeparabel(input_channel,input_channel,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n    def forward(self,x):\n        skip = x\n        x = self.sepconv1(x)\n        x = self.sepconv2(x)\n        x = self.sepconv3(x)\n        x+=skip\n        return x</code></pre>\n<pre><code class=\"python\">class Xception_Exit_flow(nn.Module):\n    def __init__(self,in_filters,out_filters,strides=1,atrous=1):\n        super(Xception_Exit_flow,self).__init__()\n        self.shortcut = nn.Conv2d(in_filters,out_filters,1,stride=strides, bias=False)\n        self.shortcutbn = nn.BatchNorm2d(out_filters)\n        self.hook_layer = None\n        self.sepconv1 = DepthwiseSeparabel(in_filters,in_filters,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n        self.sepconv2 = DepthwiseSeparabel(in_filters,out_filters,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n        self.sepconv3 = DepthwiseSeparabel(out_filters,out_filters,kernel_size =3,stride=1,padding=atrous,dilation=atrous,activate_first=True)\n\n    def forward(self,x):\n        shortcut = self.shortcut(x)\n        shortcut = self.shortcutbn(shortcut)\n\n        x = self.sepconv1(x)\n        x = self.sepconv2(x)\n        self.hook_layer = x\n        x = self.sepconv3(x)\n\n        x+=shortcut\n        return x</code></pre>\n<pre><code class=\"python\">class Xception(nn.Module):\n    def __init__(self,os):\n        super(Xception,self).__init__()\n        if os == 8:\n            stride_list = [2,1,1]\n        elif os == 16:\n            stride_list = [2,2,1]\n        # input shape  = 512,512,3\n        self.first_block = nn.Sequential(\n            nn.Conv2d(3,32,kernel_size=3,stride=2, padding = 1, bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(32,64,kernel_size=3,stride=1,padding=1,bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True)\n        )\n        self.Entry_flow0 = Xception_Entry_flow(64,128,2)\n        self.Entry_flow1 = Xception_Entry_flow(128,256,stride_list[0])\n        self.Entry_flow2 = Xception_Entry_flow(256,728,stride_list[1])\n        rate = 16//os\n        self.Middle_flow = nn.Sequential(\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate),\n            Xception_Middle_flow(728,atrous = rate)\n        )\n        self.Exit_flow = Xception_Exit_flow(728,1024,stride_list[2],atrous=rate)\n\n        self.conv0 = DepthwiseSeparabel(1024,1536,kernel_size = 3,stride = 1,padding = rate,dilation=rate,activate_first=False)\n        self.batch0 = nn.BatchNorm2d(1536)\n        self.relu0 = nn.ReLU(inplace=True)\n        self.conv1 = DepthwiseSeparabel(1536,1536,kernel_size = 3,stride = 1,padding = rate,dilation=rate,activate_first=False)\n        self.batch1 = nn.BatchNorm2d(1536)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.conv2 = DepthwiseSeparabel(1536,2048,kernel_size = 3,stride = 1,padding = rate,dilation=rate,activate_first=False)\n        self.batch2 = nn.BatchNorm2d(2048)\n        self.relu2 = nn.ReLU(inplace=True)\n    def forward(self,x):\n        x = self.first_block(x)\n        x = self.Entry_flow0(x)\n        x = self.Entry_flow1(x)\n        x = self.Entry_flow2(x)\n        skip = self.Entry_flow1.hook_layer\n        x = self.Middle_flow(x)\n        x = self.Exit_flow(x)\n\n        x = self.conv0(x)\n        x = self.batch0(x)\n        x = self.relu0(x)\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        return x,skip</code></pre>\n<p>以上就是<code>DeepLabv3+</code>针对<code>Xception</code>作出的所有改进，主干网络输出为一个4倍下采样的特征和最后的特征层，接着后面就是<code>DeepLabv3+</code>的解码部分</p>\n<h3 id=\"DeepLabV3解码部分\"><a href=\"#DeepLabV3解码部分\" class=\"headerlink\" title=\"DeepLabV3解码部分\"></a>DeepLabV3解码部分</h3><p><code>DeepLabv3+</code>的解码部分主要就是将主干网络输出的两个特征层进行处理，对4倍下采样的特征进行通道调整，最后的特征层进行ASPP模块处理以及上采样，然后将两个特征层进行融合后再进行上采样，具体代码如下：</p>\n<pre><code class=\"python\">class ASPP(nn.Module):\n    def __init__(self,input_channel,output_channel,atrous_rate):\n        super(ASPP,self).__init__()\n        self.avg = nn.AdaptiveAvgPool2d(1)\n        self.conv0 = nn.Conv2d(input_channel,output_channel,kernel_size=1,stride=1,bias=False)\n        self.batch0 = nn.BatchNorm2d(output_channel)\n        self.relu0 = nn.ReLU(inplace=True)\n        # resize the globalFeature\n        self.branch1 = nn.Sequential(\n            nn.Conv2d(input_channel,output_channel,kernel_size=1,stride=1,bias =False),\n            nn.BatchNorm2d(output_channel),\n            nn.ReLU(inplace=True)\n        )\n        self.branch2 = nn.Sequential(\n            nn.Conv2d(input_channel, output_channel,kernel_size = 3, stride=1, padding=atrous_rate[0], dilation=atrous_rate[0],bias=False),\n            nn.BatchNorm2d(output_channel),\n            nn.ReLU(inplace=True),    \n        )\n        self.branch3 = nn.Sequential(\n            nn.Conv2d(input_channel, output_channel,kernel_size = 3, stride=1, padding=atrous_rate[1], dilation=atrous_rate[1],bias=False),\n            nn.BatchNorm2d(output_channel),\n            nn.ReLU(inplace=True),    \n        )\n        self.branch4 = nn.Sequential(\n            nn.Conv2d(input_channel, output_channel,kernel_size = 3, stride=1, padding=atrous_rate[2], dilation=atrous_rate[2],bias=False),\n            nn.BatchNorm2d(output_channel),\n            nn.ReLU(inplace=True),    \n        )\n        self.conv1 = nn.Conv2d(output_channel*5, output_channel,kernel_size=1,stride=1)\n        self.batch1 = nn.BatchNorm2d(output_channel)\n        self.relu1 = nn.ReLU(inplace=True)\n    def forward(self,x):\n        [b,c,h,w] = x.size()\n        global_features = self.avg(x)\n        global_features = self.conv0(global_features)\n        global_features = self.batch0(global_features)\n        global_features = self.relu0(global_features)\n        global_features = F.interpolate(global_features,(h,w),None,&#39;bilinear&#39;,True)\n\n        p1 = self.branch1(x)\n        p2 = self.branch2(x)\n        p3 = self.branch3(x)\n        p4 = self.branch4(x)\n        x = torch.cat([global_features,p1,p2,p3,p4],dim=1)\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        return x</code></pre>\n<pre><code class=\"python\">class Deeplabv3plus(nn.Module):\n    def __init__(self,os,num_classes):\n        super(Deeplabv3plus,self).__init__()\n        if os == 16:\n            atrous_rate = [6,12,18]\n        else:\n            atrous_rate = [12,24,36]\n        self.Xception = Xception(os)\n        self.aspp = ASPP(2048,256,atrous_rate)\n        self.dropout0 = nn.Dropout(0.5)\n        self.upsample0 = nn.UpsamplingBilinear2d(scale_factor=4)\n\n        self.conv0 = nn.Conv2d(256,48,kernel_size=1,stride=1,padding = 0,bias=False)\n        self.batch0 = nn.BatchNorm2d(48)\n        self.relu0 = nn.ReLU(inplace=True)\n\n        self.conv1 = nn.Conv2d(256+48,256,kernel_size=3,stride=1,padding=1,bias=False)\n        self.batch1 = nn.BatchNorm2d(256)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.dropout1 = nn.Dropout(0.5)\n        self.conv2 = nn.Conv2d(256,256,kernel_size=3,stride=1,padding=1,bias=False)\n        self.batch2 = nn.BatchNorm2d(256)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.dropout2 = nn.Dropout(0.1)\n\n        self.last_conv = nn.Conv2d(256,num_classes,kernel_size=1,stride=1,padding=0,bias=False)\n        self.upsample1 = nn.UpsamplingBilinear2d(scale_factor=4)\n    def forward(self,x):\n        x,skip  = self.Xception(x)\n        x = self.aspp(x)\n        x = self.dropout0(x)\n        x = self.upsample0(x)\n        # 处理skip\n        skip = self.conv0(skip)\n        skip = self.batch0(skip)\n        skip = self.relu0(skip)\n\n        x = torch.cat([x,skip],dim=1)\n        x = self.conv1(x)\n        x = self.batch1(x)\n        x = self.relu1(x)\n        x = self.dropout1(x)\n        x = self.conv2(x)\n        x = self.batch2(x)\n        x = self.relu2(x)\n        x = self.dropout2(x)\n        x = self.last_conv(x)\n        x = self.upsample1(x)\n        return x\n</code></pre>\n<p>至此关于<code>DeepLabv3+</code>的主要代码全部给出，至于其他的学习的超参数需要读者自行调整。</p>\n"},{"title":"ClassLoad","date":"2021-12-20T09:19:30.000Z","author":"Fanrencli","_content":"\n## JVM 类加载机制\n\n- 加载：读取class信息并创建对象， 不一定需要class文件，也可以从jar，war和其他动态生成的代码\n- 连接\n    - 验证：确保Class文件的字节流中包含的信息是否符合当前虚拟机的要求\n    - 准备：在方法区中分配这些变量所使用的内存空间，非final类型初始化默认值，final类型直接赋值；\n    - 解析：虚拟机将常量池中的符号引用替换为直接引用的过程\n- 初始化：并不是运行`<init>`方法,而是运行类的静态语句块和赋值动作。\n    - 通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。 \n    - 定义对象数组，不会触发该类的初始化。 \n    - 常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。\n    - 通过类名获取Class对象，不会触发类的初始化。 \n    - 通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。 \n    - 通过ClassLoader默认的loadClass方法，也不会触发初始化动作。\n\n## 类加载器\n\n- 启动类加载器：负责加载 JAVA_HOME\\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类\n- 扩展类加载器：负责加载 JAVA_HOME\\lib\\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。\n- 应用程序加载器：负责加载用户路径（classpath）上的类库。\n- 自定义加载器：用户自定义的加载器\n\n## 双亲委派机制\n<p style=\"text-indent:2em\">\n当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载其中，只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的Class），子类加载器才会尝试自己去加载。\n</p> \n<p style=\"text-indent:2em\">\n采用双亲委派的一个好处是比如加载位于rt.jar包中的类java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object对象。\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/JAVA/ClassLoad.md","raw":"---\ntitle: ClassLoad\ndate: 2021-12-20 17:19:30\ncategories:\n  - JAVA\ntags:\n  - Class loader\nauthor: Fanrencli\n---\n\n## JVM 类加载机制\n\n- 加载：读取class信息并创建对象， 不一定需要class文件，也可以从jar，war和其他动态生成的代码\n- 连接\n    - 验证：确保Class文件的字节流中包含的信息是否符合当前虚拟机的要求\n    - 准备：在方法区中分配这些变量所使用的内存空间，非final类型初始化默认值，final类型直接赋值；\n    - 解析：虚拟机将常量池中的符号引用替换为直接引用的过程\n- 初始化：并不是运行`<init>`方法,而是运行类的静态语句块和赋值动作。\n    - 通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。 \n    - 定义对象数组，不会触发该类的初始化。 \n    - 常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。\n    - 通过类名获取Class对象，不会触发类的初始化。 \n    - 通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。 \n    - 通过ClassLoader默认的loadClass方法，也不会触发初始化动作。\n\n## 类加载器\n\n- 启动类加载器：负责加载 JAVA_HOME\\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类\n- 扩展类加载器：负责加载 JAVA_HOME\\lib\\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。\n- 应用程序加载器：负责加载用户路径（classpath）上的类库。\n- 自定义加载器：用户自定义的加载器\n\n## 双亲委派机制\n<p style=\"text-indent:2em\">\n当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载其中，只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的Class），子类加载器才会尝试自己去加载。\n</p> \n<p style=\"text-indent:2em\">\n采用双亲委派的一个好处是比如加载位于rt.jar包中的类java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object对象。\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"JAVA/ClassLoad","published":1,"updated":"2021-12-22T13:29:56.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuhigaq00008suohyna2vuy","content":"<h2 id=\"JVM-类加载机制\"><a href=\"#JVM-类加载机制\" class=\"headerlink\" title=\"JVM 类加载机制\"></a>JVM 类加载机制</h2><ul>\n<li>加载：读取class信息并创建对象， 不一定需要class文件，也可以从jar，war和其他动态生成的代码</li>\n<li>连接<ul>\n<li>验证：确保Class文件的字节流中包含的信息是否符合当前虚拟机的要求</li>\n<li>准备：在方法区中分配这些变量所使用的内存空间，非final类型初始化默认值，final类型直接赋值；</li>\n<li>解析：虚拟机将常量池中的符号引用替换为直接引用的过程</li>\n</ul>\n</li>\n<li>初始化：并不是运行<code>&lt;init&gt;</code>方法,而是运行类的静态语句块和赋值动作。<ul>\n<li>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。 </li>\n<li>定义对象数组，不会触发该类的初始化。 </li>\n<li>常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。</li>\n<li>通过类名获取Class对象，不会触发类的初始化。 </li>\n<li>通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。 </li>\n<li>通过ClassLoader默认的loadClass方法，也不会触发初始化动作。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><ul>\n<li>启动类加载器：负责加载 JAVA_HOME\\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类</li>\n<li>扩展类加载器：负责加载 JAVA_HOME\\lib\\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。</li>\n<li>应用程序加载器：负责加载用户路径（classpath）上的类库。</li>\n<li>自定义加载器：用户自定义的加载器</li>\n</ul>\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><p style=\"text-indent:2em\">\n当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载其中，只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的Class），子类加载器才会尝试自己去加载。\n</p> \n<p style=\"text-indent:2em\">\n采用双亲委派的一个好处是比如加载位于rt.jar包中的类java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object对象。\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"JVM-类加载机制\"><a href=\"#JVM-类加载机制\" class=\"headerlink\" title=\"JVM 类加载机制\"></a>JVM 类加载机制</h2><ul>\n<li>加载：读取class信息并创建对象， 不一定需要class文件，也可以从jar，war和其他动态生成的代码</li>\n<li>连接<ul>\n<li>验证：确保Class文件的字节流中包含的信息是否符合当前虚拟机的要求</li>\n<li>准备：在方法区中分配这些变量所使用的内存空间，非final类型初始化默认值，final类型直接赋值；</li>\n<li>解析：虚拟机将常量池中的符号引用替换为直接引用的过程</li>\n</ul>\n</li>\n<li>初始化：并不是运行<code>&lt;init&gt;</code>方法,而是运行类的静态语句块和赋值动作。<ul>\n<li>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。 </li>\n<li>定义对象数组，不会触发该类的初始化。 </li>\n<li>常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。</li>\n<li>通过类名获取Class对象，不会触发类的初始化。 </li>\n<li>通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。 </li>\n<li>通过ClassLoader默认的loadClass方法，也不会触发初始化动作。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><ul>\n<li>启动类加载器：负责加载 JAVA_HOME\\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类</li>\n<li>扩展类加载器：负责加载 JAVA_HOME\\lib\\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。</li>\n<li>应用程序加载器：负责加载用户路径（classpath）上的类库。</li>\n<li>自定义加载器：用户自定义的加载器</li>\n</ul>\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><p style=\"text-indent:2em\">\n当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载其中，只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的Class），子类加载器才会尝试自己去加载。\n</p> \n<p style=\"text-indent:2em\">\n采用双亲委派的一个好处是比如加载位于rt.jar包中的类java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object对象。\n</p> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"Collections","date":"2021-12-17T08:37:21.000Z","author":"Fanrencli","_content":"\n## 集合\n\n- 类集就是动态对象数组\n- `Collection`、`List`、`Set`\n- `Map`\n- `Iterator`、`Enumeration`\n\n### Collections\n\n- 集合的最大父接口：`public interface Collection<E> extends Iterator`\n- 集合常用方法：\n    - **添加一个元素：`public boolean add(E value)`;**\n    - 追加一个集合：`public boolean addAll(Collection<? extends E> c)`;\n    - 清空集合：`public void clear()`;\n    - 判断是否包含元素：`public boolean contains(Object o)`;\n    - 判断集合是否为空：`public boolean isEmpty()`;\n    - 删除对象：`public boolean remove(Object o)`;\n    - 取得集合大小：`public int size()`;\n    - 将集合变为数组返回：`public Object[] toArray()`;\n    - **为Iterator实例化：`public Iterator<E> iterator()`;**\n\n### List（元素可以重复）\n\n- `List`是`Collection`的子接口，在原有的基础上添加了许多方法，主要包含以下：\n    - **取得索引对应的内容：`public E get(int index)`;**\n    - 修改制定索引的内容：`public E set(int index, E value)`;\n    - 为ListIterator进行实例化：`public ListIterator<E> listIterator()`;\n- 常用实现子类：**`ArrayList`**,`Vector`\n\n```java\n\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\nclass  Book{\n    private double price;\n    private String title;\n    Book(String title,double price){\n        this.price = price;\n        this.title = title;\n    }\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Book book = (Book) o;\n        return price == book.price &&\n                Objects.equals(title, book.title);\n    }\n\n    @Override\n    public int hashCode() {\n\n        return Objects.hash(price, title);\n    }\n\n    @Override\n    public String toString() {\n        return \"Book{\" +\n                \"price=\" + price +\n                \", title='\" + title + '\\'' +\n                '}';\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(int price) {\n        this.price = price;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n}\npublic class Main {\n    public static void main(String[] args)\n    {\n        List<Book> list = new ArrayList<>();\n        list.add(new Book(\"java\",220.2));\n        list.add(new Book(\"git\",225.231));\n        list.add(new Book(\"SVN\",12.22));\n        list.remove(new Book(\"git\",225.231));\n        System.out.println(list);\n        System.out.println(list.get(1));\n    }\n}\n```\n\n### Set（元素不可以重复）\n\n- 集合判断元素是否重复需要类重写`equals`和`hashcode`方法\n- `Set`接口没有在原有方法的基础上进行大量的扩充方法，只是简单的实现了集合接口\n- 常用子类：`HashSet`(无序)、`TreeSet`（有序）\n- `TreeSet`：进行排序时需要类实现`Comparable`接口，而`TreeSet`判断一个类是否重复就是通过`Comparable`接口的比较方法实现的，此处会出现异常；\n\n### 集合输出方法\n\n- `Iterator`\n- `Enumeration`\n- `ListIterator`\n- `foreach`\n\n```java\npublic class Main {\n    public static void main(String[] args)\n    {\n        Set<String> set = new HashSet<>();\n        set.add(\"HELLO\");\n        set.add(\"WORLD\");\n        set.add(\"HELLO\");\n        Iterator<?> it = set.iterator();\n        while (it.hasNext()){\n            System.out.println(it.next());\n        }\n    }\n}\n```\n\n```java\n\npublic class Main {\n    public static void main(String[] args)\n    {\n        List<String> set = new Vector<>();\n        set.add(\"HELLO\");\n        set.add(\"WORLD\");\n        set.add(\"HELLO\");\n        Enumeration<String> enu = ((Vector<String>) set).elements();\n        while (enu.hasMoreElements()){\n            System.out.println(enu.nextElement());\n        }\n    }\n}\n```\n\n```java\npublic class Main {\n    public static void main(String[] args)\n    {\n        ArrayList<String> set = new ArrayList<>();\n        set.add(\"HELLO\");\n        set.add(\"WORLD\");\n        set.add(\"HELLO\");\n        ListIterator<String> it = set.listIterator();\n        while (it.hasNext()){\n            System.out.println(it.next());\n        }\n        while (it.hasPrevious()){\n            System.out.println(it.previous());\n        }\n    }\n}\n```\n\n```java\npublic class Main {\n    public static void main(String[] args)\n    {\n        ArrayList<String> set = new ArrayList<>();\n        set.add(\"HELLO\");\n        set.add(\"WORLD\");\n        set.add(\"HELLO\");\n        for(String str: set){\n            System.out.println(str);\n        }\n    }\n}\n```\n\n### Map\n\n-  `Map`接口定义了相关的函数方法:\n    - 向集合中保存数据：`public V put(K key, V value)`;\n    - 根据Key查找数据：`public V get(Object key)`;\n    - 将Map集合转化为Set集合：`public Set<Map.Entry<K,V>> entrySet()`\n    - 取出全部的Key：`public Set<K> keySet()`\n- 常用子类：`HashMap`（key或value可以为空，线程不安全）,`HashTable`（key和value不能为空，线程安全）\n- 无序存储，内容覆盖\n- 针对`HashMap`的线程安全问题引出`ConcurrentHashMap`,`ConcurrentHashMap` 是一个 `Segment` 数组，`Segment` 通过继承 `ReentrantLock` 来进行加锁，所以每次需要加锁的操作锁住的是一个`segment`，这样只要保证每个 `Segment` 是线程安全的，也就实现了全局的线程安全。\n\n\n\n```java\npublic class Main {\n    public static void main(String[] args)\n    {\n        Map<String,Integer> map = new HashMap<>();\n        map.put(\"yi\",1);\n        map.put(\"er\",2);\n        map.put(\"san\",3);\n        map.put(\"san\",33);\n        System.out.println(map);\n    }\n}\npublic class Main {\n    public static void main(String[] args)\n    {\n        Map<String,Integer> map = new HashMap<>();\n        map.put(\"yi\",1);\n        map.put(\"er\",2);\n        map.put(\"san\",3);\n        map.put(null,0);\n        System.out.println(map.get(\"yi\"));\n        System.out.println(map.get(null));\n    }\n}\npublic class Main {\n    public static void main(String[] args)\n    {\n        Map<String,Integer> map = new Hashtable<>();\n        map.put(\"yi\",1);\n        map.put(\"er\",2);\n        map.put(\"san\",3);\n        System.out.println(map.get(\"yi\"));\n    }\n}\npublic class Main {\n    public static void main(String[] args)\n    {\n        Map<String,Integer> map = new Hashtable<>();\n        map.put(\"yi\",1);\n        map.put(\"er\",2);\n        map.put(\"san\",3);\n        Set<Map.Entry<String,Integer>> set = map.entrySet();\n        Iterator<Map.Entry<String, Integer>> it = set.iterator();\n        while(it.hasNext()){\n            Map.Entry<String, Integer> me=  it.next();\n            System.out.println(me.getKey()+\"=\"+me.getValue());\n        }\n    }\n} \n```\n\n### Stack\n\n- `Stack`作为`Vector`的子类，只需要记得两个方法：入栈(put)和出栈(pop)\n\n```java\npublic class Main {\n    public static void main(String[] args)\n    {\n        Stack<String> list=  new Stack<>();\n        list.push(\"asd\");\n        list.push(\"sss\");\n        System.out.println(list.pop());\n    }\n}\n```\n\n### Properties\n\n- 设置属性：`public Object setProperty(String key,String Value)`;\n- 取得属性：`public String getProperty(String key)`;\n- 取得属性：`public String getProperty(String key, String defaultValue)`;\n- 保存属性：`public void store(OutputStream out, String comments) `\n- 读取属性：`public synchronized void load(InputStream in) throws IOException`\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Properties pro = new Properties();\n        pro.setProperty(\"a\",\"1\");\n        pro.setProperty(\"b\",\"2\");\n        pro.store(new FileOutputStream(new File(\"test.txt\")),\"this infor\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Properties pro = new Properties();\n        pro.load(new FileInputStream(new File(\"test.txt\")));\n        System.out.println(pro);\n    }\n}\n```\n\n### Collections工具类\n\n- 作为工具类，提供了一系列的集合操作方法\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        List<String> list= new ArrayList<>();\n        Collections.addAll(list,\"a\",\"b\",\"c\");\n        System.out.println(list);\n        Collections.reverse(list);\n        System.out.println(list);\n    }\n}\n```\n\n\n\n\n\n\n","source":"_posts/JAVA/Collections.md","raw":"---\ntitle: Collections\ndate: 2021-12-17 16:37:21\ncategories:\n  - JAVA\ntags:\n  - Collections\nauthor: Fanrencli\n---\n\n## 集合\n\n- 类集就是动态对象数组\n- `Collection`、`List`、`Set`\n- `Map`\n- `Iterator`、`Enumeration`\n\n### Collections\n\n- 集合的最大父接口：`public interface Collection<E> extends Iterator`\n- 集合常用方法：\n    - **添加一个元素：`public boolean add(E value)`;**\n    - 追加一个集合：`public boolean addAll(Collection<? extends E> c)`;\n    - 清空集合：`public void clear()`;\n    - 判断是否包含元素：`public boolean contains(Object o)`;\n    - 判断集合是否为空：`public boolean isEmpty()`;\n    - 删除对象：`public boolean remove(Object o)`;\n    - 取得集合大小：`public int size()`;\n    - 将集合变为数组返回：`public Object[] toArray()`;\n    - **为Iterator实例化：`public Iterator<E> iterator()`;**\n\n### List（元素可以重复）\n\n- `List`是`Collection`的子接口，在原有的基础上添加了许多方法，主要包含以下：\n    - **取得索引对应的内容：`public E get(int index)`;**\n    - 修改制定索引的内容：`public E set(int index, E value)`;\n    - 为ListIterator进行实例化：`public ListIterator<E> listIterator()`;\n- 常用实现子类：**`ArrayList`**,`Vector`\n\n```java\n\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\nclass  Book{\n    private double price;\n    private String title;\n    Book(String title,double price){\n        this.price = price;\n        this.title = title;\n    }\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Book book = (Book) o;\n        return price == book.price &&\n                Objects.equals(title, book.title);\n    }\n\n    @Override\n    public int hashCode() {\n\n        return Objects.hash(price, title);\n    }\n\n    @Override\n    public String toString() {\n        return \"Book{\" +\n                \"price=\" + price +\n                \", title='\" + title + '\\'' +\n                '}';\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(int price) {\n        this.price = price;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n}\npublic class Main {\n    public static void main(String[] args)\n    {\n        List<Book> list = new ArrayList<>();\n        list.add(new Book(\"java\",220.2));\n        list.add(new Book(\"git\",225.231));\n        list.add(new Book(\"SVN\",12.22));\n        list.remove(new Book(\"git\",225.231));\n        System.out.println(list);\n        System.out.println(list.get(1));\n    }\n}\n```\n\n### Set（元素不可以重复）\n\n- 集合判断元素是否重复需要类重写`equals`和`hashcode`方法\n- `Set`接口没有在原有方法的基础上进行大量的扩充方法，只是简单的实现了集合接口\n- 常用子类：`HashSet`(无序)、`TreeSet`（有序）\n- `TreeSet`：进行排序时需要类实现`Comparable`接口，而`TreeSet`判断一个类是否重复就是通过`Comparable`接口的比较方法实现的，此处会出现异常；\n\n### 集合输出方法\n\n- `Iterator`\n- `Enumeration`\n- `ListIterator`\n- `foreach`\n\n```java\npublic class Main {\n    public static void main(String[] args)\n    {\n        Set<String> set = new HashSet<>();\n        set.add(\"HELLO\");\n        set.add(\"WORLD\");\n        set.add(\"HELLO\");\n        Iterator<?> it = set.iterator();\n        while (it.hasNext()){\n            System.out.println(it.next());\n        }\n    }\n}\n```\n\n```java\n\npublic class Main {\n    public static void main(String[] args)\n    {\n        List<String> set = new Vector<>();\n        set.add(\"HELLO\");\n        set.add(\"WORLD\");\n        set.add(\"HELLO\");\n        Enumeration<String> enu = ((Vector<String>) set).elements();\n        while (enu.hasMoreElements()){\n            System.out.println(enu.nextElement());\n        }\n    }\n}\n```\n\n```java\npublic class Main {\n    public static void main(String[] args)\n    {\n        ArrayList<String> set = new ArrayList<>();\n        set.add(\"HELLO\");\n        set.add(\"WORLD\");\n        set.add(\"HELLO\");\n        ListIterator<String> it = set.listIterator();\n        while (it.hasNext()){\n            System.out.println(it.next());\n        }\n        while (it.hasPrevious()){\n            System.out.println(it.previous());\n        }\n    }\n}\n```\n\n```java\npublic class Main {\n    public static void main(String[] args)\n    {\n        ArrayList<String> set = new ArrayList<>();\n        set.add(\"HELLO\");\n        set.add(\"WORLD\");\n        set.add(\"HELLO\");\n        for(String str: set){\n            System.out.println(str);\n        }\n    }\n}\n```\n\n### Map\n\n-  `Map`接口定义了相关的函数方法:\n    - 向集合中保存数据：`public V put(K key, V value)`;\n    - 根据Key查找数据：`public V get(Object key)`;\n    - 将Map集合转化为Set集合：`public Set<Map.Entry<K,V>> entrySet()`\n    - 取出全部的Key：`public Set<K> keySet()`\n- 常用子类：`HashMap`（key或value可以为空，线程不安全）,`HashTable`（key和value不能为空，线程安全）\n- 无序存储，内容覆盖\n- 针对`HashMap`的线程安全问题引出`ConcurrentHashMap`,`ConcurrentHashMap` 是一个 `Segment` 数组，`Segment` 通过继承 `ReentrantLock` 来进行加锁，所以每次需要加锁的操作锁住的是一个`segment`，这样只要保证每个 `Segment` 是线程安全的，也就实现了全局的线程安全。\n\n\n\n```java\npublic class Main {\n    public static void main(String[] args)\n    {\n        Map<String,Integer> map = new HashMap<>();\n        map.put(\"yi\",1);\n        map.put(\"er\",2);\n        map.put(\"san\",3);\n        map.put(\"san\",33);\n        System.out.println(map);\n    }\n}\npublic class Main {\n    public static void main(String[] args)\n    {\n        Map<String,Integer> map = new HashMap<>();\n        map.put(\"yi\",1);\n        map.put(\"er\",2);\n        map.put(\"san\",3);\n        map.put(null,0);\n        System.out.println(map.get(\"yi\"));\n        System.out.println(map.get(null));\n    }\n}\npublic class Main {\n    public static void main(String[] args)\n    {\n        Map<String,Integer> map = new Hashtable<>();\n        map.put(\"yi\",1);\n        map.put(\"er\",2);\n        map.put(\"san\",3);\n        System.out.println(map.get(\"yi\"));\n    }\n}\npublic class Main {\n    public static void main(String[] args)\n    {\n        Map<String,Integer> map = new Hashtable<>();\n        map.put(\"yi\",1);\n        map.put(\"er\",2);\n        map.put(\"san\",3);\n        Set<Map.Entry<String,Integer>> set = map.entrySet();\n        Iterator<Map.Entry<String, Integer>> it = set.iterator();\n        while(it.hasNext()){\n            Map.Entry<String, Integer> me=  it.next();\n            System.out.println(me.getKey()+\"=\"+me.getValue());\n        }\n    }\n} \n```\n\n### Stack\n\n- `Stack`作为`Vector`的子类，只需要记得两个方法：入栈(put)和出栈(pop)\n\n```java\npublic class Main {\n    public static void main(String[] args)\n    {\n        Stack<String> list=  new Stack<>();\n        list.push(\"asd\");\n        list.push(\"sss\");\n        System.out.println(list.pop());\n    }\n}\n```\n\n### Properties\n\n- 设置属性：`public Object setProperty(String key,String Value)`;\n- 取得属性：`public String getProperty(String key)`;\n- 取得属性：`public String getProperty(String key, String defaultValue)`;\n- 保存属性：`public void store(OutputStream out, String comments) `\n- 读取属性：`public synchronized void load(InputStream in) throws IOException`\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Properties pro = new Properties();\n        pro.setProperty(\"a\",\"1\");\n        pro.setProperty(\"b\",\"2\");\n        pro.store(new FileOutputStream(new File(\"test.txt\")),\"this infor\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Properties pro = new Properties();\n        pro.load(new FileInputStream(new File(\"test.txt\")));\n        System.out.println(pro);\n    }\n}\n```\n\n### Collections工具类\n\n- 作为工具类，提供了一系列的集合操作方法\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        List<String> list= new ArrayList<>();\n        Collections.addAll(list,\"a\",\"b\",\"c\");\n        System.out.println(list);\n        Collections.reverse(list);\n        System.out.println(list);\n    }\n}\n```\n\n\n\n\n\n\n","slug":"JAVA/Collections","published":1,"updated":"2021-12-20T09:24:50.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuhigb000018suo79gj7xfa","content":"<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><ul>\n<li>类集就是动态对象数组</li>\n<li><code>Collection</code>、<code>List</code>、<code>Set</code></li>\n<li><code>Map</code></li>\n<li><code>Iterator</code>、<code>Enumeration</code></li>\n</ul>\n<h3 id=\"Collections\"><a href=\"#Collections\" class=\"headerlink\" title=\"Collections\"></a>Collections</h3><ul>\n<li>集合的最大父接口：<code>public interface Collection&lt;E&gt; extends Iterator</code></li>\n<li>集合常用方法：<ul>\n<li><strong>添加一个元素：<code>public boolean add(E value)</code>;</strong></li>\n<li>追加一个集合：<code>public boolean addAll(Collection&lt;? extends E&gt; c)</code>;</li>\n<li>清空集合：<code>public void clear()</code>;</li>\n<li>判断是否包含元素：<code>public boolean contains(Object o)</code>;</li>\n<li>判断集合是否为空：<code>public boolean isEmpty()</code>;</li>\n<li>删除对象：<code>public boolean remove(Object o)</code>;</li>\n<li>取得集合大小：<code>public int size()</code>;</li>\n<li>将集合变为数组返回：<code>public Object[] toArray()</code>;</li>\n<li><strong>为Iterator实例化：<code>public Iterator&lt;E&gt; iterator()</code>;</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"List（元素可以重复）\"><a href=\"#List（元素可以重复）\" class=\"headerlink\" title=\"List（元素可以重复）\"></a>List（元素可以重复）</h3><ul>\n<li><code>List</code>是<code>Collection</code>的子接口，在原有的基础上添加了许多方法，主要包含以下：<ul>\n<li><strong>取得索引对应的内容：<code>public E get(int index)</code>;</strong></li>\n<li>修改制定索引的内容：<code>public E set(int index, E value)</code>;</li>\n<li>为ListIterator进行实例化：<code>public ListIterator&lt;E&gt; listIterator()</code>;</li>\n</ul>\n</li>\n<li>常用实现子类：**<code>ArrayList</code>**,<code>Vector</code></li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>ArrayList<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Objects<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span>  <span class=\"token class-name\">Book</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String title<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>String title<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Object o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        Book book <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> price <span class=\"token operator\">==</span> book<span class=\"token punctuation\">.</span>price <span class=\"token operator\">&amp;&amp;</span>\n                Objects<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Book{\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"price=\"</span> <span class=\"token operator\">+</span> price <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", title='\"</span> <span class=\"token operator\">+</span> title <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">'}'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span>String title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        List<span class=\"token operator\">&lt;</span>Book<span class=\"token operator\">></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">220.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"git\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">225.231</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SVN\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12.22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"git\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">225.231</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"Set（元素不可以重复）\"><a href=\"#Set（元素不可以重复）\" class=\"headerlink\" title=\"Set（元素不可以重复）\"></a>Set（元素不可以重复）</h3><ul>\n<li>集合判断元素是否重复需要类重写<code>equals</code>和<code>hashcode</code>方法</li>\n<li><code>Set</code>接口没有在原有方法的基础上进行大量的扩充方法，只是简单的实现了集合接口</li>\n<li>常用子类：<code>HashSet</code>(无序)、<code>TreeSet</code>（有序）</li>\n<li><code>TreeSet</code>：进行排序时需要类实现<code>Comparable</code>接口，而<code>TreeSet</code>判断一个类是否重复就是通过<code>Comparable</code>接口的比较方法实现的，此处会出现异常；</li>\n</ul>\n<h3 id=\"集合输出方法\"><a href=\"#集合输出方法\" class=\"headerlink\" title=\"集合输出方法\"></a>集合输出方法</h3><ul>\n<li><code>Iterator</code></li>\n<li><code>Enumeration</code></li>\n<li><code>ListIterator</code></li>\n<li><code>foreach</code></li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Set<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WORLD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Iterator<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> it <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WORLD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Enumeration<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> enu <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Vector<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">elements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>enu<span class=\"token punctuation\">.</span><span class=\"token function\">hasMoreElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>enu<span class=\"token punctuation\">.</span><span class=\"token function\">nextElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WORLD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ListIterator<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> it <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">listIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasPrevious</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">previous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WORLD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>String str<span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><ul>\n<li><code>Map</code>接口定义了相关的函数方法:<ul>\n<li>向集合中保存数据：<code>public V put(K key, V value)</code>;</li>\n<li>根据Key查找数据：<code>public V get(Object key)</code>;</li>\n<li>将Map集合转化为Set集合：<code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code></li>\n<li>取出全部的Key：<code>public Set&lt;K&gt; keySet()</code></li>\n</ul>\n</li>\n<li>常用子类：<code>HashMap</code>（key或value可以为空，线程不安全）,<code>HashTable</code>（key和value不能为空，线程安全）</li>\n<li>无序存储，内容覆盖</li>\n<li>针对<code>HashMap</code>的线程安全问题引出<code>ConcurrentHashMap</code>,<code>ConcurrentHashMap</code> 是一个 <code>Segment</code> 数组，<code>Segment</code> 通过继承 <code>ReentrantLock</code> 来进行加锁，所以每次需要加锁的操作锁住的是一个<code>segment</code>，这样只要保证每个 <code>Segment</code> 是线程安全的，也就实现了全局的线程安全。</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>Integer<span class=\"token operator\">></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yi\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"er\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"san\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"san\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>Integer<span class=\"token operator\">></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yi\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"er\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"san\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>Integer<span class=\"token operator\">></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hashtable</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yi\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"er\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"san\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>Integer<span class=\"token operator\">></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hashtable</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yi\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"er\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"san\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Set<span class=\"token operator\">&lt;</span>Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>Integer<span class=\"token operator\">>></span> set <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Iterator<span class=\"token operator\">&lt;</span>Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Integer<span class=\"token operator\">>></span> it <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Integer<span class=\"token operator\">></span> me<span class=\"token operator\">=</span>  it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"=\"</span><span class=\"token operator\">+</span>me<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> </code></pre>\n<h3 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h3><ul>\n<li><code>Stack</code>作为<code>Vector</code>的子类，只需要记得两个方法：入栈(put)和出栈(pop)</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Stack<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> list<span class=\"token operator\">=</span>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"asd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h3><ul>\n<li>设置属性：<code>public Object setProperty(String key,String Value)</code>;</li>\n<li>取得属性：<code>public String getProperty(String key)</code>;</li>\n<li>取得属性：<code>public String getProperty(String key, String defaultValue)</code>;</li>\n<li>保存属性：<code>public void store(OutputStream out, String comments) </code></li>\n<li>读取属性：<code>public synchronized void load(InputStream in) throws IOException</code></li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        Properties pro <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pro<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pro<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pro<span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"this infor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        Properties pro <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pro<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pro<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"Collections工具类\"><a href=\"#Collections工具类\" class=\"headerlink\" title=\"Collections工具类\"></a>Collections工具类</h3><ul>\n<li>作为工具类，提供了一系列的集合操作方法</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> list<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Collections<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Collections<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><ul>\n<li>类集就是动态对象数组</li>\n<li><code>Collection</code>、<code>List</code>、<code>Set</code></li>\n<li><code>Map</code></li>\n<li><code>Iterator</code>、<code>Enumeration</code></li>\n</ul>\n<h3 id=\"Collections\"><a href=\"#Collections\" class=\"headerlink\" title=\"Collections\"></a>Collections</h3><ul>\n<li>集合的最大父接口：<code>public interface Collection&lt;E&gt; extends Iterator</code></li>\n<li>集合常用方法：<ul>\n<li><strong>添加一个元素：<code>public boolean add(E value)</code>;</strong></li>\n<li>追加一个集合：<code>public boolean addAll(Collection&lt;? extends E&gt; c)</code>;</li>\n<li>清空集合：<code>public void clear()</code>;</li>\n<li>判断是否包含元素：<code>public boolean contains(Object o)</code>;</li>\n<li>判断集合是否为空：<code>public boolean isEmpty()</code>;</li>\n<li>删除对象：<code>public boolean remove(Object o)</code>;</li>\n<li>取得集合大小：<code>public int size()</code>;</li>\n<li>将集合变为数组返回：<code>public Object[] toArray()</code>;</li>\n<li><strong>为Iterator实例化：<code>public Iterator&lt;E&gt; iterator()</code>;</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"List（元素可以重复）\"><a href=\"#List（元素可以重复）\" class=\"headerlink\" title=\"List（元素可以重复）\"></a>List（元素可以重复）</h3><ul>\n<li><code>List</code>是<code>Collection</code>的子接口，在原有的基础上添加了许多方法，主要包含以下：<ul>\n<li><strong>取得索引对应的内容：<code>public E get(int index)</code>;</strong></li>\n<li>修改制定索引的内容：<code>public E set(int index, E value)</code>;</li>\n<li>为ListIterator进行实例化：<code>public ListIterator&lt;E&gt; listIterator()</code>;</li>\n</ul>\n</li>\n<li>常用实现子类：**<code>ArrayList</code>**,<code>Vector</code></li>\n</ul>\n<pre><code class=\"java\">\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\nclass  Book&#123;\n    private double price;\n    private String title;\n    Book(String title,double price)&#123;\n        this.price = price;\n        this.title = title;\n    &#125;\n    @Override\n    public boolean equals(Object o) &#123;\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Book book = (Book) o;\n        return price == book.price &amp;&amp;\n                Objects.equals(title, book.title);\n    &#125;\n\n    @Override\n    public int hashCode() &#123;\n\n        return Objects.hash(price, title);\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Book&#123;&quot; +\n                &quot;price=&quot; + price +\n                &quot;, title=&#39;&quot; + title + &#39;\\&#39;&#39; +\n                &#39;&#125;&#39;;\n    &#125;\n\n    public double getPrice() &#123;\n        return price;\n    &#125;\n\n    public void setPrice(int price) &#123;\n        this.price = price;\n    &#125;\n\n    public String getTitle() &#123;\n        return title;\n    &#125;\n\n    public void setTitle(String title) &#123;\n        this.title = title;\n    &#125;\n&#125;\npublic class Main &#123;\n    public static void main(String[] args)\n    &#123;\n        List&lt;Book&gt; list = new ArrayList&lt;&gt;();\n        list.add(new Book(&quot;java&quot;,220.2));\n        list.add(new Book(&quot;git&quot;,225.231));\n        list.add(new Book(&quot;SVN&quot;,12.22));\n        list.remove(new Book(&quot;git&quot;,225.231));\n        System.out.println(list);\n        System.out.println(list.get(1));\n    &#125;\n&#125;</code></pre>\n<h3 id=\"Set（元素不可以重复）\"><a href=\"#Set（元素不可以重复）\" class=\"headerlink\" title=\"Set（元素不可以重复）\"></a>Set（元素不可以重复）</h3><ul>\n<li>集合判断元素是否重复需要类重写<code>equals</code>和<code>hashcode</code>方法</li>\n<li><code>Set</code>接口没有在原有方法的基础上进行大量的扩充方法，只是简单的实现了集合接口</li>\n<li>常用子类：<code>HashSet</code>(无序)、<code>TreeSet</code>（有序）</li>\n<li><code>TreeSet</code>：进行排序时需要类实现<code>Comparable</code>接口，而<code>TreeSet</code>判断一个类是否重复就是通过<code>Comparable</code>接口的比较方法实现的，此处会出现异常；</li>\n</ul>\n<h3 id=\"集合输出方法\"><a href=\"#集合输出方法\" class=\"headerlink\" title=\"集合输出方法\"></a>集合输出方法</h3><ul>\n<li><code>Iterator</code></li>\n<li><code>Enumeration</code></li>\n<li><code>ListIterator</code></li>\n<li><code>foreach</code></li>\n</ul>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args)\n    &#123;\n        Set&lt;String&gt; set = new HashSet&lt;&gt;();\n        set.add(&quot;HELLO&quot;);\n        set.add(&quot;WORLD&quot;);\n        set.add(&quot;HELLO&quot;);\n        Iterator&lt;?&gt; it = set.iterator();\n        while (it.hasNext())&#123;\n            System.out.println(it.next());\n        &#125;\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">\npublic class Main &#123;\n    public static void main(String[] args)\n    &#123;\n        List&lt;String&gt; set = new Vector&lt;&gt;();\n        set.add(&quot;HELLO&quot;);\n        set.add(&quot;WORLD&quot;);\n        set.add(&quot;HELLO&quot;);\n        Enumeration&lt;String&gt; enu = ((Vector&lt;String&gt;) set).elements();\n        while (enu.hasMoreElements())&#123;\n            System.out.println(enu.nextElement());\n        &#125;\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args)\n    &#123;\n        ArrayList&lt;String&gt; set = new ArrayList&lt;&gt;();\n        set.add(&quot;HELLO&quot;);\n        set.add(&quot;WORLD&quot;);\n        set.add(&quot;HELLO&quot;);\n        ListIterator&lt;String&gt; it = set.listIterator();\n        while (it.hasNext())&#123;\n            System.out.println(it.next());\n        &#125;\n        while (it.hasPrevious())&#123;\n            System.out.println(it.previous());\n        &#125;\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args)\n    &#123;\n        ArrayList&lt;String&gt; set = new ArrayList&lt;&gt;();\n        set.add(&quot;HELLO&quot;);\n        set.add(&quot;WORLD&quot;);\n        set.add(&quot;HELLO&quot;);\n        for(String str: set)&#123;\n            System.out.println(str);\n        &#125;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><ul>\n<li><code>Map</code>接口定义了相关的函数方法:<ul>\n<li>向集合中保存数据：<code>public V put(K key, V value)</code>;</li>\n<li>根据Key查找数据：<code>public V get(Object key)</code>;</li>\n<li>将Map集合转化为Set集合：<code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code></li>\n<li>取出全部的Key：<code>public Set&lt;K&gt; keySet()</code></li>\n</ul>\n</li>\n<li>常用子类：<code>HashMap</code>（key或value可以为空，线程不安全）,<code>HashTable</code>（key和value不能为空，线程安全）</li>\n<li>无序存储，内容覆盖</li>\n<li>针对<code>HashMap</code>的线程安全问题引出<code>ConcurrentHashMap</code>,<code>ConcurrentHashMap</code> 是一个 <code>Segment</code> 数组，<code>Segment</code> 通过继承 <code>ReentrantLock</code> 来进行加锁，所以每次需要加锁的操作锁住的是一个<code>segment</code>，这样只要保证每个 <code>Segment</code> 是线程安全的，也就实现了全局的线程安全。</li>\n</ul>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args)\n    &#123;\n        Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();\n        map.put(&quot;yi&quot;,1);\n        map.put(&quot;er&quot;,2);\n        map.put(&quot;san&quot;,3);\n        map.put(&quot;san&quot;,33);\n        System.out.println(map);\n    &#125;\n&#125;\npublic class Main &#123;\n    public static void main(String[] args)\n    &#123;\n        Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();\n        map.put(&quot;yi&quot;,1);\n        map.put(&quot;er&quot;,2);\n        map.put(&quot;san&quot;,3);\n        map.put(null,0);\n        System.out.println(map.get(&quot;yi&quot;));\n        System.out.println(map.get(null));\n    &#125;\n&#125;\npublic class Main &#123;\n    public static void main(String[] args)\n    &#123;\n        Map&lt;String,Integer&gt; map = new Hashtable&lt;&gt;();\n        map.put(&quot;yi&quot;,1);\n        map.put(&quot;er&quot;,2);\n        map.put(&quot;san&quot;,3);\n        System.out.println(map.get(&quot;yi&quot;));\n    &#125;\n&#125;\npublic class Main &#123;\n    public static void main(String[] args)\n    &#123;\n        Map&lt;String,Integer&gt; map = new Hashtable&lt;&gt;();\n        map.put(&quot;yi&quot;,1);\n        map.put(&quot;er&quot;,2);\n        map.put(&quot;san&quot;,3);\n        Set&lt;Map.Entry&lt;String,Integer&gt;&gt; set = map.entrySet();\n        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; it = set.iterator();\n        while(it.hasNext())&#123;\n            Map.Entry&lt;String, Integer&gt; me=  it.next();\n            System.out.println(me.getKey()+&quot;=&quot;+me.getValue());\n        &#125;\n    &#125;\n&#125; </code></pre>\n<h3 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h3><ul>\n<li><code>Stack</code>作为<code>Vector</code>的子类，只需要记得两个方法：入栈(put)和出栈(pop)</li>\n</ul>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args)\n    &#123;\n        Stack&lt;String&gt; list=  new Stack&lt;&gt;();\n        list.push(&quot;asd&quot;);\n        list.push(&quot;sss&quot;);\n        System.out.println(list.pop());\n    &#125;\n&#125;</code></pre>\n<h3 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h3><ul>\n<li>设置属性：<code>public Object setProperty(String key,String Value)</code>;</li>\n<li>取得属性：<code>public String getProperty(String key)</code>;</li>\n<li>取得属性：<code>public String getProperty(String key, String defaultValue)</code>;</li>\n<li>保存属性：<code>public void store(OutputStream out, String comments) </code></li>\n<li>读取属性：<code>public synchronized void load(InputStream in) throws IOException</code></li>\n</ul>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args) throws IOException &#123;\n        Properties pro = new Properties();\n        pro.setProperty(&quot;a&quot;,&quot;1&quot;);\n        pro.setProperty(&quot;b&quot;,&quot;2&quot;);\n        pro.store(new FileOutputStream(new File(&quot;test.txt&quot;)),&quot;this infor&quot;);\n    &#125;\n&#125;\npublic class Main &#123;\n    public static void main(String[] args) throws IOException &#123;\n        Properties pro = new Properties();\n        pro.load(new FileInputStream(new File(&quot;test.txt&quot;)));\n        System.out.println(pro);\n    &#125;\n&#125;</code></pre>\n<h3 id=\"Collections工具类\"><a href=\"#Collections工具类\" class=\"headerlink\" title=\"Collections工具类\"></a>Collections工具类</h3><ul>\n<li>作为工具类，提供了一系列的集合操作方法</li>\n</ul>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args) throws IOException &#123;\n        List&lt;String&gt; list= new ArrayList&lt;&gt;();\n        Collections.addAll(list,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);\n        System.out.println(list);\n        Collections.reverse(list);\n        System.out.println(list);\n    &#125;\n&#125;</code></pre>\n"},{"title":"Docker","date":"2021-12-26T08:17:11.000Z","author":"Fanrencli","_content":"\n## Docker相关操作\n\n- 创建一个容器：`docker run -p 80:80 -d nginx`\n- 查看容器：`docker ps`/`docker ps -a`\n- 启动容器：`docker start ID `/`docker restart ID `\n- 停止容器：`docker stop ID`/`docker kill ID`\n- 删除容器：`docker rm -f ID`\n\n- 查看镜像：`docker images`\n- 删除镜像：`docker rmi ID`\n- 删除全部镜像：`docker rmi $(docker images -q)`\n- 下载一个镜像：`docker pull mysql`\n\n- 安装命令：`yum -y install docker-io`\n- 启动：`service docker start`\n- 查看版本：`docker version`\n- 搜索镜像：`docker search mysql`:INDEX（仓库地址）|NAME（仓库名称）|STARS（喜欢程度）|OFFICIAL（是否是官方）|UTOMATED（是否提供dockerfile）\n- 镜像加速器：使用阿里云加速配置\n\n## Dockerfile文件\n\n \n\n```shell\n基础环境\nFrom java:8\n作者\nMAINTAINER Fanrencli\n操作\nADD eureka-server-0.0.1-SNAPSHOT.jar /data/app.jar\n暴露端口\nEXPOSE　8761\n#容器启动胡执行的命令\nENTRYPOINT [\"java\",\"-jar\",\"/data/app.jar\"]\n```\n\n- 构建镜像：`docker build -t 仓库名/镜像名:版本号 .[dockerfile文件路径]`\n- 修改镜像名称：`docker tag 仓库名/镜像名:版本号 新仓库名/镜像名:版本号`\n- 登陆docker：`docker login`\n- 推送到官方仓库中：`docker push 仓库名/镜像名:版本号`\n\n## 容器操作\n\n- 进入容器：`docker exec -it NAME /bin/bash`\n- 重新生成镜像：`docker commit `\n- 文件挂载：`docker run -itd -v 宿主机路径：容器路径 -P nginx`\n- 容器互联：\n\n\n\n","source":"_posts/JAVA/Docker.md","raw":"---\ntitle: Docker\ndate: 2021-12-26 16:17:11\ncategories:\n  - JAVA\ntags:\n  - Docker\nauthor: Fanrencli\n---\n\n## Docker相关操作\n\n- 创建一个容器：`docker run -p 80:80 -d nginx`\n- 查看容器：`docker ps`/`docker ps -a`\n- 启动容器：`docker start ID `/`docker restart ID `\n- 停止容器：`docker stop ID`/`docker kill ID`\n- 删除容器：`docker rm -f ID`\n\n- 查看镜像：`docker images`\n- 删除镜像：`docker rmi ID`\n- 删除全部镜像：`docker rmi $(docker images -q)`\n- 下载一个镜像：`docker pull mysql`\n\n- 安装命令：`yum -y install docker-io`\n- 启动：`service docker start`\n- 查看版本：`docker version`\n- 搜索镜像：`docker search mysql`:INDEX（仓库地址）|NAME（仓库名称）|STARS（喜欢程度）|OFFICIAL（是否是官方）|UTOMATED（是否提供dockerfile）\n- 镜像加速器：使用阿里云加速配置\n\n## Dockerfile文件\n\n \n\n```shell\n基础环境\nFrom java:8\n作者\nMAINTAINER Fanrencli\n操作\nADD eureka-server-0.0.1-SNAPSHOT.jar /data/app.jar\n暴露端口\nEXPOSE　8761\n#容器启动胡执行的命令\nENTRYPOINT [\"java\",\"-jar\",\"/data/app.jar\"]\n```\n\n- 构建镜像：`docker build -t 仓库名/镜像名:版本号 .[dockerfile文件路径]`\n- 修改镜像名称：`docker tag 仓库名/镜像名:版本号 新仓库名/镜像名:版本号`\n- 登陆docker：`docker login`\n- 推送到官方仓库中：`docker push 仓库名/镜像名:版本号`\n\n## 容器操作\n\n- 进入容器：`docker exec -it NAME /bin/bash`\n- 重新生成镜像：`docker commit `\n- 文件挂载：`docker run -itd -v 宿主机路径：容器路径 -P nginx`\n- 容器互联：\n\n\n\n","slug":"JAVA/Docker","published":1,"updated":"2021-12-28T02:13:37.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuhigba00048suo2tb32wmx","content":"<h2 id=\"Docker相关操作\"><a href=\"#Docker相关操作\" class=\"headerlink\" title=\"Docker相关操作\"></a>Docker相关操作</h2><ul>\n<li><p>创建一个容器：<code>docker run -p 80:80 -d nginx</code></p>\n</li>\n<li><p>查看容器：<code>docker ps</code>/<code>docker ps -a</code></p>\n</li>\n<li><p>启动容器：<code>docker start ID </code>/<code>docker restart ID </code></p>\n</li>\n<li><p>停止容器：<code>docker stop ID</code>/<code>docker kill ID</code></p>\n</li>\n<li><p>删除容器：<code>docker rm -f ID</code></p>\n</li>\n<li><p>查看镜像：<code>docker images</code></p>\n</li>\n<li><p>删除镜像：<code>docker rmi ID</code></p>\n</li>\n<li><p>删除全部镜像：<code>docker rmi $(docker images -q)</code></p>\n</li>\n<li><p>下载一个镜像：<code>docker pull mysql</code></p>\n</li>\n<li><p>安装命令：<code>yum -y install docker-io</code></p>\n</li>\n<li><p>启动：<code>service docker start</code></p>\n</li>\n<li><p>查看版本：<code>docker version</code></p>\n</li>\n<li><p>搜索镜像：<code>docker search mysql</code>:INDEX（仓库地址）|NAME（仓库名称）|STARS（喜欢程度）|OFFICIAL（是否是官方）|UTOMATED（是否提供dockerfile）</p>\n</li>\n<li><p>镜像加速器：使用阿里云加速配置</p>\n</li>\n</ul>\n<h2 id=\"Dockerfile文件\"><a href=\"#Dockerfile文件\" class=\"headerlink\" title=\"Dockerfile文件\"></a>Dockerfile文件</h2><pre class=\" language-shell\"><code class=\"language-shell\">基础环境\nFrom java:8\n作者\nMAINTAINER Fanrencli\n操作\nADD eureka-server-0.0.1-SNAPSHOT.jar /data/app.jar\n暴露端口\nEXPOSE　8761\n#容器启动胡执行的命令\nENTRYPOINT [\"java\",\"-jar\",\"/data/app.jar\"]</code></pre>\n<ul>\n<li>构建镜像：<code>docker build -t 仓库名/镜像名:版本号 .[dockerfile文件路径]</code></li>\n<li>修改镜像名称：<code>docker tag 仓库名/镜像名:版本号 新仓库名/镜像名:版本号</code></li>\n<li>登陆docker：<code>docker login</code></li>\n<li>推送到官方仓库中：<code>docker push 仓库名/镜像名:版本号</code></li>\n</ul>\n<h2 id=\"容器操作\"><a href=\"#容器操作\" class=\"headerlink\" title=\"容器操作\"></a>容器操作</h2><ul>\n<li>进入容器：<code>docker exec -it NAME /bin/bash</code></li>\n<li>重新生成镜像：<code>docker commit </code></li>\n<li>文件挂载：<code>docker run -itd -v 宿主机路径：容器路径 -P nginx</code></li>\n<li>容器互联：</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"Docker相关操作\"><a href=\"#Docker相关操作\" class=\"headerlink\" title=\"Docker相关操作\"></a>Docker相关操作</h2><ul>\n<li><p>创建一个容器：<code>docker run -p 80:80 -d nginx</code></p>\n</li>\n<li><p>查看容器：<code>docker ps</code>/<code>docker ps -a</code></p>\n</li>\n<li><p>启动容器：<code>docker start ID </code>/<code>docker restart ID </code></p>\n</li>\n<li><p>停止容器：<code>docker stop ID</code>/<code>docker kill ID</code></p>\n</li>\n<li><p>删除容器：<code>docker rm -f ID</code></p>\n</li>\n<li><p>查看镜像：<code>docker images</code></p>\n</li>\n<li><p>删除镜像：<code>docker rmi ID</code></p>\n</li>\n<li><p>删除全部镜像：<code>docker rmi $(docker images -q)</code></p>\n</li>\n<li><p>下载一个镜像：<code>docker pull mysql</code></p>\n</li>\n<li><p>安装命令：<code>yum -y install docker-io</code></p>\n</li>\n<li><p>启动：<code>service docker start</code></p>\n</li>\n<li><p>查看版本：<code>docker version</code></p>\n</li>\n<li><p>搜索镜像：<code>docker search mysql</code>:INDEX（仓库地址）|NAME（仓库名称）|STARS（喜欢程度）|OFFICIAL（是否是官方）|UTOMATED（是否提供dockerfile）</p>\n</li>\n<li><p>镜像加速器：使用阿里云加速配置</p>\n</li>\n</ul>\n<h2 id=\"Dockerfile文件\"><a href=\"#Dockerfile文件\" class=\"headerlink\" title=\"Dockerfile文件\"></a>Dockerfile文件</h2><pre><code class=\"shell\">基础环境\nFrom java:8\n作者\nMAINTAINER Fanrencli\n操作\nADD eureka-server-0.0.1-SNAPSHOT.jar /data/app.jar\n暴露端口\nEXPOSE　8761\n#容器启动胡执行的命令\nENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/data/app.jar&quot;]</code></pre>\n<ul>\n<li>构建镜像：<code>docker build -t 仓库名/镜像名:版本号 .[dockerfile文件路径]</code></li>\n<li>修改镜像名称：<code>docker tag 仓库名/镜像名:版本号 新仓库名/镜像名:版本号</code></li>\n<li>登陆docker：<code>docker login</code></li>\n<li>推送到官方仓库中：<code>docker push 仓库名/镜像名:版本号</code></li>\n</ul>\n<h2 id=\"容器操作\"><a href=\"#容器操作\" class=\"headerlink\" title=\"容器操作\"></a>容器操作</h2><ul>\n<li>进入容器：<code>docker exec -it NAME /bin/bash</code></li>\n<li>重新生成镜像：<code>docker commit </code></li>\n<li>文件挂载：<code>docker run -itd -v 宿主机路径：容器路径 -P nginx</code></li>\n<li>容器互联：</li>\n</ul>\n"},{"title":"gc","date":"2021-12-20T09:26:18.000Z","author":"Fanrencli","_content":"\n## JVM 内存模型\n\n![JVM内存模型](http://39.106.34.39:4567/20200101151338500.png)\n\n- 堆：（new）对象存储，数组；\n- 方法区：类的加载信息、常量、静态变量、即时编译后的代码；\n- 程序计数器：每个线程私有的标记代码的运行位置；\n- 虚拟机栈：存储每个方法运行创建的栈帧（局部变量表(对象的引用（对C++中的指针的封装）、基础数据类型)、操作数栈、动态链接、方法出口）；\n- 本地方法栈：存储本地方法的服务；\n\n## GC算法\n\n- 标记-清除：先标记，然后清除，但是会导致内存碎片化\n- 标记-复制：将内存划分为两块，每次只使用一块，一块使用完后，将清除垃圾后剩下的对象复制到另一块上，然后整体清除此内存块\n- 标记-整理：先标记，将活着的对象移动向一端，然后按照边界进行清除\n- 分代收集：将内存划分为年轻代和老年代，不同的区域选择不同的算法，一般年轻代选择复制，老年代选择清除或者整理\n\n### 确定垃圾\n\n- 引用计数法：如果一个对象没有一个与之相关的引用，那么他的引用计数都为0，此时可以当作垃圾进行回收\n- 可达性分析：通过`GC root`（虚拟机栈中的对象引用、方法区中类静态属性引用的对象、方法区中常量引用的对象、本地方法栈中JNI引用的对象）对对象进行分析，如果通过`GC root`可以找到的对象则认为此对象活着，否则作为垃圾；\n\n### 标记过程\n\n- 其中标记分为两次标记：通过GCroot节点第一次的检查可以发现不能到达的对象，然后对这些对象进行第一次标记，在标记过程对这些对象进行检查——是否重写了finalize方法、或者finalize方法是否被调用过，结果分为两种情况：\n    - 若重写了finalize方法且这个方法没有被调用过则对这个方法进行调用\n    - 若没有重写则不进行调用。\n    - 若重写了finalize方法但是之前调用过此方法则不执行。\n- 通过第一次标记之后调用finalize方法有的对象可能又被重新引用（逃离死亡），而有的对象则没有逃离，所以在GC发起第二次标记的时候剩下的对象则被清除。其中要注意的是在执行finalize方法时，GC不会等待finalize方法，主要是因为finalize方法可能会长时间执行或假死而导致整个系统的崩溃。\n\n### 标记产生的相关问题解析\n\n在GC过程中要对对象进行标记，在此过程中对象不能再进行更改引用，因此在GC过程中必须要暂停所有线程，但是暂停不能过于频繁，也不能太少，要选择合适的点进行暂停（安全点，这个安全点一般在需要长时间执行的代码处进行标记（for循环、方法调用、异常跳转）），在运行到安全点暂停之后进行GC的检查过程中如果对所有的对象进行遍历检查， 代价过高，hotspot中采用oop数据结构对GCroot节点中的对象引用进行标记，在检查时就可以很快的找到引用对象的位置，因而可以快速确定未被引用的对象位置，但是在代码运行过程中对象的引用是不断变化的，可能运行到这行代码对象引用还是这样，但是下一行代码又产生新的对象引用，这样oop的内容过多，导致一系列的问题，所以在代码运行过程中只在安全点处进行标记——运行到这行代码时，那些对象有引用，那些对象没有引用？。\n\n上面说到要对所有线程进行暂停，但是有的线程执行时，不能立即暂停，需要让它运行到最近的安全点然后暂停，对于所有线程如何暂停——当需要暂停时，JVM生成一个test轮询指令，所有线程对这个指令进行轮询，当线程轮询到这个指令时就暂停。然而还有一个问题，就是在进行GC需要暂停时，在运行的线程可以进行轮询然后暂停，但是若线程此时处于sleep或者blocked状态时，显然它收不到轮询的指令，但是JVM又不知道这个线程什么时候会开始执行，所以为了防止在暂停时由于sleep或blocked状态的线程开始运行而导致对象引用发生变化，JVM设置一个安全域（safeRegion）——在安全域中的线程禁止对象引用发生改变。在线程要离开安全域时检查系统是否完成根节点枚举或者整个GC过程，如果完成则继续运行，反之则等待。\n\n### 垃圾收集算法具体实现（垃圾收集器）\n\n- Serial垃圾收集器（单线程、复制算法）\n- Serial Old收集器（单线程标记整理算法 ）\n- ParNew垃圾收集器（Serial+多线程）\n- Parallel Scavenge收集器（多线程复制算法、高效）\n- Parallel Old收集器（多线程标记整理算法）\n- CMS收集器（多线程标记清除算法）\n- G1收集器\n\n\n\n\n\n","source":"_posts/JAVA/GC.md","raw":"---\ntitle: gc\ndate: 2021-12-20 17:26:18\ncategories:\n  - JAVA\ntags:\n  - GC\nauthor: Fanrencli\n---\n\n## JVM 内存模型\n\n![JVM内存模型](http://39.106.34.39:4567/20200101151338500.png)\n\n- 堆：（new）对象存储，数组；\n- 方法区：类的加载信息、常量、静态变量、即时编译后的代码；\n- 程序计数器：每个线程私有的标记代码的运行位置；\n- 虚拟机栈：存储每个方法运行创建的栈帧（局部变量表(对象的引用（对C++中的指针的封装）、基础数据类型)、操作数栈、动态链接、方法出口）；\n- 本地方法栈：存储本地方法的服务；\n\n## GC算法\n\n- 标记-清除：先标记，然后清除，但是会导致内存碎片化\n- 标记-复制：将内存划分为两块，每次只使用一块，一块使用完后，将清除垃圾后剩下的对象复制到另一块上，然后整体清除此内存块\n- 标记-整理：先标记，将活着的对象移动向一端，然后按照边界进行清除\n- 分代收集：将内存划分为年轻代和老年代，不同的区域选择不同的算法，一般年轻代选择复制，老年代选择清除或者整理\n\n### 确定垃圾\n\n- 引用计数法：如果一个对象没有一个与之相关的引用，那么他的引用计数都为0，此时可以当作垃圾进行回收\n- 可达性分析：通过`GC root`（虚拟机栈中的对象引用、方法区中类静态属性引用的对象、方法区中常量引用的对象、本地方法栈中JNI引用的对象）对对象进行分析，如果通过`GC root`可以找到的对象则认为此对象活着，否则作为垃圾；\n\n### 标记过程\n\n- 其中标记分为两次标记：通过GCroot节点第一次的检查可以发现不能到达的对象，然后对这些对象进行第一次标记，在标记过程对这些对象进行检查——是否重写了finalize方法、或者finalize方法是否被调用过，结果分为两种情况：\n    - 若重写了finalize方法且这个方法没有被调用过则对这个方法进行调用\n    - 若没有重写则不进行调用。\n    - 若重写了finalize方法但是之前调用过此方法则不执行。\n- 通过第一次标记之后调用finalize方法有的对象可能又被重新引用（逃离死亡），而有的对象则没有逃离，所以在GC发起第二次标记的时候剩下的对象则被清除。其中要注意的是在执行finalize方法时，GC不会等待finalize方法，主要是因为finalize方法可能会长时间执行或假死而导致整个系统的崩溃。\n\n### 标记产生的相关问题解析\n\n在GC过程中要对对象进行标记，在此过程中对象不能再进行更改引用，因此在GC过程中必须要暂停所有线程，但是暂停不能过于频繁，也不能太少，要选择合适的点进行暂停（安全点，这个安全点一般在需要长时间执行的代码处进行标记（for循环、方法调用、异常跳转）），在运行到安全点暂停之后进行GC的检查过程中如果对所有的对象进行遍历检查， 代价过高，hotspot中采用oop数据结构对GCroot节点中的对象引用进行标记，在检查时就可以很快的找到引用对象的位置，因而可以快速确定未被引用的对象位置，但是在代码运行过程中对象的引用是不断变化的，可能运行到这行代码对象引用还是这样，但是下一行代码又产生新的对象引用，这样oop的内容过多，导致一系列的问题，所以在代码运行过程中只在安全点处进行标记——运行到这行代码时，那些对象有引用，那些对象没有引用？。\n\n上面说到要对所有线程进行暂停，但是有的线程执行时，不能立即暂停，需要让它运行到最近的安全点然后暂停，对于所有线程如何暂停——当需要暂停时，JVM生成一个test轮询指令，所有线程对这个指令进行轮询，当线程轮询到这个指令时就暂停。然而还有一个问题，就是在进行GC需要暂停时，在运行的线程可以进行轮询然后暂停，但是若线程此时处于sleep或者blocked状态时，显然它收不到轮询的指令，但是JVM又不知道这个线程什么时候会开始执行，所以为了防止在暂停时由于sleep或blocked状态的线程开始运行而导致对象引用发生变化，JVM设置一个安全域（safeRegion）——在安全域中的线程禁止对象引用发生改变。在线程要离开安全域时检查系统是否完成根节点枚举或者整个GC过程，如果完成则继续运行，反之则等待。\n\n### 垃圾收集算法具体实现（垃圾收集器）\n\n- Serial垃圾收集器（单线程、复制算法）\n- Serial Old收集器（单线程标记整理算法 ）\n- ParNew垃圾收集器（Serial+多线程）\n- Parallel Scavenge收集器（多线程复制算法、高效）\n- Parallel Old收集器（多线程标记整理算法）\n- CMS收集器（多线程标记清除算法）\n- G1收集器\n\n\n\n\n\n","slug":"JAVA/GC","published":1,"updated":"2021-12-22T14:30:05.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuhigbc00058suobeg6bsaq","content":"<h2 id=\"JVM-内存模型\"><a href=\"#JVM-内存模型\" class=\"headerlink\" title=\"JVM 内存模型\"></a>JVM 内存模型</h2><p><img src=\"http://39.106.34.39:4567/20200101151338500.png\" alt=\"JVM内存模型\"></p>\n<ul>\n<li>堆：（new）对象存储，数组；</li>\n<li>方法区：类的加载信息、常量、静态变量、即时编译后的代码；</li>\n<li>程序计数器：每个线程私有的标记代码的运行位置；</li>\n<li>虚拟机栈：存储每个方法运行创建的栈帧（局部变量表(对象的引用（对C++中的指针的封装）、基础数据类型)、操作数栈、动态链接、方法出口）；</li>\n<li>本地方法栈：存储本地方法的服务；</li>\n</ul>\n<h2 id=\"GC算法\"><a href=\"#GC算法\" class=\"headerlink\" title=\"GC算法\"></a>GC算法</h2><ul>\n<li>标记-清除：先标记，然后清除，但是会导致内存碎片化</li>\n<li>标记-复制：将内存划分为两块，每次只使用一块，一块使用完后，将清除垃圾后剩下的对象复制到另一块上，然后整体清除此内存块</li>\n<li>标记-整理：先标记，将活着的对象移动向一端，然后按照边界进行清除</li>\n<li>分代收集：将内存划分为年轻代和老年代，不同的区域选择不同的算法，一般年轻代选择复制，老年代选择清除或者整理</li>\n</ul>\n<h3 id=\"确定垃圾\"><a href=\"#确定垃圾\" class=\"headerlink\" title=\"确定垃圾\"></a>确定垃圾</h3><ul>\n<li>引用计数法：如果一个对象没有一个与之相关的引用，那么他的引用计数都为0，此时可以当作垃圾进行回收</li>\n<li>可达性分析：通过<code>GC root</code>（虚拟机栈中的对象引用、方法区中类静态属性引用的对象、方法区中常量引用的对象、本地方法栈中JNI引用的对象）对对象进行分析，如果通过<code>GC root</code>可以找到的对象则认为此对象活着，否则作为垃圾；</li>\n</ul>\n<h3 id=\"标记过程\"><a href=\"#标记过程\" class=\"headerlink\" title=\"标记过程\"></a>标记过程</h3><ul>\n<li>其中标记分为两次标记：通过GCroot节点第一次的检查可以发现不能到达的对象，然后对这些对象进行第一次标记，在标记过程对这些对象进行检查——是否重写了finalize方法、或者finalize方法是否被调用过，结果分为两种情况：<ul>\n<li>若重写了finalize方法且这个方法没有被调用过则对这个方法进行调用</li>\n<li>若没有重写则不进行调用。</li>\n<li>若重写了finalize方法但是之前调用过此方法则不执行。</li>\n</ul>\n</li>\n<li>通过第一次标记之后调用finalize方法有的对象可能又被重新引用（逃离死亡），而有的对象则没有逃离，所以在GC发起第二次标记的时候剩下的对象则被清除。其中要注意的是在执行finalize方法时，GC不会等待finalize方法，主要是因为finalize方法可能会长时间执行或假死而导致整个系统的崩溃。</li>\n</ul>\n<h3 id=\"标记产生的相关问题解析\"><a href=\"#标记产生的相关问题解析\" class=\"headerlink\" title=\"标记产生的相关问题解析\"></a>标记产生的相关问题解析</h3><p>在GC过程中要对对象进行标记，在此过程中对象不能再进行更改引用，因此在GC过程中必须要暂停所有线程，但是暂停不能过于频繁，也不能太少，要选择合适的点进行暂停（安全点，这个安全点一般在需要长时间执行的代码处进行标记（for循环、方法调用、异常跳转）），在运行到安全点暂停之后进行GC的检查过程中如果对所有的对象进行遍历检查， 代价过高，hotspot中采用oop数据结构对GCroot节点中的对象引用进行标记，在检查时就可以很快的找到引用对象的位置，因而可以快速确定未被引用的对象位置，但是在代码运行过程中对象的引用是不断变化的，可能运行到这行代码对象引用还是这样，但是下一行代码又产生新的对象引用，这样oop的内容过多，导致一系列的问题，所以在代码运行过程中只在安全点处进行标记——运行到这行代码时，那些对象有引用，那些对象没有引用？。</p>\n<p>上面说到要对所有线程进行暂停，但是有的线程执行时，不能立即暂停，需要让它运行到最近的安全点然后暂停，对于所有线程如何暂停——当需要暂停时，JVM生成一个test轮询指令，所有线程对这个指令进行轮询，当线程轮询到这个指令时就暂停。然而还有一个问题，就是在进行GC需要暂停时，在运行的线程可以进行轮询然后暂停，但是若线程此时处于sleep或者blocked状态时，显然它收不到轮询的指令，但是JVM又不知道这个线程什么时候会开始执行，所以为了防止在暂停时由于sleep或blocked状态的线程开始运行而导致对象引用发生变化，JVM设置一个安全域（safeRegion）——在安全域中的线程禁止对象引用发生改变。在线程要离开安全域时检查系统是否完成根节点枚举或者整个GC过程，如果完成则继续运行，反之则等待。</p>\n<h3 id=\"垃圾收集算法具体实现（垃圾收集器）\"><a href=\"#垃圾收集算法具体实现（垃圾收集器）\" class=\"headerlink\" title=\"垃圾收集算法具体实现（垃圾收集器）\"></a>垃圾收集算法具体实现（垃圾收集器）</h3><ul>\n<li>Serial垃圾收集器（单线程、复制算法）</li>\n<li>Serial Old收集器（单线程标记整理算法 ）</li>\n<li>ParNew垃圾收集器（Serial+多线程）</li>\n<li>Parallel Scavenge收集器（多线程复制算法、高效）</li>\n<li>Parallel Old收集器（多线程标记整理算法）</li>\n<li>CMS收集器（多线程标记清除算法）</li>\n<li>G1收集器</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"JVM-内存模型\"><a href=\"#JVM-内存模型\" class=\"headerlink\" title=\"JVM 内存模型\"></a>JVM 内存模型</h2><p><img src=\"http://39.106.34.39:4567/20200101151338500.png\" alt=\"JVM内存模型\"></p>\n<ul>\n<li>堆：（new）对象存储，数组；</li>\n<li>方法区：类的加载信息、常量、静态变量、即时编译后的代码；</li>\n<li>程序计数器：每个线程私有的标记代码的运行位置；</li>\n<li>虚拟机栈：存储每个方法运行创建的栈帧（局部变量表(对象的引用（对C++中的指针的封装）、基础数据类型)、操作数栈、动态链接、方法出口）；</li>\n<li>本地方法栈：存储本地方法的服务；</li>\n</ul>\n<h2 id=\"GC算法\"><a href=\"#GC算法\" class=\"headerlink\" title=\"GC算法\"></a>GC算法</h2><ul>\n<li>标记-清除：先标记，然后清除，但是会导致内存碎片化</li>\n<li>标记-复制：将内存划分为两块，每次只使用一块，一块使用完后，将清除垃圾后剩下的对象复制到另一块上，然后整体清除此内存块</li>\n<li>标记-整理：先标记，将活着的对象移动向一端，然后按照边界进行清除</li>\n<li>分代收集：将内存划分为年轻代和老年代，不同的区域选择不同的算法，一般年轻代选择复制，老年代选择清除或者整理</li>\n</ul>\n<h3 id=\"确定垃圾\"><a href=\"#确定垃圾\" class=\"headerlink\" title=\"确定垃圾\"></a>确定垃圾</h3><ul>\n<li>引用计数法：如果一个对象没有一个与之相关的引用，那么他的引用计数都为0，此时可以当作垃圾进行回收</li>\n<li>可达性分析：通过<code>GC root</code>（虚拟机栈中的对象引用、方法区中类静态属性引用的对象、方法区中常量引用的对象、本地方法栈中JNI引用的对象）对对象进行分析，如果通过<code>GC root</code>可以找到的对象则认为此对象活着，否则作为垃圾；</li>\n</ul>\n<h3 id=\"标记过程\"><a href=\"#标记过程\" class=\"headerlink\" title=\"标记过程\"></a>标记过程</h3><ul>\n<li>其中标记分为两次标记：通过GCroot节点第一次的检查可以发现不能到达的对象，然后对这些对象进行第一次标记，在标记过程对这些对象进行检查——是否重写了finalize方法、或者finalize方法是否被调用过，结果分为两种情况：<ul>\n<li>若重写了finalize方法且这个方法没有被调用过则对这个方法进行调用</li>\n<li>若没有重写则不进行调用。</li>\n<li>若重写了finalize方法但是之前调用过此方法则不执行。</li>\n</ul>\n</li>\n<li>通过第一次标记之后调用finalize方法有的对象可能又被重新引用（逃离死亡），而有的对象则没有逃离，所以在GC发起第二次标记的时候剩下的对象则被清除。其中要注意的是在执行finalize方法时，GC不会等待finalize方法，主要是因为finalize方法可能会长时间执行或假死而导致整个系统的崩溃。</li>\n</ul>\n<h3 id=\"标记产生的相关问题解析\"><a href=\"#标记产生的相关问题解析\" class=\"headerlink\" title=\"标记产生的相关问题解析\"></a>标记产生的相关问题解析</h3><p>在GC过程中要对对象进行标记，在此过程中对象不能再进行更改引用，因此在GC过程中必须要暂停所有线程，但是暂停不能过于频繁，也不能太少，要选择合适的点进行暂停（安全点，这个安全点一般在需要长时间执行的代码处进行标记（for循环、方法调用、异常跳转）），在运行到安全点暂停之后进行GC的检查过程中如果对所有的对象进行遍历检查， 代价过高，hotspot中采用oop数据结构对GCroot节点中的对象引用进行标记，在检查时就可以很快的找到引用对象的位置，因而可以快速确定未被引用的对象位置，但是在代码运行过程中对象的引用是不断变化的，可能运行到这行代码对象引用还是这样，但是下一行代码又产生新的对象引用，这样oop的内容过多，导致一系列的问题，所以在代码运行过程中只在安全点处进行标记——运行到这行代码时，那些对象有引用，那些对象没有引用？。</p>\n<p>上面说到要对所有线程进行暂停，但是有的线程执行时，不能立即暂停，需要让它运行到最近的安全点然后暂停，对于所有线程如何暂停——当需要暂停时，JVM生成一个test轮询指令，所有线程对这个指令进行轮询，当线程轮询到这个指令时就暂停。然而还有一个问题，就是在进行GC需要暂停时，在运行的线程可以进行轮询然后暂停，但是若线程此时处于sleep或者blocked状态时，显然它收不到轮询的指令，但是JVM又不知道这个线程什么时候会开始执行，所以为了防止在暂停时由于sleep或blocked状态的线程开始运行而导致对象引用发生变化，JVM设置一个安全域（safeRegion）——在安全域中的线程禁止对象引用发生改变。在线程要离开安全域时检查系统是否完成根节点枚举或者整个GC过程，如果完成则继续运行，反之则等待。</p>\n<h3 id=\"垃圾收集算法具体实现（垃圾收集器）\"><a href=\"#垃圾收集算法具体实现（垃圾收集器）\" class=\"headerlink\" title=\"垃圾收集算法具体实现（垃圾收集器）\"></a>垃圾收集算法具体实现（垃圾收集器）</h3><ul>\n<li>Serial垃圾收集器（单线程、复制算法）</li>\n<li>Serial Old收集器（单线程标记整理算法 ）</li>\n<li>ParNew垃圾收集器（Serial+多线程）</li>\n<li>Parallel Scavenge收集器（多线程复制算法、高效）</li>\n<li>Parallel Old收集器（多线程标记整理算法）</li>\n<li>CMS收集器（多线程标记清除算法）</li>\n<li>G1收集器</li>\n</ul>\n"},{"title":"IO","date":"2021-12-15T15:47:54.000Z","author":"Fanrencli","_content":"\t\n## IO操作\n\n### IO核心类\n- `File`\n- `InputStream`\n- `OutputStream`\n- `Reader`\n- `Writer`\n- `Serializable`\n\n### File操作文件\n- 构造方法：`File(String filepath)`\n- 创建文件：`createNewFile()`\n- 删除文件：`delete()`\n- 路径符号：`File.separator`\n- 获取父路径：`getParentFile()`\n- 创建目录：`mkdir()` 和`mkdirs()`创建一级目录和多级目录\n- 获取文件大小：`long lenght()`\n- 判断是否是文件或者路径：`boolean isFile()` `boolean isDirectory()`\n- 获取最近的修改时间：`long lastModified()`\n- 获取文件名称：`getName()`\n- 输出路径中包含的信息(可能是文件也可能是路径)：`String[] list()` `File[] listFiles()`\n\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        System.out.println(file.createNewFile());\n        System.out.println(file.delete());\n    }\n}\n```\n\n### 字节流与字符流\n- 通过File定义一个需要操作的文件\n- 通过字节流或者字符流的子类对象为父类对象进行实例化\n- 进行数据的读写操作\n- 关闭资源\n\n#### 字节流\n\n1. `InputStream` 抽象类\n\n\t- 读取单个字节并返回数据：`int read() throws IOException`\n\t- 读取数据保存在字节数组：`int read(byte[] b) throws IOException`\n\t- 读取数据保存在数组某个部分：`int read(byte[] b, int off, int len) throws IOException`\n\t- 返回值为int型，如果读取完毕则返回-1，否则返回读取的长度。\n\t- 子类：`FileInputStream`：\n    \t- 构造方法：`FileInputStream(File file)`\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        InputStream inputStream = new FileInputStream(file);\n        byte data[] = new byte[1024];\n        int len = inputStream.read(data);\n        inputStream.close();\n        System.out.println(new String(data,0,len));\n    }\n}\n```\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        InputStream inputStream = new FileInputStream(file);\n        byte data[] = new byte[1024];\n        int foot=0;\n        int temp=0;\n        while((temp = inputStream.read())!=-1){\n            data[foot++] = (byte)temp;\n        }\n        inputStream.close();\n        System.out.println(new String(data,0,foot));\n\n    }\n\n}\n```\n2. `OutputStream`抽象类\n\n\t- 输出单个字节：`void write(int b) throws IOException`\n\t- 输出全部字节数组：`void write(byte[] b) throws IOException`\n\t- 输出部分字节数组：`void write(byte[] b, int off, int len) throws IOException`\n\t- 子类：`FileOutputStream`：\n    \t- 构造方法：`FileOutputStream(File file)`覆盖创建写入/`FileOutputStream(File file, boolean append)`是否追加写入\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        OutputStream outputStream = new FileOutputStream(file);\n        String str = \"好好学习！！！\";\n        byte data[] = str.getBytes();\n        outputStream.write(data);\n        outputStream.close();\n\n    }\n\n}\n```\n\n#### 字符流\n\n1. `Reader`\n    - 输出全部字符数组：`int read(char[] b) throws IOException`\n\t- 读取数据保存在数组某个部分：`int read(char[] b, int off, int len) throws IOException`\n\t- 返回值为int型，如果读取完毕则返回-1，否则返回读取的长度。\n    - 子类：`FileReader`\n        - 构造方法：`FileReader(File file)`\n\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        Reader reader = new FileReader(file);\n        char data[] = new char[1024];\n        int len = reader.read(data);\n        System.out.println(new String (data,0,len));\n        reader.close();\n    }\n}\n```\n\n2. `Writer`\n\n    - 输出全部字符数组：`void write(char[] b) throws IOException`\n    - 输出字符串：`void write(String str) throws IOException`\n    - 子类：`FileWriter`\n        - 构造方法：`FileWriter(File file)`覆盖创建写入/`FileWriter(File file, boolean append)`是否追加写入\n\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        Writer writer = new FileWriter(file);\n        String str = \"我是谁？\";\n        writer.write(str);\n        writer.close();\n    }\n}\n```\n\n#### 字节流与字符流的转换\n\n字节流与字符流的区别在于：字节流直接与终端交互，而字符流需要通过缓冲区处理后进行输出。由于缓冲区操作的区别，从而导致如果字符流的输入输出不对资源进行关闭操作或者`flush()`方法，最终的文件不会出现对应的内容。\n\n关于字节流与字符流：\n- 如果有中文操作则优先选择字符流，否则优先选择字节流操作，因为后期所有关于网络通信的操作都会设计到字节的处理。\n- 字节流与字符流的转换主要包含两个类：`InputSreamReader`&`OutputStreamWriter`对应与`Reader` 和 `Writer`两个类的子类。\n- 构造方法：\n    - `InputSreamReader(InputSream in)` 和 `OutputStreamWriter(OutputStream out)`通过这两个构造函数接受对应的输入输出的字节流转换到对应的字符流。\n\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        OutputStream outputStream= new FileOutputStream(file);\n        Writer writer = new OutputStreamWriter(outputStream);\n        writer.write(\"hello world\");\n        writer.close();\n    }\n}\n```\n\n### 总结\n- 字节流处理是计算机的主流处理方式，因为在内存中数据的存储都是按照字节的方式进行存储的，而由于中文的存在需要转换为字符流进行操作，但是其原来的内容都是以字节型数据进行展示\n- 由于数据原来都是按照字节存储，所以对应的 `FileReader`&`FileWriter`是对应的 `InputSreamReader`&`OutputStreamWriter`的子类，其内部原理就是通过读取字节流数据，然后通过转换操作将字节数据转换为字符数据。\n\n### 综合实践：实现文件复制操作\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        File file1 =new File(\"test1.txt\");\n        InputStream inputStream = new FileInputStream(file);\n        OutputStream outputStream= new FileOutputStream(file1);\n        byte data[] = new byte[1024];\n        int temp = 0;\n        while((temp = inputStream.read(data))!=-1){\n            outputStream.write(data,0,temp);\n        }\n        inputStream.close();\n        outputStream.close();\n    }\n}\n```\n\n#### ByteArrayOutputStream和ByteArrayInputStream \n\n- 两个类作为内存流操作类，主要由于磁盘读写速度低于内存读写，所以通过用这个类作为某些操作的方法\n- `ByteArrayOutputStream`主要用于将多段数据来源合并在一起进行`流`输出，因为网络传输数据一般都是分段传输的\n- `ByteArrayInputStream` 主要用于将一整段数据以多段的方式以`流`的方式进行输出。\n- 在java中数据交互很多时候都是以流的方式进行，所以用这两个类优于用字节数组操作。\n- 而且资源不需要关闭\n\n```java\npublic static void main(String[] args) throws IOException {\n\t\tString str = \"123456789\";//数据源\n\t\tByteArrayInputStream in = new ByteArrayInputStream(str.getBytes());\n\t\tint read = in.read();//从这个输入流中读取下一个字节 返回一个无符号 的byte值，范围 0-255\n\t\tSystem.out.println((char)read);//输出结果为 \"1\"\n\t\tbyte[] b = new byte[4];\n\t\tin.read(b);\n\t\tSystem.out.println(new String(b));//输出结果为 \"2345\"\n\t\tin.read(b, 0, 4);\n\t\tSystem.out.println(new String(b));//输出结果为 \"6789\"\n\t}\npublic static void main(String[] args) throws IOException {\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    os.write(100);//将指定的字节写入此字节数组输出流。ps:虽然参数是int类型 但是只会写入8位，即一个字节\n    os.write(new byte[] {0,0,0,100});//将字节数组写入内存\n    os.write(new byte[] {0,0,0,100}, 0, 4);//将字节数组指定位置的数据写入内存\n    byte[] byteArray = os.toByteArray();//获取写入内存流中的所有数据\n    System.out.println(byteArray.length);//输入结果为9\n}\n```\n\n#### 打印流(数据输出)\n\n- 在输入输出流中，所有的数据都需要转换为String类然后再转为字节数据类型进行输入输出操作，这在我们日常开发中是非常不方便的。当我们希望将基本数据类型直接输出到文件中时，总是需要自己手动转换格式进行输出，因此打印流就此出现\n- 包含有`PrintStream`和`PrintWriter`,分别继承于`OutputStream`和`Writer`\n\n```java\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        PrintStream printStream = new PrintStream(new FileOutputStream(file));\n        printStream.print(123123123);\n        printStream.close();\n    }\n\n}\n```\n\n#### 扫描流（数据输入）\n\n- 在打印流中主要解决了数据输出所遇到的问题，而在数据输入中主要使用`Scanner`进行解决。\n- 构造函数：`public Scanner(InputStream source)`\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"请输入内容：\");\n        while(scanner.hasNextDouble()){\n            System.out.println(scanner.nextDouble());\n        }\n    }\n}\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"请输入内容：\");\n        while(scanner.hasNext(\"\\\\d{4}\")){\n            System.out.println(scanner.next(\"\\\\d{4}\"));\n        }\n    }\n}\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Scanner scanner = new Scanner(new FileInputStream(new File(\"test.txt\")));\n        System.out.print(\"请输入内容：\");\n        scanner.useDelimiter(\"\\\\n\");\n        while(scanner.hasNext()){\n            System.out.println(scanner.next());\n        }\n    }\n}\n```","source":"_posts/JAVA/IO.md","raw":"---\ntitle: IO\ndate: 2021-12-15 23:47:54\ncategories:\n  - JAVA\ntags:\n  - IO\nauthor: Fanrencli\n---\n\t\n## IO操作\n\n### IO核心类\n- `File`\n- `InputStream`\n- `OutputStream`\n- `Reader`\n- `Writer`\n- `Serializable`\n\n### File操作文件\n- 构造方法：`File(String filepath)`\n- 创建文件：`createNewFile()`\n- 删除文件：`delete()`\n- 路径符号：`File.separator`\n- 获取父路径：`getParentFile()`\n- 创建目录：`mkdir()` 和`mkdirs()`创建一级目录和多级目录\n- 获取文件大小：`long lenght()`\n- 判断是否是文件或者路径：`boolean isFile()` `boolean isDirectory()`\n- 获取最近的修改时间：`long lastModified()`\n- 获取文件名称：`getName()`\n- 输出路径中包含的信息(可能是文件也可能是路径)：`String[] list()` `File[] listFiles()`\n\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        System.out.println(file.createNewFile());\n        System.out.println(file.delete());\n    }\n}\n```\n\n### 字节流与字符流\n- 通过File定义一个需要操作的文件\n- 通过字节流或者字符流的子类对象为父类对象进行实例化\n- 进行数据的读写操作\n- 关闭资源\n\n#### 字节流\n\n1. `InputStream` 抽象类\n\n\t- 读取单个字节并返回数据：`int read() throws IOException`\n\t- 读取数据保存在字节数组：`int read(byte[] b) throws IOException`\n\t- 读取数据保存在数组某个部分：`int read(byte[] b, int off, int len) throws IOException`\n\t- 返回值为int型，如果读取完毕则返回-1，否则返回读取的长度。\n\t- 子类：`FileInputStream`：\n    \t- 构造方法：`FileInputStream(File file)`\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        InputStream inputStream = new FileInputStream(file);\n        byte data[] = new byte[1024];\n        int len = inputStream.read(data);\n        inputStream.close();\n        System.out.println(new String(data,0,len));\n    }\n}\n```\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        InputStream inputStream = new FileInputStream(file);\n        byte data[] = new byte[1024];\n        int foot=0;\n        int temp=0;\n        while((temp = inputStream.read())!=-1){\n            data[foot++] = (byte)temp;\n        }\n        inputStream.close();\n        System.out.println(new String(data,0,foot));\n\n    }\n\n}\n```\n2. `OutputStream`抽象类\n\n\t- 输出单个字节：`void write(int b) throws IOException`\n\t- 输出全部字节数组：`void write(byte[] b) throws IOException`\n\t- 输出部分字节数组：`void write(byte[] b, int off, int len) throws IOException`\n\t- 子类：`FileOutputStream`：\n    \t- 构造方法：`FileOutputStream(File file)`覆盖创建写入/`FileOutputStream(File file, boolean append)`是否追加写入\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        OutputStream outputStream = new FileOutputStream(file);\n        String str = \"好好学习！！！\";\n        byte data[] = str.getBytes();\n        outputStream.write(data);\n        outputStream.close();\n\n    }\n\n}\n```\n\n#### 字符流\n\n1. `Reader`\n    - 输出全部字符数组：`int read(char[] b) throws IOException`\n\t- 读取数据保存在数组某个部分：`int read(char[] b, int off, int len) throws IOException`\n\t- 返回值为int型，如果读取完毕则返回-1，否则返回读取的长度。\n    - 子类：`FileReader`\n        - 构造方法：`FileReader(File file)`\n\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        Reader reader = new FileReader(file);\n        char data[] = new char[1024];\n        int len = reader.read(data);\n        System.out.println(new String (data,0,len));\n        reader.close();\n    }\n}\n```\n\n2. `Writer`\n\n    - 输出全部字符数组：`void write(char[] b) throws IOException`\n    - 输出字符串：`void write(String str) throws IOException`\n    - 子类：`FileWriter`\n        - 构造方法：`FileWriter(File file)`覆盖创建写入/`FileWriter(File file, boolean append)`是否追加写入\n\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        Writer writer = new FileWriter(file);\n        String str = \"我是谁？\";\n        writer.write(str);\n        writer.close();\n    }\n}\n```\n\n#### 字节流与字符流的转换\n\n字节流与字符流的区别在于：字节流直接与终端交互，而字符流需要通过缓冲区处理后进行输出。由于缓冲区操作的区别，从而导致如果字符流的输入输出不对资源进行关闭操作或者`flush()`方法，最终的文件不会出现对应的内容。\n\n关于字节流与字符流：\n- 如果有中文操作则优先选择字符流，否则优先选择字节流操作，因为后期所有关于网络通信的操作都会设计到字节的处理。\n- 字节流与字符流的转换主要包含两个类：`InputSreamReader`&`OutputStreamWriter`对应与`Reader` 和 `Writer`两个类的子类。\n- 构造方法：\n    - `InputSreamReader(InputSream in)` 和 `OutputStreamWriter(OutputStream out)`通过这两个构造函数接受对应的输入输出的字节流转换到对应的字符流。\n\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        OutputStream outputStream= new FileOutputStream(file);\n        Writer writer = new OutputStreamWriter(outputStream);\n        writer.write(\"hello world\");\n        writer.close();\n    }\n}\n```\n\n### 总结\n- 字节流处理是计算机的主流处理方式，因为在内存中数据的存储都是按照字节的方式进行存储的，而由于中文的存在需要转换为字符流进行操作，但是其原来的内容都是以字节型数据进行展示\n- 由于数据原来都是按照字节存储，所以对应的 `FileReader`&`FileWriter`是对应的 `InputSreamReader`&`OutputStreamWriter`的子类，其内部原理就是通过读取字节流数据，然后通过转换操作将字节数据转换为字符数据。\n\n### 综合实践：实现文件复制操作\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        File file1 =new File(\"test1.txt\");\n        InputStream inputStream = new FileInputStream(file);\n        OutputStream outputStream= new FileOutputStream(file1);\n        byte data[] = new byte[1024];\n        int temp = 0;\n        while((temp = inputStream.read(data))!=-1){\n            outputStream.write(data,0,temp);\n        }\n        inputStream.close();\n        outputStream.close();\n    }\n}\n```\n\n#### ByteArrayOutputStream和ByteArrayInputStream \n\n- 两个类作为内存流操作类，主要由于磁盘读写速度低于内存读写，所以通过用这个类作为某些操作的方法\n- `ByteArrayOutputStream`主要用于将多段数据来源合并在一起进行`流`输出，因为网络传输数据一般都是分段传输的\n- `ByteArrayInputStream` 主要用于将一整段数据以多段的方式以`流`的方式进行输出。\n- 在java中数据交互很多时候都是以流的方式进行，所以用这两个类优于用字节数组操作。\n- 而且资源不需要关闭\n\n```java\npublic static void main(String[] args) throws IOException {\n\t\tString str = \"123456789\";//数据源\n\t\tByteArrayInputStream in = new ByteArrayInputStream(str.getBytes());\n\t\tint read = in.read();//从这个输入流中读取下一个字节 返回一个无符号 的byte值，范围 0-255\n\t\tSystem.out.println((char)read);//输出结果为 \"1\"\n\t\tbyte[] b = new byte[4];\n\t\tin.read(b);\n\t\tSystem.out.println(new String(b));//输出结果为 \"2345\"\n\t\tin.read(b, 0, 4);\n\t\tSystem.out.println(new String(b));//输出结果为 \"6789\"\n\t}\npublic static void main(String[] args) throws IOException {\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    os.write(100);//将指定的字节写入此字节数组输出流。ps:虽然参数是int类型 但是只会写入8位，即一个字节\n    os.write(new byte[] {0,0,0,100});//将字节数组写入内存\n    os.write(new byte[] {0,0,0,100}, 0, 4);//将字节数组指定位置的数据写入内存\n    byte[] byteArray = os.toByteArray();//获取写入内存流中的所有数据\n    System.out.println(byteArray.length);//输入结果为9\n}\n```\n\n#### 打印流(数据输出)\n\n- 在输入输出流中，所有的数据都需要转换为String类然后再转为字节数据类型进行输入输出操作，这在我们日常开发中是非常不方便的。当我们希望将基本数据类型直接输出到文件中时，总是需要自己手动转换格式进行输出，因此打印流就此出现\n- 包含有`PrintStream`和`PrintWriter`,分别继承于`OutputStream`和`Writer`\n\n```java\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"test.txt\");\n        PrintStream printStream = new PrintStream(new FileOutputStream(file));\n        printStream.print(123123123);\n        printStream.close();\n    }\n\n}\n```\n\n#### 扫描流（数据输入）\n\n- 在打印流中主要解决了数据输出所遇到的问题，而在数据输入中主要使用`Scanner`进行解决。\n- 构造函数：`public Scanner(InputStream source)`\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"请输入内容：\");\n        while(scanner.hasNextDouble()){\n            System.out.println(scanner.nextDouble());\n        }\n    }\n}\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"请输入内容：\");\n        while(scanner.hasNext(\"\\\\d{4}\")){\n            System.out.println(scanner.next(\"\\\\d{4}\"));\n        }\n    }\n}\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Scanner scanner = new Scanner(new FileInputStream(new File(\"test.txt\")));\n        System.out.print(\"请输入内容：\");\n        scanner.useDelimiter(\"\\\\n\");\n        while(scanner.hasNext()){\n            System.out.println(scanner.next());\n        }\n    }\n}\n```","slug":"JAVA/IO","published":1,"updated":"2021-12-17T11:55:26.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuhigbe00068suo4imq5rfc","content":"<h2 id=\"IO操作\"><a href=\"#IO操作\" class=\"headerlink\" title=\"IO操作\"></a>IO操作</h2><h3 id=\"IO核心类\"><a href=\"#IO核心类\" class=\"headerlink\" title=\"IO核心类\"></a>IO核心类</h3><ul>\n<li><code>File</code></li>\n<li><code>InputStream</code></li>\n<li><code>OutputStream</code></li>\n<li><code>Reader</code></li>\n<li><code>Writer</code></li>\n<li><code>Serializable</code></li>\n</ul>\n<h3 id=\"File操作文件\"><a href=\"#File操作文件\" class=\"headerlink\" title=\"File操作文件\"></a>File操作文件</h3><ul>\n<li>构造方法：<code>File(String filepath)</code></li>\n<li>创建文件：<code>createNewFile()</code></li>\n<li>删除文件：<code>delete()</code></li>\n<li>路径符号：<code>File.separator</code></li>\n<li>获取父路径：<code>getParentFile()</code></li>\n<li>创建目录：<code>mkdir()</code> 和<code>mkdirs()</code>创建一级目录和多级目录</li>\n<li>获取文件大小：<code>long lenght()</code></li>\n<li>判断是否是文件或者路径：<code>boolean isFile()</code> <code>boolean isDirectory()</code></li>\n<li>获取最近的修改时间：<code>long lastModified()</code></li>\n<li>获取文件名称：<code>getName()</code></li>\n<li>输出路径中包含的信息(可能是文件也可能是路径)：<code>String[] list()</code> <code>File[] listFiles()</code></li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        File file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"字节流与字符流\"><a href=\"#字节流与字符流\" class=\"headerlink\" title=\"字节流与字符流\"></a>字节流与字符流</h3><ul>\n<li>通过File定义一个需要操作的文件</li>\n<li>通过字节流或者字符流的子类对象为父类对象进行实例化</li>\n<li>进行数据的读写操作</li>\n<li>关闭资源</li>\n</ul>\n<h4 id=\"字节流\"><a href=\"#字节流\" class=\"headerlink\" title=\"字节流\"></a>字节流</h4><ol>\n<li><p><code>InputStream</code> 抽象类</p>\n<ul>\n<li>读取单个字节并返回数据：<code>int read() throws IOException</code></li>\n<li>读取数据保存在字节数组：<code>int read(byte[] b) throws IOException</code></li>\n<li>读取数据保存在数组某个部分：<code>int read(byte[] b, int off, int len) throws IOException</code></li>\n<li>返回值为int型，如果读取完毕则返回-1，否则返回读取的长度。</li>\n<li>子类：<code>FileInputStream</code>：<ul>\n<li>构造方法：<code>FileInputStream(File file)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        File file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        InputStream inputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        File file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        InputStream inputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> foot<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">=</span> inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            data<span class=\"token punctuation\">[</span>foot<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span>temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>foot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<ol start=\"2\">\n<li><p><code>OutputStream</code>抽象类</p>\n<ul>\n<li>输出单个字节：<code>void write(int b) throws IOException</code></li>\n<li>输出全部字节数组：<code>void write(byte[] b) throws IOException</code></li>\n<li>输出部分字节数组：<code>void write(byte[] b, int off, int len) throws IOException</code></li>\n<li>子类：<code>FileOutputStream</code>：<ul>\n<li>构造方法：<code>FileOutputStream(File file)</code>覆盖创建写入/<code>FileOutputStream(File file, boolean append)</code>是否追加写入</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        File file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        OutputStream outputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String str <span class=\"token operator\">=</span> <span class=\"token string\">\"好好学习！！！\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        outputStream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        outputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"字符流\"><a href=\"#字符流\" class=\"headerlink\" title=\"字符流\"></a>字符流</h4><ol>\n<li><code>Reader</code><ul>\n<li>输出全部字符数组：<code>int read(char[] b) throws IOException</code></li>\n<li>读取数据保存在数组某个部分：<code>int read(char[] b, int off, int len) throws IOException</code></li>\n<li>返回值为int型，如果读取完毕则返回-1，否则返回读取的长度。</li>\n<li>子类：<code>FileReader</code><ul>\n<li>构造方法：<code>FileReader(File file)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        File file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Reader reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        reader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ol start=\"2\">\n<li><p><code>Writer</code></p>\n<ul>\n<li>输出全部字符数组：<code>void write(char[] b) throws IOException</code></li>\n<li>输出字符串：<code>void write(String str) throws IOException</code></li>\n<li>子类：<code>FileWriter</code><ul>\n<li>构造方法：<code>FileWriter(File file)</code>覆盖创建写入/<code>FileWriter(File file, boolean append)</code>是否追加写入</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        File file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Writer writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String str <span class=\"token operator\">=</span> <span class=\"token string\">\"我是谁？\"</span><span class=\"token punctuation\">;</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"字节流与字符流的转换\"><a href=\"#字节流与字符流的转换\" class=\"headerlink\" title=\"字节流与字符流的转换\"></a>字节流与字符流的转换</h4><p>字节流与字符流的区别在于：字节流直接与终端交互，而字符流需要通过缓冲区处理后进行输出。由于缓冲区操作的区别，从而导致如果字符流的输入输出不对资源进行关闭操作或者<code>flush()</code>方法，最终的文件不会出现对应的内容。</p>\n<p>关于字节流与字符流：</p>\n<ul>\n<li>如果有中文操作则优先选择字符流，否则优先选择字节流操作，因为后期所有关于网络通信的操作都会设计到字节的处理。</li>\n<li>字节流与字符流的转换主要包含两个类：<code>InputSreamReader</code>&amp;<code>OutputStreamWriter</code>对应与<code>Reader</code> 和 <code>Writer</code>两个类的子类。</li>\n<li>构造方法：<ul>\n<li><code>InputSreamReader(InputSream in)</code> 和 <code>OutputStreamWriter(OutputStream out)</code>通过这两个构造函数接受对应的输入输出的字节流转换到对应的字符流。</li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        File file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        OutputStream outputStream<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Writer writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span>outputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>字节流处理是计算机的主流处理方式，因为在内存中数据的存储都是按照字节的方式进行存储的，而由于中文的存在需要转换为字符流进行操作，但是其原来的内容都是以字节型数据进行展示</li>\n<li>由于数据原来都是按照字节存储，所以对应的 <code>FileReader</code>&amp;<code>FileWriter</code>是对应的 <code>InputSreamReader</code>&amp;<code>OutputStreamWriter</code>的子类，其内部原理就是通过读取字节流数据，然后通过转换操作将字节数据转换为字符数据。</li>\n</ul>\n<h3 id=\"综合实践：实现文件复制操作\"><a href=\"#综合实践：实现文件复制操作\" class=\"headerlink\" title=\"综合实践：实现文件复制操作\"></a>综合实践：实现文件复制操作</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        File file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        File file1 <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        InputStream inputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        OutputStream outputStream<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">=</span> inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            outputStream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        outputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"ByteArrayOutputStream和ByteArrayInputStream\"><a href=\"#ByteArrayOutputStream和ByteArrayInputStream\" class=\"headerlink\" title=\"ByteArrayOutputStream和ByteArrayInputStream\"></a>ByteArrayOutputStream和ByteArrayInputStream</h4><ul>\n<li>两个类作为内存流操作类，主要由于磁盘读写速度低于内存读写，所以通过用这个类作为某些操作的方法</li>\n<li><code>ByteArrayOutputStream</code>主要用于将多段数据来源合并在一起进行<code>流</code>输出，因为网络传输数据一般都是分段传输的</li>\n<li><code>ByteArrayInputStream</code> 主要用于将一整段数据以多段的方式以<code>流</code>的方式进行输出。</li>\n<li>在java中数据交互很多时候都是以流的方式进行，所以用这两个类优于用字节数组操作。</li>\n<li>而且资源不需要关闭</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        String str <span class=\"token operator\">=</span> <span class=\"token string\">\"123456789\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//数据源</span>\n        ByteArrayInputStream in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> read <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//从这个输入流中读取下一个字节 返回一个无符号 的byte值，范围 0-255</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//输出结果为 \"1\"</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//输出结果为 \"2345\"</span>\n        in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//输出结果为 \"6789\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n    ByteArrayOutputStream os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    os<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//将指定的字节写入此字节数组输出流。ps:虽然参数是int类型 但是只会写入8位，即一个字节</span>\n    os<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//将字节数组写入内存</span>\n    os<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//将字节数组指定位置的数据写入内存</span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> byteArray <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//获取写入内存流中的所有数据</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>byteArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//输入结果为9</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"打印流-数据输出\"><a href=\"#打印流-数据输出\" class=\"headerlink\" title=\"打印流(数据输出)\"></a>打印流(数据输出)</h4><ul>\n<li>在输入输出流中，所有的数据都需要转换为String类然后再转为字节数据类型进行输入输出操作，这在我们日常开发中是非常不方便的。当我们希望将基本数据类型直接输出到文件中时，总是需要自己手动转换格式进行输出，因此打印流就此出现</li>\n<li>包含有<code>PrintStream</code>和<code>PrintWriter</code>,分别继承于<code>OutputStream</code>和<code>Writer</code></li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        File file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        PrintStream printStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        printStream<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">123123123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        printStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"扫描流（数据输入）\"><a href=\"#扫描流（数据输入）\" class=\"headerlink\" title=\"扫描流（数据输入）\"></a>扫描流（数据输入）</h4><ul>\n<li>在打印流中主要解决了数据输出所遇到的问题，而在数据输入中主要使用<code>Scanner</code>进行解决。</li>\n<li>构造函数：<code>public Scanner(InputStream source)</code></li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        Scanner scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入内容：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        Scanner scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入内容：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\d{4}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\d{4}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        Scanner scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入内容：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        scanner<span class=\"token punctuation\">.</span><span class=\"token function\">useDelimiter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"IO操作\"><a href=\"#IO操作\" class=\"headerlink\" title=\"IO操作\"></a>IO操作</h2><h3 id=\"IO核心类\"><a href=\"#IO核心类\" class=\"headerlink\" title=\"IO核心类\"></a>IO核心类</h3><ul>\n<li><code>File</code></li>\n<li><code>InputStream</code></li>\n<li><code>OutputStream</code></li>\n<li><code>Reader</code></li>\n<li><code>Writer</code></li>\n<li><code>Serializable</code></li>\n</ul>\n<h3 id=\"File操作文件\"><a href=\"#File操作文件\" class=\"headerlink\" title=\"File操作文件\"></a>File操作文件</h3><ul>\n<li>构造方法：<code>File(String filepath)</code></li>\n<li>创建文件：<code>createNewFile()</code></li>\n<li>删除文件：<code>delete()</code></li>\n<li>路径符号：<code>File.separator</code></li>\n<li>获取父路径：<code>getParentFile()</code></li>\n<li>创建目录：<code>mkdir()</code> 和<code>mkdirs()</code>创建一级目录和多级目录</li>\n<li>获取文件大小：<code>long lenght()</code></li>\n<li>判断是否是文件或者路径：<code>boolean isFile()</code> <code>boolean isDirectory()</code></li>\n<li>获取最近的修改时间：<code>long lastModified()</code></li>\n<li>获取文件名称：<code>getName()</code></li>\n<li>输出路径中包含的信息(可能是文件也可能是路径)：<code>String[] list()</code> <code>File[] listFiles()</code></li>\n</ul>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args) throws IOException &#123;\n        File file = new File(&quot;test.txt&quot;);\n        System.out.println(file.createNewFile());\n        System.out.println(file.delete());\n    &#125;\n&#125;</code></pre>\n<h3 id=\"字节流与字符流\"><a href=\"#字节流与字符流\" class=\"headerlink\" title=\"字节流与字符流\"></a>字节流与字符流</h3><ul>\n<li>通过File定义一个需要操作的文件</li>\n<li>通过字节流或者字符流的子类对象为父类对象进行实例化</li>\n<li>进行数据的读写操作</li>\n<li>关闭资源</li>\n</ul>\n<h4 id=\"字节流\"><a href=\"#字节流\" class=\"headerlink\" title=\"字节流\"></a>字节流</h4><ol>\n<li><p><code>InputStream</code> 抽象类</p>\n<ul>\n<li>读取单个字节并返回数据：<code>int read() throws IOException</code></li>\n<li>读取数据保存在字节数组：<code>int read(byte[] b) throws IOException</code></li>\n<li>读取数据保存在数组某个部分：<code>int read(byte[] b, int off, int len) throws IOException</code></li>\n<li>返回值为int型，如果读取完毕则返回-1，否则返回读取的长度。</li>\n<li>子类：<code>FileInputStream</code>：<ul>\n<li>构造方法：<code>FileInputStream(File file)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args) throws IOException &#123;\n        File file = new File(&quot;test.txt&quot;);\n        InputStream inputStream = new FileInputStream(file);\n        byte data[] = new byte[1024];\n        int len = inputStream.read(data);\n        inputStream.close();\n        System.out.println(new String(data,0,len));\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args) throws IOException &#123;\n        File file = new File(&quot;test.txt&quot;);\n        InputStream inputStream = new FileInputStream(file);\n        byte data[] = new byte[1024];\n        int foot=0;\n        int temp=0;\n        while((temp = inputStream.read())!=-1)&#123;\n            data[foot++] = (byte)temp;\n        &#125;\n        inputStream.close();\n        System.out.println(new String(data,0,foot));\n\n    &#125;\n\n&#125;</code></pre>\n<ol start=\"2\">\n<li><p><code>OutputStream</code>抽象类</p>\n<ul>\n<li>输出单个字节：<code>void write(int b) throws IOException</code></li>\n<li>输出全部字节数组：<code>void write(byte[] b) throws IOException</code></li>\n<li>输出部分字节数组：<code>void write(byte[] b, int off, int len) throws IOException</code></li>\n<li>子类：<code>FileOutputStream</code>：<ul>\n<li>构造方法：<code>FileOutputStream(File file)</code>覆盖创建写入/<code>FileOutputStream(File file, boolean append)</code>是否追加写入</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args) throws IOException &#123;\n        File file = new File(&quot;test.txt&quot;);\n        OutputStream outputStream = new FileOutputStream(file);\n        String str = &quot;好好学习！！！&quot;;\n        byte data[] = str.getBytes();\n        outputStream.write(data);\n        outputStream.close();\n\n    &#125;\n\n&#125;</code></pre>\n<h4 id=\"字符流\"><a href=\"#字符流\" class=\"headerlink\" title=\"字符流\"></a>字符流</h4><ol>\n<li><code>Reader</code><ul>\n<li>输出全部字符数组：<code>int read(char[] b) throws IOException</code></li>\n<li>读取数据保存在数组某个部分：<code>int read(char[] b, int off, int len) throws IOException</code></li>\n<li>返回值为int型，如果读取完毕则返回-1，否则返回读取的长度。</li>\n<li>子类：<code>FileReader</code><ul>\n<li>构造方法：<code>FileReader(File file)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args) throws IOException &#123;\n        File file = new File(&quot;test.txt&quot;);\n        Reader reader = new FileReader(file);\n        char data[] = new char[1024];\n        int len = reader.read(data);\n        System.out.println(new String (data,0,len));\n        reader.close();\n    &#125;\n&#125;</code></pre>\n<ol start=\"2\">\n<li><p><code>Writer</code></p>\n<ul>\n<li>输出全部字符数组：<code>void write(char[] b) throws IOException</code></li>\n<li>输出字符串：<code>void write(String str) throws IOException</code></li>\n<li>子类：<code>FileWriter</code><ul>\n<li>构造方法：<code>FileWriter(File file)</code>覆盖创建写入/<code>FileWriter(File file, boolean append)</code>是否追加写入</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args) throws IOException &#123;\n        File file = new File(&quot;test.txt&quot;);\n        Writer writer = new FileWriter(file);\n        String str = &quot;我是谁？&quot;;\n        writer.write(str);\n        writer.close();\n    &#125;\n&#125;</code></pre>\n<h4 id=\"字节流与字符流的转换\"><a href=\"#字节流与字符流的转换\" class=\"headerlink\" title=\"字节流与字符流的转换\"></a>字节流与字符流的转换</h4><p>字节流与字符流的区别在于：字节流直接与终端交互，而字符流需要通过缓冲区处理后进行输出。由于缓冲区操作的区别，从而导致如果字符流的输入输出不对资源进行关闭操作或者<code>flush()</code>方法，最终的文件不会出现对应的内容。</p>\n<p>关于字节流与字符流：</p>\n<ul>\n<li>如果有中文操作则优先选择字符流，否则优先选择字节流操作，因为后期所有关于网络通信的操作都会设计到字节的处理。</li>\n<li>字节流与字符流的转换主要包含两个类：<code>InputSreamReader</code>&amp;<code>OutputStreamWriter</code>对应与<code>Reader</code> 和 <code>Writer</code>两个类的子类。</li>\n<li>构造方法：<ul>\n<li><code>InputSreamReader(InputSream in)</code> 和 <code>OutputStreamWriter(OutputStream out)</code>通过这两个构造函数接受对应的输入输出的字节流转换到对应的字符流。</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args) throws IOException &#123;\n        File file = new File(&quot;test.txt&quot;);\n        OutputStream outputStream= new FileOutputStream(file);\n        Writer writer = new OutputStreamWriter(outputStream);\n        writer.write(&quot;hello world&quot;);\n        writer.close();\n    &#125;\n&#125;</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>字节流处理是计算机的主流处理方式，因为在内存中数据的存储都是按照字节的方式进行存储的，而由于中文的存在需要转换为字符流进行操作，但是其原来的内容都是以字节型数据进行展示</li>\n<li>由于数据原来都是按照字节存储，所以对应的 <code>FileReader</code>&amp;<code>FileWriter</code>是对应的 <code>InputSreamReader</code>&amp;<code>OutputStreamWriter</code>的子类，其内部原理就是通过读取字节流数据，然后通过转换操作将字节数据转换为字符数据。</li>\n</ul>\n<h3 id=\"综合实践：实现文件复制操作\"><a href=\"#综合实践：实现文件复制操作\" class=\"headerlink\" title=\"综合实践：实现文件复制操作\"></a>综合实践：实现文件复制操作</h3><pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args) throws IOException &#123;\n        File file = new File(&quot;test.txt&quot;);\n        File file1 =new File(&quot;test1.txt&quot;);\n        InputStream inputStream = new FileInputStream(file);\n        OutputStream outputStream= new FileOutputStream(file1);\n        byte data[] = new byte[1024];\n        int temp = 0;\n        while((temp = inputStream.read(data))!=-1)&#123;\n            outputStream.write(data,0,temp);\n        &#125;\n        inputStream.close();\n        outputStream.close();\n    &#125;\n&#125;</code></pre>\n<h4 id=\"ByteArrayOutputStream和ByteArrayInputStream\"><a href=\"#ByteArrayOutputStream和ByteArrayInputStream\" class=\"headerlink\" title=\"ByteArrayOutputStream和ByteArrayInputStream\"></a>ByteArrayOutputStream和ByteArrayInputStream</h4><ul>\n<li>两个类作为内存流操作类，主要由于磁盘读写速度低于内存读写，所以通过用这个类作为某些操作的方法</li>\n<li><code>ByteArrayOutputStream</code>主要用于将多段数据来源合并在一起进行<code>流</code>输出，因为网络传输数据一般都是分段传输的</li>\n<li><code>ByteArrayInputStream</code> 主要用于将一整段数据以多段的方式以<code>流</code>的方式进行输出。</li>\n<li>在java中数据交互很多时候都是以流的方式进行，所以用这两个类优于用字节数组操作。</li>\n<li>而且资源不需要关闭</li>\n</ul>\n<pre><code class=\"java\">public static void main(String[] args) throws IOException &#123;\n        String str = &quot;123456789&quot;;//数据源\n        ByteArrayInputStream in = new ByteArrayInputStream(str.getBytes());\n        int read = in.read();//从这个输入流中读取下一个字节 返回一个无符号 的byte值，范围 0-255\n        System.out.println((char)read);//输出结果为 &quot;1&quot;\n        byte[] b = new byte[4];\n        in.read(b);\n        System.out.println(new String(b));//输出结果为 &quot;2345&quot;\n        in.read(b, 0, 4);\n        System.out.println(new String(b));//输出结果为 &quot;6789&quot;\n    &#125;\npublic static void main(String[] args) throws IOException &#123;\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    os.write(100);//将指定的字节写入此字节数组输出流。ps:虽然参数是int类型 但是只会写入8位，即一个字节\n    os.write(new byte[] &#123;0,0,0,100&#125;);//将字节数组写入内存\n    os.write(new byte[] &#123;0,0,0,100&#125;, 0, 4);//将字节数组指定位置的数据写入内存\n    byte[] byteArray = os.toByteArray();//获取写入内存流中的所有数据\n    System.out.println(byteArray.length);//输入结果为9\n&#125;</code></pre>\n<h4 id=\"打印流-数据输出\"><a href=\"#打印流-数据输出\" class=\"headerlink\" title=\"打印流(数据输出)\"></a>打印流(数据输出)</h4><ul>\n<li>在输入输出流中，所有的数据都需要转换为String类然后再转为字节数据类型进行输入输出操作，这在我们日常开发中是非常不方便的。当我们希望将基本数据类型直接输出到文件中时，总是需要自己手动转换格式进行输出，因此打印流就此出现</li>\n<li>包含有<code>PrintStream</code>和<code>PrintWriter</code>,分别继承于<code>OutputStream</code>和<code>Writer</code></li>\n</ul>\n<pre><code class=\"java\">\npublic class Main &#123;\n    public static void main(String[] args) throws IOException &#123;\n        File file = new File(&quot;test.txt&quot;);\n        PrintStream printStream = new PrintStream(new FileOutputStream(file));\n        printStream.print(123123123);\n        printStream.close();\n    &#125;\n\n&#125;</code></pre>\n<h4 id=\"扫描流（数据输入）\"><a href=\"#扫描流（数据输入）\" class=\"headerlink\" title=\"扫描流（数据输入）\"></a>扫描流（数据输入）</h4><ul>\n<li>在打印流中主要解决了数据输出所遇到的问题，而在数据输入中主要使用<code>Scanner</code>进行解决。</li>\n<li>构造函数：<code>public Scanner(InputStream source)</code></li>\n</ul>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args) throws IOException &#123;\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(&quot;请输入内容：&quot;);\n        while(scanner.hasNextDouble())&#123;\n            System.out.println(scanner.nextDouble());\n        &#125;\n    &#125;\n&#125;\npublic class Main &#123;\n    public static void main(String[] args) throws IOException &#123;\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(&quot;请输入内容：&quot;);\n        while(scanner.hasNext(&quot;\\\\d&#123;4&#125;&quot;))&#123;\n            System.out.println(scanner.next(&quot;\\\\d&#123;4&#125;&quot;));\n        &#125;\n    &#125;\n&#125;\npublic class Main &#123;\n    public static void main(String[] args) throws IOException &#123;\n        Scanner scanner = new Scanner(new FileInputStream(new File(&quot;test.txt&quot;)));\n        System.out.print(&quot;请输入内容：&quot;);\n        scanner.useDelimiter(&quot;\\\\n&quot;);\n        while(scanner.hasNext())&#123;\n            System.out.println(scanner.next());\n        &#125;\n    &#125;\n&#125;</code></pre>\n"},{"title":"Lock","date":"2021-12-20T08:50:00.000Z","author":"Fanrencli","_content":"\n## 锁相关的概念\n\n- 乐观锁\n    - 认为读多写少，遇到并发写的可能性低，每次去读取数据的时候不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则要重复读-比较-写的操作。通过CAS操作实现的，CAS是一种更新的原子操作，比较当前值跟传入值是否一样，一样则更新，否则失败。\n- 悲观锁\n    - 认为写多，遇到并发写的可能性高，每次在读写数据的时候都会上锁，这样别人想读写这个数据就会block直到拿到锁。java中的悲观锁就是Synchronized。\n- 自旋锁\n    - 如果持有锁的线程能在很短时间内释放锁资源，那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞挂起状态，它们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换的消耗\n\n\n## Synchronized同步锁\n\n- Wait Set：调用wait方法被阻塞的线程被放置在这里； \n- Contention List：竞争队列，所有请求锁的线程首先被放在这个竞争队列中； \n- Entry List：Contention List中那些有资格成为候选资源的线程被移动到Entry List中； \n- OnDeck：任意时刻，最多只有一个线程正在竞争锁资源，该线程被成为OnDeck； \n- Owner：当前已经获取到所资源的线程被称为Owner； 6) !Owner：当前释放锁的线程。\n\n![Synchronized实现原理](http://39.106.34.39:4567/20211222223047.png)\n\n- Owner线程会在unlock时，将ContentionList中的部分线程迁移到EntryList中，并指定EntryList中的某个线程为OnDeck线程（一般是最先进去的那个线程）。\n- Owner线程并不直接把锁传递给OnDeck线程，而是把锁竞争的权利交给OnDeck，OnDeck需要重新竞争锁。这样虽然牺牲了一些公平性，但是能极大的提升系统的吞吐量，在JVM中，也把这种选择行为称之为“竞争切换”。\n- OnDeck线程获取到锁资源后会变为Owner线程，而没有得到锁资源的仍然停留在EntryList中。如果Owner线程被wait方法阻塞，则转移到WaitSet队列中，直到某个时刻通过notify或者notifyAll唤醒，会重新进去EntryList中。\n- 处于ContentionList、EntryList、WaitSet中的线程都处于阻塞状态，该阻塞是由操作系统来完成的（Linux内核下采用pthread_mutex_lock内核函数实现的）。\n- Synchronized是非公平锁。 Synchronized在线程进入ContentionList时，等待的线程会先尝试自旋获取锁，如果获取不到就进入ContentionList，这明显对于已经进入队列的线程是不公平的，还有一个不公平的事情就是自旋获取锁的线程还可能直接抢占OnDeck线程的锁资源。\n- 每个对象都有个monitor对象，加锁就是在竞争monitor对象，代码块加锁是在前后分别加上monitorenter和monitorexit指令来实现的，方法加锁是通过一个标记位来判断的\n\n\n## Lock接口\n\n- `void lock()`: 执行此方法时, 如果锁处于空闲状态, 当前线程将获取到锁. 相反, 如果锁已经被其他线程持有, 将禁用当前线程, 直到当前线程获取到锁. \n- `boolean tryLock()`：如果锁可用, 则获取锁, 并立即返回true, 否则返回false. 该方法和lock()的区别在于, tryLock()只是\"试图\"获取锁, 如果锁不可用, 不会导致当前线程被禁用, 当前线程仍然继续往下执行代码. 而lock()方法则是一定要获取到锁, 如果锁不可用, 就一直等待, 在未获得锁之前,当前线程并不继续向下执行. \n- `void unlock()`：执行此方法时, 当前线程将释放持有的锁. 锁只能由持有者释放, 如果线程并不持有锁, 却执行该方法, 可能导致异常的发生. \n- `Condition newCondition()`：条件对象，获取等待通知组件。该组件和当前的锁绑定，当前线程只有获取了锁，才能调用该组件的await()方法，而调用后，当前线程将缩放锁。 \n- `getHoldCount()` ：查询当前线程保持此锁的次数，也就是执行此线程执行lock方法的次数。 \n- `getQueueLength()`：返回正等待获取此锁的线程估计数，比如启动10个线程，1个线程获得锁，此时返回的是9 \n- `getWaitQueueLength(Condition condition)`：返回等待与此锁相关的给定条件的线程估计数。比如10个线程，用同一个condition对象，并且此时这10个线程都执行了condition对象的await方法，那么此时执行此方法返回10 \n- `hasWaiters(Condition condition)`：查询是否有线程等待与此锁有关的给定条件(condition)，对于指定contidion对象，有多少线程执行了condition.await方法 \n- `hasQueuedThread(Thread thread)`：查询给定线程是否等待获取此锁 \n- `hasQueuedThreads()`：是否有线程等待此锁 \n- `isFair()`：该锁是否公平锁 \n- `isHeldByCurrentThread()`： 当前线程是否保持锁锁定，线程的执行lock方法的前后分别是false和true \n- `isLock()`：此锁是否有任意线程占用 \n- `lockInterruptibly()`：如果当前线程未被中断，获取锁 \n- `tryLock()`：尝试获得锁，仅在调用时锁未被线程占用，获得锁 \n- `tryLock(long timeout TimeUnit unit)`：如果锁在给定等待时间内没有被另一个线程保持，则获取该锁。\n- **`ReentrantLock`:ReentantLock继承接口Lock并实现了接口中定义的方法，他是一种可重入锁，除了能完成synchronized所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。**\n\n\n## ReentrantLock 与Synchronized\n\n1. ReentrantLock通过方法lock()与unlock()来进行加锁与解锁操作，与synchronized会被JVM自动解锁机制不同，ReentrantLock加锁后需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。 \n2. ReentrantLock相比synchronized的优势是可中断、公平锁、多个锁。这种情况下需要使用ReentrantLock。\n\n```java\npublic class MyService {\n    private Lock lock = new ReentrantLock();\n    // lock=new ReentrantLock(true);//公平锁\n    // lock=new ReentrantLock(false);//非公平锁\n    private Condition condition = lock.newCondition();\n    public void testMethod() {\n        try {\n            lock.lock();\n            System.out.println(\"开始wait\");\n            condition.await();\n\n            condition.signal();\n            for (int i = 0; i < 5; i++) {\n                System.out.println(\"ThreadName=\" + Thread.currentThread().getName() + (\" \" + (i + 1)));\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n```\n\n1. Condition类的awiat方法和Object类的wait方法等效 \n2. Condition类的signal方法和Object类的notify方法等效 \n3. Condition类的signalAll方法和Object类的notifyAll方法等效 \n4. ReentrantLock类可以唤醒指定条件的线程，而object的唤醒是随机的\n\n## Semaphore信号量\n\n<p style=\"text-indent:2em\">\nSemaphore是一种基于计数的信号量。它可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号将会被阻塞。Semaphore可以用来构建一些对象池，资源池之类的，比如数据库连接池.\n</p>\n\n```java\nSemaphore semp = new Semaphore(5);\ntry { // 申请许可\n    semp.acquire();\n    try { // 业务逻辑\n    } catch (Exception e) {\n\n    } finally { // 释放许可\n        semp.release();\n    }\n} catch (InterruptedException e) {\n\n}\n```\n\n## 原子操作\n\n- AtomicInteger\n- AtomicBoolean\n- AtomicInteger\n- AtomicLong\n- AtomicReference<V>\n- 原子操作将原本类似于`i++`这种不是原子操作的变为原子操作\n\n```java\n@Data\n@AllArgsConstructor\npublic class User {\n    private String name;\n    private Integer age;\n}\npublic static void main( String[] args ) {\n    User user1 = new User(\"张三\", 23);\n    User user2 = new User(\"李四\", 25);\n    User user3 = new User(\"王五\", 20);\n\n\t//初始化为 user1\n    AtomicReference<User> atomicReference = new AtomicReference<>();\n    atomicReference.set(user1);\n\n\t//把 user2 赋给 atomicReference\n    atomicReference.compareAndSet(user1, user2);\n    System.out.println(atomicReference.get());\n\n\t//把 user3 赋给 atomicReference\n    atomicReference.compareAndSet(user1, user3);\n    System.out.println(atomicReference.get());\n}\n```\n\n\n## 公平锁、非公平锁、可重入锁\n\n<p style=\"text-indent:2em\">\nJVM按随机、就近原则分配锁的机制则称为不公平锁，ReentrantLock在构造函数中提供了是否公平锁的初始化方式，默认为非公平锁。非公平锁实际执行的效率要远远超出公平锁，除非程序有特殊需要，否则最常用非公平锁的分配机制。加锁前检查是否有排队等待的线程，优先排队等待的线程，先来先得。\n</p>\n\n<p style=\"text-indent:2em\">\n公平锁指的是锁的分配机制是公平的，通常先对锁提出获取请求的线程会先被分配到锁，ReentrantLock在构造函数中提供了是否公平锁的初始化方式来定义公平锁。加锁时不考虑排队等待问题，直接尝试获取锁，获取不到自动到队尾等待。非公平锁性能比公平锁高5~10倍，因为公平锁需要在多核的情况下维护一个队列。Java中的synchronized是非公平锁，ReentrantLock 默认的lock()方法采用的是非公平锁。\n</p>\n\n<p style=\"text-indent:2em\">\n本文里面讲的是广义上的可重入锁，而不是单指JAVA下的ReentrantLock。可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。在JAVA环境下 ReentrantLock 和synchronized 都是 可重入锁。\n</p>\n\n## 共享锁、独占锁\n\n<p style=\"text-indent:2em\">\n独占锁模式下，每次只能有一个线程能持有锁，ReentrantLock就是以独占方式实现的互斥锁。独占锁是一种悲观保守的加锁策略，它避免了读/读冲突，如果某个只读线程获取锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，因为读操作并不会影响数据的一致性。\n</p>\n\n<p style=\"text-indent:2em\">\n共享锁则允许多个线程同时获取锁，并发访问 共享资源，如：ReadWriteLock。共享锁则是一种乐观锁，它放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。AQS的内部类Node定义了两个常量SHARED和EXCLUSIVE，他们分别标识 AQS队列中等待线程的锁获取模式。java的并发包中提供了ReadWriteLock，读-写锁。它允许一个资源可以被多个读操作访问，或者被一个 写操作访问，但两者不能同时进行。\n</p>\n\n## 偏向锁、重量级锁、轻量级锁（Synchronized的底层优化）\n\n- 重量级锁也就是通常说synchronized的对象锁，它是通过对象的monitor进行实现的，当一个线程持有一个对象的monitor时，那么这个对象就处于锁定状态，且同时这种操作依赖操作系统，需要从用户态转到内核态，开销很大。\n- 轻量级锁，使用CAS命令代替互斥量，减少了开销，适用于线程交替执行同步块，如果存在同一时间访问同一锁的情况，就会导致轻量级锁膨胀为重量级锁。轻量级锁认为竞争存在，但是竞争的程度很轻，一般两个线程对于同一个锁的操作都会错开，或者说稍微等待一下（自旋），另一个线程就会释放锁。 但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁膨胀为重量级锁，重量级锁使除了拥有锁的线程以外的线程都阻塞，防止CPU空转。\n- CAS 即 compare and swap,比较并交换，从地址 V 读取值 A，执行多步计算来获得新值 B，然后使用 CAS 将 V 的值从 A 改为 B。如果 V 处的值尚未同时更改，则 CAS 操作成功。否则，将重新进行CAS操作。存在循环操作和ABA问题。\n- 偏向锁认为大多数情况下不存在多线程竞争，所以将对象一开始设置为偏向锁状态，偏向的线程访问资源时，不需要额外的操作，而非偏向线程需要判断是否竞争资源，从而升级锁。\n\n## 锁的优化\n\n- **减少锁持有时间**：只用在有线程安全要求的程序上加锁\n- **减小锁粒度**：将大对象（这个对象可能会被很多线程访问），拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁，轻量级锁成功率才会提高。最最典型的减小锁粒度的案例就是ConcurrentHashMap。\n- **锁分离**：最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，即保证了线程安全，又提高了性能。读写分离思想可以延伸，只要操作互不影响，锁就可以分离。比如LinkedBlockingQueue 从头部取出，从尾部放数据；\n- **锁粗化**：通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是，凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化 。\n- **锁消除**：锁消除是在编译器级别的事情。在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起。\n\n\n## 阻塞队列\n\n- ArrayBlockingQueue（公平、非公平）：数组实现的队列（FIFO）\n- LinkedBlockingQueue（两个独立锁提高并发）：可以同时生产和消费\n- PriorityBlockingQueue（compareTo排序实现优先）\n\n\n## volatile（变量可见性、禁止重排序）\n\n- 变量可见性：其一是保证该变量对所有线程可见，这里的可见性指的是当一个线程修改了变量的值，那么新的值对于其他线程是可以立即获取的。\n- 禁止重排序：volatile 禁止了指令重排。\n- 其中需要注意的是被volatile修饰的变量在单次读取操作或者写操作都是原子性的，但是类似于`i++`这种同时读取和写的操作不是原子性的。\n\n## 线程通信常用方法\n\n```java\npublic class MyData {\n    private int j = 0;\n\n    public synchronized void add() {\n        j++;\n        System.out.println(\"线程\" + Thread.currentThread().getName() + \"j为：\" + j);\n    }\n\n    public synchronized void dec() {\n        j--;\n        System.out.println(\"线程\" + Thread.currentThread().getName() + \"j为：\" + j);\n    }\n\n    public int getData() {\n        return j;\n    }\n}\n\npublic class AddRunnable implements Runnable {\n    MyData data;\n\n    public AddRunnable(MyData data) {\n        this.data = data;\n    }\n\n    public void run() {\n        data.add();\n    }\n}\n\npublic class DecRunnable implements Runnable {\n    MyData data;\n\n    public DecRunnable(MyData data) {\n        this.data = data;\n    }\n\n    public void run() {\n        data.dec();\n    }\n}\n\npublic static void main(String[] args) {\n    MyData data = new MyData();\n    Runnable add = new AddRunnable(data);\n    Runnable dec = new DecRunnable(data);\n    for (int i = 0; i < 2; i++) {\n        new Thread(add).start();\n        new Thread(dec).start();\n    }\n}\n```\n\n\n\n\n\n\n\n","source":"_posts/JAVA/Lock.md","raw":"---\ntitle: Lock\ndate: 2021-12-20 16:50:00\ncategories:\n  - JAVA\ntags:\n  - Lock\nauthor: Fanrencli\n---\n\n## 锁相关的概念\n\n- 乐观锁\n    - 认为读多写少，遇到并发写的可能性低，每次去读取数据的时候不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则要重复读-比较-写的操作。通过CAS操作实现的，CAS是一种更新的原子操作，比较当前值跟传入值是否一样，一样则更新，否则失败。\n- 悲观锁\n    - 认为写多，遇到并发写的可能性高，每次在读写数据的时候都会上锁，这样别人想读写这个数据就会block直到拿到锁。java中的悲观锁就是Synchronized。\n- 自旋锁\n    - 如果持有锁的线程能在很短时间内释放锁资源，那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞挂起状态，它们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换的消耗\n\n\n## Synchronized同步锁\n\n- Wait Set：调用wait方法被阻塞的线程被放置在这里； \n- Contention List：竞争队列，所有请求锁的线程首先被放在这个竞争队列中； \n- Entry List：Contention List中那些有资格成为候选资源的线程被移动到Entry List中； \n- OnDeck：任意时刻，最多只有一个线程正在竞争锁资源，该线程被成为OnDeck； \n- Owner：当前已经获取到所资源的线程被称为Owner； 6) !Owner：当前释放锁的线程。\n\n![Synchronized实现原理](http://39.106.34.39:4567/20211222223047.png)\n\n- Owner线程会在unlock时，将ContentionList中的部分线程迁移到EntryList中，并指定EntryList中的某个线程为OnDeck线程（一般是最先进去的那个线程）。\n- Owner线程并不直接把锁传递给OnDeck线程，而是把锁竞争的权利交给OnDeck，OnDeck需要重新竞争锁。这样虽然牺牲了一些公平性，但是能极大的提升系统的吞吐量，在JVM中，也把这种选择行为称之为“竞争切换”。\n- OnDeck线程获取到锁资源后会变为Owner线程，而没有得到锁资源的仍然停留在EntryList中。如果Owner线程被wait方法阻塞，则转移到WaitSet队列中，直到某个时刻通过notify或者notifyAll唤醒，会重新进去EntryList中。\n- 处于ContentionList、EntryList、WaitSet中的线程都处于阻塞状态，该阻塞是由操作系统来完成的（Linux内核下采用pthread_mutex_lock内核函数实现的）。\n- Synchronized是非公平锁。 Synchronized在线程进入ContentionList时，等待的线程会先尝试自旋获取锁，如果获取不到就进入ContentionList，这明显对于已经进入队列的线程是不公平的，还有一个不公平的事情就是自旋获取锁的线程还可能直接抢占OnDeck线程的锁资源。\n- 每个对象都有个monitor对象，加锁就是在竞争monitor对象，代码块加锁是在前后分别加上monitorenter和monitorexit指令来实现的，方法加锁是通过一个标记位来判断的\n\n\n## Lock接口\n\n- `void lock()`: 执行此方法时, 如果锁处于空闲状态, 当前线程将获取到锁. 相反, 如果锁已经被其他线程持有, 将禁用当前线程, 直到当前线程获取到锁. \n- `boolean tryLock()`：如果锁可用, 则获取锁, 并立即返回true, 否则返回false. 该方法和lock()的区别在于, tryLock()只是\"试图\"获取锁, 如果锁不可用, 不会导致当前线程被禁用, 当前线程仍然继续往下执行代码. 而lock()方法则是一定要获取到锁, 如果锁不可用, 就一直等待, 在未获得锁之前,当前线程并不继续向下执行. \n- `void unlock()`：执行此方法时, 当前线程将释放持有的锁. 锁只能由持有者释放, 如果线程并不持有锁, 却执行该方法, 可能导致异常的发生. \n- `Condition newCondition()`：条件对象，获取等待通知组件。该组件和当前的锁绑定，当前线程只有获取了锁，才能调用该组件的await()方法，而调用后，当前线程将缩放锁。 \n- `getHoldCount()` ：查询当前线程保持此锁的次数，也就是执行此线程执行lock方法的次数。 \n- `getQueueLength()`：返回正等待获取此锁的线程估计数，比如启动10个线程，1个线程获得锁，此时返回的是9 \n- `getWaitQueueLength(Condition condition)`：返回等待与此锁相关的给定条件的线程估计数。比如10个线程，用同一个condition对象，并且此时这10个线程都执行了condition对象的await方法，那么此时执行此方法返回10 \n- `hasWaiters(Condition condition)`：查询是否有线程等待与此锁有关的给定条件(condition)，对于指定contidion对象，有多少线程执行了condition.await方法 \n- `hasQueuedThread(Thread thread)`：查询给定线程是否等待获取此锁 \n- `hasQueuedThreads()`：是否有线程等待此锁 \n- `isFair()`：该锁是否公平锁 \n- `isHeldByCurrentThread()`： 当前线程是否保持锁锁定，线程的执行lock方法的前后分别是false和true \n- `isLock()`：此锁是否有任意线程占用 \n- `lockInterruptibly()`：如果当前线程未被中断，获取锁 \n- `tryLock()`：尝试获得锁，仅在调用时锁未被线程占用，获得锁 \n- `tryLock(long timeout TimeUnit unit)`：如果锁在给定等待时间内没有被另一个线程保持，则获取该锁。\n- **`ReentrantLock`:ReentantLock继承接口Lock并实现了接口中定义的方法，他是一种可重入锁，除了能完成synchronized所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。**\n\n\n## ReentrantLock 与Synchronized\n\n1. ReentrantLock通过方法lock()与unlock()来进行加锁与解锁操作，与synchronized会被JVM自动解锁机制不同，ReentrantLock加锁后需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。 \n2. ReentrantLock相比synchronized的优势是可中断、公平锁、多个锁。这种情况下需要使用ReentrantLock。\n\n```java\npublic class MyService {\n    private Lock lock = new ReentrantLock();\n    // lock=new ReentrantLock(true);//公平锁\n    // lock=new ReentrantLock(false);//非公平锁\n    private Condition condition = lock.newCondition();\n    public void testMethod() {\n        try {\n            lock.lock();\n            System.out.println(\"开始wait\");\n            condition.await();\n\n            condition.signal();\n            for (int i = 0; i < 5; i++) {\n                System.out.println(\"ThreadName=\" + Thread.currentThread().getName() + (\" \" + (i + 1)));\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n```\n\n1. Condition类的awiat方法和Object类的wait方法等效 \n2. Condition类的signal方法和Object类的notify方法等效 \n3. Condition类的signalAll方法和Object类的notifyAll方法等效 \n4. ReentrantLock类可以唤醒指定条件的线程，而object的唤醒是随机的\n\n## Semaphore信号量\n\n<p style=\"text-indent:2em\">\nSemaphore是一种基于计数的信号量。它可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号将会被阻塞。Semaphore可以用来构建一些对象池，资源池之类的，比如数据库连接池.\n</p>\n\n```java\nSemaphore semp = new Semaphore(5);\ntry { // 申请许可\n    semp.acquire();\n    try { // 业务逻辑\n    } catch (Exception e) {\n\n    } finally { // 释放许可\n        semp.release();\n    }\n} catch (InterruptedException e) {\n\n}\n```\n\n## 原子操作\n\n- AtomicInteger\n- AtomicBoolean\n- AtomicInteger\n- AtomicLong\n- AtomicReference<V>\n- 原子操作将原本类似于`i++`这种不是原子操作的变为原子操作\n\n```java\n@Data\n@AllArgsConstructor\npublic class User {\n    private String name;\n    private Integer age;\n}\npublic static void main( String[] args ) {\n    User user1 = new User(\"张三\", 23);\n    User user2 = new User(\"李四\", 25);\n    User user3 = new User(\"王五\", 20);\n\n\t//初始化为 user1\n    AtomicReference<User> atomicReference = new AtomicReference<>();\n    atomicReference.set(user1);\n\n\t//把 user2 赋给 atomicReference\n    atomicReference.compareAndSet(user1, user2);\n    System.out.println(atomicReference.get());\n\n\t//把 user3 赋给 atomicReference\n    atomicReference.compareAndSet(user1, user3);\n    System.out.println(atomicReference.get());\n}\n```\n\n\n## 公平锁、非公平锁、可重入锁\n\n<p style=\"text-indent:2em\">\nJVM按随机、就近原则分配锁的机制则称为不公平锁，ReentrantLock在构造函数中提供了是否公平锁的初始化方式，默认为非公平锁。非公平锁实际执行的效率要远远超出公平锁，除非程序有特殊需要，否则最常用非公平锁的分配机制。加锁前检查是否有排队等待的线程，优先排队等待的线程，先来先得。\n</p>\n\n<p style=\"text-indent:2em\">\n公平锁指的是锁的分配机制是公平的，通常先对锁提出获取请求的线程会先被分配到锁，ReentrantLock在构造函数中提供了是否公平锁的初始化方式来定义公平锁。加锁时不考虑排队等待问题，直接尝试获取锁，获取不到自动到队尾等待。非公平锁性能比公平锁高5~10倍，因为公平锁需要在多核的情况下维护一个队列。Java中的synchronized是非公平锁，ReentrantLock 默认的lock()方法采用的是非公平锁。\n</p>\n\n<p style=\"text-indent:2em\">\n本文里面讲的是广义上的可重入锁，而不是单指JAVA下的ReentrantLock。可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。在JAVA环境下 ReentrantLock 和synchronized 都是 可重入锁。\n</p>\n\n## 共享锁、独占锁\n\n<p style=\"text-indent:2em\">\n独占锁模式下，每次只能有一个线程能持有锁，ReentrantLock就是以独占方式实现的互斥锁。独占锁是一种悲观保守的加锁策略，它避免了读/读冲突，如果某个只读线程获取锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，因为读操作并不会影响数据的一致性。\n</p>\n\n<p style=\"text-indent:2em\">\n共享锁则允许多个线程同时获取锁，并发访问 共享资源，如：ReadWriteLock。共享锁则是一种乐观锁，它放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。AQS的内部类Node定义了两个常量SHARED和EXCLUSIVE，他们分别标识 AQS队列中等待线程的锁获取模式。java的并发包中提供了ReadWriteLock，读-写锁。它允许一个资源可以被多个读操作访问，或者被一个 写操作访问，但两者不能同时进行。\n</p>\n\n## 偏向锁、重量级锁、轻量级锁（Synchronized的底层优化）\n\n- 重量级锁也就是通常说synchronized的对象锁，它是通过对象的monitor进行实现的，当一个线程持有一个对象的monitor时，那么这个对象就处于锁定状态，且同时这种操作依赖操作系统，需要从用户态转到内核态，开销很大。\n- 轻量级锁，使用CAS命令代替互斥量，减少了开销，适用于线程交替执行同步块，如果存在同一时间访问同一锁的情况，就会导致轻量级锁膨胀为重量级锁。轻量级锁认为竞争存在，但是竞争的程度很轻，一般两个线程对于同一个锁的操作都会错开，或者说稍微等待一下（自旋），另一个线程就会释放锁。 但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁膨胀为重量级锁，重量级锁使除了拥有锁的线程以外的线程都阻塞，防止CPU空转。\n- CAS 即 compare and swap,比较并交换，从地址 V 读取值 A，执行多步计算来获得新值 B，然后使用 CAS 将 V 的值从 A 改为 B。如果 V 处的值尚未同时更改，则 CAS 操作成功。否则，将重新进行CAS操作。存在循环操作和ABA问题。\n- 偏向锁认为大多数情况下不存在多线程竞争，所以将对象一开始设置为偏向锁状态，偏向的线程访问资源时，不需要额外的操作，而非偏向线程需要判断是否竞争资源，从而升级锁。\n\n## 锁的优化\n\n- **减少锁持有时间**：只用在有线程安全要求的程序上加锁\n- **减小锁粒度**：将大对象（这个对象可能会被很多线程访问），拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁，轻量级锁成功率才会提高。最最典型的减小锁粒度的案例就是ConcurrentHashMap。\n- **锁分离**：最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，即保证了线程安全，又提高了性能。读写分离思想可以延伸，只要操作互不影响，锁就可以分离。比如LinkedBlockingQueue 从头部取出，从尾部放数据；\n- **锁粗化**：通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是，凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化 。\n- **锁消除**：锁消除是在编译器级别的事情。在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起。\n\n\n## 阻塞队列\n\n- ArrayBlockingQueue（公平、非公平）：数组实现的队列（FIFO）\n- LinkedBlockingQueue（两个独立锁提高并发）：可以同时生产和消费\n- PriorityBlockingQueue（compareTo排序实现优先）\n\n\n## volatile（变量可见性、禁止重排序）\n\n- 变量可见性：其一是保证该变量对所有线程可见，这里的可见性指的是当一个线程修改了变量的值，那么新的值对于其他线程是可以立即获取的。\n- 禁止重排序：volatile 禁止了指令重排。\n- 其中需要注意的是被volatile修饰的变量在单次读取操作或者写操作都是原子性的，但是类似于`i++`这种同时读取和写的操作不是原子性的。\n\n## 线程通信常用方法\n\n```java\npublic class MyData {\n    private int j = 0;\n\n    public synchronized void add() {\n        j++;\n        System.out.println(\"线程\" + Thread.currentThread().getName() + \"j为：\" + j);\n    }\n\n    public synchronized void dec() {\n        j--;\n        System.out.println(\"线程\" + Thread.currentThread().getName() + \"j为：\" + j);\n    }\n\n    public int getData() {\n        return j;\n    }\n}\n\npublic class AddRunnable implements Runnable {\n    MyData data;\n\n    public AddRunnable(MyData data) {\n        this.data = data;\n    }\n\n    public void run() {\n        data.add();\n    }\n}\n\npublic class DecRunnable implements Runnable {\n    MyData data;\n\n    public DecRunnable(MyData data) {\n        this.data = data;\n    }\n\n    public void run() {\n        data.dec();\n    }\n}\n\npublic static void main(String[] args) {\n    MyData data = new MyData();\n    Runnable add = new AddRunnable(data);\n    Runnable dec = new DecRunnable(data);\n    for (int i = 0; i < 2; i++) {\n        new Thread(add).start();\n        new Thread(dec).start();\n    }\n}\n```\n\n\n\n\n\n\n\n","slug":"JAVA/Lock","published":1,"updated":"2021-12-23T07:09:08.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuhigbh000a8suo8vj46vlt","content":"<h2 id=\"锁相关的概念\"><a href=\"#锁相关的概念\" class=\"headerlink\" title=\"锁相关的概念\"></a>锁相关的概念</h2><ul>\n<li>乐观锁<ul>\n<li>认为读多写少，遇到并发写的可能性低，每次去读取数据的时候不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则要重复读-比较-写的操作。通过CAS操作实现的，CAS是一种更新的原子操作，比较当前值跟传入值是否一样，一样则更新，否则失败。</li>\n</ul>\n</li>\n<li>悲观锁<ul>\n<li>认为写多，遇到并发写的可能性高，每次在读写数据的时候都会上锁，这样别人想读写这个数据就会block直到拿到锁。java中的悲观锁就是Synchronized。</li>\n</ul>\n</li>\n<li>自旋锁<ul>\n<li>如果持有锁的线程能在很短时间内释放锁资源，那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞挂起状态，它们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换的消耗</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Synchronized同步锁\"><a href=\"#Synchronized同步锁\" class=\"headerlink\" title=\"Synchronized同步锁\"></a>Synchronized同步锁</h2><ul>\n<li>Wait Set：调用wait方法被阻塞的线程被放置在这里； </li>\n<li>Contention List：竞争队列，所有请求锁的线程首先被放在这个竞争队列中； </li>\n<li>Entry List：Contention List中那些有资格成为候选资源的线程被移动到Entry List中； </li>\n<li>OnDeck：任意时刻，最多只有一个线程正在竞争锁资源，该线程被成为OnDeck； </li>\n<li>Owner：当前已经获取到所资源的线程被称为Owner； 6) !Owner：当前释放锁的线程。</li>\n</ul>\n<p><img src=\"http://39.106.34.39:4567/20211222223047.png\" alt=\"Synchronized实现原理\"></p>\n<ul>\n<li>Owner线程会在unlock时，将ContentionList中的部分线程迁移到EntryList中，并指定EntryList中的某个线程为OnDeck线程（一般是最先进去的那个线程）。</li>\n<li>Owner线程并不直接把锁传递给OnDeck线程，而是把锁竞争的权利交给OnDeck，OnDeck需要重新竞争锁。这样虽然牺牲了一些公平性，但是能极大的提升系统的吞吐量，在JVM中，也把这种选择行为称之为“竞争切换”。</li>\n<li>OnDeck线程获取到锁资源后会变为Owner线程，而没有得到锁资源的仍然停留在EntryList中。如果Owner线程被wait方法阻塞，则转移到WaitSet队列中，直到某个时刻通过notify或者notifyAll唤醒，会重新进去EntryList中。</li>\n<li>处于ContentionList、EntryList、WaitSet中的线程都处于阻塞状态，该阻塞是由操作系统来完成的（Linux内核下采用pthread_mutex_lock内核函数实现的）。</li>\n<li>Synchronized是非公平锁。 Synchronized在线程进入ContentionList时，等待的线程会先尝试自旋获取锁，如果获取不到就进入ContentionList，这明显对于已经进入队列的线程是不公平的，还有一个不公平的事情就是自旋获取锁的线程还可能直接抢占OnDeck线程的锁资源。</li>\n<li>每个对象都有个monitor对象，加锁就是在竞争monitor对象，代码块加锁是在前后分别加上monitorenter和monitorexit指令来实现的，方法加锁是通过一个标记位来判断的</li>\n</ul>\n<h2 id=\"Lock接口\"><a href=\"#Lock接口\" class=\"headerlink\" title=\"Lock接口\"></a>Lock接口</h2><ul>\n<li><code>void lock()</code>: 执行此方法时, 如果锁处于空闲状态, 当前线程将获取到锁. 相反, 如果锁已经被其他线程持有, 将禁用当前线程, 直到当前线程获取到锁. </li>\n<li><code>boolean tryLock()</code>：如果锁可用, 则获取锁, 并立即返回true, 否则返回false. 该方法和lock()的区别在于, tryLock()只是”试图”获取锁, 如果锁不可用, 不会导致当前线程被禁用, 当前线程仍然继续往下执行代码. 而lock()方法则是一定要获取到锁, 如果锁不可用, 就一直等待, 在未获得锁之前,当前线程并不继续向下执行. </li>\n<li><code>void unlock()</code>：执行此方法时, 当前线程将释放持有的锁. 锁只能由持有者释放, 如果线程并不持有锁, 却执行该方法, 可能导致异常的发生. </li>\n<li><code>Condition newCondition()</code>：条件对象，获取等待通知组件。该组件和当前的锁绑定，当前线程只有获取了锁，才能调用该组件的await()方法，而调用后，当前线程将缩放锁。 </li>\n<li><code>getHoldCount()</code> ：查询当前线程保持此锁的次数，也就是执行此线程执行lock方法的次数。 </li>\n<li><code>getQueueLength()</code>：返回正等待获取此锁的线程估计数，比如启动10个线程，1个线程获得锁，此时返回的是9 </li>\n<li><code>getWaitQueueLength(Condition condition)</code>：返回等待与此锁相关的给定条件的线程估计数。比如10个线程，用同一个condition对象，并且此时这10个线程都执行了condition对象的await方法，那么此时执行此方法返回10 </li>\n<li><code>hasWaiters(Condition condition)</code>：查询是否有线程等待与此锁有关的给定条件(condition)，对于指定contidion对象，有多少线程执行了condition.await方法 </li>\n<li><code>hasQueuedThread(Thread thread)</code>：查询给定线程是否等待获取此锁 </li>\n<li><code>hasQueuedThreads()</code>：是否有线程等待此锁 </li>\n<li><code>isFair()</code>：该锁是否公平锁 </li>\n<li><code>isHeldByCurrentThread()</code>： 当前线程是否保持锁锁定，线程的执行lock方法的前后分别是false和true </li>\n<li><code>isLock()</code>：此锁是否有任意线程占用 </li>\n<li><code>lockInterruptibly()</code>：如果当前线程未被中断，获取锁 </li>\n<li><code>tryLock()</code>：尝试获得锁，仅在调用时锁未被线程占用，获得锁 </li>\n<li><code>tryLock(long timeout TimeUnit unit)</code>：如果锁在给定等待时间内没有被另一个线程保持，则获取该锁。</li>\n<li><strong><code>ReentrantLock</code>:ReentantLock继承接口Lock并实现了接口中定义的方法，他是一种可重入锁，除了能完成synchronized所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。</strong></li>\n</ul>\n<h2 id=\"ReentrantLock-与Synchronized\"><a href=\"#ReentrantLock-与Synchronized\" class=\"headerlink\" title=\"ReentrantLock 与Synchronized\"></a>ReentrantLock 与Synchronized</h2><ol>\n<li>ReentrantLock通过方法lock()与unlock()来进行加锁与解锁操作，与synchronized会被JVM自动解锁机制不同，ReentrantLock加锁后需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。 </li>\n<li>ReentrantLock相比synchronized的优势是可中断、公平锁、多个锁。这种情况下需要使用ReentrantLock。</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> Lock lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// lock=new ReentrantLock(true);//公平锁</span>\n    <span class=\"token comment\" spellcheck=\"true\">// lock=new ReentrantLock(false);//非公平锁</span>\n    <span class=\"token keyword\">private</span> Condition condition <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始wait\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            condition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            condition<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadName=\"</span> <span class=\"token operator\">+</span> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ol>\n<li>Condition类的awiat方法和Object类的wait方法等效 </li>\n<li>Condition类的signal方法和Object类的notify方法等效 </li>\n<li>Condition类的signalAll方法和Object类的notifyAll方法等效 </li>\n<li>ReentrantLock类可以唤醒指定条件的线程，而object的唤醒是随机的</li>\n</ol>\n<h2 id=\"Semaphore信号量\"><a href=\"#Semaphore信号量\" class=\"headerlink\" title=\"Semaphore信号量\"></a>Semaphore信号量</h2><p style=\"text-indent:2em\">\nSemaphore是一种基于计数的信号量。它可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号将会被阻塞。Semaphore可以用来构建一些对象池，资源池之类的，比如数据库连接池.\n</p>\n\n<pre class=\" language-java\"><code class=\"language-java\">Semaphore semp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 申请许可</span>\n    semp<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 业务逻辑</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 释放许可</span>\n        semp<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"原子操作\"><a href=\"#原子操作\" class=\"headerlink\" title=\"原子操作\"></a>原子操作</h2><ul>\n<li>AtomicInteger</li>\n<li>AtomicBoolean</li>\n<li>AtomicInteger</li>\n<li>AtomicLong</li>\n<li>AtomicReference<v></v></li>\n<li>原子操作将原本类似于<code>i++</code>这种不是原子操作的变为原子操作</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Integer age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    User user1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    User user2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    User user3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//初始化为 user1</span>\n    AtomicReference<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> atomicReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicReference</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    atomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//把 user2 赋给 atomicReference</span>\n    atomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">,</span> user2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>atomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//把 user3 赋给 atomicReference</span>\n    atomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">,</span> user3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>atomicReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"公平锁、非公平锁、可重入锁\"><a href=\"#公平锁、非公平锁、可重入锁\" class=\"headerlink\" title=\"公平锁、非公平锁、可重入锁\"></a>公平锁、非公平锁、可重入锁</h2><p style=\"text-indent:2em\">\nJVM按随机、就近原则分配锁的机制则称为不公平锁，ReentrantLock在构造函数中提供了是否公平锁的初始化方式，默认为非公平锁。非公平锁实际执行的效率要远远超出公平锁，除非程序有特殊需要，否则最常用非公平锁的分配机制。加锁前检查是否有排队等待的线程，优先排队等待的线程，先来先得。\n</p>\n\n<p style=\"text-indent:2em\">\n公平锁指的是锁的分配机制是公平的，通常先对锁提出获取请求的线程会先被分配到锁，ReentrantLock在构造函数中提供了是否公平锁的初始化方式来定义公平锁。加锁时不考虑排队等待问题，直接尝试获取锁，获取不到自动到队尾等待。非公平锁性能比公平锁高5~10倍，因为公平锁需要在多核的情况下维护一个队列。Java中的synchronized是非公平锁，ReentrantLock 默认的lock()方法采用的是非公平锁。\n</p>\n\n<p style=\"text-indent:2em\">\n本文里面讲的是广义上的可重入锁，而不是单指JAVA下的ReentrantLock。可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。在JAVA环境下 ReentrantLock 和synchronized 都是 可重入锁。\n</p>\n\n<h2 id=\"共享锁、独占锁\"><a href=\"#共享锁、独占锁\" class=\"headerlink\" title=\"共享锁、独占锁\"></a>共享锁、独占锁</h2><p style=\"text-indent:2em\">\n独占锁模式下，每次只能有一个线程能持有锁，ReentrantLock就是以独占方式实现的互斥锁。独占锁是一种悲观保守的加锁策略，它避免了读/读冲突，如果某个只读线程获取锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，因为读操作并不会影响数据的一致性。\n</p>\n\n<p style=\"text-indent:2em\">\n共享锁则允许多个线程同时获取锁，并发访问 共享资源，如：ReadWriteLock。共享锁则是一种乐观锁，它放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。AQS的内部类Node定义了两个常量SHARED和EXCLUSIVE，他们分别标识 AQS队列中等待线程的锁获取模式。java的并发包中提供了ReadWriteLock，读-写锁。它允许一个资源可以被多个读操作访问，或者被一个 写操作访问，但两者不能同时进行。\n</p>\n\n<h2 id=\"偏向锁、重量级锁、轻量级锁（Synchronized的底层优化）\"><a href=\"#偏向锁、重量级锁、轻量级锁（Synchronized的底层优化）\" class=\"headerlink\" title=\"偏向锁、重量级锁、轻量级锁（Synchronized的底层优化）\"></a>偏向锁、重量级锁、轻量级锁（Synchronized的底层优化）</h2><ul>\n<li>重量级锁也就是通常说synchronized的对象锁，它是通过对象的monitor进行实现的，当一个线程持有一个对象的monitor时，那么这个对象就处于锁定状态，且同时这种操作依赖操作系统，需要从用户态转到内核态，开销很大。</li>\n<li>轻量级锁，使用CAS命令代替互斥量，减少了开销，适用于线程交替执行同步块，如果存在同一时间访问同一锁的情况，就会导致轻量级锁膨胀为重量级锁。轻量级锁认为竞争存在，但是竞争的程度很轻，一般两个线程对于同一个锁的操作都会错开，或者说稍微等待一下（自旋），另一个线程就会释放锁。 但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁膨胀为重量级锁，重量级锁使除了拥有锁的线程以外的线程都阻塞，防止CPU空转。</li>\n<li>CAS 即 compare and swap,比较并交换，从地址 V 读取值 A，执行多步计算来获得新值 B，然后使用 CAS 将 V 的值从 A 改为 B。如果 V 处的值尚未同时更改，则 CAS 操作成功。否则，将重新进行CAS操作。存在循环操作和ABA问题。</li>\n<li>偏向锁认为大多数情况下不存在多线程竞争，所以将对象一开始设置为偏向锁状态，偏向的线程访问资源时，不需要额外的操作，而非偏向线程需要判断是否竞争资源，从而升级锁。</li>\n</ul>\n<h2 id=\"锁的优化\"><a href=\"#锁的优化\" class=\"headerlink\" title=\"锁的优化\"></a>锁的优化</h2><ul>\n<li><strong>减少锁持有时间</strong>：只用在有线程安全要求的程序上加锁</li>\n<li><strong>减小锁粒度</strong>：将大对象（这个对象可能会被很多线程访问），拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁，轻量级锁成功率才会提高。最最典型的减小锁粒度的案例就是ConcurrentHashMap。</li>\n<li><strong>锁分离</strong>：最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，即保证了线程安全，又提高了性能。读写分离思想可以延伸，只要操作互不影响，锁就可以分离。比如LinkedBlockingQueue 从头部取出，从尾部放数据；</li>\n<li><strong>锁粗化</strong>：通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是，凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化 。</li>\n<li><strong>锁消除</strong>：锁消除是在编译器级别的事情。在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起。</li>\n</ul>\n<h2 id=\"阻塞队列\"><a href=\"#阻塞队列\" class=\"headerlink\" title=\"阻塞队列\"></a>阻塞队列</h2><ul>\n<li>ArrayBlockingQueue（公平、非公平）：数组实现的队列（FIFO）</li>\n<li>LinkedBlockingQueue（两个独立锁提高并发）：可以同时生产和消费</li>\n<li>PriorityBlockingQueue（compareTo排序实现优先）</li>\n</ul>\n<h2 id=\"volatile（变量可见性、禁止重排序）\"><a href=\"#volatile（变量可见性、禁止重排序）\" class=\"headerlink\" title=\"volatile（变量可见性、禁止重排序）\"></a>volatile（变量可见性、禁止重排序）</h2><ul>\n<li>变量可见性：其一是保证该变量对所有线程可见，这里的可见性指的是当一个线程修改了变量的值，那么新的值对于其他线程是可以立即获取的。</li>\n<li>禁止重排序：volatile 禁止了指令重排。</li>\n<li>其中需要注意的是被volatile修饰的变量在单次读取操作或者写操作都是原子性的，但是类似于<code>i++</code>这种同时读取和写的操作不是原子性的。</li>\n</ul>\n<h2 id=\"线程通信常用方法\"><a href=\"#线程通信常用方法\" class=\"headerlink\" title=\"线程通信常用方法\"></a>线程通信常用方法</h2><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyData</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程\"</span> <span class=\"token operator\">+</span> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"j为：\"</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程\"</span> <span class=\"token operator\">+</span> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"j为：\"</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    MyData data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">AddRunnable</span><span class=\"token punctuation\">(</span>MyData data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DecRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    MyData data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DecRunnable</span><span class=\"token punctuation\">(</span>MyData data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        data<span class=\"token punctuation\">.</span><span class=\"token function\">dec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    MyData data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Runnable add <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AddRunnable</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Runnable dec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DecRunnable</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>dec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"锁相关的概念\"><a href=\"#锁相关的概念\" class=\"headerlink\" title=\"锁相关的概念\"></a>锁相关的概念</h2><ul>\n<li>乐观锁<ul>\n<li>认为读多写少，遇到并发写的可能性低，每次去读取数据的时候不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则要重复读-比较-写的操作。通过CAS操作实现的，CAS是一种更新的原子操作，比较当前值跟传入值是否一样，一样则更新，否则失败。</li>\n</ul>\n</li>\n<li>悲观锁<ul>\n<li>认为写多，遇到并发写的可能性高，每次在读写数据的时候都会上锁，这样别人想读写这个数据就会block直到拿到锁。java中的悲观锁就是Synchronized。</li>\n</ul>\n</li>\n<li>自旋锁<ul>\n<li>如果持有锁的线程能在很短时间内释放锁资源，那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞挂起状态，它们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换的消耗</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Synchronized同步锁\"><a href=\"#Synchronized同步锁\" class=\"headerlink\" title=\"Synchronized同步锁\"></a>Synchronized同步锁</h2><ul>\n<li>Wait Set：调用wait方法被阻塞的线程被放置在这里； </li>\n<li>Contention List：竞争队列，所有请求锁的线程首先被放在这个竞争队列中； </li>\n<li>Entry List：Contention List中那些有资格成为候选资源的线程被移动到Entry List中； </li>\n<li>OnDeck：任意时刻，最多只有一个线程正在竞争锁资源，该线程被成为OnDeck； </li>\n<li>Owner：当前已经获取到所资源的线程被称为Owner； 6) !Owner：当前释放锁的线程。</li>\n</ul>\n<p><img src=\"http://39.106.34.39:4567/20211222223047.png\" alt=\"Synchronized实现原理\"></p>\n<ul>\n<li>Owner线程会在unlock时，将ContentionList中的部分线程迁移到EntryList中，并指定EntryList中的某个线程为OnDeck线程（一般是最先进去的那个线程）。</li>\n<li>Owner线程并不直接把锁传递给OnDeck线程，而是把锁竞争的权利交给OnDeck，OnDeck需要重新竞争锁。这样虽然牺牲了一些公平性，但是能极大的提升系统的吞吐量，在JVM中，也把这种选择行为称之为“竞争切换”。</li>\n<li>OnDeck线程获取到锁资源后会变为Owner线程，而没有得到锁资源的仍然停留在EntryList中。如果Owner线程被wait方法阻塞，则转移到WaitSet队列中，直到某个时刻通过notify或者notifyAll唤醒，会重新进去EntryList中。</li>\n<li>处于ContentionList、EntryList、WaitSet中的线程都处于阻塞状态，该阻塞是由操作系统来完成的（Linux内核下采用pthread_mutex_lock内核函数实现的）。</li>\n<li>Synchronized是非公平锁。 Synchronized在线程进入ContentionList时，等待的线程会先尝试自旋获取锁，如果获取不到就进入ContentionList，这明显对于已经进入队列的线程是不公平的，还有一个不公平的事情就是自旋获取锁的线程还可能直接抢占OnDeck线程的锁资源。</li>\n<li>每个对象都有个monitor对象，加锁就是在竞争monitor对象，代码块加锁是在前后分别加上monitorenter和monitorexit指令来实现的，方法加锁是通过一个标记位来判断的</li>\n</ul>\n<h2 id=\"Lock接口\"><a href=\"#Lock接口\" class=\"headerlink\" title=\"Lock接口\"></a>Lock接口</h2><ul>\n<li><code>void lock()</code>: 执行此方法时, 如果锁处于空闲状态, 当前线程将获取到锁. 相反, 如果锁已经被其他线程持有, 将禁用当前线程, 直到当前线程获取到锁. </li>\n<li><code>boolean tryLock()</code>：如果锁可用, 则获取锁, 并立即返回true, 否则返回false. 该方法和lock()的区别在于, tryLock()只是”试图”获取锁, 如果锁不可用, 不会导致当前线程被禁用, 当前线程仍然继续往下执行代码. 而lock()方法则是一定要获取到锁, 如果锁不可用, 就一直等待, 在未获得锁之前,当前线程并不继续向下执行. </li>\n<li><code>void unlock()</code>：执行此方法时, 当前线程将释放持有的锁. 锁只能由持有者释放, 如果线程并不持有锁, 却执行该方法, 可能导致异常的发生. </li>\n<li><code>Condition newCondition()</code>：条件对象，获取等待通知组件。该组件和当前的锁绑定，当前线程只有获取了锁，才能调用该组件的await()方法，而调用后，当前线程将缩放锁。 </li>\n<li><code>getHoldCount()</code> ：查询当前线程保持此锁的次数，也就是执行此线程执行lock方法的次数。 </li>\n<li><code>getQueueLength()</code>：返回正等待获取此锁的线程估计数，比如启动10个线程，1个线程获得锁，此时返回的是9 </li>\n<li><code>getWaitQueueLength(Condition condition)</code>：返回等待与此锁相关的给定条件的线程估计数。比如10个线程，用同一个condition对象，并且此时这10个线程都执行了condition对象的await方法，那么此时执行此方法返回10 </li>\n<li><code>hasWaiters(Condition condition)</code>：查询是否有线程等待与此锁有关的给定条件(condition)，对于指定contidion对象，有多少线程执行了condition.await方法 </li>\n<li><code>hasQueuedThread(Thread thread)</code>：查询给定线程是否等待获取此锁 </li>\n<li><code>hasQueuedThreads()</code>：是否有线程等待此锁 </li>\n<li><code>isFair()</code>：该锁是否公平锁 </li>\n<li><code>isHeldByCurrentThread()</code>： 当前线程是否保持锁锁定，线程的执行lock方法的前后分别是false和true </li>\n<li><code>isLock()</code>：此锁是否有任意线程占用 </li>\n<li><code>lockInterruptibly()</code>：如果当前线程未被中断，获取锁 </li>\n<li><code>tryLock()</code>：尝试获得锁，仅在调用时锁未被线程占用，获得锁 </li>\n<li><code>tryLock(long timeout TimeUnit unit)</code>：如果锁在给定等待时间内没有被另一个线程保持，则获取该锁。</li>\n<li><strong><code>ReentrantLock</code>:ReentantLock继承接口Lock并实现了接口中定义的方法，他是一种可重入锁，除了能完成synchronized所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。</strong></li>\n</ul>\n<h2 id=\"ReentrantLock-与Synchronized\"><a href=\"#ReentrantLock-与Synchronized\" class=\"headerlink\" title=\"ReentrantLock 与Synchronized\"></a>ReentrantLock 与Synchronized</h2><ol>\n<li>ReentrantLock通过方法lock()与unlock()来进行加锁与解锁操作，与synchronized会被JVM自动解锁机制不同，ReentrantLock加锁后需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用ReentrantLock必须在finally控制块中进行解锁操作。 </li>\n<li>ReentrantLock相比synchronized的优势是可中断、公平锁、多个锁。这种情况下需要使用ReentrantLock。</li>\n</ol>\n<pre><code class=\"java\">public class MyService &#123;\n    private Lock lock = new ReentrantLock();\n    // lock=new ReentrantLock(true);//公平锁\n    // lock=new ReentrantLock(false);//非公平锁\n    private Condition condition = lock.newCondition();\n    public void testMethod() &#123;\n        try &#123;\n            lock.lock();\n            System.out.println(&quot;开始wait&quot;);\n            condition.await();\n\n            condition.signal();\n            for (int i = 0; i &lt; 5; i++) &#123;\n                System.out.println(&quot;ThreadName=&quot; + Thread.currentThread().getName() + (&quot; &quot; + (i + 1)));\n            &#125;\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            lock.unlock();\n        &#125;\n    &#125;\n&#125;</code></pre>\n<ol>\n<li>Condition类的awiat方法和Object类的wait方法等效 </li>\n<li>Condition类的signal方法和Object类的notify方法等效 </li>\n<li>Condition类的signalAll方法和Object类的notifyAll方法等效 </li>\n<li>ReentrantLock类可以唤醒指定条件的线程，而object的唤醒是随机的</li>\n</ol>\n<h2 id=\"Semaphore信号量\"><a href=\"#Semaphore信号量\" class=\"headerlink\" title=\"Semaphore信号量\"></a>Semaphore信号量</h2><p style=\"text-indent:2em\">\nSemaphore是一种基于计数的信号量。它可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号将会被阻塞。Semaphore可以用来构建一些对象池，资源池之类的，比如数据库连接池.\n</p>\n\n<pre><code class=\"java\">Semaphore semp = new Semaphore(5);\ntry &#123; // 申请许可\n    semp.acquire();\n    try &#123; // 业务逻辑\n    &#125; catch (Exception e) &#123;\n\n    &#125; finally &#123; // 释放许可\n        semp.release();\n    &#125;\n&#125; catch (InterruptedException e) &#123;\n\n&#125;</code></pre>\n<h2 id=\"原子操作\"><a href=\"#原子操作\" class=\"headerlink\" title=\"原子操作\"></a>原子操作</h2><ul>\n<li>AtomicInteger</li>\n<li>AtomicBoolean</li>\n<li>AtomicInteger</li>\n<li>AtomicLong</li>\n<li>AtomicReference<V></li>\n<li>原子操作将原本类似于<code>i++</code>这种不是原子操作的变为原子操作</li>\n</ul>\n<pre><code class=\"java\">@Data\n@AllArgsConstructor\npublic class User &#123;\n    private String name;\n    private Integer age;\n&#125;\npublic static void main( String[] args ) &#123;\n    User user1 = new User(&quot;张三&quot;, 23);\n    User user2 = new User(&quot;李四&quot;, 25);\n    User user3 = new User(&quot;王五&quot;, 20);\n\n    //初始化为 user1\n    AtomicReference&lt;User&gt; atomicReference = new AtomicReference&lt;&gt;();\n    atomicReference.set(user1);\n\n    //把 user2 赋给 atomicReference\n    atomicReference.compareAndSet(user1, user2);\n    System.out.println(atomicReference.get());\n\n    //把 user3 赋给 atomicReference\n    atomicReference.compareAndSet(user1, user3);\n    System.out.println(atomicReference.get());\n&#125;</code></pre>\n<h2 id=\"公平锁、非公平锁、可重入锁\"><a href=\"#公平锁、非公平锁、可重入锁\" class=\"headerlink\" title=\"公平锁、非公平锁、可重入锁\"></a>公平锁、非公平锁、可重入锁</h2><p style=\"text-indent:2em\">\nJVM按随机、就近原则分配锁的机制则称为不公平锁，ReentrantLock在构造函数中提供了是否公平锁的初始化方式，默认为非公平锁。非公平锁实际执行的效率要远远超出公平锁，除非程序有特殊需要，否则最常用非公平锁的分配机制。加锁前检查是否有排队等待的线程，优先排队等待的线程，先来先得。\n</p>\n\n<p style=\"text-indent:2em\">\n公平锁指的是锁的分配机制是公平的，通常先对锁提出获取请求的线程会先被分配到锁，ReentrantLock在构造函数中提供了是否公平锁的初始化方式来定义公平锁。加锁时不考虑排队等待问题，直接尝试获取锁，获取不到自动到队尾等待。非公平锁性能比公平锁高5~10倍，因为公平锁需要在多核的情况下维护一个队列。Java中的synchronized是非公平锁，ReentrantLock 默认的lock()方法采用的是非公平锁。\n</p>\n\n<p style=\"text-indent:2em\">\n本文里面讲的是广义上的可重入锁，而不是单指JAVA下的ReentrantLock。可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。在JAVA环境下 ReentrantLock 和synchronized 都是 可重入锁。\n</p>\n\n<h2 id=\"共享锁、独占锁\"><a href=\"#共享锁、独占锁\" class=\"headerlink\" title=\"共享锁、独占锁\"></a>共享锁、独占锁</h2><p style=\"text-indent:2em\">\n独占锁模式下，每次只能有一个线程能持有锁，ReentrantLock就是以独占方式实现的互斥锁。独占锁是一种悲观保守的加锁策略，它避免了读/读冲突，如果某个只读线程获取锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，因为读操作并不会影响数据的一致性。\n</p>\n\n<p style=\"text-indent:2em\">\n共享锁则允许多个线程同时获取锁，并发访问 共享资源，如：ReadWriteLock。共享锁则是一种乐观锁，它放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。AQS的内部类Node定义了两个常量SHARED和EXCLUSIVE，他们分别标识 AQS队列中等待线程的锁获取模式。java的并发包中提供了ReadWriteLock，读-写锁。它允许一个资源可以被多个读操作访问，或者被一个 写操作访问，但两者不能同时进行。\n</p>\n\n<h2 id=\"偏向锁、重量级锁、轻量级锁（Synchronized的底层优化）\"><a href=\"#偏向锁、重量级锁、轻量级锁（Synchronized的底层优化）\" class=\"headerlink\" title=\"偏向锁、重量级锁、轻量级锁（Synchronized的底层优化）\"></a>偏向锁、重量级锁、轻量级锁（Synchronized的底层优化）</h2><ul>\n<li>重量级锁也就是通常说synchronized的对象锁，它是通过对象的monitor进行实现的，当一个线程持有一个对象的monitor时，那么这个对象就处于锁定状态，且同时这种操作依赖操作系统，需要从用户态转到内核态，开销很大。</li>\n<li>轻量级锁，使用CAS命令代替互斥量，减少了开销，适用于线程交替执行同步块，如果存在同一时间访问同一锁的情况，就会导致轻量级锁膨胀为重量级锁。轻量级锁认为竞争存在，但是竞争的程度很轻，一般两个线程对于同一个锁的操作都会错开，或者说稍微等待一下（自旋），另一个线程就会释放锁。 但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁膨胀为重量级锁，重量级锁使除了拥有锁的线程以外的线程都阻塞，防止CPU空转。</li>\n<li>CAS 即 compare and swap,比较并交换，从地址 V 读取值 A，执行多步计算来获得新值 B，然后使用 CAS 将 V 的值从 A 改为 B。如果 V 处的值尚未同时更改，则 CAS 操作成功。否则，将重新进行CAS操作。存在循环操作和ABA问题。</li>\n<li>偏向锁认为大多数情况下不存在多线程竞争，所以将对象一开始设置为偏向锁状态，偏向的线程访问资源时，不需要额外的操作，而非偏向线程需要判断是否竞争资源，从而升级锁。</li>\n</ul>\n<h2 id=\"锁的优化\"><a href=\"#锁的优化\" class=\"headerlink\" title=\"锁的优化\"></a>锁的优化</h2><ul>\n<li><strong>减少锁持有时间</strong>：只用在有线程安全要求的程序上加锁</li>\n<li><strong>减小锁粒度</strong>：将大对象（这个对象可能会被很多线程访问），拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁，轻量级锁成功率才会提高。最最典型的减小锁粒度的案例就是ConcurrentHashMap。</li>\n<li><strong>锁分离</strong>：最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，即保证了线程安全，又提高了性能。读写分离思想可以延伸，只要操作互不影响，锁就可以分离。比如LinkedBlockingQueue 从头部取出，从尾部放数据；</li>\n<li><strong>锁粗化</strong>：通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是，凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化 。</li>\n<li><strong>锁消除</strong>：锁消除是在编译器级别的事情。在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起。</li>\n</ul>\n<h2 id=\"阻塞队列\"><a href=\"#阻塞队列\" class=\"headerlink\" title=\"阻塞队列\"></a>阻塞队列</h2><ul>\n<li>ArrayBlockingQueue（公平、非公平）：数组实现的队列（FIFO）</li>\n<li>LinkedBlockingQueue（两个独立锁提高并发）：可以同时生产和消费</li>\n<li>PriorityBlockingQueue（compareTo排序实现优先）</li>\n</ul>\n<h2 id=\"volatile（变量可见性、禁止重排序）\"><a href=\"#volatile（变量可见性、禁止重排序）\" class=\"headerlink\" title=\"volatile（变量可见性、禁止重排序）\"></a>volatile（变量可见性、禁止重排序）</h2><ul>\n<li>变量可见性：其一是保证该变量对所有线程可见，这里的可见性指的是当一个线程修改了变量的值，那么新的值对于其他线程是可以立即获取的。</li>\n<li>禁止重排序：volatile 禁止了指令重排。</li>\n<li>其中需要注意的是被volatile修饰的变量在单次读取操作或者写操作都是原子性的，但是类似于<code>i++</code>这种同时读取和写的操作不是原子性的。</li>\n</ul>\n<h2 id=\"线程通信常用方法\"><a href=\"#线程通信常用方法\" class=\"headerlink\" title=\"线程通信常用方法\"></a>线程通信常用方法</h2><pre><code class=\"java\">public class MyData &#123;\n    private int j = 0;\n\n    public synchronized void add() &#123;\n        j++;\n        System.out.println(&quot;线程&quot; + Thread.currentThread().getName() + &quot;j为：&quot; + j);\n    &#125;\n\n    public synchronized void dec() &#123;\n        j--;\n        System.out.println(&quot;线程&quot; + Thread.currentThread().getName() + &quot;j为：&quot; + j);\n    &#125;\n\n    public int getData() &#123;\n        return j;\n    &#125;\n&#125;\n\npublic class AddRunnable implements Runnable &#123;\n    MyData data;\n\n    public AddRunnable(MyData data) &#123;\n        this.data = data;\n    &#125;\n\n    public void run() &#123;\n        data.add();\n    &#125;\n&#125;\n\npublic class DecRunnable implements Runnable &#123;\n    MyData data;\n\n    public DecRunnable(MyData data) &#123;\n        this.data = data;\n    &#125;\n\n    public void run() &#123;\n        data.dec();\n    &#125;\n&#125;\n\npublic static void main(String[] args) &#123;\n    MyData data = new MyData();\n    Runnable add = new AddRunnable(data);\n    Runnable dec = new DecRunnable(data);\n    for (int i = 0; i &lt; 2; i++) &#123;\n        new Thread(add).start();\n        new Thread(dec).start();\n    &#125;\n&#125;</code></pre>\n"},{"title":"Netty","date":"2021-12-25T01:45:49.000Z","author":"Fanrencli","_content":"\n## Netty\n\n<p style=\"text-indent:2em\">\nNetty是对Java NIO的封装实现，通过Netty我们可以用简介的代码实现JavaNIO的数据通信，此处要结合之前的ScoketIO文章进行结合阅读，在本文中仅进行了Netty实现的代码进行了实现，同时需要了解BIO和NIO原生的代码实现需要在前文中阅读。\n</p>\n\n### 客户端\n\n```java\nEventLoopGroup group = new NioEventLoopGroup(); // 创建一个线程池\ntry {\n    Bootstrap client = new Bootstrap(); // 创建客户端处理程序\n    client.group(group).channel(NioSocketChannel.class)\n            .option(ChannelOption.TCP_NODELAY, true) // 允许接收大块的返回数据\n            .handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel socketChannel) throws Exception {\n                    socketChannel.pipeline().addLast(new LengthFieldBasedFrameDecoder(65536, 0, 4, 0, 4));\n                    socketChannel.pipeline().addLast(new JSONDecoder());\n                    socketChannel.pipeline().addLast(new LengthFieldPrepender(4));\n                    socketChannel.pipeline().addLast(new JSONEncoder());\n                    socketChannel.pipeline().addLast(new EchoClientHandler()); // 追加了处理器\n                }\n            });\n    ChannelFuture channelFuture = client.connect(HostInfo.HOST_NAME, HostInfo.PORT).sync();\n    channelFuture.channel().closeFuture().sync(); // 关闭连接\n} finally {\n    group.shutdownGracefully();\n}\n\n```\n\n### 服务器端\n\n```java\nEventLoopGroup bossGroup = new NioEventLoopGroup(10); // 创建接收线程池\nEventLoopGroup workerGroup = new NioEventLoopGroup(20); // 创建工作线程池\nSystem.out.println(\"服务器启动成功，监听端口为：\" + HostInfo.PORT);\ntry {\n    // 创建一个服务器端的程序类进行NIO启动，同时可以设置Channel\n    ServerBootstrap serverBootstrap = new ServerBootstrap();   // 服务器端\n    // 设置要使用的线程池以及当前的Channel类型\n    serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class);\n    // 接收到信息之后需要进行处理，于是定义子处理器\n    serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n        @Override\n        protected void initChannel(SocketChannel socketChannel) throws Exception {\n            socketChannel.pipeline().addLast(new LengthFieldBasedFrameDecoder(65536,0,4,0,4)) ;\n            socketChannel.pipeline().addLast(new JSONDecoder()) ;\n            socketChannel.pipeline().addLast(new LengthFieldPrepender(4)) ;\n            socketChannel.pipeline().addLast(new JSONEncoder()) ;\n            socketChannel.pipeline().addLast(new EchoServerHandler()); // 追加了处理器\n        }\n    });\n    // 可以直接利用常亮进行TCP协议的相关配置\n    serverBootstrap.option(ChannelOption.SO_BACKLOG, 128);\n    serverBootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);\n    // ChannelFuture描述的时异步回调的处理操作\n    ChannelFuture future = serverBootstrap.bind(HostInfo.PORT).sync();\n    future.channel().closeFuture().sync();// 等待Socket被关闭\n} finally {\n    workerGroup.shutdownGracefully() ;\n    bossGroup.shutdownGracefully() ;\n}\n```\n\n### Pipeline 详解\n\n- `Pipeline`是Netty对数据处理流程的核心操作类，通过前文的一系列配置，最终操作的实现都需要在其中实现。`socketChannel.pipeline().addLast()`等一系列的方法就是添加个人的数据操作。通过Netty自定义的操作顺序，对输入输出的数据进行拆包/封装/编码/解码/自定义数据操作方法。\n- `pipeline` 常用流程：数据输入->拆包->解码->相关的处理操作（继承了ChannelInboundHandlerAdapter的Handler，按照定义的顺序执行）->相关的处理操作（继承了ChannelOutboundHandlerAdapter的Handler，按照定义的顺序执行）->编码->封装->数据输出。\n- 在`pipeline`是一个典型的双向链表结构，根据定义时的顺序和结构会将处理操作进行排序，有数据输入时，只执行数据输入相关的操作，数据输出时只执行数据输出的相关操作。其中数据通过ctx上下文进行传输，通过以object进行封装。\n- 其中 ctx.writeAndFlush 和ctx.channel.writeAndFlush 是数据输出的信号发送源头，区别在于前者将此时的handler作为最后的handler并把数据进行编码和封装传输出去，而后者会从tail将所有的handler执行一遍后发出去。\n\n\n### HTTP实现代码\n\n```java\n\npublic class HttpServer {\n    static {\n        DiskFileUpload.baseDirectory = System.getProperty(\"user.dir\") + \"/upload/\" ;\n    }\n    public void run() throws Exception {\n        // 线程池是提升服务器性能的重要技术手段，利用定长的线程池可以保证核心线程的有效数量\n        // 在Netty之中线程池的实现分为两类：主线程池（接收客户端连接）、工作线程池（处理客户端连接）\n        EventLoopGroup bossGroup = new NioEventLoopGroup(10); // 创建接收线程池\n        EventLoopGroup workerGroup = new NioEventLoopGroup(20); // 创建工作线程池\n        System.out.println(\"服务器启动成功，监听端口为：\" + HostInfo.PORT);\n        try {\n            // 创建一个服务器端的程序类进行NIO启动，同时可以设置Channel\n            ServerBootstrap serverBootstrap = new ServerBootstrap();   // 服务器端\n            // 设置要使用的线程池以及当前的Channel类型\n            serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class);\n            // 接收到信息之后需要进行处理，于是定义子处理器\n            serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel socketChannel) throws Exception {\n                    socketChannel.pipeline().addLast(new HttpResponseEncoder()) ;   // 响应编码\n                    socketChannel.pipeline().addLast(new HttpRequestDecoder()) ;    // 请求解码\n                    socketChannel.pipeline().addLast(new ChunkedWriteHandler()) ; // 图片传输处理器\n                    socketChannel.pipeline().addLast(new HttpServerHandler()) ;\n                }\n            });\n            // 可以直接利用常亮进行TCP协议的相关配置\n            serverBootstrap.option(ChannelOption.SO_BACKLOG, 128);\n            serverBootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);\n            // ChannelFuture描述的时异步回调的处理操作\n            ChannelFuture future = serverBootstrap.bind(HostInfo.PORT).sync();\n            future.channel().closeFuture().sync();// 等待Socket被关闭\n        } finally {\n            workerGroup.shutdownGracefully() ;\n            bossGroup.shutdownGracefully() ;\n        }\n    }\n}\n\npublic class HttpServerHandler extends ChannelInboundHandlerAdapter {\n    private HttpRequest request;\n    private DefaultFullHttpResponse response ;\n    private HttpSession session ;\n    private ChannelHandlerContext ctx ;\n\n    /**\n     * 依据传入的标记内容进行是否向客户端Cookie中保存有SessionId数据的操作\n     * @param exists\n     */\n    private void setSessionId(boolean exists) {\n        if(exists == false) {    // 用户发送来的头信息里面不包含有SessionId内容\n            String encodeCookie = ServerCookieEncoder.STRICT.encode(HttpSession.SESSIONID, HttpSessionManager.createSession()) ;\n            this.response.headers().set(HttpHeaderNames.SET_COOKIE,encodeCookie) ;// 客户端保存Cookie数据\n        }\n    }\n\n    /**\n     * 当前所发送的请求里面是否存在有指定的 SessionID数据信息\n     * @return 如果存在返回true，否则返回false\n     */\n    public boolean isHasSessionId() {\n        String cookieStr = this.request.headers().get(HttpHeaderNames.COOKIE) ; // 获取客户端头信息发送来的Cookie数据\n        if (cookieStr == null || \"\".equals(cookieStr)) {\n            return false ;\n        }\n        Set<Cookie> cookieSet = ServerCookieDecoder.STRICT.decode(cookieStr);\n        Iterator<Cookie> iter = cookieSet.iterator() ;\n        while(iter.hasNext()) {\n            Cookie cookie = iter.next() ;\n            if(HttpSession.SESSIONID.equals(cookie.name())) {\n                if (HttpSessionManager.isExists(cookie.value())) {\n                    this.session = HttpSessionManager.getSession(cookie.value()) ;\n                    return true ;\n                }\n            }\n        }\n        return false ;\n    }\n\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        this.ctx = ctx ;\n        if (msg instanceof HttpRequest) {    // 实现HTTP请求处理操作\n            this.request = (HttpRequest) msg; // 获取Request对象\n            System.out.println(\"【Netty-HTTP服务器端】uri = \" + this.request.uri() + \"、Method = \" + this.request.method() + \"、Headers = \" + request.headers());\n            this.handleUrl(this.request.uri());\n        }\n    }\n\n    private void responseWrite(String content) {\n        ByteBuf buf = Unpooled.copiedBuffer(content,CharsetUtil.UTF_8) ;\n        this.response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK,buf) ;\n        this.response.headers().set(HttpHeaderNames.CONTENT_TYPE,\"text/html;charset=UTF-8\") ; // 设置MIME类型\n        this.response.headers().set(HttpHeaderNames.CONTENT_LENGTH,String.valueOf(buf.readableBytes())) ; // 设置回应数据长度\n        this.setSessionId(this.isHasSessionId());\n        ctx.writeAndFlush(this.response).addListener(ChannelFutureListener.CLOSE) ; // 数据回应完毕之后进行操作关闭\n    }\n\n\n\n    private void sendImage(String fileName) throws Exception {\n        String filePath = DiskFileUpload.baseDirectory + fileName ;\n        File sendFile = new File(filePath) ;\n        HttpResponse imageResponse = new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK) ;\n//        imageResponse.headers().set(HttpHeaderNames.CONTENT_LENGTH,String.valueOf(sendFile.length())) ;\n        MimetypesFileTypeMap mimeMap = new MimetypesFileTypeMap() ;\n        imageResponse.headers().set(HttpHeaderNames.CONTENT_TYPE,mimeMap.getContentType(sendFile)) ;\n        imageResponse.headers().set(HttpHeaderNames.CONNECTION,HttpHeaderValues.KEEP_ALIVE) ;\n        this.ctx.writeAndFlush(imageResponse) ;\n        this.ctx.writeAndFlush(new ChunkedFile(sendFile)) ;\n        // 在多媒体信息发送完毕只后需要设置一个空的消息体，否则内容无法显示\n        ChannelFuture channelFuture = this.ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT) ;\n        channelFuture.addListener(ChannelFutureListener.CLOSE) ;\n    }\n\n    public void handleUrl(String uri) {\n        if (\"/info\".equals(uri)) {\n            this.info();\n        } else if (\"/favicon.ico\".equals(uri)) {\n            this.favicon();\n        } else if (\"/show.png\".equals(uri)) {\n            this.show() ;\n        }\n     }\n    public void info() {\n        String content =\n                \"<html>\" +\n                        \"  <head>\" +\n                        \"       <title>Hello Netty</title>\" +\n                        \"   </head>\" +\n                        \"   <body>\" +\n                        \"       <h1>好好学习，天天向上</h1>\" +\n                        \"       <img src='/show.png'>\" +\n                        \"   </body>\" +\n                        \"</html>\";   // HTTP服务器可以回应的数据就是HTML代码\n        this.responseWrite(content);\n    }\n\n    public void favicon() {\n        try {\n            this.sendImage(\"favicon.ico\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n     public void show() {\n         try {\n             this.sendImage(\"show.png\");\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n     }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n\n```\n\n\n\n\n","source":"_posts/JAVA/Netty.md","raw":"---\ntitle: Netty\ndate: 2021-12-25 09:45:49\ncategories:\n  - JAVA\n  - Netty\ntags:\n  - pipeline\nauthor: Fanrencli\n---\n\n## Netty\n\n<p style=\"text-indent:2em\">\nNetty是对Java NIO的封装实现，通过Netty我们可以用简介的代码实现JavaNIO的数据通信，此处要结合之前的ScoketIO文章进行结合阅读，在本文中仅进行了Netty实现的代码进行了实现，同时需要了解BIO和NIO原生的代码实现需要在前文中阅读。\n</p>\n\n### 客户端\n\n```java\nEventLoopGroup group = new NioEventLoopGroup(); // 创建一个线程池\ntry {\n    Bootstrap client = new Bootstrap(); // 创建客户端处理程序\n    client.group(group).channel(NioSocketChannel.class)\n            .option(ChannelOption.TCP_NODELAY, true) // 允许接收大块的返回数据\n            .handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel socketChannel) throws Exception {\n                    socketChannel.pipeline().addLast(new LengthFieldBasedFrameDecoder(65536, 0, 4, 0, 4));\n                    socketChannel.pipeline().addLast(new JSONDecoder());\n                    socketChannel.pipeline().addLast(new LengthFieldPrepender(4));\n                    socketChannel.pipeline().addLast(new JSONEncoder());\n                    socketChannel.pipeline().addLast(new EchoClientHandler()); // 追加了处理器\n                }\n            });\n    ChannelFuture channelFuture = client.connect(HostInfo.HOST_NAME, HostInfo.PORT).sync();\n    channelFuture.channel().closeFuture().sync(); // 关闭连接\n} finally {\n    group.shutdownGracefully();\n}\n\n```\n\n### 服务器端\n\n```java\nEventLoopGroup bossGroup = new NioEventLoopGroup(10); // 创建接收线程池\nEventLoopGroup workerGroup = new NioEventLoopGroup(20); // 创建工作线程池\nSystem.out.println(\"服务器启动成功，监听端口为：\" + HostInfo.PORT);\ntry {\n    // 创建一个服务器端的程序类进行NIO启动，同时可以设置Channel\n    ServerBootstrap serverBootstrap = new ServerBootstrap();   // 服务器端\n    // 设置要使用的线程池以及当前的Channel类型\n    serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class);\n    // 接收到信息之后需要进行处理，于是定义子处理器\n    serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n        @Override\n        protected void initChannel(SocketChannel socketChannel) throws Exception {\n            socketChannel.pipeline().addLast(new LengthFieldBasedFrameDecoder(65536,0,4,0,4)) ;\n            socketChannel.pipeline().addLast(new JSONDecoder()) ;\n            socketChannel.pipeline().addLast(new LengthFieldPrepender(4)) ;\n            socketChannel.pipeline().addLast(new JSONEncoder()) ;\n            socketChannel.pipeline().addLast(new EchoServerHandler()); // 追加了处理器\n        }\n    });\n    // 可以直接利用常亮进行TCP协议的相关配置\n    serverBootstrap.option(ChannelOption.SO_BACKLOG, 128);\n    serverBootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);\n    // ChannelFuture描述的时异步回调的处理操作\n    ChannelFuture future = serverBootstrap.bind(HostInfo.PORT).sync();\n    future.channel().closeFuture().sync();// 等待Socket被关闭\n} finally {\n    workerGroup.shutdownGracefully() ;\n    bossGroup.shutdownGracefully() ;\n}\n```\n\n### Pipeline 详解\n\n- `Pipeline`是Netty对数据处理流程的核心操作类，通过前文的一系列配置，最终操作的实现都需要在其中实现。`socketChannel.pipeline().addLast()`等一系列的方法就是添加个人的数据操作。通过Netty自定义的操作顺序，对输入输出的数据进行拆包/封装/编码/解码/自定义数据操作方法。\n- `pipeline` 常用流程：数据输入->拆包->解码->相关的处理操作（继承了ChannelInboundHandlerAdapter的Handler，按照定义的顺序执行）->相关的处理操作（继承了ChannelOutboundHandlerAdapter的Handler，按照定义的顺序执行）->编码->封装->数据输出。\n- 在`pipeline`是一个典型的双向链表结构，根据定义时的顺序和结构会将处理操作进行排序，有数据输入时，只执行数据输入相关的操作，数据输出时只执行数据输出的相关操作。其中数据通过ctx上下文进行传输，通过以object进行封装。\n- 其中 ctx.writeAndFlush 和ctx.channel.writeAndFlush 是数据输出的信号发送源头，区别在于前者将此时的handler作为最后的handler并把数据进行编码和封装传输出去，而后者会从tail将所有的handler执行一遍后发出去。\n\n\n### HTTP实现代码\n\n```java\n\npublic class HttpServer {\n    static {\n        DiskFileUpload.baseDirectory = System.getProperty(\"user.dir\") + \"/upload/\" ;\n    }\n    public void run() throws Exception {\n        // 线程池是提升服务器性能的重要技术手段，利用定长的线程池可以保证核心线程的有效数量\n        // 在Netty之中线程池的实现分为两类：主线程池（接收客户端连接）、工作线程池（处理客户端连接）\n        EventLoopGroup bossGroup = new NioEventLoopGroup(10); // 创建接收线程池\n        EventLoopGroup workerGroup = new NioEventLoopGroup(20); // 创建工作线程池\n        System.out.println(\"服务器启动成功，监听端口为：\" + HostInfo.PORT);\n        try {\n            // 创建一个服务器端的程序类进行NIO启动，同时可以设置Channel\n            ServerBootstrap serverBootstrap = new ServerBootstrap();   // 服务器端\n            // 设置要使用的线程池以及当前的Channel类型\n            serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class);\n            // 接收到信息之后需要进行处理，于是定义子处理器\n            serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel socketChannel) throws Exception {\n                    socketChannel.pipeline().addLast(new HttpResponseEncoder()) ;   // 响应编码\n                    socketChannel.pipeline().addLast(new HttpRequestDecoder()) ;    // 请求解码\n                    socketChannel.pipeline().addLast(new ChunkedWriteHandler()) ; // 图片传输处理器\n                    socketChannel.pipeline().addLast(new HttpServerHandler()) ;\n                }\n            });\n            // 可以直接利用常亮进行TCP协议的相关配置\n            serverBootstrap.option(ChannelOption.SO_BACKLOG, 128);\n            serverBootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);\n            // ChannelFuture描述的时异步回调的处理操作\n            ChannelFuture future = serverBootstrap.bind(HostInfo.PORT).sync();\n            future.channel().closeFuture().sync();// 等待Socket被关闭\n        } finally {\n            workerGroup.shutdownGracefully() ;\n            bossGroup.shutdownGracefully() ;\n        }\n    }\n}\n\npublic class HttpServerHandler extends ChannelInboundHandlerAdapter {\n    private HttpRequest request;\n    private DefaultFullHttpResponse response ;\n    private HttpSession session ;\n    private ChannelHandlerContext ctx ;\n\n    /**\n     * 依据传入的标记内容进行是否向客户端Cookie中保存有SessionId数据的操作\n     * @param exists\n     */\n    private void setSessionId(boolean exists) {\n        if(exists == false) {    // 用户发送来的头信息里面不包含有SessionId内容\n            String encodeCookie = ServerCookieEncoder.STRICT.encode(HttpSession.SESSIONID, HttpSessionManager.createSession()) ;\n            this.response.headers().set(HttpHeaderNames.SET_COOKIE,encodeCookie) ;// 客户端保存Cookie数据\n        }\n    }\n\n    /**\n     * 当前所发送的请求里面是否存在有指定的 SessionID数据信息\n     * @return 如果存在返回true，否则返回false\n     */\n    public boolean isHasSessionId() {\n        String cookieStr = this.request.headers().get(HttpHeaderNames.COOKIE) ; // 获取客户端头信息发送来的Cookie数据\n        if (cookieStr == null || \"\".equals(cookieStr)) {\n            return false ;\n        }\n        Set<Cookie> cookieSet = ServerCookieDecoder.STRICT.decode(cookieStr);\n        Iterator<Cookie> iter = cookieSet.iterator() ;\n        while(iter.hasNext()) {\n            Cookie cookie = iter.next() ;\n            if(HttpSession.SESSIONID.equals(cookie.name())) {\n                if (HttpSessionManager.isExists(cookie.value())) {\n                    this.session = HttpSessionManager.getSession(cookie.value()) ;\n                    return true ;\n                }\n            }\n        }\n        return false ;\n    }\n\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        this.ctx = ctx ;\n        if (msg instanceof HttpRequest) {    // 实现HTTP请求处理操作\n            this.request = (HttpRequest) msg; // 获取Request对象\n            System.out.println(\"【Netty-HTTP服务器端】uri = \" + this.request.uri() + \"、Method = \" + this.request.method() + \"、Headers = \" + request.headers());\n            this.handleUrl(this.request.uri());\n        }\n    }\n\n    private void responseWrite(String content) {\n        ByteBuf buf = Unpooled.copiedBuffer(content,CharsetUtil.UTF_8) ;\n        this.response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK,buf) ;\n        this.response.headers().set(HttpHeaderNames.CONTENT_TYPE,\"text/html;charset=UTF-8\") ; // 设置MIME类型\n        this.response.headers().set(HttpHeaderNames.CONTENT_LENGTH,String.valueOf(buf.readableBytes())) ; // 设置回应数据长度\n        this.setSessionId(this.isHasSessionId());\n        ctx.writeAndFlush(this.response).addListener(ChannelFutureListener.CLOSE) ; // 数据回应完毕之后进行操作关闭\n    }\n\n\n\n    private void sendImage(String fileName) throws Exception {\n        String filePath = DiskFileUpload.baseDirectory + fileName ;\n        File sendFile = new File(filePath) ;\n        HttpResponse imageResponse = new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK) ;\n//        imageResponse.headers().set(HttpHeaderNames.CONTENT_LENGTH,String.valueOf(sendFile.length())) ;\n        MimetypesFileTypeMap mimeMap = new MimetypesFileTypeMap() ;\n        imageResponse.headers().set(HttpHeaderNames.CONTENT_TYPE,mimeMap.getContentType(sendFile)) ;\n        imageResponse.headers().set(HttpHeaderNames.CONNECTION,HttpHeaderValues.KEEP_ALIVE) ;\n        this.ctx.writeAndFlush(imageResponse) ;\n        this.ctx.writeAndFlush(new ChunkedFile(sendFile)) ;\n        // 在多媒体信息发送完毕只后需要设置一个空的消息体，否则内容无法显示\n        ChannelFuture channelFuture = this.ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT) ;\n        channelFuture.addListener(ChannelFutureListener.CLOSE) ;\n    }\n\n    public void handleUrl(String uri) {\n        if (\"/info\".equals(uri)) {\n            this.info();\n        } else if (\"/favicon.ico\".equals(uri)) {\n            this.favicon();\n        } else if (\"/show.png\".equals(uri)) {\n            this.show() ;\n        }\n     }\n    public void info() {\n        String content =\n                \"<html>\" +\n                        \"  <head>\" +\n                        \"       <title>Hello Netty</title>\" +\n                        \"   </head>\" +\n                        \"   <body>\" +\n                        \"       <h1>好好学习，天天向上</h1>\" +\n                        \"       <img src='/show.png'>\" +\n                        \"   </body>\" +\n                        \"</html>\";   // HTTP服务器可以回应的数据就是HTML代码\n        this.responseWrite(content);\n    }\n\n    public void favicon() {\n        try {\n            this.sendImage(\"favicon.ico\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n     public void show() {\n         try {\n             this.sendImage(\"show.png\");\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n     }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n\n```\n\n\n\n\n","slug":"JAVA/Netty","published":1,"updated":"2021-12-25T07:14:10.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuhigbi000b8suoappb18t5","content":"<h2 id=\"Netty\"><a href=\"#Netty\" class=\"headerlink\" title=\"Netty\"></a>Netty</h2><p style=\"text-indent:2em\">\nNetty是对Java NIO的封装实现，通过Netty我们可以用简介的代码实现JavaNIO的数据通信，此处要结合之前的ScoketIO文章进行结合阅读，在本文中仅进行了Netty实现的代码进行了实现，同时需要了解BIO和NIO原生的代码实现需要在前文中阅读。\n</p>\n\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><pre class=\" language-java\"><code class=\"language-java\">EventLoopGroup group <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NioEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 创建一个线程池</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    Bootstrap client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 创建客户端处理程序</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span>NioSocketChannel<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span>ChannelOption<span class=\"token punctuation\">.</span>TCP_NODELAY<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 允许接收大块的返回数据</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInitializer</span><span class=\"token operator\">&lt;</span>SocketChannel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initChannel</span><span class=\"token punctuation\">(</span>SocketChannel socketChannel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n                    socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LengthFieldBasedFrameDecoder</span><span class=\"token punctuation\">(</span><span class=\"token number\">65536</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LengthFieldPrepender</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">EchoClientHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 追加了处理器</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ChannelFuture channelFuture <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>HostInfo<span class=\"token punctuation\">.</span>HOST_NAME<span class=\"token punctuation\">,</span> HostInfo<span class=\"token punctuation\">.</span>PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    channelFuture<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeFuture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 关闭连接</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    group<span class=\"token punctuation\">.</span><span class=\"token function\">shutdownGracefully</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h3><pre class=\" language-java\"><code class=\"language-java\">EventLoopGroup bossGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NioEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 创建接收线程池</span>\nEventLoopGroup workerGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NioEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 创建工作线程池</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器启动成功，监听端口为：\"</span> <span class=\"token operator\">+</span> HostInfo<span class=\"token punctuation\">.</span>PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 创建一个服务器端的程序类进行NIO启动，同时可以设置Channel</span>\n    ServerBootstrap serverBootstrap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerBootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// 服务器端</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 设置要使用的线程池以及当前的Channel类型</span>\n    serverBootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span>bossGroup<span class=\"token punctuation\">,</span> workerGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span>NioServerSocketChannel<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 接收到信息之后需要进行处理，于是定义子处理器</span>\n    serverBootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">childHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInitializer</span><span class=\"token operator\">&lt;</span>SocketChannel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initChannel</span><span class=\"token punctuation\">(</span>SocketChannel socketChannel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n            socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LengthFieldBasedFrameDecoder</span><span class=\"token punctuation\">(</span><span class=\"token number\">65536</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n            socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n            socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LengthFieldPrepender</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n            socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n            socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">EchoServerHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 追加了处理器</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 可以直接利用常亮进行TCP协议的相关配置</span>\n    serverBootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span>ChannelOption<span class=\"token punctuation\">.</span>SO_BACKLOG<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    serverBootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">childOption</span><span class=\"token punctuation\">(</span>ChannelOption<span class=\"token punctuation\">.</span>SO_KEEPALIVE<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// ChannelFuture描述的时异步回调的处理操作</span>\n    ChannelFuture future <span class=\"token operator\">=</span> serverBootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>HostInfo<span class=\"token punctuation\">.</span>PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    future<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeFuture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// 等待Socket被关闭</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    workerGroup<span class=\"token punctuation\">.</span><span class=\"token function\">shutdownGracefully</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n    bossGroup<span class=\"token punctuation\">.</span><span class=\"token function\">shutdownGracefully</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"Pipeline-详解\"><a href=\"#Pipeline-详解\" class=\"headerlink\" title=\"Pipeline 详解\"></a>Pipeline 详解</h3><ul>\n<li><code>Pipeline</code>是Netty对数据处理流程的核心操作类，通过前文的一系列配置，最终操作的实现都需要在其中实现。<code>socketChannel.pipeline().addLast()</code>等一系列的方法就是添加个人的数据操作。通过Netty自定义的操作顺序，对输入输出的数据进行拆包/封装/编码/解码/自定义数据操作方法。</li>\n<li><code>pipeline</code> 常用流程：数据输入-&gt;拆包-&gt;解码-&gt;相关的处理操作（继承了ChannelInboundHandlerAdapter的Handler，按照定义的顺序执行）-&gt;相关的处理操作（继承了ChannelOutboundHandlerAdapter的Handler，按照定义的顺序执行）-&gt;编码-&gt;封装-&gt;数据输出。</li>\n<li>在<code>pipeline</code>是一个典型的双向链表结构，根据定义时的顺序和结构会将处理操作进行排序，有数据输入时，只执行数据输入相关的操作，数据输出时只执行数据输出的相关操作。其中数据通过ctx上下文进行传输，通过以object进行封装。</li>\n<li>其中 ctx.writeAndFlush 和ctx.channel.writeAndFlush 是数据输出的信号发送源头，区别在于前者将此时的handler作为最后的handler并把数据进行编码和封装传输出去，而后者会从tail将所有的handler执行一遍后发出去。</li>\n</ul>\n<h3 id=\"HTTP实现代码\"><a href=\"#HTTP实现代码\" class=\"headerlink\" title=\"HTTP实现代码\"></a>HTTP实现代码</h3><pre class=\" language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpServer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        DiskFileUpload<span class=\"token punctuation\">.</span>baseDirectory <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.dir\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/upload/\"</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 线程池是提升服务器性能的重要技术手段，利用定长的线程池可以保证核心线程的有效数量</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 在Netty之中线程池的实现分为两类：主线程池（接收客户端连接）、工作线程池（处理客户端连接）</span>\n        EventLoopGroup bossGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NioEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 创建接收线程池</span>\n        EventLoopGroup workerGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NioEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 创建工作线程池</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器启动成功，监听端口为：\"</span> <span class=\"token operator\">+</span> HostInfo<span class=\"token punctuation\">.</span>PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 创建一个服务器端的程序类进行NIO启动，同时可以设置Channel</span>\n            ServerBootstrap serverBootstrap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerBootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// 服务器端</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 设置要使用的线程池以及当前的Channel类型</span>\n            serverBootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span>bossGroup<span class=\"token punctuation\">,</span> workerGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span>NioServerSocketChannel<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 接收到信息之后需要进行处理，于是定义子处理器</span>\n            serverBootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">childHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInitializer</span><span class=\"token operator\">&lt;</span>SocketChannel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initChannel</span><span class=\"token punctuation\">(</span>SocketChannel socketChannel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n                    socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpResponseEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// 响应编码</span>\n                    socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpRequestDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// 请求解码</span>\n                    socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChunkedWriteHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 图片传输处理器</span>\n                    socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpServerHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 可以直接利用常亮进行TCP协议的相关配置</span>\n            serverBootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span>ChannelOption<span class=\"token punctuation\">.</span>SO_BACKLOG<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            serverBootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">childOption</span><span class=\"token punctuation\">(</span>ChannelOption<span class=\"token punctuation\">.</span>SO_KEEPALIVE<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// ChannelFuture描述的时异步回调的处理操作</span>\n            ChannelFuture future <span class=\"token operator\">=</span> serverBootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>HostInfo<span class=\"token punctuation\">.</span>PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            future<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeFuture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// 等待Socket被关闭</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            workerGroup<span class=\"token punctuation\">.</span><span class=\"token function\">shutdownGracefully</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n            bossGroup<span class=\"token punctuation\">.</span><span class=\"token function\">shutdownGracefully</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpServerHandler</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ChannelInboundHandlerAdapter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> HttpRequest request<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> DefaultFullHttpResponse response <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> HttpSession session <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> ChannelHandlerContext ctx <span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 依据传入的标记内容进行是否向客户端Cookie中保存有SessionId数据的操作\n     * @param exists\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSessionId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> exists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>exists <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\" spellcheck=\"true\">// 用户发送来的头信息里面不包含有SessionId内容</span>\n            String encodeCookie <span class=\"token operator\">=</span> ServerCookieEncoder<span class=\"token punctuation\">.</span>STRICT<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>HttpSession<span class=\"token punctuation\">.</span>SESSIONID<span class=\"token punctuation\">,</span> HttpSessionManager<span class=\"token punctuation\">.</span><span class=\"token function\">createSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>HttpHeaderNames<span class=\"token punctuation\">.</span>SET_COOKIE<span class=\"token punctuation\">,</span>encodeCookie<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// 客户端保存Cookie数据</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 当前所发送的请求里面是否存在有指定的 SessionID数据信息\n     * @return 如果存在返回true，否则返回false\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isHasSessionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        String cookieStr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>HttpHeaderNames<span class=\"token punctuation\">.</span>COOKIE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 获取客户端头信息发送来的Cookie数据</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cookieStr <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>cookieStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        Set<span class=\"token operator\">&lt;</span>Cookie<span class=\"token operator\">></span> cookieSet <span class=\"token operator\">=</span> ServerCookieDecoder<span class=\"token punctuation\">.</span>STRICT<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>cookieStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Iterator<span class=\"token operator\">&lt;</span>Cookie<span class=\"token operator\">></span> iter <span class=\"token operator\">=</span> cookieSet<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Cookie cookie <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>HttpSession<span class=\"token punctuation\">.</span>SESSIONID<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>HttpSessionManager<span class=\"token punctuation\">.</span><span class=\"token function\">isExists</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> HttpSessionManager<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span>ChannelHandlerContext ctx<span class=\"token punctuation\">,</span> Object msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctx <span class=\"token operator\">=</span> ctx <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HttpRequest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\" spellcheck=\"true\">// 实现HTTP请求处理操作</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HttpRequest<span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 获取Request对象</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"【Netty-HTTP服务器端】uri = \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"、Method = \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"、Headers = \"</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleUrl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">responseWrite</span><span class=\"token punctuation\">(</span>String content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ByteBuf buf <span class=\"token operator\">=</span> Unpooled<span class=\"token punctuation\">.</span><span class=\"token function\">copiedBuffer</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span>CharsetUtil<span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultFullHttpResponse</span><span class=\"token punctuation\">(</span>HttpVersion<span class=\"token punctuation\">.</span>HTTP_1_1<span class=\"token punctuation\">,</span>HttpResponseStatus<span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>HttpHeaderNames<span class=\"token punctuation\">.</span>CONTENT_TYPE<span class=\"token punctuation\">,</span><span class=\"token string\">\"text/html;charset=UTF-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 设置MIME类型</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>HttpHeaderNames<span class=\"token punctuation\">.</span>CONTENT_LENGTH<span class=\"token punctuation\">,</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">readableBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 设置回应数据长度</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSessionId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHasSessionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span>ChannelFutureListener<span class=\"token punctuation\">.</span>CLOSE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 数据回应完毕之后进行操作关闭</span>\n    <span class=\"token punctuation\">}</span>\n\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendImage</span><span class=\"token punctuation\">(</span>String fileName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        String filePath <span class=\"token operator\">=</span> DiskFileUpload<span class=\"token punctuation\">.</span>baseDirectory <span class=\"token operator\">+</span> fileName <span class=\"token punctuation\">;</span>\n        File sendFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n        HttpResponse imageResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultHttpResponse</span><span class=\"token punctuation\">(</span>HttpVersion<span class=\"token punctuation\">.</span>HTTP_1_1<span class=\"token punctuation\">,</span>HttpResponseStatus<span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//        imageResponse.headers().set(HttpHeaderNames.CONTENT_LENGTH,String.valueOf(sendFile.length())) ;</span>\n        MimetypesFileTypeMap mimeMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MimetypesFileTypeMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n        imageResponse<span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>HttpHeaderNames<span class=\"token punctuation\">.</span>CONTENT_TYPE<span class=\"token punctuation\">,</span>mimeMap<span class=\"token punctuation\">.</span><span class=\"token function\">getContentType</span><span class=\"token punctuation\">(</span>sendFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n        imageResponse<span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>HttpHeaderNames<span class=\"token punctuation\">.</span>CONNECTION<span class=\"token punctuation\">,</span>HttpHeaderValues<span class=\"token punctuation\">.</span>KEEP_ALIVE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span>imageResponse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChunkedFile</span><span class=\"token punctuation\">(</span>sendFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 在多媒体信息发送完毕只后需要设置一个空的消息体，否则内容无法显示</span>\n        ChannelFuture channelFuture <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span>LastHttpContent<span class=\"token punctuation\">.</span>EMPTY_LAST_CONTENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n        channelFuture<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span>ChannelFutureListener<span class=\"token punctuation\">.</span>CLOSE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleUrl</span><span class=\"token punctuation\">(</span>String uri<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"/info\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"/favicon.ico\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">favicon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"/show.png\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        String content <span class=\"token operator\">=</span>\n                <span class=\"token string\">\"&lt;html>\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"  &lt;head>\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"       &lt;title>Hello Netty&lt;/title>\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"   &lt;/head>\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"   &lt;body>\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"       &lt;h1>好好学习，天天向上&lt;/h1>\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"       &lt;img src='/show.png'>\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"   &lt;/body>\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"&lt;/html>\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// HTTP服务器可以回应的数据就是HTML代码</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">responseWrite</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">favicon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendImage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"favicon.ico\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendImage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"show.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exceptionCaught</span><span class=\"token punctuation\">(</span>ChannelHandlerContext ctx<span class=\"token punctuation\">,</span> Throwable cause<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        cause<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"Netty\"><a href=\"#Netty\" class=\"headerlink\" title=\"Netty\"></a>Netty</h2><p style=\"text-indent:2em\">\nNetty是对Java NIO的封装实现，通过Netty我们可以用简介的代码实现JavaNIO的数据通信，此处要结合之前的ScoketIO文章进行结合阅读，在本文中仅进行了Netty实现的代码进行了实现，同时需要了解BIO和NIO原生的代码实现需要在前文中阅读。\n</p>\n\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><pre><code class=\"java\">EventLoopGroup group = new NioEventLoopGroup(); // 创建一个线程池\ntry &#123;\n    Bootstrap client = new Bootstrap(); // 创建客户端处理程序\n    client.group(group).channel(NioSocketChannel.class)\n            .option(ChannelOption.TCP_NODELAY, true) // 允许接收大块的返回数据\n            .handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;\n                @Override\n                protected void initChannel(SocketChannel socketChannel) throws Exception &#123;\n                    socketChannel.pipeline().addLast(new LengthFieldBasedFrameDecoder(65536, 0, 4, 0, 4));\n                    socketChannel.pipeline().addLast(new JSONDecoder());\n                    socketChannel.pipeline().addLast(new LengthFieldPrepender(4));\n                    socketChannel.pipeline().addLast(new JSONEncoder());\n                    socketChannel.pipeline().addLast(new EchoClientHandler()); // 追加了处理器\n                &#125;\n            &#125;);\n    ChannelFuture channelFuture = client.connect(HostInfo.HOST_NAME, HostInfo.PORT).sync();\n    channelFuture.channel().closeFuture().sync(); // 关闭连接\n&#125; finally &#123;\n    group.shutdownGracefully();\n&#125;\n</code></pre>\n<h3 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h3><pre><code class=\"java\">EventLoopGroup bossGroup = new NioEventLoopGroup(10); // 创建接收线程池\nEventLoopGroup workerGroup = new NioEventLoopGroup(20); // 创建工作线程池\nSystem.out.println(&quot;服务器启动成功，监听端口为：&quot; + HostInfo.PORT);\ntry &#123;\n    // 创建一个服务器端的程序类进行NIO启动，同时可以设置Channel\n    ServerBootstrap serverBootstrap = new ServerBootstrap();   // 服务器端\n    // 设置要使用的线程池以及当前的Channel类型\n    serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class);\n    // 接收到信息之后需要进行处理，于是定义子处理器\n    serverBootstrap.childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;\n        @Override\n        protected void initChannel(SocketChannel socketChannel) throws Exception &#123;\n            socketChannel.pipeline().addLast(new LengthFieldBasedFrameDecoder(65536,0,4,0,4)) ;\n            socketChannel.pipeline().addLast(new JSONDecoder()) ;\n            socketChannel.pipeline().addLast(new LengthFieldPrepender(4)) ;\n            socketChannel.pipeline().addLast(new JSONEncoder()) ;\n            socketChannel.pipeline().addLast(new EchoServerHandler()); // 追加了处理器\n        &#125;\n    &#125;);\n    // 可以直接利用常亮进行TCP协议的相关配置\n    serverBootstrap.option(ChannelOption.SO_BACKLOG, 128);\n    serverBootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);\n    // ChannelFuture描述的时异步回调的处理操作\n    ChannelFuture future = serverBootstrap.bind(HostInfo.PORT).sync();\n    future.channel().closeFuture().sync();// 等待Socket被关闭\n&#125; finally &#123;\n    workerGroup.shutdownGracefully() ;\n    bossGroup.shutdownGracefully() ;\n&#125;</code></pre>\n<h3 id=\"Pipeline-详解\"><a href=\"#Pipeline-详解\" class=\"headerlink\" title=\"Pipeline 详解\"></a>Pipeline 详解</h3><ul>\n<li><code>Pipeline</code>是Netty对数据处理流程的核心操作类，通过前文的一系列配置，最终操作的实现都需要在其中实现。<code>socketChannel.pipeline().addLast()</code>等一系列的方法就是添加个人的数据操作。通过Netty自定义的操作顺序，对输入输出的数据进行拆包/封装/编码/解码/自定义数据操作方法。</li>\n<li><code>pipeline</code> 常用流程：数据输入-&gt;拆包-&gt;解码-&gt;相关的处理操作（继承了ChannelInboundHandlerAdapter的Handler，按照定义的顺序执行）-&gt;相关的处理操作（继承了ChannelOutboundHandlerAdapter的Handler，按照定义的顺序执行）-&gt;编码-&gt;封装-&gt;数据输出。</li>\n<li>在<code>pipeline</code>是一个典型的双向链表结构，根据定义时的顺序和结构会将处理操作进行排序，有数据输入时，只执行数据输入相关的操作，数据输出时只执行数据输出的相关操作。其中数据通过ctx上下文进行传输，通过以object进行封装。</li>\n<li>其中 ctx.writeAndFlush 和ctx.channel.writeAndFlush 是数据输出的信号发送源头，区别在于前者将此时的handler作为最后的handler并把数据进行编码和封装传输出去，而后者会从tail将所有的handler执行一遍后发出去。</li>\n</ul>\n<h3 id=\"HTTP实现代码\"><a href=\"#HTTP实现代码\" class=\"headerlink\" title=\"HTTP实现代码\"></a>HTTP实现代码</h3><pre><code class=\"java\">\npublic class HttpServer &#123;\n    static &#123;\n        DiskFileUpload.baseDirectory = System.getProperty(&quot;user.dir&quot;) + &quot;/upload/&quot; ;\n    &#125;\n    public void run() throws Exception &#123;\n        // 线程池是提升服务器性能的重要技术手段，利用定长的线程池可以保证核心线程的有效数量\n        // 在Netty之中线程池的实现分为两类：主线程池（接收客户端连接）、工作线程池（处理客户端连接）\n        EventLoopGroup bossGroup = new NioEventLoopGroup(10); // 创建接收线程池\n        EventLoopGroup workerGroup = new NioEventLoopGroup(20); // 创建工作线程池\n        System.out.println(&quot;服务器启动成功，监听端口为：&quot; + HostInfo.PORT);\n        try &#123;\n            // 创建一个服务器端的程序类进行NIO启动，同时可以设置Channel\n            ServerBootstrap serverBootstrap = new ServerBootstrap();   // 服务器端\n            // 设置要使用的线程池以及当前的Channel类型\n            serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class);\n            // 接收到信息之后需要进行处理，于是定义子处理器\n            serverBootstrap.childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;\n                @Override\n                protected void initChannel(SocketChannel socketChannel) throws Exception &#123;\n                    socketChannel.pipeline().addLast(new HttpResponseEncoder()) ;   // 响应编码\n                    socketChannel.pipeline().addLast(new HttpRequestDecoder()) ;    // 请求解码\n                    socketChannel.pipeline().addLast(new ChunkedWriteHandler()) ; // 图片传输处理器\n                    socketChannel.pipeline().addLast(new HttpServerHandler()) ;\n                &#125;\n            &#125;);\n            // 可以直接利用常亮进行TCP协议的相关配置\n            serverBootstrap.option(ChannelOption.SO_BACKLOG, 128);\n            serverBootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);\n            // ChannelFuture描述的时异步回调的处理操作\n            ChannelFuture future = serverBootstrap.bind(HostInfo.PORT).sync();\n            future.channel().closeFuture().sync();// 等待Socket被关闭\n        &#125; finally &#123;\n            workerGroup.shutdownGracefully() ;\n            bossGroup.shutdownGracefully() ;\n        &#125;\n    &#125;\n&#125;\n\npublic class HttpServerHandler extends ChannelInboundHandlerAdapter &#123;\n    private HttpRequest request;\n    private DefaultFullHttpResponse response ;\n    private HttpSession session ;\n    private ChannelHandlerContext ctx ;\n\n    /**\n     * 依据传入的标记内容进行是否向客户端Cookie中保存有SessionId数据的操作\n     * @param exists\n     */\n    private void setSessionId(boolean exists) &#123;\n        if(exists == false) &#123;    // 用户发送来的头信息里面不包含有SessionId内容\n            String encodeCookie = ServerCookieEncoder.STRICT.encode(HttpSession.SESSIONID, HttpSessionManager.createSession()) ;\n            this.response.headers().set(HttpHeaderNames.SET_COOKIE,encodeCookie) ;// 客户端保存Cookie数据\n        &#125;\n    &#125;\n\n    /**\n     * 当前所发送的请求里面是否存在有指定的 SessionID数据信息\n     * @return 如果存在返回true，否则返回false\n     */\n    public boolean isHasSessionId() &#123;\n        String cookieStr = this.request.headers().get(HttpHeaderNames.COOKIE) ; // 获取客户端头信息发送来的Cookie数据\n        if (cookieStr == null || &quot;&quot;.equals(cookieStr)) &#123;\n            return false ;\n        &#125;\n        Set&lt;Cookie&gt; cookieSet = ServerCookieDecoder.STRICT.decode(cookieStr);\n        Iterator&lt;Cookie&gt; iter = cookieSet.iterator() ;\n        while(iter.hasNext()) &#123;\n            Cookie cookie = iter.next() ;\n            if(HttpSession.SESSIONID.equals(cookie.name())) &#123;\n                if (HttpSessionManager.isExists(cookie.value())) &#123;\n                    this.session = HttpSessionManager.getSession(cookie.value()) ;\n                    return true ;\n                &#125;\n            &#125;\n        &#125;\n        return false ;\n    &#125;\n\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;\n        this.ctx = ctx ;\n        if (msg instanceof HttpRequest) &#123;    // 实现HTTP请求处理操作\n            this.request = (HttpRequest) msg; // 获取Request对象\n            System.out.println(&quot;【Netty-HTTP服务器端】uri = &quot; + this.request.uri() + &quot;、Method = &quot; + this.request.method() + &quot;、Headers = &quot; + request.headers());\n            this.handleUrl(this.request.uri());\n        &#125;\n    &#125;\n\n    private void responseWrite(String content) &#123;\n        ByteBuf buf = Unpooled.copiedBuffer(content,CharsetUtil.UTF_8) ;\n        this.response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK,buf) ;\n        this.response.headers().set(HttpHeaderNames.CONTENT_TYPE,&quot;text/html;charset=UTF-8&quot;) ; // 设置MIME类型\n        this.response.headers().set(HttpHeaderNames.CONTENT_LENGTH,String.valueOf(buf.readableBytes())) ; // 设置回应数据长度\n        this.setSessionId(this.isHasSessionId());\n        ctx.writeAndFlush(this.response).addListener(ChannelFutureListener.CLOSE) ; // 数据回应完毕之后进行操作关闭\n    &#125;\n\n\n\n    private void sendImage(String fileName) throws Exception &#123;\n        String filePath = DiskFileUpload.baseDirectory + fileName ;\n        File sendFile = new File(filePath) ;\n        HttpResponse imageResponse = new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK) ;\n//        imageResponse.headers().set(HttpHeaderNames.CONTENT_LENGTH,String.valueOf(sendFile.length())) ;\n        MimetypesFileTypeMap mimeMap = new MimetypesFileTypeMap() ;\n        imageResponse.headers().set(HttpHeaderNames.CONTENT_TYPE,mimeMap.getContentType(sendFile)) ;\n        imageResponse.headers().set(HttpHeaderNames.CONNECTION,HttpHeaderValues.KEEP_ALIVE) ;\n        this.ctx.writeAndFlush(imageResponse) ;\n        this.ctx.writeAndFlush(new ChunkedFile(sendFile)) ;\n        // 在多媒体信息发送完毕只后需要设置一个空的消息体，否则内容无法显示\n        ChannelFuture channelFuture = this.ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT) ;\n        channelFuture.addListener(ChannelFutureListener.CLOSE) ;\n    &#125;\n\n    public void handleUrl(String uri) &#123;\n        if (&quot;/info&quot;.equals(uri)) &#123;\n            this.info();\n        &#125; else if (&quot;/favicon.ico&quot;.equals(uri)) &#123;\n            this.favicon();\n        &#125; else if (&quot;/show.png&quot;.equals(uri)) &#123;\n            this.show() ;\n        &#125;\n     &#125;\n    public void info() &#123;\n        String content =\n                &quot;&lt;html&gt;&quot; +\n                        &quot;  &lt;head&gt;&quot; +\n                        &quot;       &lt;title&gt;Hello Netty&lt;/title&gt;&quot; +\n                        &quot;   &lt;/head&gt;&quot; +\n                        &quot;   &lt;body&gt;&quot; +\n                        &quot;       &lt;h1&gt;好好学习，天天向上&lt;/h1&gt;&quot; +\n                        &quot;       &lt;img src=&#39;/show.png&#39;&gt;&quot; +\n                        &quot;   &lt;/body&gt;&quot; +\n                        &quot;&lt;/html&gt;&quot;;   // HTTP服务器可以回应的数据就是HTML代码\n        this.responseWrite(content);\n    &#125;\n\n    public void favicon() &#123;\n        try &#123;\n            this.sendImage(&quot;favicon.ico&quot;);\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n     public void show() &#123;\n         try &#123;\n             this.sendImage(&quot;show.png&quot;);\n         &#125; catch (Exception e) &#123;\n             e.printStackTrace();\n         &#125;\n     &#125;\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123;\n        cause.printStackTrace();\n        ctx.close();\n    &#125;\n&#125;\n</code></pre>\n"},{"title":"SocketIO","date":"2021-12-17T05:30:37.000Z","author":"Fanrencli","_content":"## BIO\n\n- `BIO`即传统的IO操作接口\n- 服务器端：`ServerSocket`\n- 客户端：`Socket`\n\n\n### 服务器端（ServerSocket）\n\n- 构造方法：`public ServerSocket(int port) throws IOException`\n- 监听客户端连接：`public Socket accept() throws IOException`\n- 取得客户端的数据：`public OutputStream getInputStream() throws IOException`\n- 向客户端发送数据`public OutputStream getOutputStream() throws IOException`\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        ServerSocket serverSocket = new ServerSocket(9999);\n        System.out.println(\"等待用户链接-----------------\");\n        Socket client = serverSocket.accept();\n        // 获取客户端输入的数据\n        InputStream in = client.getInputStream();\n        // 获取输入数据也可以通过in.read()/in.read(buffer)->new String(buffer,0,len);\n        Scanner scanner = new Scanner(in);\n        scanner.useDelimiter(\"\\n\");\n        // 获取向客户端输出数据的流，并向客户端输出数据\n        OutputStream out = client.getOutputStream();\n        // 向客户端输出数据也可以用out.write(\"helloworld\".getbytes())\n        PrintStream printStream = new PrintStream(out);\n        while(scanner.hasNext()){\n            String req = scanner.next();\n            if(\"q\".equals(req)){\n                break;\n            }\n            System.out.println(req);\n            printStream.println(req);//注意这里的println,也可以换位printStream.print(req+\"\\n\")否则无法输出\n        }\n        out.close();\n        client.close();\n        serverSocket.close();\n    }\n}\n```\n\n### 客户端（Socket）\n- 构造方法：`public Socket(String IP, int port) throws IOException`\n- 取得服务器的数据：`public OutputStream getInputStream() throws IOException`\n- 向服务器发送数据`public OutputStream getOutputStream() throws IOException`\n\n\n```java\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        Socket scoket =new Socket(\"localhost\",9999);\n        Scanner scanner = new Scanner(scoket.getInputStream());\n        scanner.useDelimiter(\"\\n\");\n        Scanner input = new Scanner(System.in);\n        input.useDelimiter(\"\\n\");\n        PrintStream printStream = new PrintStream(scoket.getOutputStream());\n        while (true){\n            System.out.print(\"Inpu data:\");\n            if(input.hasNext()){\n                String str = input.next();\n                if(\"q\".equals(str)){\n                    break;\n                }\n                printStream.print(str+\"\\n\");\n            }\n            if(scanner.hasNext()){\n                System.out.println(scanner.next());\n            }\n        }\n        input.close();\n        printStream.close();\n        scanner.close();\n        scoket.close();\n    }\n}\n```\n\n### 多线程解决BIO带来的问题\n\n- BIO即阻塞IO，如果仅用单线程处理，那么只允许一个客户链接服务器，要实现多个客户链接，就需要采用多线程处理\n\n\n```java\nclass test implements Runnable{\n    private Socket clientsocket;\n    public test(Socket socket){\n        this.clientsocket = socket;\n    }\n    @Override\n    public void run() {\n        try{\n            Scanner input = new Scanner(this.clientsocket.getInputStream());\n            while (input.hasNext()){\n                String request = input.next();\n                if(\"quit\".equals(request)){\n                    break;\n                }\n                System.out.println(String.format(\"From %s : %s\",this.clientsocket.getRemoteSocketAddress(),request));\n                String response = \"From BIOserver \"+request +\"\\n\";\n                this.clientsocket.getOutputStream().write(response.getBytes());\n            }\n            input.close();\n            this.clientsocket.close();\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n\n    }\n}\npublic class BIO_ThreadPool {\n    public static void main(String[] args) throws IOException {\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\n        ServerSocket serverSocket = new ServerSocket(9999);\n        System.out.println(\"BIO server has started, listening on port\"+ serverSocket.getLocalSocketAddress());\n        // 循环监听是否有客户端连接，并分配线程执行\n        while (true){\n            Socket clientsocket = serverSocket.accept();\n            executorService.submit(new test(clientsocket));\n            System.out.println(\"connection from \"+clientsocket.getRemoteSocketAddress());\n\n        }\n\n    }\n}\n```\n\n## NIO\n\n- 网络编程主要分为5种IO模型：\n    - 阻塞型IO（BIO）:当请求的数据没有准备好时，则一直等待；常用于计算（CPU）密集型；\n    - 非阻塞型IO（NIO）:当请求的数据没有准备好时，则返回一个错误，然后再发送请求；\n    - 多路复用IO(NIO):使用一个selector线程去轮询多个socket，若存在socket准备好数据则进行处理；这样可以使用一个线程管理多个socket链接，常用于连接数较多的情况；且轮询的线程是内核执行的，所以速度很快；但是对于轮询的数量需要限制，否则程序效率下降。\n    - 信号驱动IO：在发起请求时，会给对应的socket注册一个响应函数，然后继续执行其他操作，当数据准备好的时候，则调用之前注册的响应函数\n    - 异步IO（AIO）：在发送请求之后，继续执行其他操作，当数据准备好的时候告诉线程，底层由内核epoll支持。\n- `NIO`所涉及的相关操作类\n    - `ServerSocketChannel`只作为判断是否有客户端连接:\n        - 创建一个服务器通道 `public static ServerSocketChannel open() throws IOException`;\n        - 绑定通道对应的端口：`public final ServerSocketChannel bind(SocketAddress local) throws OException`;\n        - 将通道注册到selector中：`public final SelectionKey register(Selector sel, int ops)        throws ClosedChannelException`\n    - `SocketChannel`（用于客户端写数据给服务端，服务端写数据给客户端）:\n        - 创建一个服务器通道 `public static SocketChannel open() throws IOException`;\n        - 链接服务器：`public abstract boolean connect(SocketAddress remote) throws IOException;`;\n    - `ByteBuffer`\n        - 用于接收通道中的数据，注意无论是客户端还是服务器端的数据都需要从通过缓冲区进入通道中\n    - `Selector`\n        - 创建一个selector：`public static Selector open() throws IOException`;\n\n### NIO客户端\n\n```java\npublic class NIO {\n    public static void main(String[] args) throws IOException{\n\n        SocketChannel socketChannel = SocketChannel.open(new InetSocketAddress(\"www.baidu.com\", 80));\n        socketChannel.configureBlocking(false);\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        socketChannel.read(byteBuffer); //读取客户端通道获取的数据\n        // socketChannel.write(byteBuffer); 向客户端通道写数据\n        socketChannel.close();\n        System.out.println(\"test end!\");\n        System.out.println(new String(byteBuffer.array()));\n    }\n}\n```\n\n### NIO服务器端\n\n```java\npublic class NIO {\n    public static void main(String[] args) throws IOException{\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        serverSocketChannel.configureBlocking(false);\n        serverSocketChannel.bind(new InetSocketAddress(9999));\n        System.out.println(\"NIO server has start on port \" + serverSocketChannel.getLocalAddress());\n        ServerSocketChannel serverSocketChannel1 = ServerSocketChannel.open();\n        serverSocketChannel1.configureBlocking(false);\n        serverSocketChannel1.bind(new InetSocketAddress(8888));\n        System.out.println(\"NIO server has start on port \" + serverSocketChannel1.getLocalAddress());\n\n        Selector selector = Selector.open();\n        serverSocketChannel1.register(selector,SelectionKey.OP_ACCEPT);\n        serverSocketChannel.register(selector,SelectionKey.OP_ACCEPT);\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        while (true){\n            int select = selector.select();\n            if(select==0){\n                continue;\n            }\n            Set<SelectionKey> selectionKeys = selector.selectedKeys();\n            Iterator<SelectionKey> iter = selectionKeys.iterator();\n            while (iter.hasNext()){\n                SelectionKey selectionKey = iter.next();\n                if(selectionKey.isAcceptable()){\n                    ServerSocketChannel channel = (ServerSocketChannel) selectionKey.channel();\n                    SocketChannel socketChannel = channel.accept();\n                    System.out.println(\"connection from \" +socketChannel.getRemoteAddress());\n\n                    socketChannel.configureBlocking(false);\n                    socketChannel.register(selector,SelectionKey.OP_READ);\n                }\n                if(selectionKey.isReadable()){\n                    SocketChannel socketChannel = (SocketChannel) selectionKey.channel();\n                    socketChannel.read(byteBuffer);\n                    String request = new String(byteBuffer.array()).trim();\n                    byteBuffer.clear();\n                    System.out.println(String.format(\"From %s : %s \",socketChannel.getRemoteAddress(),request));\n                    String response = \"From NIOserver \"+request +\"\\n\";\n                    socketChannel.write(ByteBuffer.wrap(response.getBytes()));\n\n                }\n                iter.remove();\n            }\n        }\n    }\n}\n```","source":"_posts/JAVA/SocketIO.md","raw":"---\ntitle: SocketIO\ndate: 2021-12-17 13:30:37\ncategories:\n  - JAVA\n  - BIO\n  - NIO\ntags:\n  - Socket\n  - ServerSocket\n  - Channel\n  - Selector\n  - Buffer\nauthor: Fanrencli\n---\n## BIO\n\n- `BIO`即传统的IO操作接口\n- 服务器端：`ServerSocket`\n- 客户端：`Socket`\n\n\n### 服务器端（ServerSocket）\n\n- 构造方法：`public ServerSocket(int port) throws IOException`\n- 监听客户端连接：`public Socket accept() throws IOException`\n- 取得客户端的数据：`public OutputStream getInputStream() throws IOException`\n- 向客户端发送数据`public OutputStream getOutputStream() throws IOException`\n\n```java\npublic class Main {\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        ServerSocket serverSocket = new ServerSocket(9999);\n        System.out.println(\"等待用户链接-----------------\");\n        Socket client = serverSocket.accept();\n        // 获取客户端输入的数据\n        InputStream in = client.getInputStream();\n        // 获取输入数据也可以通过in.read()/in.read(buffer)->new String(buffer,0,len);\n        Scanner scanner = new Scanner(in);\n        scanner.useDelimiter(\"\\n\");\n        // 获取向客户端输出数据的流，并向客户端输出数据\n        OutputStream out = client.getOutputStream();\n        // 向客户端输出数据也可以用out.write(\"helloworld\".getbytes())\n        PrintStream printStream = new PrintStream(out);\n        while(scanner.hasNext()){\n            String req = scanner.next();\n            if(\"q\".equals(req)){\n                break;\n            }\n            System.out.println(req);\n            printStream.println(req);//注意这里的println,也可以换位printStream.print(req+\"\\n\")否则无法输出\n        }\n        out.close();\n        client.close();\n        serverSocket.close();\n    }\n}\n```\n\n### 客户端（Socket）\n- 构造方法：`public Socket(String IP, int port) throws IOException`\n- 取得服务器的数据：`public OutputStream getInputStream() throws IOException`\n- 向服务器发送数据`public OutputStream getOutputStream() throws IOException`\n\n\n```java\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        Socket scoket =new Socket(\"localhost\",9999);\n        Scanner scanner = new Scanner(scoket.getInputStream());\n        scanner.useDelimiter(\"\\n\");\n        Scanner input = new Scanner(System.in);\n        input.useDelimiter(\"\\n\");\n        PrintStream printStream = new PrintStream(scoket.getOutputStream());\n        while (true){\n            System.out.print(\"Inpu data:\");\n            if(input.hasNext()){\n                String str = input.next();\n                if(\"q\".equals(str)){\n                    break;\n                }\n                printStream.print(str+\"\\n\");\n            }\n            if(scanner.hasNext()){\n                System.out.println(scanner.next());\n            }\n        }\n        input.close();\n        printStream.close();\n        scanner.close();\n        scoket.close();\n    }\n}\n```\n\n### 多线程解决BIO带来的问题\n\n- BIO即阻塞IO，如果仅用单线程处理，那么只允许一个客户链接服务器，要实现多个客户链接，就需要采用多线程处理\n\n\n```java\nclass test implements Runnable{\n    private Socket clientsocket;\n    public test(Socket socket){\n        this.clientsocket = socket;\n    }\n    @Override\n    public void run() {\n        try{\n            Scanner input = new Scanner(this.clientsocket.getInputStream());\n            while (input.hasNext()){\n                String request = input.next();\n                if(\"quit\".equals(request)){\n                    break;\n                }\n                System.out.println(String.format(\"From %s : %s\",this.clientsocket.getRemoteSocketAddress(),request));\n                String response = \"From BIOserver \"+request +\"\\n\";\n                this.clientsocket.getOutputStream().write(response.getBytes());\n            }\n            input.close();\n            this.clientsocket.close();\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n\n    }\n}\npublic class BIO_ThreadPool {\n    public static void main(String[] args) throws IOException {\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\n        ServerSocket serverSocket = new ServerSocket(9999);\n        System.out.println(\"BIO server has started, listening on port\"+ serverSocket.getLocalSocketAddress());\n        // 循环监听是否有客户端连接，并分配线程执行\n        while (true){\n            Socket clientsocket = serverSocket.accept();\n            executorService.submit(new test(clientsocket));\n            System.out.println(\"connection from \"+clientsocket.getRemoteSocketAddress());\n\n        }\n\n    }\n}\n```\n\n## NIO\n\n- 网络编程主要分为5种IO模型：\n    - 阻塞型IO（BIO）:当请求的数据没有准备好时，则一直等待；常用于计算（CPU）密集型；\n    - 非阻塞型IO（NIO）:当请求的数据没有准备好时，则返回一个错误，然后再发送请求；\n    - 多路复用IO(NIO):使用一个selector线程去轮询多个socket，若存在socket准备好数据则进行处理；这样可以使用一个线程管理多个socket链接，常用于连接数较多的情况；且轮询的线程是内核执行的，所以速度很快；但是对于轮询的数量需要限制，否则程序效率下降。\n    - 信号驱动IO：在发起请求时，会给对应的socket注册一个响应函数，然后继续执行其他操作，当数据准备好的时候，则调用之前注册的响应函数\n    - 异步IO（AIO）：在发送请求之后，继续执行其他操作，当数据准备好的时候告诉线程，底层由内核epoll支持。\n- `NIO`所涉及的相关操作类\n    - `ServerSocketChannel`只作为判断是否有客户端连接:\n        - 创建一个服务器通道 `public static ServerSocketChannel open() throws IOException`;\n        - 绑定通道对应的端口：`public final ServerSocketChannel bind(SocketAddress local) throws OException`;\n        - 将通道注册到selector中：`public final SelectionKey register(Selector sel, int ops)        throws ClosedChannelException`\n    - `SocketChannel`（用于客户端写数据给服务端，服务端写数据给客户端）:\n        - 创建一个服务器通道 `public static SocketChannel open() throws IOException`;\n        - 链接服务器：`public abstract boolean connect(SocketAddress remote) throws IOException;`;\n    - `ByteBuffer`\n        - 用于接收通道中的数据，注意无论是客户端还是服务器端的数据都需要从通过缓冲区进入通道中\n    - `Selector`\n        - 创建一个selector：`public static Selector open() throws IOException`;\n\n### NIO客户端\n\n```java\npublic class NIO {\n    public static void main(String[] args) throws IOException{\n\n        SocketChannel socketChannel = SocketChannel.open(new InetSocketAddress(\"www.baidu.com\", 80));\n        socketChannel.configureBlocking(false);\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        socketChannel.read(byteBuffer); //读取客户端通道获取的数据\n        // socketChannel.write(byteBuffer); 向客户端通道写数据\n        socketChannel.close();\n        System.out.println(\"test end!\");\n        System.out.println(new String(byteBuffer.array()));\n    }\n}\n```\n\n### NIO服务器端\n\n```java\npublic class NIO {\n    public static void main(String[] args) throws IOException{\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        serverSocketChannel.configureBlocking(false);\n        serverSocketChannel.bind(new InetSocketAddress(9999));\n        System.out.println(\"NIO server has start on port \" + serverSocketChannel.getLocalAddress());\n        ServerSocketChannel serverSocketChannel1 = ServerSocketChannel.open();\n        serverSocketChannel1.configureBlocking(false);\n        serverSocketChannel1.bind(new InetSocketAddress(8888));\n        System.out.println(\"NIO server has start on port \" + serverSocketChannel1.getLocalAddress());\n\n        Selector selector = Selector.open();\n        serverSocketChannel1.register(selector,SelectionKey.OP_ACCEPT);\n        serverSocketChannel.register(selector,SelectionKey.OP_ACCEPT);\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        while (true){\n            int select = selector.select();\n            if(select==0){\n                continue;\n            }\n            Set<SelectionKey> selectionKeys = selector.selectedKeys();\n            Iterator<SelectionKey> iter = selectionKeys.iterator();\n            while (iter.hasNext()){\n                SelectionKey selectionKey = iter.next();\n                if(selectionKey.isAcceptable()){\n                    ServerSocketChannel channel = (ServerSocketChannel) selectionKey.channel();\n                    SocketChannel socketChannel = channel.accept();\n                    System.out.println(\"connection from \" +socketChannel.getRemoteAddress());\n\n                    socketChannel.configureBlocking(false);\n                    socketChannel.register(selector,SelectionKey.OP_READ);\n                }\n                if(selectionKey.isReadable()){\n                    SocketChannel socketChannel = (SocketChannel) selectionKey.channel();\n                    socketChannel.read(byteBuffer);\n                    String request = new String(byteBuffer.array()).trim();\n                    byteBuffer.clear();\n                    System.out.println(String.format(\"From %s : %s \",socketChannel.getRemoteAddress(),request));\n                    String response = \"From NIOserver \"+request +\"\\n\";\n                    socketChannel.write(ByteBuffer.wrap(response.getBytes()));\n\n                }\n                iter.remove();\n            }\n        }\n    }\n}\n```","slug":"JAVA/SocketIO","published":1,"updated":"2021-12-17T11:57:10.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuhigbk000f8suogq1v5en7","content":"<h2 id=\"BIO\"><a href=\"#BIO\" class=\"headerlink\" title=\"BIO\"></a>BIO</h2><ul>\n<li><code>BIO</code>即传统的IO操作接口</li>\n<li>服务器端：<code>ServerSocket</code></li>\n<li>客户端：<code>Socket</code></li>\n</ul>\n<h3 id=\"服务器端（ServerSocket）\"><a href=\"#服务器端（ServerSocket）\" class=\"headerlink\" title=\"服务器端（ServerSocket）\"></a>服务器端（ServerSocket）</h3><ul>\n<li>构造方法：<code>public ServerSocket(int port) throws IOException</code></li>\n<li>监听客户端连接：<code>public Socket accept() throws IOException</code></li>\n<li>取得客户端的数据：<code>public OutputStream getInputStream() throws IOException</code></li>\n<li>向客户端发送数据<code>public OutputStream getOutputStream() throws IOException</code></li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> ClassNotFoundException <span class=\"token punctuation\">{</span>\n        ServerSocket serverSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等待用户链接-----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Socket client <span class=\"token operator\">=</span> serverSocket<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 获取客户端输入的数据</span>\n        InputStream in <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 获取输入数据也可以通过in.read()/in.read(buffer)->new String(buffer,0,len);</span>\n        Scanner scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        scanner<span class=\"token punctuation\">.</span><span class=\"token function\">useDelimiter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 获取向客户端输出数据的流，并向客户端输出数据</span>\n        OutputStream out <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 向客户端输出数据也可以用out.write(\"helloworld\".getbytes())</span>\n        PrintStream printStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintStream</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            String req <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"q\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            printStream<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//注意这里的println,也可以换位printStream.print(req+\"\\n\")否则无法输出</span>\n        <span class=\"token punctuation\">}</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        serverSocket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"客户端（Socket）\"><a href=\"#客户端（Socket）\" class=\"headerlink\" title=\"客户端（Socket）\"></a>客户端（Socket）</h3><ul>\n<li>构造方法：<code>public Socket(String IP, int port) throws IOException</code></li>\n<li>取得服务器的数据：<code>public OutputStream getInputStream() throws IOException</code></li>\n<li>向服务器发送数据<code>public OutputStream getOutputStream() throws IOException</code></li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        Socket scoket <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Scanner scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>scoket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        scanner<span class=\"token punctuation\">.</span><span class=\"token function\">useDelimiter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Scanner input <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        input<span class=\"token punctuation\">.</span><span class=\"token function\">useDelimiter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        PrintStream printStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintStream</span><span class=\"token punctuation\">(</span>scoket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inpu data:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                String str <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"q\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                printStream<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        input<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        printStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        scanner<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        scoket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"多线程解决BIO带来的问题\"><a href=\"#多线程解决BIO带来的问题\" class=\"headerlink\" title=\"多线程解决BIO带来的问题\"></a>多线程解决BIO带来的问题</h3><ul>\n<li>BIO即阻塞IO，如果仅用单线程处理，那么只允许一个客户链接服务器，要实现多个客户链接，就需要采用多线程处理</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">test</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> Socket clientsocket<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>Socket socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientsocket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            Scanner input <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientsocket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                String request <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"quit\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"From %s : %s\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientsocket<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                String response <span class=\"token operator\">=</span> <span class=\"token string\">\"From BIOserver \"</span><span class=\"token operator\">+</span>request <span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientsocket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            input<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientsocket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BIO_ThreadPool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        ExecutorService executorService <span class=\"token operator\">=</span> Executors<span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ServerSocket serverSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BIO server has started, listening on port\"</span><span class=\"token operator\">+</span> serverSocket<span class=\"token punctuation\">.</span><span class=\"token function\">getLocalSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 循环监听是否有客户端连接，并分配线程执行</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            Socket clientsocket <span class=\"token operator\">=</span> serverSocket<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            executorService<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">test</span><span class=\"token punctuation\">(</span>clientsocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connection from \"</span><span class=\"token operator\">+</span>clientsocket<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h2><ul>\n<li>网络编程主要分为5种IO模型：<ul>\n<li>阻塞型IO（BIO）:当请求的数据没有准备好时，则一直等待；常用于计算（CPU）密集型；</li>\n<li>非阻塞型IO（NIO）:当请求的数据没有准备好时，则返回一个错误，然后再发送请求；</li>\n<li>多路复用IO(NIO):使用一个selector线程去轮询多个socket，若存在socket准备好数据则进行处理；这样可以使用一个线程管理多个socket链接，常用于连接数较多的情况；且轮询的线程是内核执行的，所以速度很快；但是对于轮询的数量需要限制，否则程序效率下降。</li>\n<li>信号驱动IO：在发起请求时，会给对应的socket注册一个响应函数，然后继续执行其他操作，当数据准备好的时候，则调用之前注册的响应函数</li>\n<li>异步IO（AIO）：在发送请求之后，继续执行其他操作，当数据准备好的时候告诉线程，底层由内核epoll支持。</li>\n</ul>\n</li>\n<li><code>NIO</code>所涉及的相关操作类<ul>\n<li><code>ServerSocketChannel</code>只作为判断是否有客户端连接:<ul>\n<li>创建一个服务器通道 <code>public static ServerSocketChannel open() throws IOException</code>;</li>\n<li>绑定通道对应的端口：<code>public final ServerSocketChannel bind(SocketAddress local) throws OException</code>;</li>\n<li>将通道注册到selector中：<code>public final SelectionKey register(Selector sel, int ops)        throws ClosedChannelException</code></li>\n</ul>\n</li>\n<li><code>SocketChannel</code>（用于客户端写数据给服务端，服务端写数据给客户端）:<ul>\n<li>创建一个服务器通道 <code>public static SocketChannel open() throws IOException</code>;</li>\n<li>链接服务器：<code>public abstract boolean connect(SocketAddress remote) throws IOException;</code>;</li>\n</ul>\n</li>\n<li><code>ByteBuffer</code><ul>\n<li>用于接收通道中的数据，注意无论是客户端还是服务器端的数据都需要从通过缓冲区进入通道中</li>\n</ul>\n</li>\n<li><code>Selector</code><ul>\n<li>创建一个selector：<code>public static Selector open() throws IOException</code>;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"NIO客户端\"><a href=\"#NIO客户端\" class=\"headerlink\" title=\"NIO客户端\"></a>NIO客户端</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NIO</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">{</span>\n\n        SocketChannel socketChannel <span class=\"token operator\">=</span> SocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"www.baidu.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ByteBuffer byteBuffer <span class=\"token operator\">=</span> ByteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>byteBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//读取客户端通道获取的数据</span>\n        <span class=\"token comment\" spellcheck=\"true\">// socketChannel.write(byteBuffer); 向客户端通道写数据</span>\n        socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test end!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>byteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"NIO服务器端\"><a href=\"#NIO服务器端\" class=\"headerlink\" title=\"NIO服务器端\"></a>NIO服务器端</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NIO</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">{</span>\n        ServerSocketChannel serverSocketChannel <span class=\"token operator\">=</span> ServerSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        serverSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        serverSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NIO server has start on port \"</span> <span class=\"token operator\">+</span> serverSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">getLocalAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ServerSocketChannel serverSocketChannel1 <span class=\"token operator\">=</span> ServerSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        serverSocketChannel1<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        serverSocketChannel1<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NIO server has start on port \"</span> <span class=\"token operator\">+</span> serverSocketChannel1<span class=\"token punctuation\">.</span><span class=\"token function\">getLocalAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Selector selector <span class=\"token operator\">=</span> Selector<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        serverSocketChannel1<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span>SelectionKey<span class=\"token punctuation\">.</span>OP_ACCEPT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        serverSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span>SelectionKey<span class=\"token punctuation\">.</span>OP_ACCEPT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ByteBuffer byteBuffer <span class=\"token operator\">=</span> ByteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> select <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>select<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Set<span class=\"token operator\">&lt;</span>SelectionKey<span class=\"token operator\">></span> selectionKeys <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">selectedKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Iterator<span class=\"token operator\">&lt;</span>SelectionKey<span class=\"token operator\">></span> iter <span class=\"token operator\">=</span> selectionKeys<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                SelectionKey selectionKey <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>selectionKey<span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    ServerSocketChannel channel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ServerSocketChannel<span class=\"token punctuation\">)</span> selectionKey<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    SocketChannel socketChannel <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connection from \"</span> <span class=\"token operator\">+</span>socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span>SelectionKey<span class=\"token punctuation\">.</span>OP_READ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>selectionKey<span class=\"token punctuation\">.</span><span class=\"token function\">isReadable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    SocketChannel socketChannel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SocketChannel<span class=\"token punctuation\">)</span> selectionKey<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>byteBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    String request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>byteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    byteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"From %s : %s \"</span><span class=\"token punctuation\">,</span>socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    String response <span class=\"token operator\">=</span> <span class=\"token string\">\"From NIOserver \"</span><span class=\"token operator\">+</span>request <span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n                    socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>ByteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token punctuation\">}</span>\n                iter<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"BIO\"><a href=\"#BIO\" class=\"headerlink\" title=\"BIO\"></a>BIO</h2><ul>\n<li><code>BIO</code>即传统的IO操作接口</li>\n<li>服务器端：<code>ServerSocket</code></li>\n<li>客户端：<code>Socket</code></li>\n</ul>\n<h3 id=\"服务器端（ServerSocket）\"><a href=\"#服务器端（ServerSocket）\" class=\"headerlink\" title=\"服务器端（ServerSocket）\"></a>服务器端（ServerSocket）</h3><ul>\n<li>构造方法：<code>public ServerSocket(int port) throws IOException</code></li>\n<li>监听客户端连接：<code>public Socket accept() throws IOException</code></li>\n<li>取得客户端的数据：<code>public OutputStream getInputStream() throws IOException</code></li>\n<li>向客户端发送数据<code>public OutputStream getOutputStream() throws IOException</code></li>\n</ul>\n<pre><code class=\"java\">public class Main &#123;\n    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;\n        ServerSocket serverSocket = new ServerSocket(9999);\n        System.out.println(&quot;等待用户链接-----------------&quot;);\n        Socket client = serverSocket.accept();\n        // 获取客户端输入的数据\n        InputStream in = client.getInputStream();\n        // 获取输入数据也可以通过in.read()/in.read(buffer)-&gt;new String(buffer,0,len);\n        Scanner scanner = new Scanner(in);\n        scanner.useDelimiter(&quot;\\n&quot;);\n        // 获取向客户端输出数据的流，并向客户端输出数据\n        OutputStream out = client.getOutputStream();\n        // 向客户端输出数据也可以用out.write(&quot;helloworld&quot;.getbytes())\n        PrintStream printStream = new PrintStream(out);\n        while(scanner.hasNext())&#123;\n            String req = scanner.next();\n            if(&quot;q&quot;.equals(req))&#123;\n                break;\n            &#125;\n            System.out.println(req);\n            printStream.println(req);//注意这里的println,也可以换位printStream.print(req+&quot;\\n&quot;)否则无法输出\n        &#125;\n        out.close();\n        client.close();\n        serverSocket.close();\n    &#125;\n&#125;</code></pre>\n<h3 id=\"客户端（Socket）\"><a href=\"#客户端（Socket）\" class=\"headerlink\" title=\"客户端（Socket）\"></a>客户端（Socket）</h3><ul>\n<li>构造方法：<code>public Socket(String IP, int port) throws IOException</code></li>\n<li>取得服务器的数据：<code>public OutputStream getInputStream() throws IOException</code></li>\n<li>向服务器发送数据<code>public OutputStream getOutputStream() throws IOException</code></li>\n</ul>\n<pre><code class=\"java\">public class test1 &#123;\n    public static void main(String[] args) throws Exception &#123;\n        Socket scoket =new Socket(&quot;localhost&quot;,9999);\n        Scanner scanner = new Scanner(scoket.getInputStream());\n        scanner.useDelimiter(&quot;\\n&quot;);\n        Scanner input = new Scanner(System.in);\n        input.useDelimiter(&quot;\\n&quot;);\n        PrintStream printStream = new PrintStream(scoket.getOutputStream());\n        while (true)&#123;\n            System.out.print(&quot;Inpu data:&quot;);\n            if(input.hasNext())&#123;\n                String str = input.next();\n                if(&quot;q&quot;.equals(str))&#123;\n                    break;\n                &#125;\n                printStream.print(str+&quot;\\n&quot;);\n            &#125;\n            if(scanner.hasNext())&#123;\n                System.out.println(scanner.next());\n            &#125;\n        &#125;\n        input.close();\n        printStream.close();\n        scanner.close();\n        scoket.close();\n    &#125;\n&#125;</code></pre>\n<h3 id=\"多线程解决BIO带来的问题\"><a href=\"#多线程解决BIO带来的问题\" class=\"headerlink\" title=\"多线程解决BIO带来的问题\"></a>多线程解决BIO带来的问题</h3><ul>\n<li>BIO即阻塞IO，如果仅用单线程处理，那么只允许一个客户链接服务器，要实现多个客户链接，就需要采用多线程处理</li>\n</ul>\n<pre><code class=\"java\">class test implements Runnable&#123;\n    private Socket clientsocket;\n    public test(Socket socket)&#123;\n        this.clientsocket = socket;\n    &#125;\n    @Override\n    public void run() &#123;\n        try&#123;\n            Scanner input = new Scanner(this.clientsocket.getInputStream());\n            while (input.hasNext())&#123;\n                String request = input.next();\n                if(&quot;quit&quot;.equals(request))&#123;\n                    break;\n                &#125;\n                System.out.println(String.format(&quot;From %s : %s&quot;,this.clientsocket.getRemoteSocketAddress(),request));\n                String response = &quot;From BIOserver &quot;+request +&quot;\\n&quot;;\n                this.clientsocket.getOutputStream().write(response.getBytes());\n            &#125;\n            input.close();\n            this.clientsocket.close();\n        &#125;catch (Exception e)&#123;\n            e.printStackTrace();\n        &#125;\n\n    &#125;\n&#125;\npublic class BIO_ThreadPool &#123;\n    public static void main(String[] args) throws IOException &#123;\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\n        ServerSocket serverSocket = new ServerSocket(9999);\n        System.out.println(&quot;BIO server has started, listening on port&quot;+ serverSocket.getLocalSocketAddress());\n        // 循环监听是否有客户端连接，并分配线程执行\n        while (true)&#123;\n            Socket clientsocket = serverSocket.accept();\n            executorService.submit(new test(clientsocket));\n            System.out.println(&quot;connection from &quot;+clientsocket.getRemoteSocketAddress());\n\n        &#125;\n\n    &#125;\n&#125;</code></pre>\n<h2 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h2><ul>\n<li>网络编程主要分为5种IO模型：<ul>\n<li>阻塞型IO（BIO）:当请求的数据没有准备好时，则一直等待；常用于计算（CPU）密集型；</li>\n<li>非阻塞型IO（NIO）:当请求的数据没有准备好时，则返回一个错误，然后再发送请求；</li>\n<li>多路复用IO(NIO):使用一个selector线程去轮询多个socket，若存在socket准备好数据则进行处理；这样可以使用一个线程管理多个socket链接，常用于连接数较多的情况；且轮询的线程是内核执行的，所以速度很快；但是对于轮询的数量需要限制，否则程序效率下降。</li>\n<li>信号驱动IO：在发起请求时，会给对应的socket注册一个响应函数，然后继续执行其他操作，当数据准备好的时候，则调用之前注册的响应函数</li>\n<li>异步IO（AIO）：在发送请求之后，继续执行其他操作，当数据准备好的时候告诉线程，底层由内核epoll支持。</li>\n</ul>\n</li>\n<li><code>NIO</code>所涉及的相关操作类<ul>\n<li><code>ServerSocketChannel</code>只作为判断是否有客户端连接:<ul>\n<li>创建一个服务器通道 <code>public static ServerSocketChannel open() throws IOException</code>;</li>\n<li>绑定通道对应的端口：<code>public final ServerSocketChannel bind(SocketAddress local) throws OException</code>;</li>\n<li>将通道注册到selector中：<code>public final SelectionKey register(Selector sel, int ops)        throws ClosedChannelException</code></li>\n</ul>\n</li>\n<li><code>SocketChannel</code>（用于客户端写数据给服务端，服务端写数据给客户端）:<ul>\n<li>创建一个服务器通道 <code>public static SocketChannel open() throws IOException</code>;</li>\n<li>链接服务器：<code>public abstract boolean connect(SocketAddress remote) throws IOException;</code>;</li>\n</ul>\n</li>\n<li><code>ByteBuffer</code><ul>\n<li>用于接收通道中的数据，注意无论是客户端还是服务器端的数据都需要从通过缓冲区进入通道中</li>\n</ul>\n</li>\n<li><code>Selector</code><ul>\n<li>创建一个selector：<code>public static Selector open() throws IOException</code>;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"NIO客户端\"><a href=\"#NIO客户端\" class=\"headerlink\" title=\"NIO客户端\"></a>NIO客户端</h3><pre><code class=\"java\">public class NIO &#123;\n    public static void main(String[] args) throws IOException&#123;\n\n        SocketChannel socketChannel = SocketChannel.open(new InetSocketAddress(&quot;www.baidu.com&quot;, 80));\n        socketChannel.configureBlocking(false);\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        socketChannel.read(byteBuffer); //读取客户端通道获取的数据\n        // socketChannel.write(byteBuffer); 向客户端通道写数据\n        socketChannel.close();\n        System.out.println(&quot;test end!&quot;);\n        System.out.println(new String(byteBuffer.array()));\n    &#125;\n&#125;</code></pre>\n<h3 id=\"NIO服务器端\"><a href=\"#NIO服务器端\" class=\"headerlink\" title=\"NIO服务器端\"></a>NIO服务器端</h3><pre><code class=\"java\">public class NIO &#123;\n    public static void main(String[] args) throws IOException&#123;\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        serverSocketChannel.configureBlocking(false);\n        serverSocketChannel.bind(new InetSocketAddress(9999));\n        System.out.println(&quot;NIO server has start on port &quot; + serverSocketChannel.getLocalAddress());\n        ServerSocketChannel serverSocketChannel1 = ServerSocketChannel.open();\n        serverSocketChannel1.configureBlocking(false);\n        serverSocketChannel1.bind(new InetSocketAddress(8888));\n        System.out.println(&quot;NIO server has start on port &quot; + serverSocketChannel1.getLocalAddress());\n\n        Selector selector = Selector.open();\n        serverSocketChannel1.register(selector,SelectionKey.OP_ACCEPT);\n        serverSocketChannel.register(selector,SelectionKey.OP_ACCEPT);\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        while (true)&#123;\n            int select = selector.select();\n            if(select==0)&#123;\n                continue;\n            &#125;\n            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();\n            Iterator&lt;SelectionKey&gt; iter = selectionKeys.iterator();\n            while (iter.hasNext())&#123;\n                SelectionKey selectionKey = iter.next();\n                if(selectionKey.isAcceptable())&#123;\n                    ServerSocketChannel channel = (ServerSocketChannel) selectionKey.channel();\n                    SocketChannel socketChannel = channel.accept();\n                    System.out.println(&quot;connection from &quot; +socketChannel.getRemoteAddress());\n\n                    socketChannel.configureBlocking(false);\n                    socketChannel.register(selector,SelectionKey.OP_READ);\n                &#125;\n                if(selectionKey.isReadable())&#123;\n                    SocketChannel socketChannel = (SocketChannel) selectionKey.channel();\n                    socketChannel.read(byteBuffer);\n                    String request = new String(byteBuffer.array()).trim();\n                    byteBuffer.clear();\n                    System.out.println(String.format(&quot;From %s : %s &quot;,socketChannel.getRemoteAddress(),request));\n                    String response = &quot;From NIOserver &quot;+request +&quot;\\n&quot;;\n                    socketChannel.write(ByteBuffer.wrap(response.getBytes()));\n\n                &#125;\n                iter.remove();\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n"},{"title":"Spring","date":"2021-12-23T12:43:44.000Z","author":"Fanrencli","_content":"\n## IOC\n\n### 四种注入方式\n\n- 构造器注入\n- setter注入\n- 静态工厂\n- 实例工厂\n\n### Bean\n\n- singleton:单例，默认作用域。\n- prototype:原型，每次创建一个新对象。\n- request:请求，每次Http请求创建一个新对象，适用于WebApplicationContext环境下。\n- session:会话，同一个会话共享一个实例，不同会话使用不用的实例。\n- global-session:全局会话，所有会话共享一个实例。\n\n<p style=\"text-indent:2em\">\n创建的Bean如果是prototype：对于原型Bean,每次创建一个新对象，也就是线程之间并不存在Bean共享，自然是不会有线程安全的问题。\n\n创建的Bean如果是：singleton，所有线程都共享一个单例实例Bean,因此是存在资源的竞争。\n如果单例Bean,是一个无状态Bean，也就是线程中的操作不会对Bean的成员执行查询以外的操作，那么这个单例Bean是线程安全的。比如Spring mvc 的 Controller、Service、Dao等，这些Bean大多是无状态的，只关注于方法本身。\n\n对于有状态的bean，Spring官方提供的bean，一般提供了通过ThreadLocal去解决线程安全的方法，比如RequestContextHolder、TransactionSynchronizationManager、LocaleContextHolder等。\n</p>\n\n## AOP\n\n- 通知（Advice）: AOP 框架中的增强处理。通知描述了切面何时执行以及如何执行增强处理。\n- 连接点（join point）: 连接点表示应用执行过程中能够插入切面的一个点，这个点可以是方法的调用、异常的抛出。在 Spring AOP 中，连接点总是方法的调用。\n- 切点（PointCut）: 可以插入增强处理的连接点。\n- 切面（Aspect）: 切面是通知和切点的结合。\n- 引入（Introduction）：引入允许我们向现有的类添加新的方法或者属性。\n- 织入（Weaving）: 将增强处理添加到目标对象中，并创建一个被增强的对象，这个过程就是织入。\n\n```java\n@Aspect\npublic class TransactionDemo {\n    @Pointcut(value=\"execution(* com.yangxin.core.service.*.*.*(..))\")\n    public void point(){\n    }\n    @Before(value=\"point()\")\n    public void before(){\n        System.out.println(\"transaction begin\");\n    }\n    @AfterReturning(value = \"point()\")\n    public void after(){\n        System.out.println(\"transaction commit\");\n    }\n    @Around(\"point()\")\n    public void around(ProceedingJoinPoint joinPoint) throws Throwable{\n        System.out.println(\"transaction begin\");\n        joinPoint.proceed();\n        System.out.println(\"transaction commit\");\n    }\n}\n```\n## MVC\n\n```xml\n<web-app>\n    <display-name>Archetype Created Web Application</display-name>\n    <servlet>\n        <servlet-name>mymvc</servlet-name>\n        <servlet-class>com.fanrencli.mvcframe.servlet.MyDispatcherServlet</servlet-class>\n        <init-param>\n            <param-name>contextconfiglocation</param-name>\n            <param-value>application.properties</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>mymvc</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n\n```java\npublic class MyDispatcherServlet extends HttpServlet {\n    private Map<String,Object>ioc = new HashMap<>();\n    private Properties contextconfig = new Properties();\n    private List<String> classNames = new ArrayList<>();\n    private Map<String,Method> handlerMapping = new HashMap<>();\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        this.doPost(req,resp);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        try {\n            doDispatch(req,resp);\n        }catch (Exception e){\n            e.printStackTrace();\n            resp.getWriter().write(\"500\");\n        }\n    }\n    private void doDispatch(HttpServletRequest req, HttpServletResponse resp) throws Exception{\n        String url = req.getRequestURI();\n        String contextpath = req.getContextPath();\n        url = url.replaceAll(contextpath,\"\").replaceAll(\"/+\",\"/\");\n        if(!this.handlerMapping.containsKey(url)){\n            resp.getWriter().write(\"404 Not Found\");\n        }\n        Method method = this.handlerMapping.get(url);\n        Map<String,String[]> params = req.getParameterMap();\n        String beanName = tolowerfirst(method.getDeclaringClass().getSimpleName());\n        method.invoke(ioc.get(beanName),new Object[]{req,resp,params.get(\"name\")[0]});\n    }\n\n    // 核心处理流程\n    @Override\n    public void init(ServletConfig config) throws ServletException {\n        System.out.println(\"start init\");\n        // 加载配置文件\n        doLoadConfig(config.getInitParameter(\"contextconfiglocation\"));\n        // 扫描所有包下的类\n        doScanner(contextconfig.getProperty(\"scanpackage\"));\n        // 对象进行实例化并存储到HashMap中\n        doinstance();\n        // 根据请求的对象的自动装配\n        doautowired();\n        // 根据将请求的URL与对应的处理方法结合起来\n        doinithandlermapping();\n        System.out.println(\"Spring Framework is init!!\");\n    }\n\n    private void doLoadConfig(String configlocation){\n        InputStream is =  this.getClass().getClassLoader().getResourceAsStream(configlocation);\n        try {\n            contextconfig.load(is);\n        }catch (IOException e){\n            e.printStackTrace();\n        }finally {\n            if(null==is){\n                System.out.println(\"is is NUll\");\n            }\n        }\n\n    }\n    private void doautowired(){\n        if(ioc.isEmpty()) return;\n        for(Map.Entry<String,Object> s : ioc.entrySet()){\n            Field[] fields = s.getValue().getClass().getDeclaredFields();\n            for (Field field:fields){\n                if(!field.isAnnotationPresent(MyAutowired.class))continue;\n                MyAutowired my = field.getAnnotation(MyAutowired.class);\n                String beanName = my.value().trim();\n                if(\"\".equals(beanName)){\n                    beanName = field.getType().getName();\n                }\n                field.setAccessible(true);\n\n                try {\n                    field.set(s.getValue(),ioc.get(beanName));\n                }catch (Exception e){\n                    e.printStackTrace();\n                    continue;\n                }\n\n            }\n        }\n    }\n    private void doinithandlermapping(){\n        if(ioc.isEmpty()) return;\n        for(Map.Entry<String ,Object>entry:ioc.entrySet()){\n            Class<?> clazz = entry.getValue().getClass();\n            if(!clazz.isAnnotationPresent(MyController.class))continue;\n            String baseurl = \"\";\n            if(clazz.isAnnotationPresent(MyRequestMapping.class)){\n                MyRequestMapping requestMapping = clazz.getAnnotation(MyRequestMapping.class);\n                baseurl = requestMapping.value();\n            }\n            for(Method method:clazz.getMethods()){\n                if(!method.isAnnotationPresent(MyRequestMapping.class)) continue;\n                MyRequestMapping requestMapping = method.getAnnotation(MyRequestMapping.class);\n                String url = (\"/\"+baseurl+\"/\"+requestMapping.value().replaceAll(\"/+\",\"/\"));\n                handlerMapping.put(url,method);\n                System.out.println(\"Mapped\"+url+\",\"+method);\n            }\n        }\n    }\n    private void doScanner(String s){\n        URL url = this.getClass().getClassLoader().getResource(\"/\"+s.replaceAll(\"\\\\.\",\"/\"));\n        File classpath = new File(url.getFile());\n        for (File file:classpath.listFiles()){\n            if(file.isDirectory()){\n                doScanner(s+\".\"+file.getName());\n            }else{\n                if(!file.getName().endsWith(\".class\")) continue;\n                String className = s + \".\" + file.getName().replaceAll(\".class\",\"\");\n                classNames.add(className);\n            }\n        }\n    }\n    private String tolowerfirst(String s){\n        char[] chars= s.toCharArray();\n        chars[0]+=32;\n        return String.valueOf(chars);\n    }\n    private void doinstance(){\n        if(classNames.isEmpty()) return;\n        try {\n            for(String classname:classNames){\n                Class<?> clazz = Class.forName(classname);\n                if(clazz.isAnnotationPresent(MyController.class)){\n                    String beanName = tolowerfirst(clazz.getSimpleName());\n                    Object instance = clazz.newInstance();\n                    ioc.put(beanName,instance);\n                }else if(clazz.isAnnotationPresent(MyService.class)){\n                    String beanName = tolowerfirst(clazz.getSimpleName());\n                    MyService service = clazz.getAnnotation(MyService.class);\n                    if(\"\".equals(service.value())){\n                        beanName = service.value();\n                    }\n                    Object instance = clazz.newInstance();\n                    ioc.put(beanName,instance);\n                    for(Class<?> i :clazz.getInterfaces()){\n                        if(ioc.containsKey(i.getName())){\n                            throw new Exception(\"this beanName is error\");\n                        }\n                        ioc.put(i.getName(),instance);\n                    }\n                }else{\n                    continue;\n                }\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n}\n```","source":"_posts/JAVA/Spring.md","raw":"---\ntitle: Spring\ndate: 2021-12-23 20:43:44\ncategories:\n  - JAVA\n  - Spring\ntags:\n  - AOP\n  - IOC\n  - MVC\nauthor: Fanrencli\n---\n\n## IOC\n\n### 四种注入方式\n\n- 构造器注入\n- setter注入\n- 静态工厂\n- 实例工厂\n\n### Bean\n\n- singleton:单例，默认作用域。\n- prototype:原型，每次创建一个新对象。\n- request:请求，每次Http请求创建一个新对象，适用于WebApplicationContext环境下。\n- session:会话，同一个会话共享一个实例，不同会话使用不用的实例。\n- global-session:全局会话，所有会话共享一个实例。\n\n<p style=\"text-indent:2em\">\n创建的Bean如果是prototype：对于原型Bean,每次创建一个新对象，也就是线程之间并不存在Bean共享，自然是不会有线程安全的问题。\n\n创建的Bean如果是：singleton，所有线程都共享一个单例实例Bean,因此是存在资源的竞争。\n如果单例Bean,是一个无状态Bean，也就是线程中的操作不会对Bean的成员执行查询以外的操作，那么这个单例Bean是线程安全的。比如Spring mvc 的 Controller、Service、Dao等，这些Bean大多是无状态的，只关注于方法本身。\n\n对于有状态的bean，Spring官方提供的bean，一般提供了通过ThreadLocal去解决线程安全的方法，比如RequestContextHolder、TransactionSynchronizationManager、LocaleContextHolder等。\n</p>\n\n## AOP\n\n- 通知（Advice）: AOP 框架中的增强处理。通知描述了切面何时执行以及如何执行增强处理。\n- 连接点（join point）: 连接点表示应用执行过程中能够插入切面的一个点，这个点可以是方法的调用、异常的抛出。在 Spring AOP 中，连接点总是方法的调用。\n- 切点（PointCut）: 可以插入增强处理的连接点。\n- 切面（Aspect）: 切面是通知和切点的结合。\n- 引入（Introduction）：引入允许我们向现有的类添加新的方法或者属性。\n- 织入（Weaving）: 将增强处理添加到目标对象中，并创建一个被增强的对象，这个过程就是织入。\n\n```java\n@Aspect\npublic class TransactionDemo {\n    @Pointcut(value=\"execution(* com.yangxin.core.service.*.*.*(..))\")\n    public void point(){\n    }\n    @Before(value=\"point()\")\n    public void before(){\n        System.out.println(\"transaction begin\");\n    }\n    @AfterReturning(value = \"point()\")\n    public void after(){\n        System.out.println(\"transaction commit\");\n    }\n    @Around(\"point()\")\n    public void around(ProceedingJoinPoint joinPoint) throws Throwable{\n        System.out.println(\"transaction begin\");\n        joinPoint.proceed();\n        System.out.println(\"transaction commit\");\n    }\n}\n```\n## MVC\n\n```xml\n<web-app>\n    <display-name>Archetype Created Web Application</display-name>\n    <servlet>\n        <servlet-name>mymvc</servlet-name>\n        <servlet-class>com.fanrencli.mvcframe.servlet.MyDispatcherServlet</servlet-class>\n        <init-param>\n            <param-name>contextconfiglocation</param-name>\n            <param-value>application.properties</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>mymvc</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n\n```java\npublic class MyDispatcherServlet extends HttpServlet {\n    private Map<String,Object>ioc = new HashMap<>();\n    private Properties contextconfig = new Properties();\n    private List<String> classNames = new ArrayList<>();\n    private Map<String,Method> handlerMapping = new HashMap<>();\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        this.doPost(req,resp);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        try {\n            doDispatch(req,resp);\n        }catch (Exception e){\n            e.printStackTrace();\n            resp.getWriter().write(\"500\");\n        }\n    }\n    private void doDispatch(HttpServletRequest req, HttpServletResponse resp) throws Exception{\n        String url = req.getRequestURI();\n        String contextpath = req.getContextPath();\n        url = url.replaceAll(contextpath,\"\").replaceAll(\"/+\",\"/\");\n        if(!this.handlerMapping.containsKey(url)){\n            resp.getWriter().write(\"404 Not Found\");\n        }\n        Method method = this.handlerMapping.get(url);\n        Map<String,String[]> params = req.getParameterMap();\n        String beanName = tolowerfirst(method.getDeclaringClass().getSimpleName());\n        method.invoke(ioc.get(beanName),new Object[]{req,resp,params.get(\"name\")[0]});\n    }\n\n    // 核心处理流程\n    @Override\n    public void init(ServletConfig config) throws ServletException {\n        System.out.println(\"start init\");\n        // 加载配置文件\n        doLoadConfig(config.getInitParameter(\"contextconfiglocation\"));\n        // 扫描所有包下的类\n        doScanner(contextconfig.getProperty(\"scanpackage\"));\n        // 对象进行实例化并存储到HashMap中\n        doinstance();\n        // 根据请求的对象的自动装配\n        doautowired();\n        // 根据将请求的URL与对应的处理方法结合起来\n        doinithandlermapping();\n        System.out.println(\"Spring Framework is init!!\");\n    }\n\n    private void doLoadConfig(String configlocation){\n        InputStream is =  this.getClass().getClassLoader().getResourceAsStream(configlocation);\n        try {\n            contextconfig.load(is);\n        }catch (IOException e){\n            e.printStackTrace();\n        }finally {\n            if(null==is){\n                System.out.println(\"is is NUll\");\n            }\n        }\n\n    }\n    private void doautowired(){\n        if(ioc.isEmpty()) return;\n        for(Map.Entry<String,Object> s : ioc.entrySet()){\n            Field[] fields = s.getValue().getClass().getDeclaredFields();\n            for (Field field:fields){\n                if(!field.isAnnotationPresent(MyAutowired.class))continue;\n                MyAutowired my = field.getAnnotation(MyAutowired.class);\n                String beanName = my.value().trim();\n                if(\"\".equals(beanName)){\n                    beanName = field.getType().getName();\n                }\n                field.setAccessible(true);\n\n                try {\n                    field.set(s.getValue(),ioc.get(beanName));\n                }catch (Exception e){\n                    e.printStackTrace();\n                    continue;\n                }\n\n            }\n        }\n    }\n    private void doinithandlermapping(){\n        if(ioc.isEmpty()) return;\n        for(Map.Entry<String ,Object>entry:ioc.entrySet()){\n            Class<?> clazz = entry.getValue().getClass();\n            if(!clazz.isAnnotationPresent(MyController.class))continue;\n            String baseurl = \"\";\n            if(clazz.isAnnotationPresent(MyRequestMapping.class)){\n                MyRequestMapping requestMapping = clazz.getAnnotation(MyRequestMapping.class);\n                baseurl = requestMapping.value();\n            }\n            for(Method method:clazz.getMethods()){\n                if(!method.isAnnotationPresent(MyRequestMapping.class)) continue;\n                MyRequestMapping requestMapping = method.getAnnotation(MyRequestMapping.class);\n                String url = (\"/\"+baseurl+\"/\"+requestMapping.value().replaceAll(\"/+\",\"/\"));\n                handlerMapping.put(url,method);\n                System.out.println(\"Mapped\"+url+\",\"+method);\n            }\n        }\n    }\n    private void doScanner(String s){\n        URL url = this.getClass().getClassLoader().getResource(\"/\"+s.replaceAll(\"\\\\.\",\"/\"));\n        File classpath = new File(url.getFile());\n        for (File file:classpath.listFiles()){\n            if(file.isDirectory()){\n                doScanner(s+\".\"+file.getName());\n            }else{\n                if(!file.getName().endsWith(\".class\")) continue;\n                String className = s + \".\" + file.getName().replaceAll(\".class\",\"\");\n                classNames.add(className);\n            }\n        }\n    }\n    private String tolowerfirst(String s){\n        char[] chars= s.toCharArray();\n        chars[0]+=32;\n        return String.valueOf(chars);\n    }\n    private void doinstance(){\n        if(classNames.isEmpty()) return;\n        try {\n            for(String classname:classNames){\n                Class<?> clazz = Class.forName(classname);\n                if(clazz.isAnnotationPresent(MyController.class)){\n                    String beanName = tolowerfirst(clazz.getSimpleName());\n                    Object instance = clazz.newInstance();\n                    ioc.put(beanName,instance);\n                }else if(clazz.isAnnotationPresent(MyService.class)){\n                    String beanName = tolowerfirst(clazz.getSimpleName());\n                    MyService service = clazz.getAnnotation(MyService.class);\n                    if(\"\".equals(service.value())){\n                        beanName = service.value();\n                    }\n                    Object instance = clazz.newInstance();\n                    ioc.put(beanName,instance);\n                    for(Class<?> i :clazz.getInterfaces()){\n                        if(ioc.containsKey(i.getName())){\n                            throw new Exception(\"this beanName is error\");\n                        }\n                        ioc.put(i.getName(),instance);\n                    }\n                }else{\n                    continue;\n                }\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n}\n```","slug":"JAVA/Spring","published":1,"updated":"2021-12-25T07:37:56.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuhigbl000i8suogxthfude","content":"<h2 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h2><h3 id=\"四种注入方式\"><a href=\"#四种注入方式\" class=\"headerlink\" title=\"四种注入方式\"></a>四种注入方式</h3><ul>\n<li>构造器注入</li>\n<li>setter注入</li>\n<li>静态工厂</li>\n<li>实例工厂</li>\n</ul>\n<h3 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"Bean\"></a>Bean</h3><ul>\n<li>singleton:单例，默认作用域。</li>\n<li>prototype:原型，每次创建一个新对象。</li>\n<li>request:请求，每次Http请求创建一个新对象，适用于WebApplicationContext环境下。</li>\n<li>session:会话，同一个会话共享一个实例，不同会话使用不用的实例。</li>\n<li>global-session:全局会话，所有会话共享一个实例。</li>\n</ul>\n<p style=\"text-indent:2em\">\n创建的Bean如果是prototype：对于原型Bean,每次创建一个新对象，也就是线程之间并不存在Bean共享，自然是不会有线程安全的问题。\n\n</p><p>创建的Bean如果是：singleton，所有线程都共享一个单例实例Bean,因此是存在资源的竞争。<br>如果单例Bean,是一个无状态Bean，也就是线程中的操作不会对Bean的成员执行查询以外的操作，那么这个单例Bean是线程安全的。比如Spring mvc 的 Controller、Service、Dao等，这些Bean大多是无状态的，只关注于方法本身。</p>\n<p>对于有状态的bean，Spring官方提供的bean，一般提供了通过ThreadLocal去解决线程安全的方法，比如RequestContextHolder、TransactionSynchronizationManager、LocaleContextHolder等。</p>\n<p></p>\n\n<h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><ul>\n<li>通知（Advice）: AOP 框架中的增强处理。通知描述了切面何时执行以及如何执行增强处理。</li>\n<li>连接点（join point）: 连接点表示应用执行过程中能够插入切面的一个点，这个点可以是方法的调用、异常的抛出。在 Spring AOP 中，连接点总是方法的调用。</li>\n<li>切点（PointCut）: 可以插入增强处理的连接点。</li>\n<li>切面（Aspect）: 切面是通知和切点的结合。</li>\n<li>引入（Introduction）：引入允许我们向现有的类添加新的方法或者属性。</li>\n<li>织入（Weaving）: 将增强处理添加到目标对象中，并创建一个被增强的对象，这个过程就是织入。</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TransactionDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"execution(* com.yangxin.core.service.*.*.*(..))\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"point()\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transaction begin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"point()\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transaction commit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"point()\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span>ProceedingJoinPoint joinPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Throwable<span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transaction begin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transaction commit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h2><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>display-name</span><span class=\"token punctuation\">></span></span>Archetype Created Web Application<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>display-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>mymvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>com.fanrencli.mvcframe.servlet.MyDispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextconfiglocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>application.properties<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-startup</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>load-on-startup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>mymvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDispatcherServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>Object<span class=\"token operator\">></span>ioc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Properties contextconfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> classNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>Method<span class=\"token operator\">></span> handlerMapping <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>HttpServletRequest req<span class=\"token punctuation\">,</span> HttpServletResponse resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> ServletException<span class=\"token punctuation\">,</span> IOException <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>HttpServletRequest req<span class=\"token punctuation\">,</span> HttpServletResponse resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> ServletException<span class=\"token punctuation\">,</span> IOException <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">doDispatch</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resp<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"500\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doDispatch</span><span class=\"token punctuation\">(</span>HttpServletRequest req<span class=\"token punctuation\">,</span> HttpServletResponse resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception<span class=\"token punctuation\">{</span>\n        String url <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String contextpath <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        url <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>contextpath<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/+\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlerMapping<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            resp<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"404 Not Found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        Method method <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlerMapping<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> params <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String beanName <span class=\"token operator\">=</span> <span class=\"token function\">tolowerfirst</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>ioc<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>req<span class=\"token punctuation\">,</span>resp<span class=\"token punctuation\">,</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 核心处理流程</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>ServletConfig config<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> ServletException <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 加载配置文件</span>\n        <span class=\"token function\">doLoadConfig</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">getInitParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"contextconfiglocation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 扫描所有包下的类</span>\n        <span class=\"token function\">doScanner</span><span class=\"token punctuation\">(</span>contextconfig<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scanpackage\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 对象进行实例化并存储到HashMap中</span>\n        <span class=\"token function\">doinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 根据请求的对象的自动装配</span>\n        <span class=\"token function\">doautowired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 根据将请求的URL与对应的处理方法结合起来</span>\n        <span class=\"token function\">doinithandlermapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Spring Framework is init!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doLoadConfig</span><span class=\"token punctuation\">(</span>String configlocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        InputStream is <span class=\"token operator\">=</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span>configlocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            contextconfig<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>null<span class=\"token operator\">==</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is is NUll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doautowired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ioc<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>Object<span class=\"token operator\">></span> s <span class=\"token operator\">:</span> ioc<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            Field<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Field field<span class=\"token operator\">:</span>fields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>MyAutowired<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                MyAutowired my <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>MyAutowired<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                String beanName <span class=\"token operator\">=</span> my<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    beanName <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                field<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    field<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>ioc<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doinithandlermapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ioc<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>String <span class=\"token punctuation\">,</span>Object<span class=\"token operator\">></span>entry<span class=\"token operator\">:</span>ioc<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> clazz <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>MyController<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            String baseurl <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>MyRequestMapping<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                MyRequestMapping requestMapping <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>MyRequestMapping<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                baseurl <span class=\"token operator\">=</span> requestMapping<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>Method method<span class=\"token operator\">:</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>MyRequestMapping<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                MyRequestMapping requestMapping <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>MyRequestMapping<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                String url <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">+</span>baseurl<span class=\"token operator\">+</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">+</span>requestMapping<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/+\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                handlerMapping<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mapped\"</span><span class=\"token operator\">+</span>url<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doScanner</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        URL url <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">+</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\.\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        File classpath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>File file<span class=\"token operator\">:</span>classpath<span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">doScanner</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span><span class=\"token string\">\".\"</span><span class=\"token operator\">+</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                String className <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".class\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                classNames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> String <span class=\"token function\">tolowerfirst</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars<span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        chars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>chars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>classNames<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>String classname<span class=\"token operator\">:</span>classNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> clazz <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>classname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>MyController<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    String beanName <span class=\"token operator\">=</span> <span class=\"token function\">tolowerfirst</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Object instance <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    ioc<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>MyService<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    String beanName <span class=\"token operator\">=</span> <span class=\"token function\">tolowerfirst</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    MyService service <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>MyService<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        beanName <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    Object instance <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    ioc<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> i <span class=\"token operator\">:</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ioc<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this beanName is error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        ioc<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h2><h3 id=\"四种注入方式\"><a href=\"#四种注入方式\" class=\"headerlink\" title=\"四种注入方式\"></a>四种注入方式</h3><ul>\n<li>构造器注入</li>\n<li>setter注入</li>\n<li>静态工厂</li>\n<li>实例工厂</li>\n</ul>\n<h3 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"Bean\"></a>Bean</h3><ul>\n<li>singleton:单例，默认作用域。</li>\n<li>prototype:原型，每次创建一个新对象。</li>\n<li>request:请求，每次Http请求创建一个新对象，适用于WebApplicationContext环境下。</li>\n<li>session:会话，同一个会话共享一个实例，不同会话使用不用的实例。</li>\n<li>global-session:全局会话，所有会话共享一个实例。</li>\n</ul>\n<p style=\"text-indent:2em\">\n创建的Bean如果是prototype：对于原型Bean,每次创建一个新对象，也就是线程之间并不存在Bean共享，自然是不会有线程安全的问题。\n\n<p>创建的Bean如果是：singleton，所有线程都共享一个单例实例Bean,因此是存在资源的竞争。<br>如果单例Bean,是一个无状态Bean，也就是线程中的操作不会对Bean的成员执行查询以外的操作，那么这个单例Bean是线程安全的。比如Spring mvc 的 Controller、Service、Dao等，这些Bean大多是无状态的，只关注于方法本身。</p>\n<p>对于有状态的bean，Spring官方提供的bean，一般提供了通过ThreadLocal去解决线程安全的方法，比如RequestContextHolder、TransactionSynchronizationManager、LocaleContextHolder等。</p>\n</p>\n\n<h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><ul>\n<li>通知（Advice）: AOP 框架中的增强处理。通知描述了切面何时执行以及如何执行增强处理。</li>\n<li>连接点（join point）: 连接点表示应用执行过程中能够插入切面的一个点，这个点可以是方法的调用、异常的抛出。在 Spring AOP 中，连接点总是方法的调用。</li>\n<li>切点（PointCut）: 可以插入增强处理的连接点。</li>\n<li>切面（Aspect）: 切面是通知和切点的结合。</li>\n<li>引入（Introduction）：引入允许我们向现有的类添加新的方法或者属性。</li>\n<li>织入（Weaving）: 将增强处理添加到目标对象中，并创建一个被增强的对象，这个过程就是织入。</li>\n</ul>\n<pre><code class=\"java\">@Aspect\npublic class TransactionDemo &#123;\n    @Pointcut(value=&quot;execution(* com.yangxin.core.service.*.*.*(..))&quot;)\n    public void point()&#123;\n    &#125;\n    @Before(value=&quot;point()&quot;)\n    public void before()&#123;\n        System.out.println(&quot;transaction begin&quot;);\n    &#125;\n    @AfterReturning(value = &quot;point()&quot;)\n    public void after()&#123;\n        System.out.println(&quot;transaction commit&quot;);\n    &#125;\n    @Around(&quot;point()&quot;)\n    public void around(ProceedingJoinPoint joinPoint) throws Throwable&#123;\n        System.out.println(&quot;transaction begin&quot;);\n        joinPoint.proceed();\n        System.out.println(&quot;transaction commit&quot;);\n    &#125;\n&#125;</code></pre>\n<h2 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h2><pre><code class=\"xml\">&lt;web-app&gt;\n    &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;mymvc&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;com.fanrencli.mvcframe.servlet.MyDispatcherServlet&lt;/servlet-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextconfiglocation&lt;/param-name&gt;\n            &lt;param-value&gt;application.properties&lt;/param-value&gt;\n        &lt;/init-param&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;mymvc&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n&lt;/web-app&gt;</code></pre>\n<pre><code class=\"java\">public class MyDispatcherServlet extends HttpServlet &#123;\n    private Map&lt;String,Object&gt;ioc = new HashMap&lt;&gt;();\n    private Properties contextconfig = new Properties();\n    private List&lt;String&gt; classNames = new ArrayList&lt;&gt;();\n    private Map&lt;String,Method&gt; handlerMapping = new HashMap&lt;&gt;();\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n        this.doPost(req,resp);\n    &#125;\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n        try &#123;\n            doDispatch(req,resp);\n        &#125;catch (Exception e)&#123;\n            e.printStackTrace();\n            resp.getWriter().write(&quot;500&quot;);\n        &#125;\n    &#125;\n    private void doDispatch(HttpServletRequest req, HttpServletResponse resp) throws Exception&#123;\n        String url = req.getRequestURI();\n        String contextpath = req.getContextPath();\n        url = url.replaceAll(contextpath,&quot;&quot;).replaceAll(&quot;/+&quot;,&quot;/&quot;);\n        if(!this.handlerMapping.containsKey(url))&#123;\n            resp.getWriter().write(&quot;404 Not Found&quot;);\n        &#125;\n        Method method = this.handlerMapping.get(url);\n        Map&lt;String,String[]&gt; params = req.getParameterMap();\n        String beanName = tolowerfirst(method.getDeclaringClass().getSimpleName());\n        method.invoke(ioc.get(beanName),new Object[]&#123;req,resp,params.get(&quot;name&quot;)[0]&#125;);\n    &#125;\n\n    // 核心处理流程\n    @Override\n    public void init(ServletConfig config) throws ServletException &#123;\n        System.out.println(&quot;start init&quot;);\n        // 加载配置文件\n        doLoadConfig(config.getInitParameter(&quot;contextconfiglocation&quot;));\n        // 扫描所有包下的类\n        doScanner(contextconfig.getProperty(&quot;scanpackage&quot;));\n        // 对象进行实例化并存储到HashMap中\n        doinstance();\n        // 根据请求的对象的自动装配\n        doautowired();\n        // 根据将请求的URL与对应的处理方法结合起来\n        doinithandlermapping();\n        System.out.println(&quot;Spring Framework is init!!&quot;);\n    &#125;\n\n    private void doLoadConfig(String configlocation)&#123;\n        InputStream is =  this.getClass().getClassLoader().getResourceAsStream(configlocation);\n        try &#123;\n            contextconfig.load(is);\n        &#125;catch (IOException e)&#123;\n            e.printStackTrace();\n        &#125;finally &#123;\n            if(null==is)&#123;\n                System.out.println(&quot;is is NUll&quot;);\n            &#125;\n        &#125;\n\n    &#125;\n    private void doautowired()&#123;\n        if(ioc.isEmpty()) return;\n        for(Map.Entry&lt;String,Object&gt; s : ioc.entrySet())&#123;\n            Field[] fields = s.getValue().getClass().getDeclaredFields();\n            for (Field field:fields)&#123;\n                if(!field.isAnnotationPresent(MyAutowired.class))continue;\n                MyAutowired my = field.getAnnotation(MyAutowired.class);\n                String beanName = my.value().trim();\n                if(&quot;&quot;.equals(beanName))&#123;\n                    beanName = field.getType().getName();\n                &#125;\n                field.setAccessible(true);\n\n                try &#123;\n                    field.set(s.getValue(),ioc.get(beanName));\n                &#125;catch (Exception e)&#123;\n                    e.printStackTrace();\n                    continue;\n                &#125;\n\n            &#125;\n        &#125;\n    &#125;\n    private void doinithandlermapping()&#123;\n        if(ioc.isEmpty()) return;\n        for(Map.Entry&lt;String ,Object&gt;entry:ioc.entrySet())&#123;\n            Class&lt;?&gt; clazz = entry.getValue().getClass();\n            if(!clazz.isAnnotationPresent(MyController.class))continue;\n            String baseurl = &quot;&quot;;\n            if(clazz.isAnnotationPresent(MyRequestMapping.class))&#123;\n                MyRequestMapping requestMapping = clazz.getAnnotation(MyRequestMapping.class);\n                baseurl = requestMapping.value();\n            &#125;\n            for(Method method:clazz.getMethods())&#123;\n                if(!method.isAnnotationPresent(MyRequestMapping.class)) continue;\n                MyRequestMapping requestMapping = method.getAnnotation(MyRequestMapping.class);\n                String url = (&quot;/&quot;+baseurl+&quot;/&quot;+requestMapping.value().replaceAll(&quot;/+&quot;,&quot;/&quot;));\n                handlerMapping.put(url,method);\n                System.out.println(&quot;Mapped&quot;+url+&quot;,&quot;+method);\n            &#125;\n        &#125;\n    &#125;\n    private void doScanner(String s)&#123;\n        URL url = this.getClass().getClassLoader().getResource(&quot;/&quot;+s.replaceAll(&quot;\\\\.&quot;,&quot;/&quot;));\n        File classpath = new File(url.getFile());\n        for (File file:classpath.listFiles())&#123;\n            if(file.isDirectory())&#123;\n                doScanner(s+&quot;.&quot;+file.getName());\n            &#125;else&#123;\n                if(!file.getName().endsWith(&quot;.class&quot;)) continue;\n                String className = s + &quot;.&quot; + file.getName().replaceAll(&quot;.class&quot;,&quot;&quot;);\n                classNames.add(className);\n            &#125;\n        &#125;\n    &#125;\n    private String tolowerfirst(String s)&#123;\n        char[] chars= s.toCharArray();\n        chars[0]+=32;\n        return String.valueOf(chars);\n    &#125;\n    private void doinstance()&#123;\n        if(classNames.isEmpty()) return;\n        try &#123;\n            for(String classname:classNames)&#123;\n                Class&lt;?&gt; clazz = Class.forName(classname);\n                if(clazz.isAnnotationPresent(MyController.class))&#123;\n                    String beanName = tolowerfirst(clazz.getSimpleName());\n                    Object instance = clazz.newInstance();\n                    ioc.put(beanName,instance);\n                &#125;else if(clazz.isAnnotationPresent(MyService.class))&#123;\n                    String beanName = tolowerfirst(clazz.getSimpleName());\n                    MyService service = clazz.getAnnotation(MyService.class);\n                    if(&quot;&quot;.equals(service.value()))&#123;\n                        beanName = service.value();\n                    &#125;\n                    Object instance = clazz.newInstance();\n                    ioc.put(beanName,instance);\n                    for(Class&lt;?&gt; i :clazz.getInterfaces())&#123;\n                        if(ioc.containsKey(i.getName()))&#123;\n                            throw new Exception(&quot;this beanName is error&quot;);\n                        &#125;\n                        ioc.put(i.getName(),instance);\n                    &#125;\n                &#125;else&#123;\n                    continue;\n                &#125;\n            &#125;\n        &#125;catch (Exception e)&#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n&#125;</code></pre>\n"},{"title":"日期类型","date":"2021-12-15T09:31:06.000Z","author":"Fanrencli","_content":"\n## Date\n\n- 构造方法：new Date(long time) 将long型数据转为日期\n- 普通方法：getTime(),返回一个long型日期\n\n\n```java\n    // 输出日期\n    Date date= new Date();\n    System.out.println(date);\n    long cur = date.getTime();\n```\n\n## SimpleDateFormat类型用于日期的格式转换\n\n- 构造函数：`new SimpleDateFormat(\"日期格式\")`\n- Date转String：`String Format(Date date)`\n- String转Date：`Date prase(String str)`\n\n```java\npublic class test {\n    public static void main(String[] args) throws ParseException {\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n        Date date = new Date();\n        String str = simpleDateFormat.format(date);\n        System.out.println(str);\n        date = simpleDateFormat.parse(str);\n        System.out.println(date);\n    }\n}\n```\n\n## Calendar日期类型主要用于计算\n\n- 构造函数私有化\n- 静态方法取得实例对象：getInstance()\n- 静态属性：YEAR，MONTH，DAY_OF_MONTH，HOUR_OF_DAY，MINUTE，SECOND\n\n\n```java\npublic class test {\n    public static void main(String[] args) throws ParseException {\n        Calendar calendar = Calendar.getInstance();\n        System.out.println(calendar.get(Calendar.YEAR));\n        System.out.println(calendar.get(Calendar.MONTH));\n        System.out.println(calendar.get(Calendar.DAY_OF_MONTH));\n        System.out.println(calendar.get(Calendar.HOUR_OF_DAY));\n        System.out.println(calendar.get(Calendar.MINUTE));\n        System.out.println(calendar.get(Calendar.SECOND));\n    }\n}\n```","source":"_posts/JAVA/date.md","raw":"---\ntitle: 日期类型\ndate: 2021-12-15 17:31:06\ncategories:\n  - JAVA\ntags:\n  - Date\n  - SimpleDateFormat\n  - Calendar\nauthor: Fanrencli\n---\n\n## Date\n\n- 构造方法：new Date(long time) 将long型数据转为日期\n- 普通方法：getTime(),返回一个long型日期\n\n\n```java\n    // 输出日期\n    Date date= new Date();\n    System.out.println(date);\n    long cur = date.getTime();\n```\n\n## SimpleDateFormat类型用于日期的格式转换\n\n- 构造函数：`new SimpleDateFormat(\"日期格式\")`\n- Date转String：`String Format(Date date)`\n- String转Date：`Date prase(String str)`\n\n```java\npublic class test {\n    public static void main(String[] args) throws ParseException {\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n        Date date = new Date();\n        String str = simpleDateFormat.format(date);\n        System.out.println(str);\n        date = simpleDateFormat.parse(str);\n        System.out.println(date);\n    }\n}\n```\n\n## Calendar日期类型主要用于计算\n\n- 构造函数私有化\n- 静态方法取得实例对象：getInstance()\n- 静态属性：YEAR，MONTH，DAY_OF_MONTH，HOUR_OF_DAY，MINUTE，SECOND\n\n\n```java\npublic class test {\n    public static void main(String[] args) throws ParseException {\n        Calendar calendar = Calendar.getInstance();\n        System.out.println(calendar.get(Calendar.YEAR));\n        System.out.println(calendar.get(Calendar.MONTH));\n        System.out.println(calendar.get(Calendar.DAY_OF_MONTH));\n        System.out.println(calendar.get(Calendar.HOUR_OF_DAY));\n        System.out.println(calendar.get(Calendar.MINUTE));\n        System.out.println(calendar.get(Calendar.SECOND));\n    }\n}\n```","slug":"JAVA/date","published":1,"updated":"2021-12-17T11:58:56.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuhigbn000m8suo45lyafhq","content":"<h2 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h2><ul>\n<li>构造方法：new Date(long time) 将long型数据转为日期</li>\n<li>普通方法：getTime(),返回一个long型日期</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token comment\" spellcheck=\"true\">// 输出日期</span>\n    Date date<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> cur <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"SimpleDateFormat类型用于日期的格式转换\"><a href=\"#SimpleDateFormat类型用于日期的格式转换\" class=\"headerlink\" title=\"SimpleDateFormat类型用于日期的格式转换\"></a>SimpleDateFormat类型用于日期的格式转换</h2><ul>\n<li>构造函数：<code>new SimpleDateFormat(\"日期格式\")</code></li>\n<li>Date转String：<code>String Format(Date date)</code></li>\n<li>String转Date：<code>Date prase(String str)</code></li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> ParseException <span class=\"token punctuation\">{</span>\n        SimpleDateFormat simpleDateFormat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss.SSS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Date date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String str <span class=\"token operator\">=</span> simpleDateFormat<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        date <span class=\"token operator\">=</span> simpleDateFormat<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"Calendar日期类型主要用于计算\"><a href=\"#Calendar日期类型主要用于计算\" class=\"headerlink\" title=\"Calendar日期类型主要用于计算\"></a>Calendar日期类型主要用于计算</h2><ul>\n<li>构造函数私有化</li>\n<li>静态方法取得实例对象：getInstance()</li>\n<li>静态属性：YEAR，MONTH，DAY_OF_MONTH，HOUR_OF_DAY，MINUTE，SECOND</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> ParseException <span class=\"token punctuation\">{</span>\n        Calendar calendar <span class=\"token operator\">=</span> Calendar<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Calendar<span class=\"token punctuation\">.</span>YEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Calendar<span class=\"token punctuation\">.</span>MONTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Calendar<span class=\"token punctuation\">.</span>DAY_OF_MONTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Calendar<span class=\"token punctuation\">.</span>HOUR_OF_DAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Calendar<span class=\"token punctuation\">.</span>MINUTE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Calendar<span class=\"token punctuation\">.</span>SECOND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h2><ul>\n<li>构造方法：new Date(long time) 将long型数据转为日期</li>\n<li>普通方法：getTime(),返回一个long型日期</li>\n</ul>\n<pre><code class=\"java\">    // 输出日期\n    Date date= new Date();\n    System.out.println(date);\n    long cur = date.getTime();</code></pre>\n<h2 id=\"SimpleDateFormat类型用于日期的格式转换\"><a href=\"#SimpleDateFormat类型用于日期的格式转换\" class=\"headerlink\" title=\"SimpleDateFormat类型用于日期的格式转换\"></a>SimpleDateFormat类型用于日期的格式转换</h2><ul>\n<li>构造函数：<code>new SimpleDateFormat(&quot;日期格式&quot;)</code></li>\n<li>Date转String：<code>String Format(Date date)</code></li>\n<li>String转Date：<code>Date prase(String str)</code></li>\n</ul>\n<pre><code class=\"java\">public class test &#123;\n    public static void main(String[] args) throws ParseException &#123;\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;);\n        Date date = new Date();\n        String str = simpleDateFormat.format(date);\n        System.out.println(str);\n        date = simpleDateFormat.parse(str);\n        System.out.println(date);\n    &#125;\n&#125;</code></pre>\n<h2 id=\"Calendar日期类型主要用于计算\"><a href=\"#Calendar日期类型主要用于计算\" class=\"headerlink\" title=\"Calendar日期类型主要用于计算\"></a>Calendar日期类型主要用于计算</h2><ul>\n<li>构造函数私有化</li>\n<li>静态方法取得实例对象：getInstance()</li>\n<li>静态属性：YEAR，MONTH，DAY_OF_MONTH，HOUR_OF_DAY，MINUTE，SECOND</li>\n</ul>\n<pre><code class=\"java\">public class test &#123;\n    public static void main(String[] args) throws ParseException &#123;\n        Calendar calendar = Calendar.getInstance();\n        System.out.println(calendar.get(Calendar.YEAR));\n        System.out.println(calendar.get(Calendar.MONTH));\n        System.out.println(calendar.get(Calendar.DAY_OF_MONTH));\n        System.out.println(calendar.get(Calendar.HOUR_OF_DAY));\n        System.out.println(calendar.get(Calendar.MINUTE));\n        System.out.println(calendar.get(Calendar.SECOND));\n    &#125;\n&#125;</code></pre>\n"},{"title":"Reflect","date":"2021-12-15T12:23:48.000Z","author":"Fanrencli","_content":"## 反射\n\n### 反射3种实例化方法\n\n1. 使用`实例化对象.getclass()`方法；\n2. `类.class`\n3. 使用`Class.forName(String str)`方法\n\n### 通过反射实例化对象\n\n通过`newinstance()`方法获取类的实例化对象相比于new方法虽然麻烦，但是可以不在需要手工去创建对象。在项目维护后期，如果需要添加一定量的类，可以通过制定类的全路径名来反射创建类的实例化对象，而不再需要去更改工厂类的代码。\n\n```java\nclass B{\n    public B(){\n        System.out.println(\"ok\");\n    }\n\n    @Override\n    public String toString() {\n        return \"ok1\";\n    }\n}\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        Class <?> cls = Class.forName(\"package.B\");\n        Object obj = cls.newInstance();\n        B b = (B) obj;\n        System.out.println(b);\n    }\n}\n```\n```java\nclass C{\n    C(){\n        System.out.println(\"C\");\n    }\n}\nclass Factory{\n    public static Object getInstance(String str) throws Exception  {\n\n        return Class.forName(str).newInstance();\n    }\n}\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        Object obj = Factory.getInstance(\"demo3.C\");\n    }\n}\n```\n### 通过反射调用构造函数\n\n- `getConstructor(参数类...)` 获取指定的构造函数\n\n```java\nclass C{\n    private int a=0;\n    C(int a ){\n        this.a = a;\n    }\n}\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        Class<?> cls = Class.forName(\"demo3.C\");\n        Constructor<?> con = cls.getConstructor(int.class);\n        Object obj = con.newInstance(12);\n    }\n}\n```\n### 通过反射调用普通函数\n\n- `getMethod()`获取指定方法（不包含私有方法）\n- `getDeclaredMethod()`获取指定方法\n- `getMethods()`获取所有方法（不包含私有方法）\n- `getDeclaredMethods()`获取所有方法\n\n```java\nclass C{\n    public int get(){\n        System.out.println(\"OK\");\n        return 1;\n    }\n    public void set(String str){\n        System.out.println(str);\n    }\n}\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        Class<?> cls = Class.forName(\"demo3.C\");\n        Object obj = cls.newInstance();\n        Method setMe = cls.getMethod(\"set\",String.class);\n        Method getMe = cls.getMethod(\"get\");\n        setMe.invoke(obj,\"set\");\n        getMe.invoke(obj);\n    }\n}\n```\n\n### 通过反射获取成员变量\n\n- `getField(String str)`获取指定成员（不包含私有）\n- `getDeclaredField(String str)`获取指定成员\n- `getFields(String str)`获取所有成员（不包含私有）\n- `getDeclaredFields(String str)`获取所有成员\n\n```java\nclass C{\n    private int a=1;\n\n}\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        Class<?> cls = Class.forName(\"demo3.C\");\n        Object obj = cls.newInstance();\n        Field field = cls.getDeclaredField(\"a\");\n        field.setAccessible(true);\n        field.set(obj,12);\n    }\n}\n```\n","source":"_posts/JAVA/reflect.md","raw":"---\ntitle: Reflect\ndate: 2021-12-15 20:23:48\ncategories:\n  - JAVA\ntags:\n  - reflect\nauthor: Fanrencli\n---\n## 反射\n\n### 反射3种实例化方法\n\n1. 使用`实例化对象.getclass()`方法；\n2. `类.class`\n3. 使用`Class.forName(String str)`方法\n\n### 通过反射实例化对象\n\n通过`newinstance()`方法获取类的实例化对象相比于new方法虽然麻烦，但是可以不在需要手工去创建对象。在项目维护后期，如果需要添加一定量的类，可以通过制定类的全路径名来反射创建类的实例化对象，而不再需要去更改工厂类的代码。\n\n```java\nclass B{\n    public B(){\n        System.out.println(\"ok\");\n    }\n\n    @Override\n    public String toString() {\n        return \"ok1\";\n    }\n}\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        Class <?> cls = Class.forName(\"package.B\");\n        Object obj = cls.newInstance();\n        B b = (B) obj;\n        System.out.println(b);\n    }\n}\n```\n```java\nclass C{\n    C(){\n        System.out.println(\"C\");\n    }\n}\nclass Factory{\n    public static Object getInstance(String str) throws Exception  {\n\n        return Class.forName(str).newInstance();\n    }\n}\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        Object obj = Factory.getInstance(\"demo3.C\");\n    }\n}\n```\n### 通过反射调用构造函数\n\n- `getConstructor(参数类...)` 获取指定的构造函数\n\n```java\nclass C{\n    private int a=0;\n    C(int a ){\n        this.a = a;\n    }\n}\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        Class<?> cls = Class.forName(\"demo3.C\");\n        Constructor<?> con = cls.getConstructor(int.class);\n        Object obj = con.newInstance(12);\n    }\n}\n```\n### 通过反射调用普通函数\n\n- `getMethod()`获取指定方法（不包含私有方法）\n- `getDeclaredMethod()`获取指定方法\n- `getMethods()`获取所有方法（不包含私有方法）\n- `getDeclaredMethods()`获取所有方法\n\n```java\nclass C{\n    public int get(){\n        System.out.println(\"OK\");\n        return 1;\n    }\n    public void set(String str){\n        System.out.println(str);\n    }\n}\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        Class<?> cls = Class.forName(\"demo3.C\");\n        Object obj = cls.newInstance();\n        Method setMe = cls.getMethod(\"set\",String.class);\n        Method getMe = cls.getMethod(\"get\");\n        setMe.invoke(obj,\"set\");\n        getMe.invoke(obj);\n    }\n}\n```\n\n### 通过反射获取成员变量\n\n- `getField(String str)`获取指定成员（不包含私有）\n- `getDeclaredField(String str)`获取指定成员\n- `getFields(String str)`获取所有成员（不包含私有）\n- `getDeclaredFields(String str)`获取所有成员\n\n```java\nclass C{\n    private int a=1;\n\n}\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        Class<?> cls = Class.forName(\"demo3.C\");\n        Object obj = cls.newInstance();\n        Field field = cls.getDeclaredField(\"a\");\n        field.setAccessible(true);\n        field.set(obj,12);\n    }\n}\n```\n","slug":"JAVA/reflect","published":1,"updated":"2021-12-17T11:56:16.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuhigbp000p8suo9p8jauk7","content":"<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><h3 id=\"反射3种实例化方法\"><a href=\"#反射3种实例化方法\" class=\"headerlink\" title=\"反射3种实例化方法\"></a>反射3种实例化方法</h3><ol>\n<li>使用<code>实例化对象.getclass()</code>方法；</li>\n<li><code>类.class</code></li>\n<li>使用<code>Class.forName(String str)</code>方法</li>\n</ol>\n<h3 id=\"通过反射实例化对象\"><a href=\"#通过反射实例化对象\" class=\"headerlink\" title=\"通过反射实例化对象\"></a>通过反射实例化对象</h3><p>通过<code>newinstance()</code>方法获取类的实例化对象相比于new方法虽然麻烦，但是可以不在需要手工去创建对象。在项目维护后期，如果需要添加一定量的类，可以通过制定类的全路径名来反射创建类的实例化对象，而不再需要去更改工厂类的代码。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        Class <span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> cls <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"package.B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Object obj <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        B b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Object <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>String str<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception  <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        Object obj <span class=\"token operator\">=</span> Factory<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo3.C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"通过反射调用构造函数\"><a href=\"#通过反射调用构造函数\" class=\"headerlink\" title=\"通过反射调用构造函数\"></a>通过反射调用构造函数</h3><ul>\n<li><code>getConstructor(参数类...)</code> 获取指定的构造函数</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> cls <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo3.C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Constructor<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> con <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Object obj <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"通过反射调用普通函数\"><a href=\"#通过反射调用普通函数\" class=\"headerlink\" title=\"通过反射调用普通函数\"></a>通过反射调用普通函数</h3><ul>\n<li><code>getMethod()</code>获取指定方法（不包含私有方法）</li>\n<li><code>getDeclaredMethod()</code>获取指定方法</li>\n<li><code>getMethods()</code>获取所有方法（不包含私有方法）</li>\n<li><code>getDeclaredMethods()</code>获取所有方法</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>String str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> cls <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo3.C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Object obj <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Method setMe <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set\"</span><span class=\"token punctuation\">,</span>String<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Method getMe <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        setMe<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">\"set\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        getMe<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"通过反射获取成员变量\"><a href=\"#通过反射获取成员变量\" class=\"headerlink\" title=\"通过反射获取成员变量\"></a>通过反射获取成员变量</h3><ul>\n<li><code>getField(String str)</code>获取指定成员（不包含私有）</li>\n<li><code>getDeclaredField(String str)</code>获取指定成员</li>\n<li><code>getFields(String str)</code>获取所有成员（不包含私有）</li>\n<li><code>getDeclaredFields(String str)</code>获取所有成员</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> cls <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo3.C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Object obj <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Field field <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        field<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        field<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><h3 id=\"反射3种实例化方法\"><a href=\"#反射3种实例化方法\" class=\"headerlink\" title=\"反射3种实例化方法\"></a>反射3种实例化方法</h3><ol>\n<li>使用<code>实例化对象.getclass()</code>方法；</li>\n<li><code>类.class</code></li>\n<li>使用<code>Class.forName(String str)</code>方法</li>\n</ol>\n<h3 id=\"通过反射实例化对象\"><a href=\"#通过反射实例化对象\" class=\"headerlink\" title=\"通过反射实例化对象\"></a>通过反射实例化对象</h3><p>通过<code>newinstance()</code>方法获取类的实例化对象相比于new方法虽然麻烦，但是可以不在需要手工去创建对象。在项目维护后期，如果需要添加一定量的类，可以通过制定类的全路径名来反射创建类的实例化对象，而不再需要去更改工厂类的代码。</p>\n<pre><code class=\"java\">class B&#123;\n    public B()&#123;\n        System.out.println(&quot;ok&quot;);\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;ok1&quot;;\n    &#125;\n&#125;\npublic class test1 &#123;\n    public static void main(String[] args) throws Exception &#123;\n        Class &lt;?&gt; cls = Class.forName(&quot;package.B&quot;);\n        Object obj = cls.newInstance();\n        B b = (B) obj;\n        System.out.println(b);\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">class C&#123;\n    C()&#123;\n        System.out.println(&quot;C&quot;);\n    &#125;\n&#125;\nclass Factory&#123;\n    public static Object getInstance(String str) throws Exception  &#123;\n\n        return Class.forName(str).newInstance();\n    &#125;\n&#125;\npublic class test1 &#123;\n    public static void main(String[] args) throws Exception &#123;\n        Object obj = Factory.getInstance(&quot;demo3.C&quot;);\n    &#125;\n&#125;</code></pre>\n<h3 id=\"通过反射调用构造函数\"><a href=\"#通过反射调用构造函数\" class=\"headerlink\" title=\"通过反射调用构造函数\"></a>通过反射调用构造函数</h3><ul>\n<li><code>getConstructor(参数类...)</code> 获取指定的构造函数</li>\n</ul>\n<pre><code class=\"java\">class C&#123;\n    private int a=0;\n    C(int a )&#123;\n        this.a = a;\n    &#125;\n&#125;\npublic class test1 &#123;\n    public static void main(String[] args) throws Exception &#123;\n        Class&lt;?&gt; cls = Class.forName(&quot;demo3.C&quot;);\n        Constructor&lt;?&gt; con = cls.getConstructor(int.class);\n        Object obj = con.newInstance(12);\n    &#125;\n&#125;</code></pre>\n<h3 id=\"通过反射调用普通函数\"><a href=\"#通过反射调用普通函数\" class=\"headerlink\" title=\"通过反射调用普通函数\"></a>通过反射调用普通函数</h3><ul>\n<li><code>getMethod()</code>获取指定方法（不包含私有方法）</li>\n<li><code>getDeclaredMethod()</code>获取指定方法</li>\n<li><code>getMethods()</code>获取所有方法（不包含私有方法）</li>\n<li><code>getDeclaredMethods()</code>获取所有方法</li>\n</ul>\n<pre><code class=\"java\">class C&#123;\n    public int get()&#123;\n        System.out.println(&quot;OK&quot;);\n        return 1;\n    &#125;\n    public void set(String str)&#123;\n        System.out.println(str);\n    &#125;\n&#125;\npublic class test1 &#123;\n    public static void main(String[] args) throws Exception &#123;\n        Class&lt;?&gt; cls = Class.forName(&quot;demo3.C&quot;);\n        Object obj = cls.newInstance();\n        Method setMe = cls.getMethod(&quot;set&quot;,String.class);\n        Method getMe = cls.getMethod(&quot;get&quot;);\n        setMe.invoke(obj,&quot;set&quot;);\n        getMe.invoke(obj);\n    &#125;\n&#125;</code></pre>\n<h3 id=\"通过反射获取成员变量\"><a href=\"#通过反射获取成员变量\" class=\"headerlink\" title=\"通过反射获取成员变量\"></a>通过反射获取成员变量</h3><ul>\n<li><code>getField(String str)</code>获取指定成员（不包含私有）</li>\n<li><code>getDeclaredField(String str)</code>获取指定成员</li>\n<li><code>getFields(String str)</code>获取所有成员（不包含私有）</li>\n<li><code>getDeclaredFields(String str)</code>获取所有成员</li>\n</ul>\n<pre><code class=\"java\">class C&#123;\n    private int a=1;\n\n&#125;\npublic class test1 &#123;\n    public static void main(String[] args) throws Exception &#123;\n        Class&lt;?&gt; cls = Class.forName(&quot;demo3.C&quot;);\n        Object obj = cls.newInstance();\n        Field field = cls.getDeclaredField(&quot;a&quot;);\n        field.setAccessible(true);\n        field.set(obj,12);\n    &#125;\n&#125;</code></pre>\n"},{"title":"Regex","date":"2021-12-15T09:31:06.000Z","author":"Fanrencli","_content":"\n## 正则标记\n\n### 单个字符\n\n-  `\\\\`:表示转义字符“\\”;\n-  `\\t`:表示一个“\\t”符号;\n-  `\\n`:匹配换行“\\n”符号;\n\n\n### 字符集\n\n- `[abc]`:表示可能是字符a或者是字符b或者是字符c中的任意一个；\n- `[^abc]`:表示不是a、b、c中的任意一位；\n- `[a-z]`:表示任一的小写字母；\n- `[a-zA-Z]`:表示任意一位字母，不区分大小写；\n- `[0-9]`:表示任意的一位数字；\n\n\n### 简化的字符集表达式\n\n- `.`:表示任意的一位字符；\n- `\\d`:等价于`[0-9]`;\n- `\\D`:等价于`[^0-9]`;\n- `\\s`:表示任意的空白字符，如：`\\t`,`\\n`;\n- `\\S`:表示任意的非空白字符；\n- `\\w`:等价于`[a-zA-Z_0-9]`,表示由任意的字母，数字，_，所组成；\n- `\\W`:等价于`[^a-zA-Z_0-9]`,表示不是有任意的字母，数字，_所组成；\n\n\n### 边界匹配（通常用于Javascript）\n\n- `^`:正则的开始；\n- `$`:正则的结束；\n\n\n### 数量表达\n\n- `?`:表示此正则可以出现0次或者1次；\n- `+`:表示此正则可以出现1次或者1次以上；\n- `*`:表示此正则可以出现0次/1次或多次；\n- `{n}`:表示此正则正好出现n次；\n- `{n,}`:表示次正则出现n次以上（包含n次）；\n- `{n,m}`:表示此正则出现n~m次；\n\n\n### 逻辑运算\n\n- 正则1正则2：正则1判断后继续判断正则2；\n- 正则1|正则2：正则1或正则2满足一个就可以；\n- （正则）：将正则视为一组，同时可以先设置出现次数；\n\n## 代码示例\n\n```java\n// 取出所有小写字母\npublic class test1 {\n    public static void main(String[] args) {\n        String str = \"asdA)(S)(ASDsda)(&&*^%*%sdas1231532\";\n        String regex = \"[^a-z]\";\n        System.out.println(str.replaceAll(regex,\"\"));\n    }\n}\n\n```\n```java\n// 按照数字拆分字符串\npublic class test1 {\n    public static void main(String[] args) {\n        String str = \"jhgvfkjhg1341jhgv4jlhv1234vjhv1j234vlkgv13\";\n        String regex = \"\\\\d+\";\n        String result[] = str.split(regex);\n        for(String a:result){\n            System.out.println(a);\n        }\n    }\n}\n\n```\n```java\n// 判断字符串是否是double型\npublic class test1 {\n    public static void main(String[] args) {\n        String str = \"10.22\";\n        String regex = \"\\\\d+(\\\\.\\\\d*)?\";\n        System.out.println(str.matches(regex));\n    }\n}\n\n```\n```java\n// 判断是否是IP地址\npublic class test1 {\n    public static void main(String[] args) {\n        String str = \"192.168.5.1\";\n        String regex = \"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\";\n        System.out.println(str.matches(regex));\n    }\n}\n```\n```java\n// 判断是否是日期\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        String str = \"2009-03-12\";\n        String regex = \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        System.out.println(str.matches(regex));\n        if(str.matches(reges)){\n          Date date = new SimpleDateFormat(\"yyyy-MM-dd\").parse(str);\n          System.out.println(date);\n        }\n    }\n}\n```\n```java\n// 判断电话号码：12345678|010-12345678|(010)-12345678\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        String str = \"12345678\";\n        String regex = \"\\\\d{7,8}|\\\\d{3,4}-\\\\d{7,8}|\\\\(\\\\d{3,4}\\\\)-\\\\d{7,8}\";\n        System.out.println(str.matches(regex));\n    }\n}\n```\n```java\n// 判断邮箱\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        String str = \"fanrencli@163.com\";\n        String regex = \"[a-zA-Z]\\\\w{0,28}[a-zA-Z0-9]@\\\\w+\\\\.(net|cn|com\\\\.cn|com)\";\n        System.out.println(str.matches(regex));\n    }\n}\n\n```","source":"_posts/JAVA/regex.md","raw":"---\ntitle: Regex\ndate: 2021-12-15 17:31:06\ncategories:\n  - JAVA\ntags:\n  - Regex\nauthor: Fanrencli\n---\n\n## 正则标记\n\n### 单个字符\n\n-  `\\\\`:表示转义字符“\\”;\n-  `\\t`:表示一个“\\t”符号;\n-  `\\n`:匹配换行“\\n”符号;\n\n\n### 字符集\n\n- `[abc]`:表示可能是字符a或者是字符b或者是字符c中的任意一个；\n- `[^abc]`:表示不是a、b、c中的任意一位；\n- `[a-z]`:表示任一的小写字母；\n- `[a-zA-Z]`:表示任意一位字母，不区分大小写；\n- `[0-9]`:表示任意的一位数字；\n\n\n### 简化的字符集表达式\n\n- `.`:表示任意的一位字符；\n- `\\d`:等价于`[0-9]`;\n- `\\D`:等价于`[^0-9]`;\n- `\\s`:表示任意的空白字符，如：`\\t`,`\\n`;\n- `\\S`:表示任意的非空白字符；\n- `\\w`:等价于`[a-zA-Z_0-9]`,表示由任意的字母，数字，_，所组成；\n- `\\W`:等价于`[^a-zA-Z_0-9]`,表示不是有任意的字母，数字，_所组成；\n\n\n### 边界匹配（通常用于Javascript）\n\n- `^`:正则的开始；\n- `$`:正则的结束；\n\n\n### 数量表达\n\n- `?`:表示此正则可以出现0次或者1次；\n- `+`:表示此正则可以出现1次或者1次以上；\n- `*`:表示此正则可以出现0次/1次或多次；\n- `{n}`:表示此正则正好出现n次；\n- `{n,}`:表示次正则出现n次以上（包含n次）；\n- `{n,m}`:表示此正则出现n~m次；\n\n\n### 逻辑运算\n\n- 正则1正则2：正则1判断后继续判断正则2；\n- 正则1|正则2：正则1或正则2满足一个就可以；\n- （正则）：将正则视为一组，同时可以先设置出现次数；\n\n## 代码示例\n\n```java\n// 取出所有小写字母\npublic class test1 {\n    public static void main(String[] args) {\n        String str = \"asdA)(S)(ASDsda)(&&*^%*%sdas1231532\";\n        String regex = \"[^a-z]\";\n        System.out.println(str.replaceAll(regex,\"\"));\n    }\n}\n\n```\n```java\n// 按照数字拆分字符串\npublic class test1 {\n    public static void main(String[] args) {\n        String str = \"jhgvfkjhg1341jhgv4jlhv1234vjhv1j234vlkgv13\";\n        String regex = \"\\\\d+\";\n        String result[] = str.split(regex);\n        for(String a:result){\n            System.out.println(a);\n        }\n    }\n}\n\n```\n```java\n// 判断字符串是否是double型\npublic class test1 {\n    public static void main(String[] args) {\n        String str = \"10.22\";\n        String regex = \"\\\\d+(\\\\.\\\\d*)?\";\n        System.out.println(str.matches(regex));\n    }\n}\n\n```\n```java\n// 判断是否是IP地址\npublic class test1 {\n    public static void main(String[] args) {\n        String str = \"192.168.5.1\";\n        String regex = \"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\";\n        System.out.println(str.matches(regex));\n    }\n}\n```\n```java\n// 判断是否是日期\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        String str = \"2009-03-12\";\n        String regex = \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        System.out.println(str.matches(regex));\n        if(str.matches(reges)){\n          Date date = new SimpleDateFormat(\"yyyy-MM-dd\").parse(str);\n          System.out.println(date);\n        }\n    }\n}\n```\n```java\n// 判断电话号码：12345678|010-12345678|(010)-12345678\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        String str = \"12345678\";\n        String regex = \"\\\\d{7,8}|\\\\d{3,4}-\\\\d{7,8}|\\\\(\\\\d{3,4}\\\\)-\\\\d{7,8}\";\n        System.out.println(str.matches(regex));\n    }\n}\n```\n```java\n// 判断邮箱\npublic class test1 {\n    public static void main(String[] args) throws Exception {\n        String str = \"fanrencli@163.com\";\n        String regex = \"[a-zA-Z]\\\\w{0,28}[a-zA-Z0-9]@\\\\w+\\\\.(net|cn|com\\\\.cn|com)\";\n        System.out.println(str.matches(regex));\n    }\n}\n\n```","slug":"JAVA/regex","published":1,"updated":"2021-12-17T11:56:51.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuhigbr000t8suo51o2bjra","content":"<h2 id=\"正则标记\"><a href=\"#正则标记\" class=\"headerlink\" title=\"正则标记\"></a>正则标记</h2><h3 id=\"单个字符\"><a href=\"#单个字符\" class=\"headerlink\" title=\"单个字符\"></a>单个字符</h3><ul>\n<li> <code>\\\\</code>:表示转义字符“\\”;</li>\n<li> <code>\\t</code>:表示一个“\\t”符号;</li>\n<li> <code>\\n</code>:匹配换行“\\n”符号;</li>\n</ul>\n<h3 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h3><ul>\n<li><code>[abc]</code>:表示可能是字符a或者是字符b或者是字符c中的任意一个；</li>\n<li><code>[^abc]</code>:表示不是a、b、c中的任意一位；</li>\n<li><code>[a-z]</code>:表示任一的小写字母；</li>\n<li><code>[a-zA-Z]</code>:表示任意一位字母，不区分大小写；</li>\n<li><code>[0-9]</code>:表示任意的一位数字；</li>\n</ul>\n<h3 id=\"简化的字符集表达式\"><a href=\"#简化的字符集表达式\" class=\"headerlink\" title=\"简化的字符集表达式\"></a>简化的字符集表达式</h3><ul>\n<li><code>.</code>:表示任意的一位字符；</li>\n<li><code>\\d</code>:等价于<code>[0-9]</code>;</li>\n<li><code>\\D</code>:等价于<code>[^0-9]</code>;</li>\n<li><code>\\s</code>:表示任意的空白字符，如：<code>\\t</code>,<code>\\n</code>;</li>\n<li><code>\\S</code>:表示任意的非空白字符；</li>\n<li><code>\\w</code>:等价于<code>[a-zA-Z_0-9]</code>,表示由任意的字母，数字，_，所组成；</li>\n<li><code>\\W</code>:等价于<code>[^a-zA-Z_0-9]</code>,表示不是有任意的字母，数字，_所组成；</li>\n</ul>\n<h3 id=\"边界匹配（通常用于Javascript）\"><a href=\"#边界匹配（通常用于Javascript）\" class=\"headerlink\" title=\"边界匹配（通常用于Javascript）\"></a>边界匹配（通常用于Javascript）</h3><ul>\n<li><code>^</code>:正则的开始；</li>\n<li><code>$</code>:正则的结束；</li>\n</ul>\n<h3 id=\"数量表达\"><a href=\"#数量表达\" class=\"headerlink\" title=\"数量表达\"></a>数量表达</h3><ul>\n<li><code>?</code>:表示此正则可以出现0次或者1次；</li>\n<li><code>+</code>:表示此正则可以出现1次或者1次以上；</li>\n<li><code>*</code>:表示此正则可以出现0次/1次或多次；</li>\n<li><code>{n}</code>:表示此正则正好出现n次；</li>\n<li><code>{n,}</code>:表示次正则出现n次以上（包含n次）；</li>\n<li><code>{n,m}</code>:表示此正则出现n~m次；</li>\n</ul>\n<h3 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h3><ul>\n<li>正则1正则2：正则1判断后继续判断正则2；</li>\n<li>正则1|正则2：正则1或正则2满足一个就可以；</li>\n<li>（正则）：将正则视为一组，同时可以先设置出现次数；</li>\n</ul>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 取出所有小写字母</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        String str <span class=\"token operator\">=</span> <span class=\"token string\">\"asdA)(S)(ASDsda)(&amp;&amp;*^%*%sdas1231532\"</span><span class=\"token punctuation\">;</span>\n        String regex <span class=\"token operator\">=</span> <span class=\"token string\">\"[^a-z]\"</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 按照数字拆分字符串</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        String str <span class=\"token operator\">=</span> <span class=\"token string\">\"jhgvfkjhg1341jhgv4jlhv1234vjhv1j234vlkgv13\"</span><span class=\"token punctuation\">;</span>\n        String regex <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\\d+\"</span><span class=\"token punctuation\">;</span>\n        String result<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>String a<span class=\"token operator\">:</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 判断字符串是否是double型</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        String str <span class=\"token operator\">=</span> <span class=\"token string\">\"10.22\"</span><span class=\"token punctuation\">;</span>\n        String regex <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\\d+(\\\\.\\\\d*)?\"</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 判断是否是IP地址</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        String str <span class=\"token operator\">=</span> <span class=\"token string\">\"192.168.5.1\"</span><span class=\"token punctuation\">;</span>\n        String regex <span class=\"token operator\">=</span> <span class=\"token string\">\"(\\\\d{1,3}\\\\.){3}\\\\d{1,3}\"</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 判断是否是日期</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        String str <span class=\"token operator\">=</span> <span class=\"token string\">\"2009-03-12\"</span><span class=\"token punctuation\">;</span>\n        String regex <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\\d{4}-\\\\d{2}-\\\\d{2}\"</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>reges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          Date date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 判断电话号码：12345678|010-12345678|(010)-12345678</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        String str <span class=\"token operator\">=</span> <span class=\"token string\">\"12345678\"</span><span class=\"token punctuation\">;</span>\n        String regex <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\\d{7,8}|\\\\d{3,4}-\\\\d{7,8}|\\\\(\\\\d{3,4}\\\\)-\\\\d{7,8}\"</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 判断邮箱</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        String str <span class=\"token operator\">=</span> <span class=\"token string\">\"fanrencli@163.com\"</span><span class=\"token punctuation\">;</span>\n        String regex <span class=\"token operator\">=</span> <span class=\"token string\">\"[a-zA-Z]\\\\w{0,28}[a-zA-Z0-9]@\\\\w+\\\\.(net|cn|com\\\\.cn|com)\"</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"正则标记\"><a href=\"#正则标记\" class=\"headerlink\" title=\"正则标记\"></a>正则标记</h2><h3 id=\"单个字符\"><a href=\"#单个字符\" class=\"headerlink\" title=\"单个字符\"></a>单个字符</h3><ul>\n<li> <code>\\\\</code>:表示转义字符“\\”;</li>\n<li> <code>\\t</code>:表示一个“\\t”符号;</li>\n<li> <code>\\n</code>:匹配换行“\\n”符号;</li>\n</ul>\n<h3 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h3><ul>\n<li><code>[abc]</code>:表示可能是字符a或者是字符b或者是字符c中的任意一个；</li>\n<li><code>[^abc]</code>:表示不是a、b、c中的任意一位；</li>\n<li><code>[a-z]</code>:表示任一的小写字母；</li>\n<li><code>[a-zA-Z]</code>:表示任意一位字母，不区分大小写；</li>\n<li><code>[0-9]</code>:表示任意的一位数字；</li>\n</ul>\n<h3 id=\"简化的字符集表达式\"><a href=\"#简化的字符集表达式\" class=\"headerlink\" title=\"简化的字符集表达式\"></a>简化的字符集表达式</h3><ul>\n<li><code>.</code>:表示任意的一位字符；</li>\n<li><code>\\d</code>:等价于<code>[0-9]</code>;</li>\n<li><code>\\D</code>:等价于<code>[^0-9]</code>;</li>\n<li><code>\\s</code>:表示任意的空白字符，如：<code>\\t</code>,<code>\\n</code>;</li>\n<li><code>\\S</code>:表示任意的非空白字符；</li>\n<li><code>\\w</code>:等价于<code>[a-zA-Z_0-9]</code>,表示由任意的字母，数字，_，所组成；</li>\n<li><code>\\W</code>:等价于<code>[^a-zA-Z_0-9]</code>,表示不是有任意的字母，数字，_所组成；</li>\n</ul>\n<h3 id=\"边界匹配（通常用于Javascript）\"><a href=\"#边界匹配（通常用于Javascript）\" class=\"headerlink\" title=\"边界匹配（通常用于Javascript）\"></a>边界匹配（通常用于Javascript）</h3><ul>\n<li><code>^</code>:正则的开始；</li>\n<li><code>$</code>:正则的结束；</li>\n</ul>\n<h3 id=\"数量表达\"><a href=\"#数量表达\" class=\"headerlink\" title=\"数量表达\"></a>数量表达</h3><ul>\n<li><code>?</code>:表示此正则可以出现0次或者1次；</li>\n<li><code>+</code>:表示此正则可以出现1次或者1次以上；</li>\n<li><code>*</code>:表示此正则可以出现0次/1次或多次；</li>\n<li><code>&#123;n&#125;</code>:表示此正则正好出现n次；</li>\n<li><code>&#123;n,&#125;</code>:表示次正则出现n次以上（包含n次）；</li>\n<li><code>&#123;n,m&#125;</code>:表示此正则出现n~m次；</li>\n</ul>\n<h3 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h3><ul>\n<li>正则1正则2：正则1判断后继续判断正则2；</li>\n<li>正则1|正则2：正则1或正则2满足一个就可以；</li>\n<li>（正则）：将正则视为一组，同时可以先设置出现次数；</li>\n</ul>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><pre><code class=\"java\">// 取出所有小写字母\npublic class test1 &#123;\n    public static void main(String[] args) &#123;\n        String str = &quot;asdA)(S)(ASDsda)(&amp;&amp;*^%*%sdas1231532&quot;;\n        String regex = &quot;[^a-z]&quot;;\n        System.out.println(str.replaceAll(regex,&quot;&quot;));\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">// 按照数字拆分字符串\npublic class test1 &#123;\n    public static void main(String[] args) &#123;\n        String str = &quot;jhgvfkjhg1341jhgv4jlhv1234vjhv1j234vlkgv13&quot;;\n        String regex = &quot;\\\\d+&quot;;\n        String result[] = str.split(regex);\n        for(String a:result)&#123;\n            System.out.println(a);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">// 判断字符串是否是double型\npublic class test1 &#123;\n    public static void main(String[] args) &#123;\n        String str = &quot;10.22&quot;;\n        String regex = &quot;\\\\d+(\\\\.\\\\d*)?&quot;;\n        System.out.println(str.matches(regex));\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">// 判断是否是IP地址\npublic class test1 &#123;\n    public static void main(String[] args) &#123;\n        String str = &quot;192.168.5.1&quot;;\n        String regex = &quot;(\\\\d&#123;1,3&#125;\\\\.)&#123;3&#125;\\\\d&#123;1,3&#125;&quot;;\n        System.out.println(str.matches(regex));\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">// 判断是否是日期\npublic class test1 &#123;\n    public static void main(String[] args) throws Exception &#123;\n        String str = &quot;2009-03-12&quot;;\n        String regex = &quot;\\\\d&#123;4&#125;-\\\\d&#123;2&#125;-\\\\d&#123;2&#125;&quot;;\n        System.out.println(str.matches(regex));\n        if(str.matches(reges))&#123;\n          Date date = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(str);\n          System.out.println(date);\n        &#125;\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">// 判断电话号码：12345678|010-12345678|(010)-12345678\npublic class test1 &#123;\n    public static void main(String[] args) throws Exception &#123;\n        String str = &quot;12345678&quot;;\n        String regex = &quot;\\\\d&#123;7,8&#125;|\\\\d&#123;3,4&#125;-\\\\d&#123;7,8&#125;|\\\\(\\\\d&#123;3,4&#125;\\\\)-\\\\d&#123;7,8&#125;&quot;;\n        System.out.println(str.matches(regex));\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">// 判断邮箱\npublic class test1 &#123;\n    public static void main(String[] args) throws Exception &#123;\n        String str = &quot;fanrencli@163.com&quot;;\n        String regex = &quot;[a-zA-Z]\\\\w&#123;0,28&#125;[a-zA-Z0-9]@\\\\w+\\\\.(net|cn|com\\\\.cn|com)&quot;;\n        System.out.println(str.matches(regex));\n    &#125;\n&#125;\n</code></pre>\n"},{"title":"some_Knowledge_point","date":"2021-12-17T03:33:17.000Z","author":"Fanrencli","_content":"\n### Lambda\n\n- 实现一个接口的方法函数，接口只能有一个函数；\n\n```java\ninterface IMessage{\n    public int add(int x, int y);\n}\n\npublic class Demo{\n    public static void main(String[] args){\n        IMessage msg = (s,y) -> a+b;\n    }\n}\n```\n\n### 序列化（Serializable）\n\n- `Serializable`作为序列化的标识接口没有实现任何方法\n- `transient`关键字作为防止序列化的关键字，能够使数据不被序列化\n- `ObjectOutputStream`和 `ObjectInputStream`简易的实现了对象的序列化和反序列化操作\n\n\n```java\nclass  B implements Serializable{\n    private transient int a=1;\n    private String title = \"asd\";\n}\npublic class Main {\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File(\"test.txt\")));\n        oos.writeObject(new B());\n        oos.close();\n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(\"test.txt\")));\n        Object obj =  ois.readObject();\n        ois.close();\n    }\n}\n```\n\n### 克隆（Cloneable）\n\n- `Cloneable`作为标识接口不做任何方法的实现，表示类可以被克隆\n\n```java\n\nclass Book implements Cloneable{\n    private String title;\n    private double price;\n    public Book(String title, double price){\n        this.title = title;\n        this.price = price;\n    }\n    public getTitle() { return title; }\n    public setTitle(String title) {this.title  = title; }\n    public getPrice() { return price; }\n    public setPrice(double price) {this.price = price; }\n\n    @Override\n    public object clone() throws ClassNotFoundException{ \n        return super.clone();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Book book1 = new Book(\"java\",22.2);\n        Book book2 = (Book) book1.clone();\n    }\n}\n```\n\n### 比较器（Comparable/Comparator）\n\n- `Comparable`是一个接口类，通过在定义类的时候实现接口函数来实现对象的比较，常用于集合中排序\n- `Comparator`是一个比较的工具接口，用于对已经实现完成的类进行比较\n\n```java\npublic interface Comparable<T>{\n    public itn compareTo(T o);\n}\n\nclass Book implements Comparable<Book> {\n    private String title;\n    private double price;\n    public Book(String title, double price){\n        this.title = title;\n        this.price = price;\n    }\n    public getTitle() { return title; }\n    public setTitle(String title) {this.title  = title; }\n    public getPrice() { return price; }\n    public setPrice(double price) {this.price = price; }\n\n    @Override\n    public int compare(Book value1, Book value2){\n        if(value.getPrice() > value2.getPrice()){\n            return 1;\n        }else if(value1.getPrice() < value2.getPrice()){\n            return -1;\n        }esle{\n            return 0;\n        }\n    }\n}\n\npublic class Demo{\n    public static void main(String args[]){\n        Book books[] = new Book[]{ new Book(\"java\",99.5),new Book(\"git\",99.4),new Book(\"SVN\",55.6)};\n        Arrays.sort(books)\n    }\n}\n\n```\n\n```java\n\n@FunctionalInterface\npublic interface Comparator<T>{\n    public int compare(T value1, T value);\n    public boolean equals(Object obj);\n}\n\nclass Book{\n    private String title;\n    private double price;\n    public Book(String title, double price){\n        this.title = title;\n        this.price = price;\n    }\n    public getTitle() { return title; }\n    public setTitle(String title) {this.title  = title; }\n    public getPrice() { return price; }\n    public setPrice(double price) {this.price = price; }\n}\nclass BookComparator implements Comparator<Book>{\n    @Override\n    public int compare(Book value1, Book value2){\n        if(value.getPrice() > value2.getPrice()){\n            return 1;\n        }else if(value1.getPrice() < value2.getPrice()){\n            return -1;\n        }esle{\n            return 0;\n        }\n    }\n}\npublic class Demo{\n    public static void main(String args[]){\n        Book books[] = new Book[]{ new Book(\"java\",99.5),new Book(\"git\",99.4),new Book(\"SVN\",55.6)};\n        Arrays.sort(books,new BookComparator())\n    }\n}\n```\n\n### 方法引用\n\n- 引用静态方法：类名::static方法名称\n- 引用某个对象的方法：实例化对象::普通方法\n- 引用特定类型的方法：特定类:: 普通方法\n- 引用构造方法：类名称:: new\n- 方法引用的接收接口只能实现一个方法，这就引出了`@FunctionalInterface`所定义的四种接口\n    - 功能型接口：`public interface Fcuntion<T,R> {public R apply(T t)}`\n    - 消费型接口：`public interface Consumer<T> {public void accept(T t)}`\n    - 供给型接口：`public interface Supplier<T> {public T get()}`\n    - 断言型接口: `public interface Predicate<T> {public boolean apply(T t)}`\n\n```java\n@FunctionalInterface\ninterface IMessage<P,R>{\n    public R zhuanhuan(P p);\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        IMessage<Integer,String> msg = String::valueOf;\n        System.out.println(msg.zhuanhuan(1000));\n    }\n}\n\n```\n\n```java\n@FunctionalInterface\ninterface IMessage<R>{\n    public R upper();\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        IMessage<String> msg = \"hello\"::toUpperCase;\n        System.out.println(msg.upper());\n    }\n}\n\n```\n\n```java\n@FunctionalInterface\ninterface IMessage<P>{\n    public int compare(P p1, P p2);\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        IMessage<String> msg = String:: compareTo;\n        System.out.println(msg.compare(\"A\", \"B\"));\n    }\n}\n\n```\n\n```java\n\n@FunctionalInterface\ninterface IMessage<P>{\n    public P create(String title,double price);\n}\n\nclass Book{\n    private String title;\n    private double price;\n    public Book(String title, double price){\n        this.title = title;\n        this.price = price;\n    }\n    public getTitle() { return title; }\n    public setTitle(String title) {this.title  = title; }\n    public getPrice() { return price; }\n    public setPrice(double price) {this.price = price; }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        IMessage<Book> msg = Book :: new;\n        System.out.println(msg.create(\"java\", 20.2));\n    }\n}\n\n```\n\n### 泛型\n\n```java\npublic class B<T>{\n    private T b;\n    // 这个不是泛型方法\n    public T getB() { \n        return this.b;\n    }\n    public void set(B<? extends  > b) {\n\n    }\n    // 这个才是泛型方法\n    public <S> S get(S str){\n        return str;\n    }\n}\npublic class B<T extends Number>{\n    private T b;\n    // 这个不是泛型方法\n    public T getB() { \n        return this.b;\n    }\n    // 这个才是泛型方法\n    public <S> S get(S str){\n        return str;\n    }\n}\n```\n\n\n\n\n\n","source":"_posts/JAVA/some-Knowledge-point.md","raw":"---\ntitle: some_Knowledge_point\ndate: 2021-12-17 11:33:17\ncategories:\n  - JAVA\ntags:\n  - Serializable\n  - Cloneable\n  - Comparable\n  - Comparator\nauthor: Fanrencli\n---\n\n### Lambda\n\n- 实现一个接口的方法函数，接口只能有一个函数；\n\n```java\ninterface IMessage{\n    public int add(int x, int y);\n}\n\npublic class Demo{\n    public static void main(String[] args){\n        IMessage msg = (s,y) -> a+b;\n    }\n}\n```\n\n### 序列化（Serializable）\n\n- `Serializable`作为序列化的标识接口没有实现任何方法\n- `transient`关键字作为防止序列化的关键字，能够使数据不被序列化\n- `ObjectOutputStream`和 `ObjectInputStream`简易的实现了对象的序列化和反序列化操作\n\n\n```java\nclass  B implements Serializable{\n    private transient int a=1;\n    private String title = \"asd\";\n}\npublic class Main {\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File(\"test.txt\")));\n        oos.writeObject(new B());\n        oos.close();\n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(\"test.txt\")));\n        Object obj =  ois.readObject();\n        ois.close();\n    }\n}\n```\n\n### 克隆（Cloneable）\n\n- `Cloneable`作为标识接口不做任何方法的实现，表示类可以被克隆\n\n```java\n\nclass Book implements Cloneable{\n    private String title;\n    private double price;\n    public Book(String title, double price){\n        this.title = title;\n        this.price = price;\n    }\n    public getTitle() { return title; }\n    public setTitle(String title) {this.title  = title; }\n    public getPrice() { return price; }\n    public setPrice(double price) {this.price = price; }\n\n    @Override\n    public object clone() throws ClassNotFoundException{ \n        return super.clone();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Book book1 = new Book(\"java\",22.2);\n        Book book2 = (Book) book1.clone();\n    }\n}\n```\n\n### 比较器（Comparable/Comparator）\n\n- `Comparable`是一个接口类，通过在定义类的时候实现接口函数来实现对象的比较，常用于集合中排序\n- `Comparator`是一个比较的工具接口，用于对已经实现完成的类进行比较\n\n```java\npublic interface Comparable<T>{\n    public itn compareTo(T o);\n}\n\nclass Book implements Comparable<Book> {\n    private String title;\n    private double price;\n    public Book(String title, double price){\n        this.title = title;\n        this.price = price;\n    }\n    public getTitle() { return title; }\n    public setTitle(String title) {this.title  = title; }\n    public getPrice() { return price; }\n    public setPrice(double price) {this.price = price; }\n\n    @Override\n    public int compare(Book value1, Book value2){\n        if(value.getPrice() > value2.getPrice()){\n            return 1;\n        }else if(value1.getPrice() < value2.getPrice()){\n            return -1;\n        }esle{\n            return 0;\n        }\n    }\n}\n\npublic class Demo{\n    public static void main(String args[]){\n        Book books[] = new Book[]{ new Book(\"java\",99.5),new Book(\"git\",99.4),new Book(\"SVN\",55.6)};\n        Arrays.sort(books)\n    }\n}\n\n```\n\n```java\n\n@FunctionalInterface\npublic interface Comparator<T>{\n    public int compare(T value1, T value);\n    public boolean equals(Object obj);\n}\n\nclass Book{\n    private String title;\n    private double price;\n    public Book(String title, double price){\n        this.title = title;\n        this.price = price;\n    }\n    public getTitle() { return title; }\n    public setTitle(String title) {this.title  = title; }\n    public getPrice() { return price; }\n    public setPrice(double price) {this.price = price; }\n}\nclass BookComparator implements Comparator<Book>{\n    @Override\n    public int compare(Book value1, Book value2){\n        if(value.getPrice() > value2.getPrice()){\n            return 1;\n        }else if(value1.getPrice() < value2.getPrice()){\n            return -1;\n        }esle{\n            return 0;\n        }\n    }\n}\npublic class Demo{\n    public static void main(String args[]){\n        Book books[] = new Book[]{ new Book(\"java\",99.5),new Book(\"git\",99.4),new Book(\"SVN\",55.6)};\n        Arrays.sort(books,new BookComparator())\n    }\n}\n```\n\n### 方法引用\n\n- 引用静态方法：类名::static方法名称\n- 引用某个对象的方法：实例化对象::普通方法\n- 引用特定类型的方法：特定类:: 普通方法\n- 引用构造方法：类名称:: new\n- 方法引用的接收接口只能实现一个方法，这就引出了`@FunctionalInterface`所定义的四种接口\n    - 功能型接口：`public interface Fcuntion<T,R> {public R apply(T t)}`\n    - 消费型接口：`public interface Consumer<T> {public void accept(T t)}`\n    - 供给型接口：`public interface Supplier<T> {public T get()}`\n    - 断言型接口: `public interface Predicate<T> {public boolean apply(T t)}`\n\n```java\n@FunctionalInterface\ninterface IMessage<P,R>{\n    public R zhuanhuan(P p);\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        IMessage<Integer,String> msg = String::valueOf;\n        System.out.println(msg.zhuanhuan(1000));\n    }\n}\n\n```\n\n```java\n@FunctionalInterface\ninterface IMessage<R>{\n    public R upper();\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        IMessage<String> msg = \"hello\"::toUpperCase;\n        System.out.println(msg.upper());\n    }\n}\n\n```\n\n```java\n@FunctionalInterface\ninterface IMessage<P>{\n    public int compare(P p1, P p2);\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        IMessage<String> msg = String:: compareTo;\n        System.out.println(msg.compare(\"A\", \"B\"));\n    }\n}\n\n```\n\n```java\n\n@FunctionalInterface\ninterface IMessage<P>{\n    public P create(String title,double price);\n}\n\nclass Book{\n    private String title;\n    private double price;\n    public Book(String title, double price){\n        this.title = title;\n        this.price = price;\n    }\n    public getTitle() { return title; }\n    public setTitle(String title) {this.title  = title; }\n    public getPrice() { return price; }\n    public setPrice(double price) {this.price = price; }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        IMessage<Book> msg = Book :: new;\n        System.out.println(msg.create(\"java\", 20.2));\n    }\n}\n\n```\n\n### 泛型\n\n```java\npublic class B<T>{\n    private T b;\n    // 这个不是泛型方法\n    public T getB() { \n        return this.b;\n    }\n    public void set(B<? extends  > b) {\n\n    }\n    // 这个才是泛型方法\n    public <S> S get(S str){\n        return str;\n    }\n}\npublic class B<T extends Number>{\n    private T b;\n    // 这个不是泛型方法\n    public T getB() { \n        return this.b;\n    }\n    // 这个才是泛型方法\n    public <S> S get(S str){\n        return str;\n    }\n}\n```\n\n\n\n\n\n","slug":"JAVA/some-Knowledge-point","published":1,"updated":"2021-12-31T03:41:57.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuhigbs000w8suo4bnvbfjo","content":"<h3 id=\"Lambda\"><a href=\"#Lambda\" class=\"headerlink\" title=\"Lambda\"></a>Lambda</h3><ul>\n<li>实现一个接口的方法函数，接口只能有一个函数；</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IMessage</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        IMessage msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"序列化（Serializable）\"><a href=\"#序列化（Serializable）\" class=\"headerlink\" title=\"序列化（Serializable）\"></a>序列化（Serializable）</h3><ul>\n<li><code>Serializable</code>作为序列化的标识接口没有实现任何方法</li>\n<li><code>transient</code>关键字作为防止序列化的关键字，能够使数据不被序列化</li>\n<li><code>ObjectOutputStream</code>和 <code>ObjectInputStream</code>简易的实现了对象的序列化和反序列化操作</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span>  <span class=\"token class-name\">B</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String title <span class=\"token operator\">=</span> <span class=\"token string\">\"asd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> ClassNotFoundException <span class=\"token punctuation\">{</span>\n        ObjectOutputStream oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        oos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ObjectInputStream ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Object obj <span class=\"token operator\">=</span>  ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ois<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"克隆（Cloneable）\"><a href=\"#克隆（Cloneable）\" class=\"headerlink\" title=\"克隆（Cloneable）\"></a>克隆（Cloneable）</h3><ul>\n<li><code>Cloneable</code>作为标识接口不做任何方法的实现，表示类可以被克隆</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> String title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>String title<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> title<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span>String title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title  <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> object <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> ClassNotFoundException<span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Book book1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">22.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Book book2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">)</span> book1<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"比较器（Comparable-Comparator）\"><a href=\"#比较器（Comparable-Comparator）\" class=\"headerlink\" title=\"比较器（Comparable/Comparator）\"></a>比较器（Comparable/Comparator）</h3><ul>\n<li><code>Comparable</code>是一个接口类，通过在定义类的时候实现接口函数来实现对象的比较，常用于集合中排序</li>\n<li><code>Comparator</code>是一个比较的工具接口，用于对已经实现完成的类进行比较</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Comparable</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> itn <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>T o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token operator\">&lt;</span>Book<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> String title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>String title<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> title<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span>String title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title  <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>Book value1<span class=\"token punctuation\">,</span> Book value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> value2<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> value2<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>esle<span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Book books<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">99.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"git\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">99.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SVN\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">55.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Comparator</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>T value1<span class=\"token punctuation\">,</span> T value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Object obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> String title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>String title<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> title<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span>String title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title  <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BookComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token operator\">&lt;</span>Book<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>Book value1<span class=\"token punctuation\">,</span> Book value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> value2<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> value2<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>esle<span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Book books<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">99.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"git\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">99.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SVN\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">55.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BookComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h3><ul>\n<li>引用静态方法：类名::static方法名称</li>\n<li>引用某个对象的方法：实例化对象::普通方法</li>\n<li>引用特定类型的方法：特定类:: 普通方法</li>\n<li>引用构造方法：类名称:: new</li>\n<li>方法引用的接收接口只能实现一个方法，这就引出了<code>@FunctionalInterface</code>所定义的四种接口<ul>\n<li>功能型接口：<code>public interface Fcuntion&lt;T,R&gt; {public R apply(T t)}</code></li>\n<li>消费型接口：<code>public interface Consumer&lt;T&gt; {public void accept(T t)}</code></li>\n<li>供给型接口：<code>public interface Supplier&lt;T&gt; {public T get()}</code></li>\n<li>断言型接口: <code>public interface Predicate&lt;T&gt; {public boolean apply(T t)}</code></li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IMessage</span><span class=\"token operator\">&lt;</span>P<span class=\"token punctuation\">,</span>R<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> R <span class=\"token function\">zhuanhuan</span><span class=\"token punctuation\">(</span>P p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        IMessage<span class=\"token operator\">&lt;</span>Integer<span class=\"token punctuation\">,</span>String<span class=\"token operator\">></span> msg <span class=\"token operator\">=</span> String<span class=\"token operator\">:</span><span class=\"token operator\">:</span>valueOf<span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">zhuanhuan</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IMessage</span><span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> R <span class=\"token function\">upper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        IMessage<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span>toUpperCase<span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">upper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IMessage</span><span class=\"token operator\">&lt;</span>P<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>P p1<span class=\"token punctuation\">,</span> P p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        IMessage<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> msg <span class=\"token operator\">=</span> String<span class=\"token operator\">:</span><span class=\"token operator\">:</span> compareTo<span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IMessage</span><span class=\"token operator\">&lt;</span>P<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> P <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>String title<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> String title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>String title<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> title<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span>String title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title  <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        IMessage<span class=\"token operator\">&lt;</span>Book<span class=\"token operator\">></span> msg <span class=\"token operator\">=</span> Book <span class=\"token operator\">:</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> T b<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 这个不是泛型方法</span>\n    <span class=\"token keyword\">public</span> T <span class=\"token function\">getB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>B<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span>  <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 这个才是泛型方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token operator\">&lt;</span>S<span class=\"token operator\">></span> S <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>S str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> T b<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 这个不是泛型方法</span>\n    <span class=\"token keyword\">public</span> T <span class=\"token function\">getB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 这个才是泛型方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token operator\">&lt;</span>S<span class=\"token operator\">></span> S <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>S str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"Lambda\"><a href=\"#Lambda\" class=\"headerlink\" title=\"Lambda\"></a>Lambda</h3><ul>\n<li>实现一个接口的方法函数，接口只能有一个函数；</li>\n</ul>\n<pre><code class=\"java\">interface IMessage&#123;\n    public int add(int x, int y);\n&#125;\n\npublic class Demo&#123;\n    public static void main(String[] args)&#123;\n        IMessage msg = (s,y) -&gt; a+b;\n    &#125;\n&#125;</code></pre>\n<h3 id=\"序列化（Serializable）\"><a href=\"#序列化（Serializable）\" class=\"headerlink\" title=\"序列化（Serializable）\"></a>序列化（Serializable）</h3><ul>\n<li><code>Serializable</code>作为序列化的标识接口没有实现任何方法</li>\n<li><code>transient</code>关键字作为防止序列化的关键字，能够使数据不被序列化</li>\n<li><code>ObjectOutputStream</code>和 <code>ObjectInputStream</code>简易的实现了对象的序列化和反序列化操作</li>\n</ul>\n<pre><code class=\"java\">class  B implements Serializable&#123;\n    private transient int a=1;\n    private String title = &quot;asd&quot;;\n&#125;\npublic class Main &#123;\n    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File(&quot;test.txt&quot;)));\n        oos.writeObject(new B());\n        oos.close();\n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(&quot;test.txt&quot;)));\n        Object obj =  ois.readObject();\n        ois.close();\n    &#125;\n&#125;</code></pre>\n<h3 id=\"克隆（Cloneable）\"><a href=\"#克隆（Cloneable）\" class=\"headerlink\" title=\"克隆（Cloneable）\"></a>克隆（Cloneable）</h3><ul>\n<li><code>Cloneable</code>作为标识接口不做任何方法的实现，表示类可以被克隆</li>\n</ul>\n<pre><code class=\"java\">\nclass Book implements Cloneable&#123;\n    private String title;\n    private double price;\n    public Book(String title, double price)&#123;\n        this.title = title;\n        this.price = price;\n    &#125;\n    public getTitle() &#123; return title; &#125;\n    public setTitle(String title) &#123;this.title  = title; &#125;\n    public getPrice() &#123; return price; &#125;\n    public setPrice(double price) &#123;this.price = price; &#125;\n\n    @Override\n    public object clone() throws ClassNotFoundException&#123; \n        return super.clone();\n    &#125;\n&#125;\n\npublic class Main &#123;\n    public static void main(String[] args) &#123;\n        Book book1 = new Book(&quot;java&quot;,22.2);\n        Book book2 = (Book) book1.clone();\n    &#125;\n&#125;</code></pre>\n<h3 id=\"比较器（Comparable-Comparator）\"><a href=\"#比较器（Comparable-Comparator）\" class=\"headerlink\" title=\"比较器（Comparable/Comparator）\"></a>比较器（Comparable/Comparator）</h3><ul>\n<li><code>Comparable</code>是一个接口类，通过在定义类的时候实现接口函数来实现对象的比较，常用于集合中排序</li>\n<li><code>Comparator</code>是一个比较的工具接口，用于对已经实现完成的类进行比较</li>\n</ul>\n<pre><code class=\"java\">public interface Comparable&lt;T&gt;&#123;\n    public itn compareTo(T o);\n&#125;\n\nclass Book implements Comparable&lt;Book&gt; &#123;\n    private String title;\n    private double price;\n    public Book(String title, double price)&#123;\n        this.title = title;\n        this.price = price;\n    &#125;\n    public getTitle() &#123; return title; &#125;\n    public setTitle(String title) &#123;this.title  = title; &#125;\n    public getPrice() &#123; return price; &#125;\n    public setPrice(double price) &#123;this.price = price; &#125;\n\n    @Override\n    public int compare(Book value1, Book value2)&#123;\n        if(value.getPrice() &gt; value2.getPrice())&#123;\n            return 1;\n        &#125;else if(value1.getPrice() &lt; value2.getPrice())&#123;\n            return -1;\n        &#125;esle&#123;\n            return 0;\n        &#125;\n    &#125;\n&#125;\n\npublic class Demo&#123;\n    public static void main(String args[])&#123;\n        Book books[] = new Book[]&#123; new Book(&quot;java&quot;,99.5),new Book(&quot;git&quot;,99.4),new Book(&quot;SVN&quot;,55.6)&#125;;\n        Arrays.sort(books)\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">\n@FunctionalInterface\npublic interface Comparator&lt;T&gt;&#123;\n    public int compare(T value1, T value);\n    public boolean equals(Object obj);\n&#125;\n\nclass Book&#123;\n    private String title;\n    private double price;\n    public Book(String title, double price)&#123;\n        this.title = title;\n        this.price = price;\n    &#125;\n    public getTitle() &#123; return title; &#125;\n    public setTitle(String title) &#123;this.title  = title; &#125;\n    public getPrice() &#123; return price; &#125;\n    public setPrice(double price) &#123;this.price = price; &#125;\n&#125;\nclass BookComparator implements Comparator&lt;Book&gt;&#123;\n    @Override\n    public int compare(Book value1, Book value2)&#123;\n        if(value.getPrice() &gt; value2.getPrice())&#123;\n            return 1;\n        &#125;else if(value1.getPrice() &lt; value2.getPrice())&#123;\n            return -1;\n        &#125;esle&#123;\n            return 0;\n        &#125;\n    &#125;\n&#125;\npublic class Demo&#123;\n    public static void main(String args[])&#123;\n        Book books[] = new Book[]&#123; new Book(&quot;java&quot;,99.5),new Book(&quot;git&quot;,99.4),new Book(&quot;SVN&quot;,55.6)&#125;;\n        Arrays.sort(books,new BookComparator())\n    &#125;\n&#125;</code></pre>\n<h3 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h3><ul>\n<li>引用静态方法：类名::static方法名称</li>\n<li>引用某个对象的方法：实例化对象::普通方法</li>\n<li>引用特定类型的方法：特定类:: 普通方法</li>\n<li>引用构造方法：类名称:: new</li>\n<li>方法引用的接收接口只能实现一个方法，这就引出了<code>@FunctionalInterface</code>所定义的四种接口<ul>\n<li>功能型接口：<code>public interface Fcuntion&lt;T,R&gt; &#123;public R apply(T t)&#125;</code></li>\n<li>消费型接口：<code>public interface Consumer&lt;T&gt; &#123;public void accept(T t)&#125;</code></li>\n<li>供给型接口：<code>public interface Supplier&lt;T&gt; &#123;public T get()&#125;</code></li>\n<li>断言型接口: <code>public interface Predicate&lt;T&gt; &#123;public boolean apply(T t)&#125;</code></li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"java\">@FunctionalInterface\ninterface IMessage&lt;P,R&gt;&#123;\n    public R zhuanhuan(P p);\n&#125;\n\npublic class Main &#123;\n    public static void main(String[] args) &#123;\n        IMessage&lt;Integer,String&gt; msg = String::valueOf;\n        System.out.println(msg.zhuanhuan(1000));\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">@FunctionalInterface\ninterface IMessage&lt;R&gt;&#123;\n    public R upper();\n&#125;\n\npublic class Main &#123;\n    public static void main(String[] args) &#123;\n        IMessage&lt;String&gt; msg = &quot;hello&quot;::toUpperCase;\n        System.out.println(msg.upper());\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">@FunctionalInterface\ninterface IMessage&lt;P&gt;&#123;\n    public int compare(P p1, P p2);\n&#125;\n\npublic class Main &#123;\n    public static void main(String[] args) &#123;\n        IMessage&lt;String&gt; msg = String:: compareTo;\n        System.out.println(msg.compare(&quot;A&quot;, &quot;B&quot;));\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">\n@FunctionalInterface\ninterface IMessage&lt;P&gt;&#123;\n    public P create(String title,double price);\n&#125;\n\nclass Book&#123;\n    private String title;\n    private double price;\n    public Book(String title, double price)&#123;\n        this.title = title;\n        this.price = price;\n    &#125;\n    public getTitle() &#123; return title; &#125;\n    public setTitle(String title) &#123;this.title  = title; &#125;\n    public getPrice() &#123; return price; &#125;\n    public setPrice(double price) &#123;this.price = price; &#125;\n&#125;\n\npublic class Main &#123;\n    public static void main(String[] args) &#123;\n        IMessage&lt;Book&gt; msg = Book :: new;\n        System.out.println(msg.create(&quot;java&quot;, 20.2));\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><pre><code class=\"java\">public class B&lt;T&gt;&#123;\n    private T b;\n    // 这个不是泛型方法\n    public T getB() &#123; \n        return this.b;\n    &#125;\n    public void set(B&lt;? extends  &gt; b) &#123;\n\n    &#125;\n    // 这个才是泛型方法\n    public &lt;S&gt; S get(S str)&#123;\n        return str;\n    &#125;\n&#125;\npublic class B&lt;T extends Number&gt;&#123;\n    private T b;\n    // 这个不是泛型方法\n    public T getB() &#123; \n        return this.b;\n    &#125;\n    // 这个才是泛型方法\n    public &lt;S&gt; S get(S str)&#123;\n        return str;\n    &#125;\n&#125;</code></pre>\n"},{"title":"thread","date":"2021-12-15T14:02:10.000Z","author":"Fanrencli","_content":"## Thread线程\n\n### 线程创建方式\n\n- 继承`Thread`类\n- 实现`Runnable`接口\n- 实现`Callable`接口,`Callable`接口可以通过实现`call()`方法实现方法运行，并通过`FutureTask`来获取返回结果\n  \n```java\n// 通过继承Thread类实现Run方法，并调用start方法运行。通过start方法运行可以交给CPU进行资源分配。\nclass A extends Thread{\n    @Override\n    public void run() {\n        System.out.println(\"ok\");\n    }\n}\npublic class test {\n    public static void main(String[] args) {\n        A a = new A();\n        a.start();\n    }\n}\n```\n```java\n// 通过实现Runnable接口，重写run方法，然后实例化对象借助Thread实力进行运行。\nclass A implements Runnable{\n    @Override\n    public void run() {\n        System.out.println(\"ok\");\n    }\n}\npublic class test {\n    public static void main(String[] args) {\n        new Thread(new A()).start();\n    }\n}\n```\n```java\nclass A implements Callable<String>{\n    @Override\n    public String call() throws Exception {\n        return \"ok\";\n    }\n}\npublic class test {\n    public static void main(String[] args) {\n        FutureTask<String> futureTask = new FutureTask<>(new A());\n        new Thread(futureTask).start();\n    }\n}\n```\n\n### 线程池相关操作\n\n- Future和FutureTask\n- 线程池的创建\n- 线程拒绝策略\n\n#### Future 和 FutureTask\n\n- Future常常作为线程池中submit方法的返回值的接收，可以通过调用get()方法获取线程返回值；\n- FutureTask类实现了Runnable和Future接口，其构造函数可以接收Runnable和Callable实现类，然后可以通过线程池的submit或者execute方法进行运行,也可以直接通过Thread运行，最后可以调用get方法获取返回值；\n\n\n```java\nclass A implements Callable<String> {\n    @Override\n    public String call() throws Exception {\n        return \"ok\";\n    }\n}\nclass B implements Runnable{\n    @Override\n    public void run() {\n        System.out.println(\"ok\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        FutureTask<String> futureTask = new FutureTask<>(new A());\n        new Thread(futureTask).start();\n        FutureTask<String> futureTask1 = new FutureTask<>(new B(),\"backinfo\");\n        new Thread(futureTask1).start();\n        System.out.println(futureTask1.get());\n        System.out.println(futureTask.get());\n    }\n}\n```\n\n```java\nExecutorService service = Executors.newSingleThreadExecutor();\nFuture<String> future = service.submit(new Callable<String>() {\n    @Override\n    public String call() throws Exception {\n        return \"say helloWorld!!!\";\n    }\n});\nSystem.out.println(future.get());// 通过get返回结果\n\n```\n#### 线程池的创建\n\n- `newCachedThreadPool`：重用以前线程，无可用则创建，空闲则移除；\n- `newFixedThreadPool(int size)`：创建指定大小的线程池。通过队列管理\n- `newScheduledThreadPool(int size)`:可以设置运行几次以及时间间隔\n- `newSingleThreadExecutor`：创建只有一个线程的线程池，这个线程池可以在线程死后（或发生异常时）重新启动一个线程来替代原来的线程继续执行下去\n- 线程池的运行方法有两种：\n    - submit：返回一个future类型，可以获取返回值\n    - execute：直接运行，无返回值\n\n```java\nExecutorService pool = Executors.newFixedThreadPool(taskSize);\nList<Future> list = new ArrayList<Future>(); \nfor (int i = 0; i < taskSize; i++) { \n    Callable c = new MyCallable(i + \" \"); \n    Future f = pool.submit(c); \n    list.add(f); \n} \nfor (int i = 0; i < taskSize; i++) { \n    Runnable c = new Myrunnable(i + \" \"); \n    Future f = pool.submit(c,:\"backInfo\"); \n    list.add(f); \n} \npool.shutdown(); \nfor (Future f : list) { \n    System.out.println(\"res：\" + f.get().toString()); \n    }\n```\n\n#### 线程拒绝策略\n\n<p style=\"text-indent:2em\">\n线程池中的线程已经用完了，无法继续为新任务服务，同时，等待队列也已经排满了，再也塞不下新任务了。这时候我们就需要拒绝策略机制合理的处理这个问题。\n</p>\n\n- `AbortPolicy`：直接抛出异常，阻止系统正常运行。 \n- `CallerRunsPolicy`：只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务。显然这样做不会真的丢弃任务，但是，任务提交线程的性能极有可能会急剧下降。 \n- `DiscardOldestPolicy`：丢弃最老的一个请求，也就是即将被执行的一个任务，并尝试再次提交当前任务。 \n- `DiscardPolicy`：该策略默默地丢弃无法处理的任务，不予任何处理。如果允许任务丢失，这是最好的一种方案。 \n- 以上内置拒绝策略均实现了RejectedExecutionHandler接口，若以上策略仍无法满足实际需要，完全可以自己扩展RejectedExecutionHandler接口。\n\n### 线程的相关操作\n\n- `Thread.sleep()` 使得当前线程休眠一定的时间，放弃CPU使用权，但是不会放弃资源锁，是`Thread`的静态函数，不论谁调用`sleep`方法，休眠的总是当前线程。\n- `getPriority()`和`setPriority(int newPriority)`,获取线程的优先级\n- `join()`，通过线程实例对象调用join方法，使得当前线程等待join线程结束\n- `Thread.yield()`方法使得当前线程让出CPU资源；\n- `interrupt()`通过调用此方法发出一个信号，通常用于在线程阻塞时通知退出阻塞；\n- `Object.wait()` 作为`Object`对象的方法，用于休眠当前线程，通过线程的对象调用，并放弃当前持有的锁，必须在`synchronized`中使用。\n- `Object.notify[all]()` 作为`Object`对象的方法，用于唤醒等待此对象的线程，必须在`synchronized`中使用。\n\n\n### Synchronized关键字作用\n\n1. 修饰一个代码块，被修饰的代码块称为同步语句块，作用的对象是调用这个代码块的对象。\n2. 修饰一个方法，被修饰的方法称为同步方法，作用的对象是调用这个方法的对象。\n3. 修饰一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象。\n4. 修饰一个类，其作用的范围是synchronized后面括号括起来的部分，作用的对象是这个类的所有对象。\n5. 总结：被`synchronized`修饰的对象，其所有synchronized方法被锁住，非synchronized方法正常使用。\n\n\n```java\n// synchronized修饰代码块，只锁定指定的对象的synchronized修饰的代码。this指当前对象，当有线程进入this对应的代码块，则此对象的所有synchronized修饰的代码全部锁住，非synchronized修饰的代码块任然可以进入。\npublic class A implements Runnable {\n    public static void main(String[] args) throws InterruptedException {\n    }\n    Object lock1 = new Object();\n    Object lock2 = new Object();\n    @Override\n    public void run() {\n        // 第一把锁\n        synchronized (lock1) {\n            System.out.println(\"我是lock1，我叫\"+ Thread.currentThread().getName());\n            try {\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(Thread.currentThread().getName()+\"lock1运行结束\");\n        }\n        // 第二把锁\n        synchronized (lock2) {\n            System.out.println(\"我是lock2，我叫\"+ Thread.currentThread().getName());\n            try {\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(Thread.currentThread().getName()+\"lock2运行结束\");\n        }\n        synchronized (this) {\n            System.out.println(\"我是this，我叫\"+ Thread.currentThread().getName());\n            try {\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(Thread.currentThread().getName()+\"this运行结束\");\n        }\n    }\n}\n```\n```java\n// 当synchronized修饰方法的时候，如果有县城进行这个某个实例对象的方法中，那么这个实例对象其他被synchronized修饰的方法同时也会被锁住。\nclass A{\n    public synchronized void say(B b){\n        System.out.println(\"sayA\");\n        b.get();\n    }\n    public synchronized void get(){\n        System.out.println(\"getA\");\n    }\n}\nclass B{\n    public synchronized void say(A a){\n        System.out.println(\"sayB\");\n        a.get();\n    }\n    public synchronized void get(){\n        System.out.println(\"getB\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        A a = new A();\n        B b = new B();\n        new Thread(()->a.say(b)).start();\n        b.say(a);\n    }\n```","source":"_posts/JAVA/thread.md","raw":"---\ntitle: thread\ndate: 2021-12-15 22:02:10\ncategories:\n  - JAVA\ntags:\n  - Thread\nauthor: Fanrencli\n---\n## Thread线程\n\n### 线程创建方式\n\n- 继承`Thread`类\n- 实现`Runnable`接口\n- 实现`Callable`接口,`Callable`接口可以通过实现`call()`方法实现方法运行，并通过`FutureTask`来获取返回结果\n  \n```java\n// 通过继承Thread类实现Run方法，并调用start方法运行。通过start方法运行可以交给CPU进行资源分配。\nclass A extends Thread{\n    @Override\n    public void run() {\n        System.out.println(\"ok\");\n    }\n}\npublic class test {\n    public static void main(String[] args) {\n        A a = new A();\n        a.start();\n    }\n}\n```\n```java\n// 通过实现Runnable接口，重写run方法，然后实例化对象借助Thread实力进行运行。\nclass A implements Runnable{\n    @Override\n    public void run() {\n        System.out.println(\"ok\");\n    }\n}\npublic class test {\n    public static void main(String[] args) {\n        new Thread(new A()).start();\n    }\n}\n```\n```java\nclass A implements Callable<String>{\n    @Override\n    public String call() throws Exception {\n        return \"ok\";\n    }\n}\npublic class test {\n    public static void main(String[] args) {\n        FutureTask<String> futureTask = new FutureTask<>(new A());\n        new Thread(futureTask).start();\n    }\n}\n```\n\n### 线程池相关操作\n\n- Future和FutureTask\n- 线程池的创建\n- 线程拒绝策略\n\n#### Future 和 FutureTask\n\n- Future常常作为线程池中submit方法的返回值的接收，可以通过调用get()方法获取线程返回值；\n- FutureTask类实现了Runnable和Future接口，其构造函数可以接收Runnable和Callable实现类，然后可以通过线程池的submit或者execute方法进行运行,也可以直接通过Thread运行，最后可以调用get方法获取返回值；\n\n\n```java\nclass A implements Callable<String> {\n    @Override\n    public String call() throws Exception {\n        return \"ok\";\n    }\n}\nclass B implements Runnable{\n    @Override\n    public void run() {\n        System.out.println(\"ok\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        FutureTask<String> futureTask = new FutureTask<>(new A());\n        new Thread(futureTask).start();\n        FutureTask<String> futureTask1 = new FutureTask<>(new B(),\"backinfo\");\n        new Thread(futureTask1).start();\n        System.out.println(futureTask1.get());\n        System.out.println(futureTask.get());\n    }\n}\n```\n\n```java\nExecutorService service = Executors.newSingleThreadExecutor();\nFuture<String> future = service.submit(new Callable<String>() {\n    @Override\n    public String call() throws Exception {\n        return \"say helloWorld!!!\";\n    }\n});\nSystem.out.println(future.get());// 通过get返回结果\n\n```\n#### 线程池的创建\n\n- `newCachedThreadPool`：重用以前线程，无可用则创建，空闲则移除；\n- `newFixedThreadPool(int size)`：创建指定大小的线程池。通过队列管理\n- `newScheduledThreadPool(int size)`:可以设置运行几次以及时间间隔\n- `newSingleThreadExecutor`：创建只有一个线程的线程池，这个线程池可以在线程死后（或发生异常时）重新启动一个线程来替代原来的线程继续执行下去\n- 线程池的运行方法有两种：\n    - submit：返回一个future类型，可以获取返回值\n    - execute：直接运行，无返回值\n\n```java\nExecutorService pool = Executors.newFixedThreadPool(taskSize);\nList<Future> list = new ArrayList<Future>(); \nfor (int i = 0; i < taskSize; i++) { \n    Callable c = new MyCallable(i + \" \"); \n    Future f = pool.submit(c); \n    list.add(f); \n} \nfor (int i = 0; i < taskSize; i++) { \n    Runnable c = new Myrunnable(i + \" \"); \n    Future f = pool.submit(c,:\"backInfo\"); \n    list.add(f); \n} \npool.shutdown(); \nfor (Future f : list) { \n    System.out.println(\"res：\" + f.get().toString()); \n    }\n```\n\n#### 线程拒绝策略\n\n<p style=\"text-indent:2em\">\n线程池中的线程已经用完了，无法继续为新任务服务，同时，等待队列也已经排满了，再也塞不下新任务了。这时候我们就需要拒绝策略机制合理的处理这个问题。\n</p>\n\n- `AbortPolicy`：直接抛出异常，阻止系统正常运行。 \n- `CallerRunsPolicy`：只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务。显然这样做不会真的丢弃任务，但是，任务提交线程的性能极有可能会急剧下降。 \n- `DiscardOldestPolicy`：丢弃最老的一个请求，也就是即将被执行的一个任务，并尝试再次提交当前任务。 \n- `DiscardPolicy`：该策略默默地丢弃无法处理的任务，不予任何处理。如果允许任务丢失，这是最好的一种方案。 \n- 以上内置拒绝策略均实现了RejectedExecutionHandler接口，若以上策略仍无法满足实际需要，完全可以自己扩展RejectedExecutionHandler接口。\n\n### 线程的相关操作\n\n- `Thread.sleep()` 使得当前线程休眠一定的时间，放弃CPU使用权，但是不会放弃资源锁，是`Thread`的静态函数，不论谁调用`sleep`方法，休眠的总是当前线程。\n- `getPriority()`和`setPriority(int newPriority)`,获取线程的优先级\n- `join()`，通过线程实例对象调用join方法，使得当前线程等待join线程结束\n- `Thread.yield()`方法使得当前线程让出CPU资源；\n- `interrupt()`通过调用此方法发出一个信号，通常用于在线程阻塞时通知退出阻塞；\n- `Object.wait()` 作为`Object`对象的方法，用于休眠当前线程，通过线程的对象调用，并放弃当前持有的锁，必须在`synchronized`中使用。\n- `Object.notify[all]()` 作为`Object`对象的方法，用于唤醒等待此对象的线程，必须在`synchronized`中使用。\n\n\n### Synchronized关键字作用\n\n1. 修饰一个代码块，被修饰的代码块称为同步语句块，作用的对象是调用这个代码块的对象。\n2. 修饰一个方法，被修饰的方法称为同步方法，作用的对象是调用这个方法的对象。\n3. 修饰一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象。\n4. 修饰一个类，其作用的范围是synchronized后面括号括起来的部分，作用的对象是这个类的所有对象。\n5. 总结：被`synchronized`修饰的对象，其所有synchronized方法被锁住，非synchronized方法正常使用。\n\n\n```java\n// synchronized修饰代码块，只锁定指定的对象的synchronized修饰的代码。this指当前对象，当有线程进入this对应的代码块，则此对象的所有synchronized修饰的代码全部锁住，非synchronized修饰的代码块任然可以进入。\npublic class A implements Runnable {\n    public static void main(String[] args) throws InterruptedException {\n    }\n    Object lock1 = new Object();\n    Object lock2 = new Object();\n    @Override\n    public void run() {\n        // 第一把锁\n        synchronized (lock1) {\n            System.out.println(\"我是lock1，我叫\"+ Thread.currentThread().getName());\n            try {\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(Thread.currentThread().getName()+\"lock1运行结束\");\n        }\n        // 第二把锁\n        synchronized (lock2) {\n            System.out.println(\"我是lock2，我叫\"+ Thread.currentThread().getName());\n            try {\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(Thread.currentThread().getName()+\"lock2运行结束\");\n        }\n        synchronized (this) {\n            System.out.println(\"我是this，我叫\"+ Thread.currentThread().getName());\n            try {\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(Thread.currentThread().getName()+\"this运行结束\");\n        }\n    }\n}\n```\n```java\n// 当synchronized修饰方法的时候，如果有县城进行这个某个实例对象的方法中，那么这个实例对象其他被synchronized修饰的方法同时也会被锁住。\nclass A{\n    public synchronized void say(B b){\n        System.out.println(\"sayA\");\n        b.get();\n    }\n    public synchronized void get(){\n        System.out.println(\"getA\");\n    }\n}\nclass B{\n    public synchronized void say(A a){\n        System.out.println(\"sayB\");\n        a.get();\n    }\n    public synchronized void get(){\n        System.out.println(\"getB\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        A a = new A();\n        B b = new B();\n        new Thread(()->a.say(b)).start();\n        b.say(a);\n    }\n```","slug":"JAVA/thread","published":1,"updated":"2021-12-23T04:05:24.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuhigbu000z8suo9ladgmw4","content":"<h2 id=\"Thread线程\"><a href=\"#Thread线程\" class=\"headerlink\" title=\"Thread线程\"></a>Thread线程</h2><h3 id=\"线程创建方式\"><a href=\"#线程创建方式\" class=\"headerlink\" title=\"线程创建方式\"></a>线程创建方式</h3><ul>\n<li>继承<code>Thread</code>类</li>\n<li>实现<code>Runnable</code>接口</li>\n<li>实现<code>Callable</code>接口,<code>Callable</code>接口可以通过实现<code>call()</code>方法实现方法运行，并通过<code>FutureTask</code>来获取返回结果</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 通过继承Thread类实现Run方法，并调用start方法运行。通过start方法运行可以交给CPU进行资源分配。</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        A a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 通过实现Runnable接口，重写run方法，然后实例化对象借助Thread实力进行运行。</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        FutureTask<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> futureTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"线程池相关操作\"><a href=\"#线程池相关操作\" class=\"headerlink\" title=\"线程池相关操作\"></a>线程池相关操作</h3><ul>\n<li>Future和FutureTask</li>\n<li>线程池的创建</li>\n<li>线程拒绝策略</li>\n</ul>\n<h4 id=\"Future-和-FutureTask\"><a href=\"#Future-和-FutureTask\" class=\"headerlink\" title=\"Future 和 FutureTask\"></a>Future 和 FutureTask</h4><ul>\n<li>Future常常作为线程池中submit方法的返回值的接收，可以通过调用get()方法获取线程返回值；</li>\n<li>FutureTask类实现了Runnable和Future接口，其构造函数可以接收Runnable和Callable实现类，然后可以通过线程池的submit或者execute方法进行运行,也可以直接通过Thread运行，最后可以调用get方法获取返回值；</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> ExecutionException<span class=\"token punctuation\">,</span> InterruptedException <span class=\"token punctuation\">{</span>\n        FutureTask<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> futureTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        FutureTask<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> futureTask1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"backinfo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>futureTask1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>futureTask1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\">ExecutorService service <span class=\"token operator\">=</span> Executors<span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nFuture<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> future <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callable</span><span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"say helloWorld!!!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// 通过get返回结果</span>\n</code></pre>\n<h4 id=\"线程池的创建\"><a href=\"#线程池的创建\" class=\"headerlink\" title=\"线程池的创建\"></a>线程池的创建</h4><ul>\n<li><code>newCachedThreadPool</code>：重用以前线程，无可用则创建，空闲则移除；</li>\n<li><code>newFixedThreadPool(int size)</code>：创建指定大小的线程池。通过队列管理</li>\n<li><code>newScheduledThreadPool(int size)</code>:可以设置运行几次以及时间间隔</li>\n<li><code>newSingleThreadExecutor</code>：创建只有一个线程的线程池，这个线程池可以在线程死后（或发生异常时）重新启动一个线程来替代原来的线程继续执行下去</li>\n<li>线程池的运行方法有两种：<ul>\n<li>submit：返回一个future类型，可以获取返回值</li>\n<li>execute：直接运行，无返回值</li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">ExecutorService pool <span class=\"token operator\">=</span> Executors<span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span>taskSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nList<span class=\"token operator\">&lt;</span>Future<span class=\"token operator\">></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span>Future<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> taskSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    Callable c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCallable</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    Future f <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span> \n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> taskSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    Runnable c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Myrunnable</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    Future f <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span><span class=\"token operator\">:</span><span class=\"token string\">\"backInfo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span> \npool<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Future f <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res：\"</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"线程拒绝策略\"><a href=\"#线程拒绝策略\" class=\"headerlink\" title=\"线程拒绝策略\"></a>线程拒绝策略</h4><p style=\"text-indent:2em\">\n线程池中的线程已经用完了，无法继续为新任务服务，同时，等待队列也已经排满了，再也塞不下新任务了。这时候我们就需要拒绝策略机制合理的处理这个问题。\n</p>\n\n<ul>\n<li><code>AbortPolicy</code>：直接抛出异常，阻止系统正常运行。 </li>\n<li><code>CallerRunsPolicy</code>：只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务。显然这样做不会真的丢弃任务，但是，任务提交线程的性能极有可能会急剧下降。 </li>\n<li><code>DiscardOldestPolicy</code>：丢弃最老的一个请求，也就是即将被执行的一个任务，并尝试再次提交当前任务。 </li>\n<li><code>DiscardPolicy</code>：该策略默默地丢弃无法处理的任务，不予任何处理。如果允许任务丢失，这是最好的一种方案。 </li>\n<li>以上内置拒绝策略均实现了RejectedExecutionHandler接口，若以上策略仍无法满足实际需要，完全可以自己扩展RejectedExecutionHandler接口。</li>\n</ul>\n<h3 id=\"线程的相关操作\"><a href=\"#线程的相关操作\" class=\"headerlink\" title=\"线程的相关操作\"></a>线程的相关操作</h3><ul>\n<li><code>Thread.sleep()</code> 使得当前线程休眠一定的时间，放弃CPU使用权，但是不会放弃资源锁，是<code>Thread</code>的静态函数，不论谁调用<code>sleep</code>方法，休眠的总是当前线程。</li>\n<li><code>getPriority()</code>和<code>setPriority(int newPriority)</code>,获取线程的优先级</li>\n<li><code>join()</code>，通过线程实例对象调用join方法，使得当前线程等待join线程结束</li>\n<li><code>Thread.yield()</code>方法使得当前线程让出CPU资源；</li>\n<li><code>interrupt()</code>通过调用此方法发出一个信号，通常用于在线程阻塞时通知退出阻塞；</li>\n<li><code>Object.wait()</code> 作为<code>Object</code>对象的方法，用于休眠当前线程，通过线程的对象调用，并放弃当前持有的锁，必须在<code>synchronized</code>中使用。</li>\n<li><code>Object.notify[all]()</code> 作为<code>Object</code>对象的方法，用于唤醒等待此对象的线程，必须在<code>synchronized</code>中使用。</li>\n</ul>\n<h3 id=\"Synchronized关键字作用\"><a href=\"#Synchronized关键字作用\" class=\"headerlink\" title=\"Synchronized关键字作用\"></a>Synchronized关键字作用</h3><ol>\n<li>修饰一个代码块，被修饰的代码块称为同步语句块，作用的对象是调用这个代码块的对象。</li>\n<li>修饰一个方法，被修饰的方法称为同步方法，作用的对象是调用这个方法的对象。</li>\n<li>修饰一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象。</li>\n<li>修饰一个类，其作用的范围是synchronized后面括号括起来的部分，作用的对象是这个类的所有对象。</li>\n<li>总结：被<code>synchronized</code>修饰的对象，其所有synchronized方法被锁住，非synchronized方法正常使用。</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// synchronized修饰代码块，只锁定指定的对象的synchronized修饰的代码。this指当前对象，当有线程进入this对应的代码块，则此对象的所有synchronized修饰的代码全部锁住，非synchronized修饰的代码块任然可以进入。</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> InterruptedException <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n    Object lock1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Object lock2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 第一把锁</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>lock1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是lock1，我叫\"</span><span class=\"token operator\">+</span> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                Thread<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"lock1运行结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 第二把锁</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>lock2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是lock2，我叫\"</span><span class=\"token operator\">+</span> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                Thread<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"lock2运行结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是this，我叫\"</span><span class=\"token operator\">+</span> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                Thread<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"this运行结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 当synchronized修饰方法的时候，如果有县城进行这个某个实例对象的方法中，那么这个实例对象其他被synchronized修饰的方法同时也会被锁住。</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span>B b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sayA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span>A a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sayB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> ExecutionException<span class=\"token punctuation\">,</span> InterruptedException <span class=\"token punctuation\">{</span>\n        A a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        B b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>a<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"Thread线程\"><a href=\"#Thread线程\" class=\"headerlink\" title=\"Thread线程\"></a>Thread线程</h2><h3 id=\"线程创建方式\"><a href=\"#线程创建方式\" class=\"headerlink\" title=\"线程创建方式\"></a>线程创建方式</h3><ul>\n<li>继承<code>Thread</code>类</li>\n<li>实现<code>Runnable</code>接口</li>\n<li>实现<code>Callable</code>接口,<code>Callable</code>接口可以通过实现<code>call()</code>方法实现方法运行，并通过<code>FutureTask</code>来获取返回结果</li>\n</ul>\n<pre><code class=\"java\">// 通过继承Thread类实现Run方法，并调用start方法运行。通过start方法运行可以交给CPU进行资源分配。\nclass A extends Thread&#123;\n    @Override\n    public void run() &#123;\n        System.out.println(&quot;ok&quot;);\n    &#125;\n&#125;\npublic class test &#123;\n    public static void main(String[] args) &#123;\n        A a = new A();\n        a.start();\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">// 通过实现Runnable接口，重写run方法，然后实例化对象借助Thread实力进行运行。\nclass A implements Runnable&#123;\n    @Override\n    public void run() &#123;\n        System.out.println(&quot;ok&quot;);\n    &#125;\n&#125;\npublic class test &#123;\n    public static void main(String[] args) &#123;\n        new Thread(new A()).start();\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">class A implements Callable&lt;String&gt;&#123;\n    @Override\n    public String call() throws Exception &#123;\n        return &quot;ok&quot;;\n    &#125;\n&#125;\npublic class test &#123;\n    public static void main(String[] args) &#123;\n        FutureTask&lt;String&gt; futureTask = new FutureTask&lt;&gt;(new A());\n        new Thread(futureTask).start();\n    &#125;\n&#125;</code></pre>\n<h3 id=\"线程池相关操作\"><a href=\"#线程池相关操作\" class=\"headerlink\" title=\"线程池相关操作\"></a>线程池相关操作</h3><ul>\n<li>Future和FutureTask</li>\n<li>线程池的创建</li>\n<li>线程拒绝策略</li>\n</ul>\n<h4 id=\"Future-和-FutureTask\"><a href=\"#Future-和-FutureTask\" class=\"headerlink\" title=\"Future 和 FutureTask\"></a>Future 和 FutureTask</h4><ul>\n<li>Future常常作为线程池中submit方法的返回值的接收，可以通过调用get()方法获取线程返回值；</li>\n<li>FutureTask类实现了Runnable和Future接口，其构造函数可以接收Runnable和Callable实现类，然后可以通过线程池的submit或者execute方法进行运行,也可以直接通过Thread运行，最后可以调用get方法获取返回值；</li>\n</ul>\n<pre><code class=\"java\">class A implements Callable&lt;String&gt; &#123;\n    @Override\n    public String call() throws Exception &#123;\n        return &quot;ok&quot;;\n    &#125;\n&#125;\nclass B implements Runnable&#123;\n    @Override\n    public void run() &#123;\n        System.out.println(&quot;ok&quot;);\n    &#125;\n&#125;\npublic class Main &#123;\n    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;\n        FutureTask&lt;String&gt; futureTask = new FutureTask&lt;&gt;(new A());\n        new Thread(futureTask).start();\n        FutureTask&lt;String&gt; futureTask1 = new FutureTask&lt;&gt;(new B(),&quot;backinfo&quot;);\n        new Thread(futureTask1).start();\n        System.out.println(futureTask1.get());\n        System.out.println(futureTask.get());\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">ExecutorService service = Executors.newSingleThreadExecutor();\nFuture&lt;String&gt; future = service.submit(new Callable&lt;String&gt;() &#123;\n    @Override\n    public String call() throws Exception &#123;\n        return &quot;say helloWorld!!!&quot;;\n    &#125;\n&#125;);\nSystem.out.println(future.get());// 通过get返回结果\n</code></pre>\n<h4 id=\"线程池的创建\"><a href=\"#线程池的创建\" class=\"headerlink\" title=\"线程池的创建\"></a>线程池的创建</h4><ul>\n<li><code>newCachedThreadPool</code>：重用以前线程，无可用则创建，空闲则移除；</li>\n<li><code>newFixedThreadPool(int size)</code>：创建指定大小的线程池。通过队列管理</li>\n<li><code>newScheduledThreadPool(int size)</code>:可以设置运行几次以及时间间隔</li>\n<li><code>newSingleThreadExecutor</code>：创建只有一个线程的线程池，这个线程池可以在线程死后（或发生异常时）重新启动一个线程来替代原来的线程继续执行下去</li>\n<li>线程池的运行方法有两种：<ul>\n<li>submit：返回一个future类型，可以获取返回值</li>\n<li>execute：直接运行，无返回值</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"java\">ExecutorService pool = Executors.newFixedThreadPool(taskSize);\nList&lt;Future&gt; list = new ArrayList&lt;Future&gt;(); \nfor (int i = 0; i &lt; taskSize; i++) &#123; \n    Callable c = new MyCallable(i + &quot; &quot;); \n    Future f = pool.submit(c); \n    list.add(f); \n&#125; \nfor (int i = 0; i &lt; taskSize; i++) &#123; \n    Runnable c = new Myrunnable(i + &quot; &quot;); \n    Future f = pool.submit(c,:&quot;backInfo&quot;); \n    list.add(f); \n&#125; \npool.shutdown(); \nfor (Future f : list) &#123; \n    System.out.println(&quot;res：&quot; + f.get().toString()); \n    &#125;</code></pre>\n<h4 id=\"线程拒绝策略\"><a href=\"#线程拒绝策略\" class=\"headerlink\" title=\"线程拒绝策略\"></a>线程拒绝策略</h4><p style=\"text-indent:2em\">\n线程池中的线程已经用完了，无法继续为新任务服务，同时，等待队列也已经排满了，再也塞不下新任务了。这时候我们就需要拒绝策略机制合理的处理这个问题。\n</p>\n\n<ul>\n<li><code>AbortPolicy</code>：直接抛出异常，阻止系统正常运行。 </li>\n<li><code>CallerRunsPolicy</code>：只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务。显然这样做不会真的丢弃任务，但是，任务提交线程的性能极有可能会急剧下降。 </li>\n<li><code>DiscardOldestPolicy</code>：丢弃最老的一个请求，也就是即将被执行的一个任务，并尝试再次提交当前任务。 </li>\n<li><code>DiscardPolicy</code>：该策略默默地丢弃无法处理的任务，不予任何处理。如果允许任务丢失，这是最好的一种方案。 </li>\n<li>以上内置拒绝策略均实现了RejectedExecutionHandler接口，若以上策略仍无法满足实际需要，完全可以自己扩展RejectedExecutionHandler接口。</li>\n</ul>\n<h3 id=\"线程的相关操作\"><a href=\"#线程的相关操作\" class=\"headerlink\" title=\"线程的相关操作\"></a>线程的相关操作</h3><ul>\n<li><code>Thread.sleep()</code> 使得当前线程休眠一定的时间，放弃CPU使用权，但是不会放弃资源锁，是<code>Thread</code>的静态函数，不论谁调用<code>sleep</code>方法，休眠的总是当前线程。</li>\n<li><code>getPriority()</code>和<code>setPriority(int newPriority)</code>,获取线程的优先级</li>\n<li><code>join()</code>，通过线程实例对象调用join方法，使得当前线程等待join线程结束</li>\n<li><code>Thread.yield()</code>方法使得当前线程让出CPU资源；</li>\n<li><code>interrupt()</code>通过调用此方法发出一个信号，通常用于在线程阻塞时通知退出阻塞；</li>\n<li><code>Object.wait()</code> 作为<code>Object</code>对象的方法，用于休眠当前线程，通过线程的对象调用，并放弃当前持有的锁，必须在<code>synchronized</code>中使用。</li>\n<li><code>Object.notify[all]()</code> 作为<code>Object</code>对象的方法，用于唤醒等待此对象的线程，必须在<code>synchronized</code>中使用。</li>\n</ul>\n<h3 id=\"Synchronized关键字作用\"><a href=\"#Synchronized关键字作用\" class=\"headerlink\" title=\"Synchronized关键字作用\"></a>Synchronized关键字作用</h3><ol>\n<li>修饰一个代码块，被修饰的代码块称为同步语句块，作用的对象是调用这个代码块的对象。</li>\n<li>修饰一个方法，被修饰的方法称为同步方法，作用的对象是调用这个方法的对象。</li>\n<li>修饰一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象。</li>\n<li>修饰一个类，其作用的范围是synchronized后面括号括起来的部分，作用的对象是这个类的所有对象。</li>\n<li>总结：被<code>synchronized</code>修饰的对象，其所有synchronized方法被锁住，非synchronized方法正常使用。</li>\n</ol>\n<pre><code class=\"java\">// synchronized修饰代码块，只锁定指定的对象的synchronized修饰的代码。this指当前对象，当有线程进入this对应的代码块，则此对象的所有synchronized修饰的代码全部锁住，非synchronized修饰的代码块任然可以进入。\npublic class A implements Runnable &#123;\n    public static void main(String[] args) throws InterruptedException &#123;\n    &#125;\n    Object lock1 = new Object();\n    Object lock2 = new Object();\n    @Override\n    public void run() &#123;\n        // 第一把锁\n        synchronized (lock1) &#123;\n            System.out.println(&quot;我是lock1，我叫&quot;+ Thread.currentThread().getName());\n            try &#123;\n                Thread.sleep(3000);\n            &#125; catch (InterruptedException e) &#123;\n                e.printStackTrace();\n            &#125;\n            System.out.println(Thread.currentThread().getName()+&quot;lock1运行结束&quot;);\n        &#125;\n        // 第二把锁\n        synchronized (lock2) &#123;\n            System.out.println(&quot;我是lock2，我叫&quot;+ Thread.currentThread().getName());\n            try &#123;\n                Thread.sleep(3000);\n            &#125; catch (InterruptedException e) &#123;\n                e.printStackTrace();\n            &#125;\n            System.out.println(Thread.currentThread().getName()+&quot;lock2运行结束&quot;);\n        &#125;\n        synchronized (this) &#123;\n            System.out.println(&quot;我是this，我叫&quot;+ Thread.currentThread().getName());\n            try &#123;\n                Thread.sleep(3000);\n            &#125; catch (InterruptedException e) &#123;\n                e.printStackTrace();\n            &#125;\n            System.out.println(Thread.currentThread().getName()+&quot;this运行结束&quot;);\n        &#125;\n    &#125;\n&#125;</code></pre>\n<pre><code class=\"java\">// 当synchronized修饰方法的时候，如果有县城进行这个某个实例对象的方法中，那么这个实例对象其他被synchronized修饰的方法同时也会被锁住。\nclass A&#123;\n    public synchronized void say(B b)&#123;\n        System.out.println(&quot;sayA&quot;);\n        b.get();\n    &#125;\n    public synchronized void get()&#123;\n        System.out.println(&quot;getA&quot;);\n    &#125;\n&#125;\nclass B&#123;\n    public synchronized void say(A a)&#123;\n        System.out.println(&quot;sayB&quot;);\n        a.get();\n    &#125;\n    public synchronized void get()&#123;\n        System.out.println(&quot;getB&quot;);\n    &#125;\n&#125;\npublic class Main &#123;\n    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;\n        A a = new A();\n        B b = new B();\n        new Thread(()-&gt;a.say(b)).start();\n        b.say(a);\n    &#125;</code></pre>\n"},{"title":"K-means","date":"2021-10-16T15:20:42.000Z","author":"Fanrencli","_content":"### 聚类算法 —— K-means\n\n####算法原理\n\n- 在给定的数据集上随机选定`K`个种子点\n- 对数据集中每个样本与选定的种子点之间的距离进行计算\n- 将距离最近的点归纳到对应的种子点所代表的聚类中\n- 针对`k`个聚类重新计算每个类别的质点作为新的种子点\n- 重复上述的距离计算，并更新种子点，直至不再改变\n\n#### 算法优劣\n\n- `k-means`算法需要具备一定的先验知识，选择聚类的数量决定最终的结果\n- 聚类的结果还受到随机点选择的影响\n- 无监督训练，对异常值较为敏感\n- 对样本分布有一定的要求，样本不能分布太过离散，对非凸形状的分类效果不好\n\n#### 代码实现\n```python\nimport random\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 计算欧拉距离\ndef calcDis(dataSet, centroids, k):\n    clalist=[]\n    for data in dataSet:\n        diff = np.tile(data, (k, 1)) - centroids  #相减   (np.tile(a,(2,1))就是把a先沿x轴复制1倍，即没有复制，仍然是 [0,1,2]。 再把结果沿y方向复制2倍得到array([[0,1,2],[0,1,2]]))\n        squaredDiff = diff ** 2     #平方\n        squaredDist = np.sum(squaredDiff, axis=1)   #和  (axis=1表示行)\n        distance = squaredDist ** 0.5  #开根号\n        clalist.append(distance) \n    clalist = np.array(clalist)  #返回一个每个点到质点的距离len(dateSet)*k的数组\n    return clalist\n\n# 计算质心\ndef classify(dataSet, centroids, k):\n    # 计算样本到质心的距离\n    clalist = calcDis(dataSet, centroids, k)\n    # 分组并计算新的质心\n    minDistIndices = np.argmin(clalist, axis=1)    #axis=1 表示求出每行的最小值的下标\n    newCentroids = pd.DataFrame(dataSet).groupby(minDistIndices).mean() #DataFramte(dataSet)对DataSet分组，groupby(min)按照min进行统计分类，mean()对分类结果求均值\n    newCentroids = newCentroids.values\n \n    # 计算变化量\n    changed = newCentroids - centroids\n \n    return changed, newCentroids\n\n# 使用k-means分类\ndef kmeans(dataSet, k):\n    # 随机取质心\n    centroids = random.sample(dataSet, k)\n    \n    # 更新质心 直到变化量全为0\n    changed, newCentroids = classify(dataSet, centroids, k)\n    while np.any(changed != 0):\n        changed, newCentroids = classify(dataSet, newCentroids, k)\n \n    centroids = sorted(newCentroids.tolist())   #tolist()将矩阵转换成列表 sorted()排序\n \n    # 根据质心计算每个集群\n    cluster = []\n    clalist = calcDis(dataSet, centroids, k) #调用欧拉距离\n    minDistIndices = np.argmin(clalist, axis=1)  \n    for i in range(k):\n        cluster.append([])\n    for i, j in enumerate(minDistIndices):   #enymerate()可同时遍历索引和遍历元素\n        cluster[j].append(dataSet[i])\n        \n    return centroids, cluster\n \n# 创建数据集\ndef createDataSet():\n    return [[1, 1], [1, 2], [2, 1], [6, 4], [6, 3], [5, 4]]\n\nif __name__=='__main__': \n    dataset = createDataSet()\n    centroids, cluster = kmeans(dataset, 2)\n    print('质心为：%s' % centroids)\n    print('集群为：%s' % cluster)\n    for i in range(len(dataset)):\n      plt.scatter(dataset[i][0],dataset[i][1], marker = 'o',color = 'green', s = 40 ,label = '原始点')\n                                                    #  记号形状       颜色      点的大小      设置标签\n      for j in range(len(centroids)):\n        plt.scatter(centroids[j][0],centroids[j][1],marker='x',color='red',s=50,label='质心')\n        plt.show\n```","source":"_posts/Algorithm/ML/K-means.md","raw":"---\ntitle: K-means\ndate: 2021-10-16 23:20:42\ncategories:\n  - Algorithm\ntags:\n  - python\n  - Cluster\nauthor: Fanrencli\n---\n### 聚类算法 —— K-means\n\n####算法原理\n\n- 在给定的数据集上随机选定`K`个种子点\n- 对数据集中每个样本与选定的种子点之间的距离进行计算\n- 将距离最近的点归纳到对应的种子点所代表的聚类中\n- 针对`k`个聚类重新计算每个类别的质点作为新的种子点\n- 重复上述的距离计算，并更新种子点，直至不再改变\n\n#### 算法优劣\n\n- `k-means`算法需要具备一定的先验知识，选择聚类的数量决定最终的结果\n- 聚类的结果还受到随机点选择的影响\n- 无监督训练，对异常值较为敏感\n- 对样本分布有一定的要求，样本不能分布太过离散，对非凸形状的分类效果不好\n\n#### 代码实现\n```python\nimport random\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 计算欧拉距离\ndef calcDis(dataSet, centroids, k):\n    clalist=[]\n    for data in dataSet:\n        diff = np.tile(data, (k, 1)) - centroids  #相减   (np.tile(a,(2,1))就是把a先沿x轴复制1倍，即没有复制，仍然是 [0,1,2]。 再把结果沿y方向复制2倍得到array([[0,1,2],[0,1,2]]))\n        squaredDiff = diff ** 2     #平方\n        squaredDist = np.sum(squaredDiff, axis=1)   #和  (axis=1表示行)\n        distance = squaredDist ** 0.5  #开根号\n        clalist.append(distance) \n    clalist = np.array(clalist)  #返回一个每个点到质点的距离len(dateSet)*k的数组\n    return clalist\n\n# 计算质心\ndef classify(dataSet, centroids, k):\n    # 计算样本到质心的距离\n    clalist = calcDis(dataSet, centroids, k)\n    # 分组并计算新的质心\n    minDistIndices = np.argmin(clalist, axis=1)    #axis=1 表示求出每行的最小值的下标\n    newCentroids = pd.DataFrame(dataSet).groupby(minDistIndices).mean() #DataFramte(dataSet)对DataSet分组，groupby(min)按照min进行统计分类，mean()对分类结果求均值\n    newCentroids = newCentroids.values\n \n    # 计算变化量\n    changed = newCentroids - centroids\n \n    return changed, newCentroids\n\n# 使用k-means分类\ndef kmeans(dataSet, k):\n    # 随机取质心\n    centroids = random.sample(dataSet, k)\n    \n    # 更新质心 直到变化量全为0\n    changed, newCentroids = classify(dataSet, centroids, k)\n    while np.any(changed != 0):\n        changed, newCentroids = classify(dataSet, newCentroids, k)\n \n    centroids = sorted(newCentroids.tolist())   #tolist()将矩阵转换成列表 sorted()排序\n \n    # 根据质心计算每个集群\n    cluster = []\n    clalist = calcDis(dataSet, centroids, k) #调用欧拉距离\n    minDistIndices = np.argmin(clalist, axis=1)  \n    for i in range(k):\n        cluster.append([])\n    for i, j in enumerate(minDistIndices):   #enymerate()可同时遍历索引和遍历元素\n        cluster[j].append(dataSet[i])\n        \n    return centroids, cluster\n \n# 创建数据集\ndef createDataSet():\n    return [[1, 1], [1, 2], [2, 1], [6, 4], [6, 3], [5, 4]]\n\nif __name__=='__main__': \n    dataset = createDataSet()\n    centroids, cluster = kmeans(dataset, 2)\n    print('质心为：%s' % centroids)\n    print('集群为：%s' % cluster)\n    for i in range(len(dataset)):\n      plt.scatter(dataset[i][0],dataset[i][1], marker = 'o',color = 'green', s = 40 ,label = '原始点')\n                                                    #  记号形状       颜色      点的大小      设置标签\n      for j in range(len(centroids)):\n        plt.scatter(centroids[j][0],centroids[j][1],marker='x',color='red',s=50,label='质心')\n        plt.show\n```","slug":"Algorithm/ML/K-means","published":1,"updated":"2021-10-16T15:37:39.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuhigco001m8suo33rn276z","content":"<h3 id=\"聚类算法-——-K-means\"><a href=\"#聚类算法-——-K-means\" class=\"headerlink\" title=\"聚类算法 —— K-means\"></a>聚类算法 —— K-means</h3><p>####算法原理</p>\n<ul>\n<li>在给定的数据集上随机选定<code>K</code>个种子点</li>\n<li>对数据集中每个样本与选定的种子点之间的距离进行计算</li>\n<li>将距离最近的点归纳到对应的种子点所代表的聚类中</li>\n<li>针对<code>k</code>个聚类重新计算每个类别的质点作为新的种子点</li>\n<li>重复上述的距离计算，并更新种子点，直至不再改变</li>\n</ul>\n<h4 id=\"算法优劣\"><a href=\"#算法优劣\" class=\"headerlink\" title=\"算法优劣\"></a>算法优劣</h4><ul>\n<li><code>k-means</code>算法需要具备一定的先验知识，选择聚类的数量决定最终的结果</li>\n<li>聚类的结果还受到随机点选择的影响</li>\n<li>无监督训练，对异常值较为敏感</li>\n<li>对样本分布有一定的要求，样本不能分布太过离散，对非凸形状的分类效果不好</li>\n</ul>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n\n<span class=\"token comment\" spellcheck=\"true\"># 计算欧拉距离</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">calcDis</span><span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">,</span> centroids<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    clalist<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> dataSet<span class=\"token punctuation\">:</span>\n        diff <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>tile<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> centroids  <span class=\"token comment\" spellcheck=\"true\">#相减   (np.tile(a,(2,1))就是把a先沿x轴复制1倍，即没有复制，仍然是 [0,1,2]。 再把结果沿y方向复制2倍得到array([[0,1,2],[0,1,2]]))</span>\n        squaredDiff <span class=\"token operator\">=</span> diff <span class=\"token operator\">**</span> <span class=\"token number\">2</span>     <span class=\"token comment\" spellcheck=\"true\">#平方</span>\n        squaredDist <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>squaredDiff<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\" spellcheck=\"true\">#和  (axis=1表示行)</span>\n        distance <span class=\"token operator\">=</span> squaredDist <span class=\"token operator\">**</span> <span class=\"token number\">0.5</span>  <span class=\"token comment\" spellcheck=\"true\">#开根号</span>\n        clalist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span> \n    clalist <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>clalist<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">#返回一个每个点到质点的距离len(dateSet)*k的数组</span>\n    <span class=\"token keyword\">return</span> clalist\n\n<span class=\"token comment\" spellcheck=\"true\"># 计算质心</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">classify</span><span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">,</span> centroids<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 计算样本到质心的距离</span>\n    clalist <span class=\"token operator\">=</span> calcDis<span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">,</span> centroids<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 分组并计算新的质心</span>\n    minDistIndices <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span>clalist<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\">#axis=1 表示求出每行的最小值的下标</span>\n    newCentroids <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span>minDistIndices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#DataFramte(dataSet)对DataSet分组，groupby(min)按照min进行统计分类，mean()对分类结果求均值</span>\n    newCentroids <span class=\"token operator\">=</span> newCentroids<span class=\"token punctuation\">.</span>values\n\n    <span class=\"token comment\" spellcheck=\"true\"># 计算变化量</span>\n    changed <span class=\"token operator\">=</span> newCentroids <span class=\"token operator\">-</span> centroids\n\n    <span class=\"token keyword\">return</span> changed<span class=\"token punctuation\">,</span> newCentroids\n\n<span class=\"token comment\" spellcheck=\"true\"># 使用k-means分类</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">kmeans</span><span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 随机取质心</span>\n    centroids <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 更新质心 直到变化量全为0</span>\n    changed<span class=\"token punctuation\">,</span> newCentroids <span class=\"token operator\">=</span> classify<span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">,</span> centroids<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> np<span class=\"token punctuation\">.</span>any<span class=\"token punctuation\">(</span>changed <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        changed<span class=\"token punctuation\">,</span> newCentroids <span class=\"token operator\">=</span> classify<span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">,</span> newCentroids<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n\n    centroids <span class=\"token operator\">=</span> sorted<span class=\"token punctuation\">(</span>newCentroids<span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\" spellcheck=\"true\">#tolist()将矩阵转换成列表 sorted()排序</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 根据质心计算每个集群</span>\n    cluster <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    clalist <span class=\"token operator\">=</span> calcDis<span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">,</span> centroids<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#调用欧拉距离</span>\n    minDistIndices <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span>clalist<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cluster<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> j <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>minDistIndices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>   <span class=\"token comment\" spellcheck=\"true\">#enymerate()可同时遍历索引和遍历元素</span>\n        cluster<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> centroids<span class=\"token punctuation\">,</span> cluster\n\n<span class=\"token comment\" spellcheck=\"true\"># 创建数据集</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">createDataSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span> \n    dataset <span class=\"token operator\">=</span> createDataSet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    centroids<span class=\"token punctuation\">,</span> cluster <span class=\"token operator\">=</span> kmeans<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'质心为：%s'</span> <span class=\"token operator\">%</span> centroids<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'集群为：%s'</span> <span class=\"token operator\">%</span> cluster<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      plt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dataset<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> marker <span class=\"token operator\">=</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token number\">40</span> <span class=\"token punctuation\">,</span>label <span class=\"token operator\">=</span> <span class=\"token string\">'原始点'</span><span class=\"token punctuation\">)</span>\n                                                    <span class=\"token comment\" spellcheck=\"true\">#  记号形状       颜色      点的大小      设置标签</span>\n      <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>centroids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        plt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>centroids<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>centroids<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>marker<span class=\"token operator\">=</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span>color<span class=\"token operator\">=</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>s<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span>label<span class=\"token operator\">=</span><span class=\"token string\">'质心'</span><span class=\"token punctuation\">)</span>\n        plt<span class=\"token punctuation\">.</span>show</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"聚类算法-——-K-means\"><a href=\"#聚类算法-——-K-means\" class=\"headerlink\" title=\"聚类算法 —— K-means\"></a>聚类算法 —— K-means</h3><p>####算法原理</p>\n<ul>\n<li>在给定的数据集上随机选定<code>K</code>个种子点</li>\n<li>对数据集中每个样本与选定的种子点之间的距离进行计算</li>\n<li>将距离最近的点归纳到对应的种子点所代表的聚类中</li>\n<li>针对<code>k</code>个聚类重新计算每个类别的质点作为新的种子点</li>\n<li>重复上述的距离计算，并更新种子点，直至不再改变</li>\n</ul>\n<h4 id=\"算法优劣\"><a href=\"#算法优劣\" class=\"headerlink\" title=\"算法优劣\"></a>算法优劣</h4><ul>\n<li><code>k-means</code>算法需要具备一定的先验知识，选择聚类的数量决定最终的结果</li>\n<li>聚类的结果还受到随机点选择的影响</li>\n<li>无监督训练，对异常值较为敏感</li>\n<li>对样本分布有一定的要求，样本不能分布太过离散，对非凸形状的分类效果不好</li>\n</ul>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><pre><code class=\"python\">import random\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 计算欧拉距离\ndef calcDis(dataSet, centroids, k):\n    clalist=[]\n    for data in dataSet:\n        diff = np.tile(data, (k, 1)) - centroids  #相减   (np.tile(a,(2,1))就是把a先沿x轴复制1倍，即没有复制，仍然是 [0,1,2]。 再把结果沿y方向复制2倍得到array([[0,1,2],[0,1,2]]))\n        squaredDiff = diff ** 2     #平方\n        squaredDist = np.sum(squaredDiff, axis=1)   #和  (axis=1表示行)\n        distance = squaredDist ** 0.5  #开根号\n        clalist.append(distance) \n    clalist = np.array(clalist)  #返回一个每个点到质点的距离len(dateSet)*k的数组\n    return clalist\n\n# 计算质心\ndef classify(dataSet, centroids, k):\n    # 计算样本到质心的距离\n    clalist = calcDis(dataSet, centroids, k)\n    # 分组并计算新的质心\n    minDistIndices = np.argmin(clalist, axis=1)    #axis=1 表示求出每行的最小值的下标\n    newCentroids = pd.DataFrame(dataSet).groupby(minDistIndices).mean() #DataFramte(dataSet)对DataSet分组，groupby(min)按照min进行统计分类，mean()对分类结果求均值\n    newCentroids = newCentroids.values\n\n    # 计算变化量\n    changed = newCentroids - centroids\n\n    return changed, newCentroids\n\n# 使用k-means分类\ndef kmeans(dataSet, k):\n    # 随机取质心\n    centroids = random.sample(dataSet, k)\n\n    # 更新质心 直到变化量全为0\n    changed, newCentroids = classify(dataSet, centroids, k)\n    while np.any(changed != 0):\n        changed, newCentroids = classify(dataSet, newCentroids, k)\n\n    centroids = sorted(newCentroids.tolist())   #tolist()将矩阵转换成列表 sorted()排序\n\n    # 根据质心计算每个集群\n    cluster = []\n    clalist = calcDis(dataSet, centroids, k) #调用欧拉距离\n    minDistIndices = np.argmin(clalist, axis=1)  \n    for i in range(k):\n        cluster.append([])\n    for i, j in enumerate(minDistIndices):   #enymerate()可同时遍历索引和遍历元素\n        cluster[j].append(dataSet[i])\n\n    return centroids, cluster\n\n# 创建数据集\ndef createDataSet():\n    return [[1, 1], [1, 2], [2, 1], [6, 4], [6, 3], [5, 4]]\n\nif __name__==&#39;__main__&#39;: \n    dataset = createDataSet()\n    centroids, cluster = kmeans(dataset, 2)\n    print(&#39;质心为：%s&#39; % centroids)\n    print(&#39;集群为：%s&#39; % cluster)\n    for i in range(len(dataset)):\n      plt.scatter(dataset[i][0],dataset[i][1], marker = &#39;o&#39;,color = &#39;green&#39;, s = 40 ,label = &#39;原始点&#39;)\n                                                    #  记号形状       颜色      点的大小      设置标签\n      for j in range(len(centroids)):\n        plt.scatter(centroids[j][0],centroids[j][1],marker=&#39;x&#39;,color=&#39;red&#39;,s=50,label=&#39;质心&#39;)\n        plt.show</code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckhr2kceb000p4guo4uevggqz","category_id":"ckhr2kcec000q4guoflmidn5y","_id":"ckhr2kcee000w4guobyadg7kq"},{"post_id":"ckhr3bkzw0000o8uo0g7f61uw","category_id":"ckhr2kcec000q4guoflmidn5y","_id":"ckhr3bl030003o8uo2drxg887"},{"post_id":"ckkf2tf280000x0uo4i61cefc","category_id":"ckkf2w5fh0000couodabsf9y5","_id":"ckkf2w5fj0003couo7vvg690c"},{"post_id":"cknmrfu4x000330uo1d0s6556","category_id":"cknmrfu4y000430uo41byhm45","_id":"cknmrfu4z000830uoeqs61xru"},{"post_id":"cknmrh5ye0000v4uo97w11k7u","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknmrh5yo0002v4uodkqq29lk"},{"post_id":"cknms8g6d000060uo8adu5pch","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknms8g6m000260uo4ztd5ws9"},{"post_id":"ckno0pgzn0000kcuo0tqwfmi7","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"ckno0pgzx0002kcuodowd4gaf"},{"post_id":"cknq6gtow0000gwuo23tu1wuh","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknq6gtp30002gwuo4gdkgqo9"},{"post_id":"cknr69kyb0000pkuo4ouf0ff3","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknr69l0f0002pkuob4tsca9d"},{"post_id":"cknsx2fq40000scuo4t9adrdr","category_id":"ckicrxqcz0001vguo0k7c4969","_id":"cknsx2fqe0006scuo9cfs4old"},{"post_id":"cknsx2fq90001scuohzjcdqks","category_id":"ckhr2kce000044guoctlycazy","_id":"cknsx2fqg0009scuo2gt3f7gx"},{"post_id":"cknsx2fqb0003scuo2wsa59jg","category_id":"ckhr2kce000044guoctlycazy","_id":"cknsx2fqg000bscuoatezdf28"},{"post_id":"cknsx2fqf0008scuobzau6k2l","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknsx2fql000fscuo1io3f7ul"},{"post_id":"cknu4ydno0000eouo6p7rh8t0","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"cknu4ydnv0002eouobwgm3365"},{"post_id":"ckocmy3x00000ysuo473r3730","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"ckocmy3xc0002ysuohzu374th"},{"post_id":"ckoffod350000m8uofa2u4cn0","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"ckoffod3e0002m8uoee2z1s1n"},{"post_id":"ckoi183li0000louo4b5taxbm","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"ckoi183ns0002louoeuggc4y9"},{"post_id":"ckol98e5n0001ocuogprqamd3","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"ckol98e5z0004ocuobqg04goi"},{"post_id":"ckol98e5o0002ocuo634sc3kj","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"ckol98e5z0005ocuofyao25mz"},{"post_id":"ckomxmpoa0000vkuoaer712n2","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"ckomxmpoq0002vkuo4nq67xn3"},{"post_id":"ckoso8pp90000lcuoht4d8fr1","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"ckoso8ps70002lcuob3n87g6a"},{"post_id":"ckoso8psb0005lcuo0mmzb5e0","category_id":"cknmrfu4y000430uo41byhm45","_id":"ckoso8psc0006lcuohqab1qgp"},{"post_id":"ckoy06sni0000hguod97lcsry","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"ckoy06sq40003hguo0etd0svh"},{"post_id":"ckoy06sq60004hguo7772fmk1","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"ckoy06sqg0007hguoejr45t2m"},{"post_id":"ckoy06sq70005hguo3lxp3k5l","category_id":"cknmrfu4t000130uohxfa3zyq","_id":"ckp2gjlr10001b0uo1qen4ibg"},{"post_id":"ckxuhigbc00058suobeg6bsaq","category_id":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigbj000c8suo7dk44cs0"},{"post_id":"ckxuhigaq00008suohyna2vuy","category_id":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigbl000g8suo1k8p3ils"},{"post_id":"ckxuhigbe00068suo4imq5rfc","category_id":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigbm000j8suogutff5bs"},{"post_id":"ckxuhigbh000a8suo8vj46vlt","category_id":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigbo000n8suo6i5idcgg"},{"post_id":"ckxuhigb000018suo79gj7xfa","category_id":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigbq000q8suo4aura4aa"},{"post_id":"ckxuhigba00048suo2tb32wmx","category_id":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigbr000u8suogmlpb1rl"},{"post_id":"ckxuhigbn000m8suo45lyafhq","category_id":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigbu000x8suodnr93ahw"},{"post_id":"ckxuhigbi000b8suoappb18t5","category_id":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigbv00108suo2des6jnk"},{"post_id":"ckxuhigbi000b8suoappb18t5","category_id":"ckxuhigbm000k8suo9mw73ls7","_id":"ckxuhigbx00138suo4799h0i9"},{"post_id":"ckxuhigbp000p8suo9p8jauk7","category_id":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigbz00158suoa7fyegp4"},{"post_id":"ckxuhigbr000t8suo51o2bjra","category_id":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigc000178suo86caeaqj"},{"post_id":"ckxuhigbs000w8suo4bnvbfjo","category_id":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigc100198suo88cefe80"},{"post_id":"ckxuhigbu000z8suo9ladgmw4","category_id":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigc3001b8suo1x0he6ku"},{"post_id":"ckxuhigbl000i8suogxthfude","category_id":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigc4001d8suo2ow90eed"},{"post_id":"ckxuhigbl000i8suogxthfude","category_id":"ckxuhigbu000y8suo8w7i9mfo","_id":"ckxuhigca001f8suo9qz8bdtn"},{"post_id":"ckxuhigbk000f8suogq1v5en7","category_id":"ckxuhigb200028suo0fpg30d0","_id":"ckxuhigcc001g8suo6kj2039e"},{"post_id":"ckxuhigbk000f8suogq1v5en7","category_id":"ckxuhigbq000r8suo8utuet7f","_id":"ckxuhigce001h8suobbdshmbr"},{"post_id":"ckxuhigbk000f8suogq1v5en7","category_id":"ckxuhigbx00148suoclsg0yi8","_id":"ckxuhigcg001j8suodv0yh875"},{"post_id":"ckxuhigco001m8suo33rn276z","category_id":"ckhr2kcec000q4guoflmidn5y","_id":"ckxuhigcr001q8suoatlm13dg"}],"PostTag":[{"post_id":"ckhr2kceb000p4guo4uevggqz","tag_id":"ckhr2kced000r4guo69vff6wz","_id":"ckhr2kcee000u4guo80mb3hcm"},{"post_id":"ckhr2kceb000p4guo4uevggqz","tag_id":"ckhr2kced000s4guoc9tp6dku","_id":"ckhr2kcee000v4guo9sdjhstn"},{"post_id":"ckhr2kceb000p4guo4uevggqz","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"ckhr2muv900012cuohkexdr4s"},{"post_id":"ckhr3bkzw0000o8uo0g7f61uw","tag_id":"ckhr2kced000r4guo69vff6wz","_id":"ckhr3bl030001o8uo0blhc9mw"},{"post_id":"ckhr3bkzw0000o8uo0g7f61uw","tag_id":"ckhr2kced000s4guoc9tp6dku","_id":"ckhr3bl030002o8uocrb142pa"},{"post_id":"ckhr3bkzw0000o8uo0g7f61uw","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"ckhr3bl030004o8uo86g74bn0"},{"post_id":"ckkf2tf280000x0uo4i61cefc","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"ckkf2tf2d0004x0uodvpgh9e8"},{"post_id":"ckkf2tf280000x0uo4i61cefc","tag_id":"ckkf2w5fi0001couog4elfbso","_id":"ckkf2w5fj0002couo7lgealvm"},{"post_id":"cknmrh5ye0000v4uo97w11k7u","tag_id":"cknmrh5yk0001v4uob6jn6b9i","_id":"cknmrh5yo0003v4uocbwp9joj"},{"post_id":"cknmrh5ye0000v4uo97w11k7u","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknmrh5yo0004v4uo156nbc5i"},{"post_id":"cknms8g6d000060uo8adu5pch","tag_id":"cknms8g6j000160uoc4d8ehme","_id":"cknms8g6m000360uo51qz23yl"},{"post_id":"cknms8g6d000060uo8adu5pch","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknms8g6n000460uogu035lcr"},{"post_id":"ckno0pgzn0000kcuo0tqwfmi7","tag_id":"ckno0pgzu0001kcuo1uts92c5","_id":"ckno0pgzy0004kcuo3hkphs4m"},{"post_id":"ckno0pgzn0000kcuo0tqwfmi7","tag_id":"ckno0pgzy0003kcuodzo80gg2","_id":"ckno0pgzy0005kcuo3ekb16dh"},{"post_id":"ckno0pgzn0000kcuo0tqwfmi7","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"ckno0pgzy0006kcuogukr81az"},{"post_id":"cknq6gtow0000gwuo23tu1wuh","tag_id":"cknq6gtoz0001gwuodr5g3x79","_id":"cknq6gtp50005gwuogtg0flns"},{"post_id":"cknq6gtow0000gwuo23tu1wuh","tag_id":"cknq6gtp40003gwuoalkibv4o","_id":"cknq6gtp50006gwuoeacq6n2f"},{"post_id":"cknq6gtow0000gwuo23tu1wuh","tag_id":"cknq6gtp40004gwuo9cgc64wn","_id":"cknq6gtp50007gwuobuu1f22t"},{"post_id":"cknq6gtow0000gwuo23tu1wuh","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknq6gtp50008gwuob5vv52q2"},{"post_id":"cknr69kyb0000pkuo4ouf0ff3","tag_id":"cknr69l0a0001pkuo06a44oas","_id":"cknr69l0g0004pkuo976we9u6"},{"post_id":"cknr69kyb0000pkuo4ouf0ff3","tag_id":"cknr69l0g0003pkuo1jlpebr5","_id":"cknr69l0g0005pkuo56ujg0ar"},{"post_id":"cknsx2fq40000scuo4t9adrdr","tag_id":"ckicrxqd00002vguo5x0phyqu","_id":"cknsx2fqb0002scuo3yydd0ux"},{"post_id":"cknsx2fq40000scuo4t9adrdr","tag_id":"ckicrxqd10003vguoeh2c3gnp","_id":"cknsx2fqd0004scuo0s2fa4ap"},{"post_id":"cknsx2fq40000scuo4t9adrdr","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknsx2fqf0007scuo217ofvhm"},{"post_id":"cknsx2fq90001scuohzjcdqks","tag_id":"ckhr2kce200054guoh9nfgkf6","_id":"cknsx2fqg000ascuoe6x7atte"},{"post_id":"cknsx2fq90001scuohzjcdqks","tag_id":"ckhr2kce5000b4guodlhycl9u","_id":"cknsx2fql000dscuod1rr5jtf"},{"post_id":"cknsx2fq90001scuohzjcdqks","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknsx2fql000escuocnls7ool"},{"post_id":"cknsx2fqb0003scuo2wsa59jg","tag_id":"ckhr2kce200054guoh9nfgkf6","_id":"cknsx2fql000gscuo6jom6mva"},{"post_id":"cknsx2fqb0003scuo2wsa59jg","tag_id":"ckhr2kce5000b4guodlhycl9u","_id":"cknsx2fqm000iscuogtrz9v4y"},{"post_id":"cknsx2fqb0003scuo2wsa59jg","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"cknsx2fqm000jscuofatufubm"},{"post_id":"cknsx2fqf0008scuobzau6k2l","tag_id":"cknsx2fqg000cscuofsji970l","_id":"cknsx2fqm000kscuofyc7h8ef"},{"post_id":"cknsx2fqf0008scuobzau6k2l","tag_id":"cknsx2fqm000hscuo4foecs03","_id":"cknsx2fqm000lscuo18ed3o0l"},{"post_id":"cknu4ydno0000eouo6p7rh8t0","tag_id":"cknsx2fqg000cscuofsji970l","_id":"cknu4ydnw0003eouoho865jat"},{"post_id":"cknu4ydno0000eouo6p7rh8t0","tag_id":"cknu4ydnq0001eouogc507hb2","_id":"cknu4ydnw0004eouo7j0d9ue5"},{"post_id":"ckocmy3x00000ysuo473r3730","tag_id":"ckocmy3x70001ysuo45et963r","_id":"ckocmy3xc0003ysuo154tg7lk"},{"post_id":"ckocmy3x00000ysuo473r3730","tag_id":"cknms8g6j000160uoc4d8ehme","_id":"ckocmy3xd0004ysuofyca70m6"},{"post_id":"ckocmy3x00000ysuo473r3730","tag_id":"cknmrh5yk0001v4uob6jn6b9i","_id":"ckocmy3xd0005ysuo45rp9b1s"},{"post_id":"ckoffod350000m8uofa2u4cn0","tag_id":"ckocmy3x70001ysuo45et963r","_id":"ckoffod3e0003m8uocpxbfn5m"},{"post_id":"ckoffod350000m8uofa2u4cn0","tag_id":"ckoffod360001m8uo7t3c8thp","_id":"ckoffod3e0004m8uofrr0bexx"},{"post_id":"ckoi183li0000louo4b5taxbm","tag_id":"cknr69l0a0001pkuo06a44oas","_id":"ckoi183nt0003louocksd10vf"},{"post_id":"ckoi183li0000louo4b5taxbm","tag_id":"cknr69l0g0003pkuo1jlpebr5","_id":"ckoi183nt0004louofmdz7eys"},{"post_id":"ckoi183li0000louo4b5taxbm","tag_id":"ckocmy3x70001ysuo45et963r","_id":"ckol98e500000ocuoa73b2u8h"},{"post_id":"ckol98e5n0001ocuogprqamd3","tag_id":"cknsx2fqg000cscuofsji970l","_id":"ckol98e600007ocuo48jkh1tn"},{"post_id":"ckol98e5n0001ocuogprqamd3","tag_id":"ckol98e5p0003ocuo6oi6e1ra","_id":"ckol98e600008ocuofcfx04my"},{"post_id":"ckol98e5o0002ocuo634sc3kj","tag_id":"cknsx2fqg000cscuofsji970l","_id":"ckol98e600009ocuo2w020868"},{"post_id":"ckol98e5o0002ocuo634sc3kj","tag_id":"ckol98e5z0006ocuo3iiqhzsd","_id":"ckol98e60000aocuo2ih27hgy"},{"post_id":"ckomxmpoa0000vkuoaer712n2","tag_id":"ckomxmpoi0001vkuo6vyi8sfh","_id":"ckomxmpor0003vkuo4887b3hg"},{"post_id":"ckomxmpoa0000vkuoaer712n2","tag_id":"ckocmy3x70001ysuo45et963r","_id":"ckomxmpor0004vkuodc2eh73y"},{"post_id":"ckoso8pp90000lcuoht4d8fr1","tag_id":"ckoso8ps00001lcuo6x0s02x3","_id":"ckoso8ps70003lcuo0js67vlx"},{"post_id":"ckoso8pp90000lcuoht4d8fr1","tag_id":"ckocmy3x70001ysuo45et963r","_id":"ckoso8ps70004lcuo57qqhcs9"},{"post_id":"ckoy06sni0000hguod97lcsry","tag_id":"cknmrfu4w000230uo7l0gbd0i","_id":"ckoy06sq40001hguoe7opbn8n"},{"post_id":"ckoy06sni0000hguod97lcsry","tag_id":"ckhr2muv700002cuoeyk5dr8j","_id":"ckoy06sq40002hguo5t8ben39"},{"post_id":"ckoy06sq60004hguo7772fmk1","tag_id":"ckocmy3x70001ysuo45et963r","_id":"ckoy06sqh0008hguo4owa7p35"},{"post_id":"ckoy06sq60004hguo7772fmk1","tag_id":"ckoy06sq80006hguo6uxlbhxj","_id":"ckoy06sqh0009hguoahmb1o7l"},{"post_id":"ckoy06sq70005hguo3lxp3k5l","tag_id":"cknsx2fqg000cscuofsji970l","_id":"ckp2gjlr20002b0uo8mee78er"},{"post_id":"ckoy06sq70005hguo3lxp3k5l","tag_id":"ckp2gjlq40000b0uo14iafeh7","_id":"ckp2gjlr20003b0uohkwyh3cb"},{"post_id":"ckxuhigaq00008suohyna2vuy","tag_id":"ckxuhigb900038suo7iwsct1o","_id":"ckxuhigbh00098suodn7teszi"},{"post_id":"ckxuhigb000018suo79gj7xfa","tag_id":"ckxuhigbf00088suo7tcmbecy","_id":"ckxuhigbl000h8suoe9j5fc3w"},{"post_id":"ckxuhigba00048suo2tb32wmx","tag_id":"ckxuhigbj000e8suof64jecfn","_id":"ckxuhigbp000o8suohbb9fv9k"},{"post_id":"ckxuhigbc00058suobeg6bsaq","tag_id":"ckxuhigbn000l8suo96y94uab","_id":"ckxuhigbs000v8suofvsxgxcn"},{"post_id":"ckxuhigbe00068suo4imq5rfc","tag_id":"ckxuhigbq000s8suo3xgoe4ze","_id":"ckxuhigbw00128suodzss0gys"},{"post_id":"ckxuhigbh000a8suo8vj46vlt","tag_id":"ckxuhigbv00118suodnix7hxv","_id":"ckxuhigc000188suocyekd5ol"},{"post_id":"ckxuhigbi000b8suoappb18t5","tag_id":"ckxuhigbz00168suohx784atl","_id":"ckxuhigc3001c8suo0vyccaql"},{"post_id":"ckxuhigbk000f8suogq1v5en7","tag_id":"ckxuhigc2001a8suo4b7qh6em","_id":"ckxuhigcr001o8suo6yvcfqau"},{"post_id":"ckxuhigbk000f8suogq1v5en7","tag_id":"ckxuhigc5001e8suo8oe35pdp","_id":"ckxuhigcr001p8suo27z8gqme"},{"post_id":"ckxuhigbk000f8suogq1v5en7","tag_id":"ckxuhigce001i8suo970xdgmh","_id":"ckxuhigcr001s8suobslwebz6"},{"post_id":"ckxuhigbk000f8suogq1v5en7","tag_id":"ckxuhigcj001k8suo4yb51gfg","_id":"ckxuhigcr001t8suo3fbv1k6a"},{"post_id":"ckxuhigbk000f8suogq1v5en7","tag_id":"ckxuhigcm001l8suofmlk5iuz","_id":"ckxuhigcs001v8suo7wxi9gdb"},{"post_id":"ckxuhigbl000i8suogxthfude","tag_id":"ckxuhigcp001n8suo61p6363n","_id":"ckxuhigcs001x8suo7tij53uk"},{"post_id":"ckxuhigbl000i8suogxthfude","tag_id":"ckxuhigcr001r8suo5vp0dfsl","_id":"ckxuhigcs001y8suo17ufdvy3"},{"post_id":"ckxuhigbl000i8suogxthfude","tag_id":"ckxuhigcs001u8suodvuw9p90","_id":"ckxuhigct00208suofgdy2idv"},{"post_id":"ckxuhigbn000m8suo45lyafhq","tag_id":"ckxuhigcs001w8suobynchktb","_id":"ckxuhigct00238suobrlberdn"},{"post_id":"ckxuhigbn000m8suo45lyafhq","tag_id":"ckxuhigcs001z8suodj0c3py6","_id":"ckxuhigcu00248suoceg969zx"},{"post_id":"ckxuhigbn000m8suo45lyafhq","tag_id":"ckxuhigct00218suofd1ehg85","_id":"ckxuhigcu00268suocvivfyp6"},{"post_id":"ckxuhigbp000p8suo9p8jauk7","tag_id":"ckxuhigct00228suo2tyghy5u","_id":"ckxuhigcu00278suo9tw35fqa"},{"post_id":"ckxuhigbr000t8suo51o2bjra","tag_id":"ckxuhigcu00258suodnkgbi56","_id":"ckxuhigcu00298suo9k8s1sw9"},{"post_id":"ckxuhigbs000w8suo4bnvbfjo","tag_id":"ckxuhigcu00288suohq6v4qi0","_id":"ckxuhigcw002e8suo5af23566"},{"post_id":"ckxuhigbs000w8suo4bnvbfjo","tag_id":"ckxuhigcu002a8suo7f3d3vq1","_id":"ckxuhigcw002f8suoho3j82au"},{"post_id":"ckxuhigbs000w8suo4bnvbfjo","tag_id":"ckxuhigcv002b8suo49p13eyr","_id":"ckxuhigcw002h8suo6xoag0xh"},{"post_id":"ckxuhigbs000w8suo4bnvbfjo","tag_id":"ckxuhigcv002c8suo9w7m2pbu","_id":"ckxuhigcw002i8suo6uwq3dgm"},{"post_id":"ckxuhigbu000z8suo9ladgmw4","tag_id":"ckxuhigcv002d8suo2ggy46pj","_id":"ckxuhigcw002j8suo08e45v5m"},{"post_id":"ckxuhigco001m8suo33rn276z","tag_id":"ckhr2kce9000i4guo9aswepfj","_id":"ckxuhigcw002k8suobxss391r"},{"post_id":"ckxuhigco001m8suo33rn276z","tag_id":"ckxuhigcw002g8suocy9y2xqu","_id":"ckxuhigcw002l8suo6bu34cfh"}],"Tag":[{"name":"Haar Wavelet","_id":"ckhr2kce200054guoh9nfgkf6"},{"name":"Python","_id":"ckhr2kce5000b4guodlhycl9u"},{"name":"python","_id":"ckhr2kce9000i4guo9aswepfj"},{"name":"C++","_id":"ckhr2kced000r4guo69vff6wz"},{"name":"Binary Search","_id":"ckhr2kced000s4guoc9tp6dku"},{"name":"Fanrencli","_id":"ckhr2muv700002cuoeyk5dr8j"},{"name":"Orbbec_OpenNI","_id":"ckicrxqd00002vguo5x0phyqu"},{"name":"OpenCV","_id":"ckicrxqd10003vguoeh2c3gnp"},{"name":"Assembly Language","_id":"ckkf2tf2b0001x0uo06g45yzz"},{"name":"8086","_id":"ckkf2w5fi0001couog4elfbso"},{"name":"Jsis3d","_id":"cknmrfu4w000230uo7l0gbd0i"},{"name":"ResNet101","_id":"cknmrh5yk0001v4uob6jn6b9i"},{"name":"VGG16","_id":"cknms8g6j000160uoc4d8ehme"},{"name":"object detection","_id":"ckno0pgzu0001kcuo1uts92c5"},{"name":"SSD","_id":"ckno0pgzy0003kcuodzo80gg2"},{"name":"MobileNetv1","_id":"cknq6gtoz0001gwuodr5g3x79"},{"name":"MobileNetv2","_id":"cknq6gtp40003gwuoalkibv4o"},{"name":"MobileNetv3","_id":"cknq6gtp40004gwuo9cgc64wn"},{"name":"Inceptionv3","_id":"cknr69l0a0001pkuo06a44oas"},{"name":"Xception","_id":"cknr69l0g0003pkuo1jlpebr5"},{"name":"semantic segmentation","_id":"cknsx2fqg000cscuofsji970l"},{"name":"SegNet","_id":"cknsx2fqm000hscuo4foecs03"},{"name":"U-net","_id":"cknu4ydnq0001eouogc507hb2"},{"name":"Pytorch","_id":"ckocmy3x70001ysuo45et963r"},{"name":"MobileNet","_id":"ckoffod360001m8uo7t3c8thp"},{"name":"pytorch","_id":"ckoi183nj0001louogwx67uvl"},{"name":"FCN","_id":"ckol98e5p0003ocuo6oi6e1ra"},{"name":"PSPNet","_id":"ckol98e5z0006ocuo3iiqhzsd"},{"name":"DenseNet","_id":"ckomxmpoi0001vkuo6vyi8sfh"},{"name":"ShuffleNetV2","_id":"ckoso8ps00001lcuo6x0s02x3"},{"name":"Training Methods","_id":"ckoy06sq80006hguo6uxlbhxj"},{"name":"DeepLabv3+","_id":"ckp2gjlq40000b0uo14iafeh7"},{"name":"Class loader","_id":"ckxuhigb900038suo7iwsct1o"},{"name":"Collections","_id":"ckxuhigbf00088suo7tcmbecy"},{"name":"Docker","_id":"ckxuhigbj000e8suof64jecfn"},{"name":"GC","_id":"ckxuhigbn000l8suo96y94uab"},{"name":"IO","_id":"ckxuhigbq000s8suo3xgoe4ze"},{"name":"Lock","_id":"ckxuhigbv00118suodnix7hxv"},{"name":"pipeline","_id":"ckxuhigbz00168suohx784atl"},{"name":"Socket","_id":"ckxuhigc2001a8suo4b7qh6em"},{"name":"ServerSocket","_id":"ckxuhigc5001e8suo8oe35pdp"},{"name":"Channel","_id":"ckxuhigce001i8suo970xdgmh"},{"name":"Selector","_id":"ckxuhigcj001k8suo4yb51gfg"},{"name":"Buffer","_id":"ckxuhigcm001l8suofmlk5iuz"},{"name":"AOP","_id":"ckxuhigcp001n8suo61p6363n"},{"name":"IOC","_id":"ckxuhigcr001r8suo5vp0dfsl"},{"name":"MVC","_id":"ckxuhigcs001u8suodvuw9p90"},{"name":"Date","_id":"ckxuhigcs001w8suobynchktb"},{"name":"SimpleDateFormat","_id":"ckxuhigcs001z8suodj0c3py6"},{"name":"Calendar","_id":"ckxuhigct00218suofd1ehg85"},{"name":"reflect","_id":"ckxuhigct00228suo2tyghy5u"},{"name":"Regex","_id":"ckxuhigcu00258suodnkgbi56"},{"name":"Serializable","_id":"ckxuhigcu00288suohq6v4qi0"},{"name":"Cloneable","_id":"ckxuhigcu002a8suo7f3d3vq1"},{"name":"Comparable","_id":"ckxuhigcv002b8suo49p13eyr"},{"name":"Comparator","_id":"ckxuhigcv002c8suo9w7m2pbu"},{"name":"Thread","_id":"ckxuhigcv002d8suo2ggy46pj"},{"name":"Cluster","_id":"ckxuhigcw002g8suocy9y2xqu"}]}}